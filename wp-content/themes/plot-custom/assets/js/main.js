(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
!function(e,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var o={};t(o),e.bodyScrollLock=o}}(this,function(exports){"use strict";function i(e){if(Array.isArray(e)){for(var t=0,o=Array(e.length);t<e.length;t++)o[t]=e[t];return o}return Array.from(e)}Object.defineProperty(exports,"__esModule",{value:!0});var l=!1;if("undefined"!=typeof window){var e={get passive(){l=!0}};window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}function d(t){return u.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(t))})}function c(e){var t=e||window.event;return!!d(t.target)||(1<t.touches.length||(t.preventDefault&&t.preventDefault(),!1))}function o(){setTimeout(function(){void 0!==m&&(document.body.style.paddingRight=m,m=void 0),void 0!==f&&(document.body.style.overflow=f,f=void 0)})}var a="undefined"!=typeof window&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||"MacIntel"===window.navigator.platform&&1<window.navigator.maxTouchPoints),u=[],s=!1,v=-1,f=void 0,m=void 0;exports.disableBodyScroll=function(r,e){if(a){if(!r)return void console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");if(r&&!u.some(function(e){return e.targetElement===r})){var t={targetElement:r,options:e||{}};u=[].concat(i(u),[t]),r.ontouchstart=function(e){1===e.targetTouches.length&&(v=e.targetTouches[0].clientY)},r.ontouchmove=function(e){var t,o,n,i;1===e.targetTouches.length&&(o=r,i=(t=e).targetTouches[0].clientY-v,d(t.target)||(o&&0===o.scrollTop&&0<i||(n=o)&&n.scrollHeight-n.scrollTop<=n.clientHeight&&i<0?c(t):t.stopPropagation()))},s||(document.addEventListener("touchmove",c,l?{passive:!1}:void 0),s=!0)}}else{n=e,setTimeout(function(){if(void 0===m){var e=!!n&&!0===n.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;e&&0<t&&(m=document.body.style.paddingRight,document.body.style.paddingRight=t+"px")}void 0===f&&(f=document.body.style.overflow,document.body.style.overflow="hidden")});var o={targetElement:r,options:e||{}};u=[].concat(i(u),[o])}var n},exports.clearAllBodyScrollLocks=function(){a?(u.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),s&&(document.removeEventListener("touchmove",c,l?{passive:!1}:void 0),s=!1),u=[],v=-1):(o(),u=[])},exports.enableBodyScroll=function(t){if(a){if(!t)return void console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.");t.ontouchstart=null,t.ontouchmove=null,u=u.filter(function(e){return e.targetElement!==t}),s&&0===u.length&&(document.removeEventListener("touchmove",c,l?{passive:!1}:void 0),s=!1)}else(u=u.filter(function(e){return e.targetElement!==t})).length||o()}});

},{}],2:[function(require,module,exports){
/**
 * matchesSelector v2.0.2
 * matchesSelector( element, '.selector' )
 * MIT license
 */

/*jshint browser: true, strict: true, undef: true, unused: true */

( function( window, factory ) {
  /*global define: false, module: false */
  'use strict';
  // universal module definition
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.matchesSelector = factory();
  }

}( window, function factory() {
  'use strict';

  var matchesMethod = ( function() {
    var ElemProto = window.Element.prototype;
    // check for the standard method name first
    if ( ElemProto.matches ) {
      return 'matches';
    }
    // check un-prefixed
    if ( ElemProto.matchesSelector ) {
      return 'matchesSelector';
    }
    // check vendor prefixes
    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];

    for ( var i=0; i < prefixes.length; i++ ) {
      var prefix = prefixes[i];
      var method = prefix + 'MatchesSelector';
      if ( ElemProto[ method ] ) {
        return method;
      }
    }
  })();

  return function matchesSelector( elem, selector ) {
    return elem[ matchesMethod ]( selector );
  };

}));

},{}],3:[function(require,module,exports){
/**
 * EvEmitter v1.1.0
 * Lil' event emitter
 * MIT License
 */

/* jshint unused: true, undef: true, strict: true */

( function( global, factory ) {
  // universal module definition
  /* jshint strict: false */ /* globals define, module, window */
  if ( typeof define == 'function' && define.amd ) {
    // AMD - RequireJS
    define( factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS - Browserify, Webpack
    module.exports = factory();
  } else {
    // Browser globals
    global.EvEmitter = factory();
  }

}( typeof window != 'undefined' ? window : this, function() {

"use strict";

function EvEmitter() {}

var proto = EvEmitter.prototype;

proto.on = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // set events hash
  var events = this._events = this._events || {};
  // set listeners array
  var listeners = events[ eventName ] = events[ eventName ] || [];
  // only add once
  if ( listeners.indexOf( listener ) == -1 ) {
    listeners.push( listener );
  }

  return this;
};

proto.once = function( eventName, listener ) {
  if ( !eventName || !listener ) {
    return;
  }
  // add event
  this.on( eventName, listener );
  // set once flag
  // set onceEvents hash
  var onceEvents = this._onceEvents = this._onceEvents || {};
  // set onceListeners object
  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
  // set flag
  onceListeners[ listener ] = true;

  return this;
};

proto.off = function( eventName, listener ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  var index = listeners.indexOf( listener );
  if ( index != -1 ) {
    listeners.splice( index, 1 );
  }

  return this;
};

proto.emitEvent = function( eventName, args ) {
  var listeners = this._events && this._events[ eventName ];
  if ( !listeners || !listeners.length ) {
    return;
  }
  // copy over to avoid interference if .off() in listener
  listeners = listeners.slice(0);
  args = args || [];
  // once stuff
  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];

  for ( var i=0; i < listeners.length; i++ ) {
    var listener = listeners[i]
    var isOnce = onceListeners && onceListeners[ listener ];
    if ( isOnce ) {
      // remove listener
      // remove before trigger to prevent recursion
      this.off( eventName, listener );
      // unset once flag
      delete onceListeners[ listener ];
    }
    // trigger listener
    listener.apply( this, args );
  }

  return this;
};

proto.allOff = function() {
  delete this._events;
  delete this._onceEvents;
};

return EvEmitter;

}));

},{}],4:[function(require,module,exports){
/**
 * Fizzy UI utils v2.0.7
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

( function( window, factory ) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'desandro-matches-selector/matches-selector'
    ], function( matchesSelector ) {
      return factory( window, matchesSelector );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('desandro-matches-selector')
    );
  } else {
    // browser global
    window.fizzyUIUtils = factory(
      window,
      window.matchesSelector
    );
  }

}( window, function factory( window, matchesSelector ) {

'use strict';

var utils = {};

// ----- extend ----- //

// extends objects
utils.extend = function( a, b ) {
  for ( var prop in b ) {
    a[ prop ] = b[ prop ];
  }
  return a;
};

// ----- modulo ----- //

utils.modulo = function( num, div ) {
  return ( ( num % div ) + div ) % div;
};

// ----- makeArray ----- //

var arraySlice = Array.prototype.slice;

// turn element or nodeList into an array
utils.makeArray = function( obj ) {
  if ( Array.isArray( obj ) ) {
    // use object if already an array
    return obj;
  }
  // return empty array if undefined or null. #6
  if ( obj === null || obj === undefined ) {
    return [];
  }

  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';
  if ( isArrayLike ) {
    // convert nodeList to array
    return arraySlice.call( obj );
  }

  // array of single index
  return [ obj ];
};

// ----- removeFrom ----- //

utils.removeFrom = function( ary, obj ) {
  var index = ary.indexOf( obj );
  if ( index != -1 ) {
    ary.splice( index, 1 );
  }
};

// ----- getParent ----- //

utils.getParent = function( elem, selector ) {
  while ( elem.parentNode && elem != document.body ) {
    elem = elem.parentNode;
    if ( matchesSelector( elem, selector ) ) {
      return elem;
    }
  }
};

// ----- getQueryElement ----- //

// use element as selector string
utils.getQueryElement = function( elem ) {
  if ( typeof elem == 'string' ) {
    return document.querySelector( elem );
  }
  return elem;
};

// ----- handleEvent ----- //

// enable .ontype to trigger from .addEventListener( elem, 'type' )
utils.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

// ----- filterFindElements ----- //

utils.filterFindElements = function( elems, selector ) {
  // make array of elems
  elems = utils.makeArray( elems );
  var ffElems = [];

  elems.forEach( function( elem ) {
    // check that elem is an actual element
    if ( !( elem instanceof HTMLElement ) ) {
      return;
    }
    // add elem if no selector
    if ( !selector ) {
      ffElems.push( elem );
      return;
    }
    // filter & find items if we have a selector
    // filter
    if ( matchesSelector( elem, selector ) ) {
      ffElems.push( elem );
    }
    // find children
    var childElems = elem.querySelectorAll( selector );
    // concat childElems to filterFound array
    for ( var i=0; i < childElems.length; i++ ) {
      ffElems.push( childElems[i] );
    }
  });

  return ffElems;
};

// ----- debounceMethod ----- //

utils.debounceMethod = function( _class, methodName, threshold ) {
  threshold = threshold || 100;
  // original method
  var method = _class.prototype[ methodName ];
  var timeoutName = methodName + 'Timeout';

  _class.prototype[ methodName ] = function() {
    var timeout = this[ timeoutName ];
    clearTimeout( timeout );

    var args = arguments;
    var _this = this;
    this[ timeoutName ] = setTimeout( function() {
      method.apply( _this, args );
      delete _this[ timeoutName ];
    }, threshold );
  };
};

// ----- docReady ----- //

utils.docReady = function( callback ) {
  var readyState = document.readyState;
  if ( readyState == 'complete' || readyState == 'interactive' ) {
    // do async to allow for other scripts to run. metafizzy/flickity#441
    setTimeout( callback );
  } else {
    document.addEventListener( 'DOMContentLoaded', callback );
  }
};

// ----- htmlInit ----- //

// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
utils.toDashed = function( str ) {
  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
    return $1 + '-' + $2;
  }).toLowerCase();
};

var console = window.console;
/**
 * allow user to initialize classes via [data-namespace] or .js-namespace class
 * htmlInit( Widget, 'widgetName' )
 * options are parsed from data-namespace-options
 */
utils.htmlInit = function( WidgetClass, namespace ) {
  utils.docReady( function() {
    var dashedNamespace = utils.toDashed( namespace );
    var dataAttr = 'data-' + dashedNamespace;
    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );
    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );
    var elems = utils.makeArray( dataAttrElems )
      .concat( utils.makeArray( jsDashElems ) );
    var dataOptionsAttr = dataAttr + '-options';
    var jQuery = window.jQuery;

    elems.forEach( function( elem ) {
      var attr = elem.getAttribute( dataAttr ) ||
        elem.getAttribute( dataOptionsAttr );
      var options;
      try {
        options = attr && JSON.parse( attr );
      } catch ( error ) {
        // log error, do not initialize
        if ( console ) {
          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +
          ': ' + error );
        }
        return;
      }
      // initialize
      var instance = new WidgetClass( elem, options );
      // make available via $().data('namespace')
      if ( jQuery ) {
        jQuery.data( elem, namespace, instance );
      }
    });

  });
};

// -----  ----- //

return utils;

}));

},{"desandro-matches-selector":2}],5:[function(require,module,exports){
// add, remove cell
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      'fizzy-ui-utils/utils'
    ], function( Flickity, utils ) {
      return factory( window, Flickity, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('./flickity'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    factory(
      window,
      window.Flickity,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, Flickity, utils ) {

'use strict';

// append cells to a document fragment
function getCellsFragment( cells ) {
  var fragment = document.createDocumentFragment();
  cells.forEach( function( cell ) {
    fragment.appendChild( cell.element );
  });
  return fragment;
}

// -------------------------- add/remove cell prototype -------------------------- //

var proto = Flickity.prototype;

/**
 * Insert, prepend, or append cells
 * @param {Element, Array, NodeList} elems
 * @param {Integer} index
 */
proto.insert = function( elems, index ) {
  var cells = this._makeCells( elems );
  if ( !cells || !cells.length ) {
    return;
  }
  var len = this.cells.length;
  // default to append
  index = index === undefined ? len : index;
  // add cells with document fragment
  var fragment = getCellsFragment( cells );
  // append to slider
  var isAppend = index == len;
  if ( isAppend ) {
    this.slider.appendChild( fragment );
  } else {
    var insertCellElement = this.cells[ index ].element;
    this.slider.insertBefore( fragment, insertCellElement );
  }
  // add to this.cells
  if ( index === 0 ) {
    // prepend, add to start
    this.cells = cells.concat( this.cells );
  } else if ( isAppend ) {
    // append, add to end
    this.cells = this.cells.concat( cells );
  } else {
    // insert in this.cells
    var endCells = this.cells.splice( index, len - index );
    this.cells = this.cells.concat( cells ).concat( endCells );
  }

  this._sizeCells( cells );
  this.cellChange( index, true );
};

proto.append = function( elems ) {
  this.insert( elems, this.cells.length );
};

proto.prepend = function( elems ) {
  this.insert( elems, 0 );
};

/**
 * Remove cells
 * @param {Element, Array, NodeList} elems
 */
proto.remove = function( elems ) {
  var cells = this.getCells( elems );
  if ( !cells || !cells.length ) {
    return;
  }

  var minCellIndex = this.cells.length - 1;
  // remove cells from collection & DOM
  cells.forEach( function( cell ) {
    cell.remove();
    var index = this.cells.indexOf( cell );
    minCellIndex = Math.min( index, minCellIndex );
    utils.removeFrom( this.cells, cell );
  }, this );

  this.cellChange( minCellIndex, true );
};

/**
 * logic to be run after a cell's size changes
 * @param {Element} elem - cell's element
 */
proto.cellSizeChange = function( elem ) {
  var cell = this.getCell( elem );
  if ( !cell ) {
    return;
  }
  cell.getSize();

  var index = this.cells.indexOf( cell );
  this.cellChange( index );
};

/**
 * logic any time a cell is changed: added, removed, or size changed
 * @param {Integer} changedCellIndex - index of the changed cell, optional
 */
proto.cellChange = function( changedCellIndex, isPositioningSlider ) {
  var prevSelectedElem = this.selectedElement;
  this._positionCells( changedCellIndex );
  this._getWrapShiftCells();
  this.setGallerySize();
  // update selectedIndex
  // try to maintain position & select previous selected element
  var cell = this.getCell( prevSelectedElem );
  if ( cell ) {
    this.selectedIndex = this.getCellSlideIndex( cell );
  }
  this.selectedIndex = Math.min( this.slides.length - 1, this.selectedIndex );

  this.emitEvent( 'cellChange', [ changedCellIndex ] );
  // position slider
  this.select( this.selectedIndex );
  // do not position slider after lazy load
  if ( isPositioningSlider ) {
    this.positionSliderAtSelected();
  }
};

// -----  ----- //

return Flickity;

}));

},{"./flickity":9,"fizzy-ui-utils":4}],6:[function(require,module,exports){
// animate
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'fizzy-ui-utils/utils'
    ], function( utils ) {
      return factory( window, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.animatePrototype = factory(
      window,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, utils ) {

'use strict';

// -------------------------- animate -------------------------- //

var proto = {};

proto.startAnimation = function() {
  if ( this.isAnimating ) {
    return;
  }

  this.isAnimating = true;
  this.restingFrames = 0;
  this.animate();
};

proto.animate = function() {
  this.applyDragForce();
  this.applySelectedAttraction();

  var previousX = this.x;

  this.integratePhysics();
  this.positionSlider();
  this.settle( previousX );
  // animate next frame
  if ( this.isAnimating ) {
    var _this = this;
    requestAnimationFrame( function animateFrame() {
      _this.animate();
    });
  }
};

proto.positionSlider = function() {
  var x = this.x;
  // wrap position around
  if ( this.options.wrapAround && this.cells.length > 1 ) {
    x = utils.modulo( x, this.slideableWidth );
    x = x - this.slideableWidth;
    this.shiftWrapCells( x );
  }

  this.setTranslateX( x, this.isAnimating );
  this.dispatchScrollEvent();
};

proto.setTranslateX = function( x, is3d ) {
  x += this.cursorPosition;
  // reverse if right-to-left and using transform
  x = this.options.rightToLeft ? -x : x;
  var translateX = this.getPositionValue( x );
  // use 3D tranforms for hardware acceleration on iOS
  // but use 2D when settled, for better font-rendering
  this.slider.style.transform = is3d ?
    'translate3d(' + translateX + ',0,0)' : 'translateX(' + translateX + ')';
};

proto.dispatchScrollEvent = function() {
  var firstSlide = this.slides[0];
  if ( !firstSlide ) {
    return;
  }
  var positionX = -this.x - firstSlide.target;
  var progress = positionX / this.slidesWidth;
  this.dispatchEvent( 'scroll', null, [ progress, positionX ] );
};

proto.positionSliderAtSelected = function() {
  if ( !this.cells.length ) {
    return;
  }
  this.x = -this.selectedSlide.target;
  this.velocity = 0; // stop wobble
  this.positionSlider();
};

proto.getPositionValue = function( position ) {
  if ( this.options.percentPosition ) {
    // percent position, round to 2 digits, like 12.34%
    return ( Math.round( ( position / this.size.innerWidth ) * 10000 ) * 0.01 )+ '%';
  } else {
    // pixel positioning
    return Math.round( position ) + 'px';
  }
};

proto.settle = function( previousX ) {
  // keep track of frames where x hasn't moved
  if ( !this.isPointerDown && Math.round( this.x * 100 ) == Math.round( previousX * 100 ) ) {
    this.restingFrames++;
  }
  // stop animating if resting for 3 or more frames
  if ( this.restingFrames > 2 ) {
    this.isAnimating = false;
    delete this.isFreeScrolling;
    // render position with translateX when settled
    this.positionSlider();
    this.dispatchEvent( 'settle', null, [ this.selectedIndex ] );
  }
};

proto.shiftWrapCells = function( x ) {
  // shift before cells
  var beforeGap = this.cursorPosition + x;
  this._shiftCells( this.beforeShiftCells, beforeGap, -1 );
  // shift after cells
  var afterGap = this.size.innerWidth - ( x + this.slideableWidth + this.cursorPosition );
  this._shiftCells( this.afterShiftCells, afterGap, 1 );
};

proto._shiftCells = function( cells, gap, shift ) {
  for ( var i=0; i < cells.length; i++ ) {
    var cell = cells[i];
    var cellShift = gap > 0 ? shift : 0;
    cell.wrapShift( cellShift );
    gap -= cell.size.outerWidth;
  }
};

proto._unshiftCells = function( cells ) {
  if ( !cells || !cells.length ) {
    return;
  }
  for ( var i=0; i < cells.length; i++ ) {
    cells[i].wrapShift( 0 );
  }
};

// -------------------------- physics -------------------------- //

proto.integratePhysics = function() {
  this.x += this.velocity;
  this.velocity *= this.getFrictionFactor();
};

proto.applyForce = function( force ) {
  this.velocity += force;
};

proto.getFrictionFactor = function() {
  return 1 - this.options[ this.isFreeScrolling ? 'freeScrollFriction' : 'friction' ];
};

proto.getRestingPosition = function() {
  // my thanks to Steven Wittens, who simplified this math greatly
  return this.x + this.velocity / ( 1 - this.getFrictionFactor() );
};

proto.applyDragForce = function() {
  if ( !this.isDraggable || !this.isPointerDown ) {
    return;
  }
  // change the position to drag position by applying force
  var dragVelocity = this.dragX - this.x;
  var dragForce = dragVelocity - this.velocity;
  this.applyForce( dragForce );
};

proto.applySelectedAttraction = function() {
  // do not attract if pointer down or no slides
  var dragDown = this.isDraggable && this.isPointerDown;
  if ( dragDown || this.isFreeScrolling || !this.slides.length ) {
    return;
  }
  var distance = this.selectedSlide.target * -1 - this.x;
  var force = distance * this.options.selectedAttraction;
  this.applyForce( force );
};

return proto;

}));

},{"fizzy-ui-utils":4}],7:[function(require,module,exports){
// Flickity.Cell
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'get-size/get-size'
    ], function( getSize ) {
      return factory( window, getSize );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('get-size')
    );
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Cell = factory(
      window,
      window.getSize
    );
  }

}( window, function factory( window, getSize ) {

'use strict';

function Cell( elem, parent ) {
  this.element = elem;
  this.parent = parent;

  this.create();
}

var proto = Cell.prototype;

proto.create = function() {
  this.element.style.position = 'absolute';
  this.element.setAttribute( 'aria-hidden', 'true' );
  this.x = 0;
  this.shift = 0;
};

proto.destroy = function() {
  // reset style
  this.unselect();
  this.element.style.position = '';
  var side = this.parent.originSide;
  this.element.style[ side ] = '';
};

proto.getSize = function() {
  this.size = getSize( this.element );
};

proto.setPosition = function( x ) {
  this.x = x;
  this.updateTarget();
  this.renderPosition( x );
};

// setDefaultTarget v1 method, backwards compatibility, remove in v3
proto.updateTarget = proto.setDefaultTarget = function() {
  var marginProperty = this.parent.originSide == 'left' ? 'marginLeft' : 'marginRight';
  this.target = this.x + this.size[ marginProperty ] +
    this.size.width * this.parent.cellAlign;
};

proto.renderPosition = function( x ) {
  // render position of cell with in slider
  var side = this.parent.originSide;
  this.element.style[ side ] = this.parent.getPositionValue( x );
};

proto.select = function() {
  this.element.classList.add('is-selected');
  this.element.removeAttribute('aria-hidden');
};

proto.unselect = function() {
  this.element.classList.remove('is-selected');
  this.element.setAttribute( 'aria-hidden', 'true' );
};

/**
 * @param {Integer} factor - 0, 1, or -1
**/
proto.wrapShift = function( shift ) {
  this.shift = shift;
  this.renderPosition( this.x + this.parent.slideableWidth * shift );
};

proto.remove = function() {
  this.element.parentNode.removeChild( this.element );
};

return Cell;

}));

},{"get-size":16}],8:[function(require,module,exports){
// drag
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      'unidragger/unidragger',
      'fizzy-ui-utils/utils'
    ], function( Flickity, Unidragger, utils ) {
      return factory( window, Flickity, Unidragger, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('./flickity'),
      require('unidragger'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    window.Flickity = factory(
      window,
      window.Flickity,
      window.Unidragger,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, Flickity, Unidragger, utils ) {

'use strict';

// ----- defaults ----- //

utils.extend( Flickity.defaults, {
  draggable: '>1',
  dragThreshold: 3,
});

// ----- create ----- //

Flickity.createMethods.push('_createDrag');

// -------------------------- drag prototype -------------------------- //

var proto = Flickity.prototype;
utils.extend( proto, Unidragger.prototype );
proto._touchActionValue = 'pan-y';

// --------------------------  -------------------------- //

var isTouch = 'createTouch' in document;
var isTouchmoveScrollCanceled = false;

proto._createDrag = function() {
  this.on( 'activate', this.onActivateDrag );
  this.on( 'uiChange', this._uiChangeDrag );
  this.on( 'deactivate', this.onDeactivateDrag );
  this.on( 'cellChange', this.updateDraggable );
  // TODO updateDraggable on resize? if groupCells & slides change
  // HACK - add seemingly innocuous handler to fix iOS 10 scroll behavior
  // #457, RubaXa/Sortable#973
  if ( isTouch && !isTouchmoveScrollCanceled ) {
    window.addEventListener( 'touchmove', function() {});
    isTouchmoveScrollCanceled = true;
  }
};

proto.onActivateDrag = function() {
  this.handles = [ this.viewport ];
  this.bindHandles();
  this.updateDraggable();
};

proto.onDeactivateDrag = function() {
  this.unbindHandles();
  this.element.classList.remove('is-draggable');
};

proto.updateDraggable = function() {
  // disable dragging if less than 2 slides. #278
  if ( this.options.draggable == '>1' ) {
    this.isDraggable = this.slides.length > 1;
  } else {
    this.isDraggable = this.options.draggable;
  }
  if ( this.isDraggable ) {
    this.element.classList.add('is-draggable');
  } else {
    this.element.classList.remove('is-draggable');
  }
};

// backwards compatibility
proto.bindDrag = function() {
  this.options.draggable = true;
  this.updateDraggable();
};

proto.unbindDrag = function() {
  this.options.draggable = false;
  this.updateDraggable();
};

proto._uiChangeDrag = function() {
  delete this.isFreeScrolling;
};

// -------------------------- pointer events -------------------------- //

proto.pointerDown = function( event, pointer ) {
  if ( !this.isDraggable ) {
    this._pointerDownDefault( event, pointer );
    return;
  }
  var isOkay = this.okayPointerDown( event );
  if ( !isOkay ) {
    return;
  }

  this._pointerDownPreventDefault( event );
  this.pointerDownFocus( event );
  // blur
  if ( document.activeElement != this.element ) {
    // do not blur if already focused
    this.pointerDownBlur();
  }

  // stop if it was moving
  this.dragX = this.x;
  this.viewport.classList.add('is-pointer-down');
  // track scrolling
  this.pointerDownScroll = getScrollPosition();
  window.addEventListener( 'scroll', this );

  this._pointerDownDefault( event, pointer );
};

// default pointerDown logic, used for staticClick
proto._pointerDownDefault = function( event, pointer ) {
  // track start event position
  // Safari 9 overrides pageX and pageY. These values needs to be copied. #779
  this.pointerDownPointer = {
    pageX: pointer.pageX,
    pageY: pointer.pageY,
  };
  // bind move and end events
  this._bindPostStartEvents( event );
  this.dispatchEvent( 'pointerDown', event, [ pointer ] );
};

var focusNodes = {
  INPUT: true,
  TEXTAREA: true,
  SELECT: true,
};

proto.pointerDownFocus = function( event ) {
  var isFocusNode = focusNodes[ event.target.nodeName ];
  if ( !isFocusNode ) {
    this.focus();
  }
};

proto._pointerDownPreventDefault = function( event ) {
  var isTouchStart = event.type == 'touchstart';
  var isTouchPointer = event.pointerType == 'touch';
  var isFocusNode = focusNodes[ event.target.nodeName ];
  if ( !isTouchStart && !isTouchPointer && !isFocusNode ) {
    event.preventDefault();
  }
};

// ----- move ----- //

proto.hasDragStarted = function( moveVector ) {
  return Math.abs( moveVector.x ) > this.options.dragThreshold;
};

// ----- up ----- //

proto.pointerUp = function( event, pointer ) {
  delete this.isTouchScrolling;
  this.viewport.classList.remove('is-pointer-down');
  this.dispatchEvent( 'pointerUp', event, [ pointer ] );
  this._dragPointerUp( event, pointer );
};

proto.pointerDone = function() {
  window.removeEventListener( 'scroll', this );
  delete this.pointerDownScroll;
};

// -------------------------- dragging -------------------------- //

proto.dragStart = function( event, pointer ) {
  if ( !this.isDraggable ) {
    return;
  }
  this.dragStartPosition = this.x;
  this.startAnimation();
  window.removeEventListener( 'scroll', this );
  this.dispatchEvent( 'dragStart', event, [ pointer ] );
};

proto.pointerMove = function( event, pointer ) {
  var moveVector = this._dragPointerMove( event, pointer );
  this.dispatchEvent( 'pointerMove', event, [ pointer, moveVector ] );
  this._dragMove( event, pointer, moveVector );
};

proto.dragMove = function( event, pointer, moveVector ) {
  if ( !this.isDraggable ) {
    return;
  }
  event.preventDefault();

  this.previousDragX = this.dragX;
  // reverse if right-to-left
  var direction = this.options.rightToLeft ? -1 : 1;
  if ( this.options.wrapAround ) {
    // wrap around move. #589
    moveVector.x = moveVector.x % this.slideableWidth;
  }
  var dragX = this.dragStartPosition + moveVector.x * direction;

  if ( !this.options.wrapAround && this.slides.length ) {
    // slow drag
    var originBound = Math.max( -this.slides[0].target, this.dragStartPosition );
    dragX = dragX > originBound ? ( dragX + originBound ) * 0.5 : dragX;
    var endBound = Math.min( -this.getLastSlide().target, this.dragStartPosition );
    dragX = dragX < endBound ? ( dragX + endBound ) * 0.5 : dragX;
  }

  this.dragX = dragX;

  this.dragMoveTime = new Date();
  this.dispatchEvent( 'dragMove', event, [ pointer, moveVector ] );
};

proto.dragEnd = function( event, pointer ) {
  if ( !this.isDraggable ) {
    return;
  }
  if ( this.options.freeScroll ) {
    this.isFreeScrolling = true;
  }
  // set selectedIndex based on where flick will end up
  var index = this.dragEndRestingSelect();

  if ( this.options.freeScroll && !this.options.wrapAround ) {
    // if free-scroll & not wrap around
    // do not free-scroll if going outside of bounding slides
    // so bounding slides can attract slider, and keep it in bounds
    var restingX = this.getRestingPosition();
    this.isFreeScrolling = -restingX > this.slides[0].target &&
      -restingX < this.getLastSlide().target;
  } else if ( !this.options.freeScroll && index == this.selectedIndex ) {
    // boost selection if selected index has not changed
    index += this.dragEndBoostSelect();
  }
  delete this.previousDragX;
  // apply selection
  // TODO refactor this, selecting here feels weird
  // HACK, set flag so dragging stays in correct direction
  this.isDragSelect = this.options.wrapAround;
  this.select( index );
  delete this.isDragSelect;
  this.dispatchEvent( 'dragEnd', event, [ pointer ] );
};

proto.dragEndRestingSelect = function() {
  var restingX = this.getRestingPosition();
  // how far away from selected slide
  var distance = Math.abs( this.getSlideDistance( -restingX, this.selectedIndex ) );
  // get closet resting going up and going down
  var positiveResting = this._getClosestResting( restingX, distance, 1 );
  var negativeResting = this._getClosestResting( restingX, distance, -1 );
  // use closer resting for wrap-around
  var index = positiveResting.distance < negativeResting.distance ?
    positiveResting.index : negativeResting.index;
  return index;
};

/**
 * given resting X and distance to selected cell
 * get the distance and index of the closest cell
 * @param {Number} restingX - estimated post-flick resting position
 * @param {Number} distance - distance to selected cell
 * @param {Integer} increment - +1 or -1, going up or down
 * @returns {Object} - { distance: {Number}, index: {Integer} }
 */
proto._getClosestResting = function( restingX, distance, increment ) {
  var index = this.selectedIndex;
  var minDistance = Infinity;
  var condition = this.options.contain && !this.options.wrapAround ?
    // if contain, keep going if distance is equal to minDistance
    function( d, md ) { return d <= md; } : function( d, md ) { return d < md; };
  while ( condition( distance, minDistance ) ) {
    // measure distance to next cell
    index += increment;
    minDistance = distance;
    distance = this.getSlideDistance( -restingX, index );
    if ( distance === null ) {
      break;
    }
    distance = Math.abs( distance );
  }
  return {
    distance: minDistance,
    // selected was previous index
    index: index - increment
  };
};

/**
 * measure distance between x and a slide target
 * @param {Number} x
 * @param {Integer} index - slide index
 */
proto.getSlideDistance = function( x, index ) {
  var len = this.slides.length;
  // wrap around if at least 2 slides
  var isWrapAround = this.options.wrapAround && len > 1;
  var slideIndex = isWrapAround ? utils.modulo( index, len ) : index;
  var slide = this.slides[ slideIndex ];
  if ( !slide ) {
    return null;
  }
  // add distance for wrap-around slides
  var wrap = isWrapAround ? this.slideableWidth * Math.floor( index / len ) : 0;
  return x - ( slide.target + wrap );
};

proto.dragEndBoostSelect = function() {
  // do not boost if no previousDragX or dragMoveTime
  if ( this.previousDragX === undefined || !this.dragMoveTime ||
    // or if drag was held for 100 ms
    new Date() - this.dragMoveTime > 100 ) {
    return 0;
  }

  var distance = this.getSlideDistance( -this.dragX, this.selectedIndex );
  var delta = this.previousDragX - this.dragX;
  if ( distance > 0 && delta > 0 ) {
    // boost to next if moving towards the right, and positive velocity
    return 1;
  } else if ( distance < 0 && delta < 0 ) {
    // boost to previous if moving towards the left, and negative velocity
    return -1;
  }
  return 0;
};

// ----- staticClick ----- //

proto.staticClick = function( event, pointer ) {
  // get clickedCell, if cell was clicked
  var clickedCell = this.getParentCell( event.target );
  var cellElem = clickedCell && clickedCell.element;
  var cellIndex = clickedCell && this.cells.indexOf( clickedCell );
  this.dispatchEvent( 'staticClick', event, [ pointer, cellElem, cellIndex ] );
};

// ----- scroll ----- //

proto.onscroll = function() {
  var scroll = getScrollPosition();
  var scrollMoveX = this.pointerDownScroll.x - scroll.x;
  var scrollMoveY = this.pointerDownScroll.y - scroll.y;
  // cancel click/tap if scroll is too much
  if ( Math.abs( scrollMoveX ) > 3 || Math.abs( scrollMoveY ) > 3 ) {
    this._pointerDone();
  }
};

// ----- utils ----- //

function getScrollPosition() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
}

// -----  ----- //

return Flickity;

}));

},{"./flickity":9,"fizzy-ui-utils":4,"unidragger":17}],9:[function(require,module,exports){
// Flickity main
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'ev-emitter/ev-emitter',
      'get-size/get-size',
      'fizzy-ui-utils/utils',
      './cell',
      './slide',
      './animate'
    ], function( EvEmitter, getSize, utils, Cell, Slide, animatePrototype ) {
      return factory( window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('ev-emitter'),
      require('get-size'),
      require('fizzy-ui-utils'),
      require('./cell'),
      require('./slide'),
      require('./animate')
    );
  } else {
    // browser global
    var _Flickity = window.Flickity;

    window.Flickity = factory(
      window,
      window.EvEmitter,
      window.getSize,
      window.fizzyUIUtils,
      _Flickity.Cell,
      _Flickity.Slide,
      _Flickity.animatePrototype
    );
  }

}( window, function factory( window, EvEmitter, getSize,
  utils, Cell, Slide, animatePrototype ) {

'use strict';

// vars
var jQuery = window.jQuery;
var getComputedStyle = window.getComputedStyle;
var console = window.console;

function moveElements( elems, toElem ) {
  elems = utils.makeArray( elems );
  while ( elems.length ) {
    toElem.appendChild( elems.shift() );
  }
}

// -------------------------- Flickity -------------------------- //

// globally unique identifiers
var GUID = 0;
// internal store of all Flickity intances
var instances = {};

function Flickity( element, options ) {
  var queryElement = utils.getQueryElement( element );
  if ( !queryElement ) {
    if ( console ) {
      console.error( 'Bad element for Flickity: ' + ( queryElement || element ) );
    }
    return;
  }
  this.element = queryElement;
  // do not initialize twice on same element
  if ( this.element.flickityGUID ) {
    var instance = instances[ this.element.flickityGUID ];
    instance.option( options );
    return instance;
  }

  // add jQuery
  if ( jQuery ) {
    this.$element = jQuery( this.element );
  }
  // options
  this.options = utils.extend( {}, this.constructor.defaults );
  this.option( options );

  // kick things off
  this._create();
}

Flickity.defaults = {
  accessibility: true,
  // adaptiveHeight: false,
  cellAlign: 'center',
  // cellSelector: undefined,
  // contain: false,
  freeScrollFriction: 0.075, // friction when free-scrolling
  friction: 0.28, // friction when selecting
  namespaceJQueryEvents: true,
  // initialIndex: 0,
  percentPosition: true,
  resize: true,
  selectedAttraction: 0.025,
  setGallerySize: true
  // watchCSS: false,
  // wrapAround: false
};

// hash of methods triggered on _create()
Flickity.createMethods = [];

var proto = Flickity.prototype;
// inherit EventEmitter
utils.extend( proto, EvEmitter.prototype );

proto._create = function() {
  // add id for Flickity.data
  var id = this.guid = ++GUID;
  this.element.flickityGUID = id; // expando
  instances[ id ] = this; // associate via id
  // initial properties
  this.selectedIndex = 0;
  // how many frames slider has been in same position
  this.restingFrames = 0;
  // initial physics properties
  this.x = 0;
  this.velocity = 0;
  this.originSide = this.options.rightToLeft ? 'right' : 'left';
  // create viewport & slider
  this.viewport = document.createElement('div');
  this.viewport.className = 'flickity-viewport';
  this._createSlider();

  if ( this.options.resize || this.options.watchCSS ) {
    window.addEventListener( 'resize', this );
  }

  // add listeners from on option
  for ( var eventName in this.options.on ) {
    var listener = this.options.on[ eventName ];
    this.on( eventName, listener );
  }

  Flickity.createMethods.forEach( function( method ) {
    this[ method ]();
  }, this );

  if ( this.options.watchCSS ) {
    this.watchCSS();
  } else {
    this.activate();
  }

};

/**
 * set options
 * @param {Object} opts
 */
proto.option = function( opts ) {
  utils.extend( this.options, opts );
};

proto.activate = function() {
  if ( this.isActive ) {
    return;
  }
  this.isActive = true;
  this.element.classList.add('flickity-enabled');
  if ( this.options.rightToLeft ) {
    this.element.classList.add('flickity-rtl');
  }

  this.getSize();
  // move initial cell elements so they can be loaded as cells
  var cellElems = this._filterFindCellElements( this.element.children );
  moveElements( cellElems, this.slider );
  this.viewport.appendChild( this.slider );
  this.element.appendChild( this.viewport );
  // get cells from children
  this.reloadCells();

  if ( this.options.accessibility ) {
    // allow element to focusable
    this.element.tabIndex = 0;
    // listen for key presses
    this.element.addEventListener( 'keydown', this );
  }

  this.emitEvent('activate');
  this.selectInitialIndex();
  // flag for initial activation, for using initialIndex
  this.isInitActivated = true;
  // ready event. #493
  this.dispatchEvent('ready');
};

// slider positions the cells
proto._createSlider = function() {
  // slider element does all the positioning
  var slider = document.createElement('div');
  slider.className = 'flickity-slider';
  slider.style[ this.originSide ] = 0;
  this.slider = slider;
};

proto._filterFindCellElements = function( elems ) {
  return utils.filterFindElements( elems, this.options.cellSelector );
};

// goes through all children
proto.reloadCells = function() {
  // collection of item elements
  this.cells = this._makeCells( this.slider.children );
  this.positionCells();
  this._getWrapShiftCells();
  this.setGallerySize();
};

/**
 * turn elements into Flickity.Cells
 * @param {Array or NodeList or HTMLElement} elems
 * @returns {Array} items - collection of new Flickity Cells
 */
proto._makeCells = function( elems ) {
  var cellElems = this._filterFindCellElements( elems );

  // create new Flickity for collection
  var cells = cellElems.map( function( cellElem ) {
    return new Cell( cellElem, this );
  }, this );

  return cells;
};

proto.getLastCell = function() {
  return this.cells[ this.cells.length - 1 ];
};

proto.getLastSlide = function() {
  return this.slides[ this.slides.length - 1 ];
};

// positions all cells
proto.positionCells = function() {
  // size all cells
  this._sizeCells( this.cells );
  // position all cells
  this._positionCells( 0 );
};

/**
 * position certain cells
 * @param {Integer} index - which cell to start with
 */
proto._positionCells = function( index ) {
  index = index || 0;
  // also measure maxCellHeight
  // start 0 if positioning all cells
  this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;
  var cellX = 0;
  // get cellX
  if ( index > 0 ) {
    var startCell = this.cells[ index - 1 ];
    cellX = startCell.x + startCell.size.outerWidth;
  }
  var len = this.cells.length;
  for ( var i=index; i < len; i++ ) {
    var cell = this.cells[i];
    cell.setPosition( cellX );
    cellX += cell.size.outerWidth;
    this.maxCellHeight = Math.max( cell.size.outerHeight, this.maxCellHeight );
  }
  // keep track of cellX for wrap-around
  this.slideableWidth = cellX;
  // slides
  this.updateSlides();
  // contain slides target
  this._containSlides();
  // update slidesWidth
  this.slidesWidth = len ? this.getLastSlide().target - this.slides[0].target : 0;
};

/**
 * cell.getSize() on multiple cells
 * @param {Array} cells
 */
proto._sizeCells = function( cells ) {
  cells.forEach( function( cell ) {
    cell.getSize();
  });
};

// --------------------------  -------------------------- //

proto.updateSlides = function() {
  this.slides = [];
  if ( !this.cells.length ) {
    return;
  }

  var slide = new Slide( this );
  this.slides.push( slide );
  var isOriginLeft = this.originSide == 'left';
  var nextMargin = isOriginLeft ? 'marginRight' : 'marginLeft';

  var canCellFit = this._getCanCellFit();

  this.cells.forEach( function( cell, i ) {
    // just add cell if first cell in slide
    if ( !slide.cells.length ) {
      slide.addCell( cell );
      return;
    }

    var slideWidth = ( slide.outerWidth - slide.firstMargin ) +
      ( cell.size.outerWidth - cell.size[ nextMargin ] );

    if ( canCellFit.call( this, i, slideWidth ) ) {
      slide.addCell( cell );
    } else {
      // doesn't fit, new slide
      slide.updateTarget();

      slide = new Slide( this );
      this.slides.push( slide );
      slide.addCell( cell );
    }
  }, this );
  // last slide
  slide.updateTarget();
  // update .selectedSlide
  this.updateSelectedSlide();
};

proto._getCanCellFit = function() {
  var groupCells = this.options.groupCells;
  if ( !groupCells ) {
    return function() {
      return false;
    };
  } else if ( typeof groupCells == 'number' ) {
    // group by number. 3 -> [0,1,2], [3,4,5], ...
    var number = parseInt( groupCells, 10 );
    return function( i ) {
      return ( i % number ) !== 0;
    };
  }
  // default, group by width of slide
  // parse '75%
  var percentMatch = typeof groupCells == 'string' &&
    groupCells.match(/^(\d+)%$/);
  var percent = percentMatch ? parseInt( percentMatch[1], 10 ) / 100 : 1;
  return function( i, slideWidth ) {
    return slideWidth <= ( this.size.innerWidth + 1 ) * percent;
  };
};

// alias _init for jQuery plugin .flickity()
proto._init =
proto.reposition = function() {
  this.positionCells();
  this.positionSliderAtSelected();
};

proto.getSize = function() {
  this.size = getSize( this.element );
  this.setCellAlign();
  this.cursorPosition = this.size.innerWidth * this.cellAlign;
};

var cellAlignShorthands = {
  // cell align, then based on origin side
  center: {
    left: 0.5,
    right: 0.5
  },
  left: {
    left: 0,
    right: 1
  },
  right: {
    right: 0,
    left: 1
  }
};

proto.setCellAlign = function() {
  var shorthand = cellAlignShorthands[ this.options.cellAlign ];
  this.cellAlign = shorthand ? shorthand[ this.originSide ] : this.options.cellAlign;
};

proto.setGallerySize = function() {
  if ( this.options.setGallerySize ) {
    var height = this.options.adaptiveHeight && this.selectedSlide ?
      this.selectedSlide.height : this.maxCellHeight;
    this.viewport.style.height = height + 'px';
  }
};

proto._getWrapShiftCells = function() {
  // only for wrap-around
  if ( !this.options.wrapAround ) {
    return;
  }
  // unshift previous cells
  this._unshiftCells( this.beforeShiftCells );
  this._unshiftCells( this.afterShiftCells );
  // get before cells
  // initial gap
  var gapX = this.cursorPosition;
  var cellIndex = this.cells.length - 1;
  this.beforeShiftCells = this._getGapCells( gapX, cellIndex, -1 );
  // get after cells
  // ending gap between last cell and end of gallery viewport
  gapX = this.size.innerWidth - this.cursorPosition;
  // start cloning at first cell, working forwards
  this.afterShiftCells = this._getGapCells( gapX, 0, 1 );
};

proto._getGapCells = function( gapX, cellIndex, increment ) {
  // keep adding cells until the cover the initial gap
  var cells = [];
  while ( gapX > 0 ) {
    var cell = this.cells[ cellIndex ];
    if ( !cell ) {
      break;
    }
    cells.push( cell );
    cellIndex += increment;
    gapX -= cell.size.outerWidth;
  }
  return cells;
};

// ----- contain ----- //

// contain cell targets so no excess sliding
proto._containSlides = function() {
  if ( !this.options.contain || this.options.wrapAround || !this.cells.length ) {
    return;
  }
  var isRightToLeft = this.options.rightToLeft;
  var beginMargin = isRightToLeft ? 'marginRight' : 'marginLeft';
  var endMargin = isRightToLeft ? 'marginLeft' : 'marginRight';
  var contentWidth = this.slideableWidth - this.getLastCell().size[ endMargin ];
  // content is less than gallery size
  var isContentSmaller = contentWidth < this.size.innerWidth;
  // bounds
  var beginBound = this.cursorPosition + this.cells[0].size[ beginMargin ];
  var endBound = contentWidth - this.size.innerWidth * ( 1 - this.cellAlign );
  // contain each cell target
  this.slides.forEach( function( slide ) {
    if ( isContentSmaller ) {
      // all cells fit inside gallery
      slide.target = contentWidth * this.cellAlign;
    } else {
      // contain to bounds
      slide.target = Math.max( slide.target, beginBound );
      slide.target = Math.min( slide.target, endBound );
    }
  }, this );
};

// -----  ----- //

/**
 * emits events via eventEmitter and jQuery events
 * @param {String} type - name of event
 * @param {Event} event - original event
 * @param {Array} args - extra arguments
 */
proto.dispatchEvent = function( type, event, args ) {
  var emitArgs = event ? [ event ].concat( args ) : args;
  this.emitEvent( type, emitArgs );

  if ( jQuery && this.$element ) {
    // default trigger with type if no event
    type += this.options.namespaceJQueryEvents ? '.flickity' : '';
    var $event = type;
    if ( event ) {
      // create jQuery event
      var jQEvent = jQuery.Event( event );
      jQEvent.type = type;
      $event = jQEvent;
    }
    this.$element.trigger( $event, args );
  }
};

// -------------------------- select -------------------------- //

/**
 * @param {Integer} index - index of the slide
 * @param {Boolean} isWrap - will wrap-around to last/first if at the end
 * @param {Boolean} isInstant - will immediately set position at selected cell
 */
proto.select = function( index, isWrap, isInstant ) {
  if ( !this.isActive ) {
    return;
  }
  index = parseInt( index, 10 );
  this._wrapSelect( index );

  if ( this.options.wrapAround || isWrap ) {
    index = utils.modulo( index, this.slides.length );
  }
  // bail if invalid index
  if ( !this.slides[ index ] ) {
    return;
  }
  var prevIndex = this.selectedIndex;
  this.selectedIndex = index;
  this.updateSelectedSlide();
  if ( isInstant ) {
    this.positionSliderAtSelected();
  } else {
    this.startAnimation();
  }
  if ( this.options.adaptiveHeight ) {
    this.setGallerySize();
  }
  // events
  this.dispatchEvent( 'select', null, [ index ] );
  // change event if new index
  if ( index != prevIndex ) {
    this.dispatchEvent( 'change', null, [ index ] );
  }
  // old v1 event name, remove in v3
  this.dispatchEvent('cellSelect');
};

// wraps position for wrapAround, to move to closest slide. #113
proto._wrapSelect = function( index ) {
  var len = this.slides.length;
  var isWrapping = this.options.wrapAround && len > 1;
  if ( !isWrapping ) {
    return index;
  }
  var wrapIndex = utils.modulo( index, len );
  // go to shortest
  var delta = Math.abs( wrapIndex - this.selectedIndex );
  var backWrapDelta = Math.abs( ( wrapIndex + len ) - this.selectedIndex );
  var forewardWrapDelta = Math.abs( ( wrapIndex - len ) - this.selectedIndex );
  if ( !this.isDragSelect && backWrapDelta < delta ) {
    index += len;
  } else if ( !this.isDragSelect && forewardWrapDelta < delta ) {
    index -= len;
  }
  // wrap position so slider is within normal area
  if ( index < 0 ) {
    this.x -= this.slideableWidth;
  } else if ( index >= len ) {
    this.x += this.slideableWidth;
  }
};

proto.previous = function( isWrap, isInstant ) {
  this.select( this.selectedIndex - 1, isWrap, isInstant );
};

proto.next = function( isWrap, isInstant ) {
  this.select( this.selectedIndex + 1, isWrap, isInstant );
};

proto.updateSelectedSlide = function() {
  var slide = this.slides[ this.selectedIndex ];
  // selectedIndex could be outside of slides, if triggered before resize()
  if ( !slide ) {
    return;
  }
  // unselect previous selected slide
  this.unselectSelectedSlide();
  // update new selected slide
  this.selectedSlide = slide;
  slide.select();
  this.selectedCells = slide.cells;
  this.selectedElements = slide.getCellElements();
  // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility
  // Remove in v3?
  this.selectedCell = slide.cells[0];
  this.selectedElement = this.selectedElements[0];
};

proto.unselectSelectedSlide = function() {
  if ( this.selectedSlide ) {
    this.selectedSlide.unselect();
  }
};

proto.selectInitialIndex = function() {
  var initialIndex = this.options.initialIndex;
  // already activated, select previous selectedIndex
  if ( this.isInitActivated ) {
    this.select( this.selectedIndex, false, true );
    return;
  }
  // select with selector string
  if ( initialIndex && typeof initialIndex == 'string' ) {
    var cell = this.queryCell( initialIndex );
    if ( cell ) {
      this.selectCell( initialIndex, false, true );
      return;
    }
  }

  var index = 0;
  // select with number
  if ( initialIndex && this.slides[ initialIndex ] ) {
    index = initialIndex;
  }
  // select instantly
  this.select( index, false, true );
};

/**
 * select slide from number or cell element
 * @param {Element or Number} elem
 */
proto.selectCell = function( value, isWrap, isInstant ) {
  // get cell
  var cell = this.queryCell( value );
  if ( !cell ) {
    return;
  }

  var index = this.getCellSlideIndex( cell );
  this.select( index, isWrap, isInstant );
};

proto.getCellSlideIndex = function( cell ) {
  // get index of slides that has cell
  for ( var i=0; i < this.slides.length; i++ ) {
    var slide = this.slides[i];
    var index = slide.cells.indexOf( cell );
    if ( index != -1 ) {
      return i;
    }
  }
};

// -------------------------- get cells -------------------------- //

/**
 * get Flickity.Cell, given an Element
 * @param {Element} elem
 * @returns {Flickity.Cell} item
 */
proto.getCell = function( elem ) {
  // loop through cells to get the one that matches
  for ( var i=0; i < this.cells.length; i++ ) {
    var cell = this.cells[i];
    if ( cell.element == elem ) {
      return cell;
    }
  }
};

/**
 * get collection of Flickity.Cells, given Elements
 * @param {Element, Array, NodeList} elems
 * @returns {Array} cells - Flickity.Cells
 */
proto.getCells = function( elems ) {
  elems = utils.makeArray( elems );
  var cells = [];
  elems.forEach( function( elem ) {
    var cell = this.getCell( elem );
    if ( cell ) {
      cells.push( cell );
    }
  }, this );
  return cells;
};

/**
 * get cell elements
 * @returns {Array} cellElems
 */
proto.getCellElements = function() {
  return this.cells.map( function( cell ) {
    return cell.element;
  });
};

/**
 * get parent cell from an element
 * @param {Element} elem
 * @returns {Flickit.Cell} cell
 */
proto.getParentCell = function( elem ) {
  // first check if elem is cell
  var cell = this.getCell( elem );
  if ( cell ) {
    return cell;
  }
  // try to get parent cell elem
  elem = utils.getParent( elem, '.flickity-slider > *' );
  return this.getCell( elem );
};

/**
 * get cells adjacent to a slide
 * @param {Integer} adjCount - number of adjacent slides
 * @param {Integer} index - index of slide to start
 * @returns {Array} cells - array of Flickity.Cells
 */
proto.getAdjacentCellElements = function( adjCount, index ) {
  if ( !adjCount ) {
    return this.selectedSlide.getCellElements();
  }
  index = index === undefined ? this.selectedIndex : index;

  var len = this.slides.length;
  if ( 1 + ( adjCount * 2 ) >= len ) {
    return this.getCellElements();
  }

  var cellElems = [];
  for ( var i = index - adjCount; i <= index + adjCount ; i++ ) {
    var slideIndex = this.options.wrapAround ? utils.modulo( i, len ) : i;
    var slide = this.slides[ slideIndex ];
    if ( slide ) {
      cellElems = cellElems.concat( slide.getCellElements() );
    }
  }
  return cellElems;
};

/**
 * select slide from number or cell element
 * @param {Element, Selector String, or Number} selector
 */
proto.queryCell = function( selector ) {
  if ( typeof selector == 'number' ) {
    // use number as index
    return this.cells[ selector ];
  }
  if ( typeof selector == 'string' ) {
    // do not select invalid selectors from hash: #123, #/. #791
    if ( selector.match(/^[#\.]?[\d\/]/) ) {
      return;
    }
    // use string as selector, get element
    selector = this.element.querySelector( selector );
  }
  // get cell from element
  return this.getCell( selector );
};

// -------------------------- events -------------------------- //

proto.uiChange = function() {
  this.emitEvent('uiChange');
};

// keep focus on element when child UI elements are clicked
proto.childUIPointerDown = function( event ) {
  // HACK iOS does not allow touch events to bubble up?!
  if ( event.type != 'touchstart' ) {
    event.preventDefault();
  }
  this.focus();
};

// ----- resize ----- //

proto.onresize = function() {
  this.watchCSS();
  this.resize();
};

utils.debounceMethod( Flickity, 'onresize', 150 );

proto.resize = function() {
  if ( !this.isActive ) {
    return;
  }
  this.getSize();
  // wrap values
  if ( this.options.wrapAround ) {
    this.x = utils.modulo( this.x, this.slideableWidth );
  }
  this.positionCells();
  this._getWrapShiftCells();
  this.setGallerySize();
  this.emitEvent('resize');
  // update selected index for group slides, instant
  // TODO: position can be lost between groups of various numbers
  var selectedElement = this.selectedElements && this.selectedElements[0];
  this.selectCell( selectedElement, false, true );
};

// watches the :after property, activates/deactivates
proto.watchCSS = function() {
  var watchOption = this.options.watchCSS;
  if ( !watchOption ) {
    return;
  }

  var afterContent = getComputedStyle( this.element, ':after' ).content;
  // activate if :after { content: 'flickity' }
  if ( afterContent.indexOf('flickity') != -1 ) {
    this.activate();
  } else {
    this.deactivate();
  }
};

// ----- keydown ----- //

// go previous/next if left/right keys pressed
proto.onkeydown = function( event ) {
  // only work if element is in focus
  var isNotFocused = document.activeElement && document.activeElement != this.element;
  if ( !this.options.accessibility ||isNotFocused ) {
    return;
  }

  var handler = Flickity.keyboardHandlers[ event.keyCode ];
  if ( handler ) {
    handler.call( this );
  }
};

Flickity.keyboardHandlers = {
  // left arrow
  37: function() {
    var leftMethod = this.options.rightToLeft ? 'next' : 'previous';
    this.uiChange();
    this[ leftMethod ]();
  },
  // right arrow
  39: function() {
    var rightMethod = this.options.rightToLeft ? 'previous' : 'next';
    this.uiChange();
    this[ rightMethod ]();
  },
};

// ----- focus ----- //

proto.focus = function() {
  // TODO remove scrollTo once focus options gets more support
  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#Browser_compatibility
  var prevScrollY = window.pageYOffset;
  this.element.focus({ preventScroll: true });
  // hack to fix scroll jump after focus, #76
  if ( window.pageYOffset != prevScrollY ) {
    window.scrollTo( window.pageXOffset, prevScrollY );
  }
};

// -------------------------- destroy -------------------------- //

// deactivate all Flickity functionality, but keep stuff available
proto.deactivate = function() {
  if ( !this.isActive ) {
    return;
  }
  this.element.classList.remove('flickity-enabled');
  this.element.classList.remove('flickity-rtl');
  this.unselectSelectedSlide();
  // destroy cells
  this.cells.forEach( function( cell ) {
    cell.destroy();
  });
  this.element.removeChild( this.viewport );
  // move child elements back into element
  moveElements( this.slider.children, this.element );
  if ( this.options.accessibility ) {
    this.element.removeAttribute('tabIndex');
    this.element.removeEventListener( 'keydown', this );
  }
  // set flags
  this.isActive = false;
  this.emitEvent('deactivate');
};

proto.destroy = function() {
  this.deactivate();
  window.removeEventListener( 'resize', this );
  this.allOff();
  this.emitEvent('destroy');
  if ( jQuery && this.$element ) {
    jQuery.removeData( this.element, 'flickity' );
  }
  delete this.element.flickityGUID;
  delete instances[ this.guid ];
};

// -------------------------- prototype -------------------------- //

utils.extend( proto, animatePrototype );

// -------------------------- extras -------------------------- //

/**
 * get Flickity instance from element
 * @param {Element} elem
 * @returns {Flickity}
 */
Flickity.data = function( elem ) {
  elem = utils.getQueryElement( elem );
  var id = elem && elem.flickityGUID;
  return id && instances[ id ];
};

utils.htmlInit( Flickity, 'flickity' );

if ( jQuery && jQuery.bridget ) {
  jQuery.bridget( 'flickity', Flickity );
}

// set internal jQuery, for Webpack + jQuery v3, #478
Flickity.setJQuery = function( jq ) {
  jQuery = jq;
};

Flickity.Cell = Cell;
Flickity.Slide = Slide;

return Flickity;

}));

},{"./animate":6,"./cell":7,"./slide":15,"ev-emitter":3,"fizzy-ui-utils":4,"get-size":16}],10:[function(require,module,exports){
/*!
 * Flickity v2.2.1
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2019 Metafizzy
 */

( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      './drag',
      './prev-next-button',
      './page-dots',
      './player',
      './add-remove-cell',
      './lazyload'
    ], factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      require('./flickity'),
      require('./drag'),
      require('./prev-next-button'),
      require('./page-dots'),
      require('./player'),
      require('./add-remove-cell'),
      require('./lazyload')
    );
  }

})( window, function factory( Flickity ) {
  /*jshint strict: false*/
  return Flickity;
});

},{"./add-remove-cell":5,"./drag":8,"./flickity":9,"./lazyload":11,"./page-dots":12,"./player":13,"./prev-next-button":14}],11:[function(require,module,exports){
// lazyload
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      'fizzy-ui-utils/utils'
    ], function( Flickity, utils ) {
      return factory( window, Flickity, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('./flickity'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    factory(
      window,
      window.Flickity,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, Flickity, utils ) {
'use strict';

Flickity.createMethods.push('_createLazyload');
var proto = Flickity.prototype;

proto._createLazyload = function() {
  this.on( 'select', this.lazyLoad );
};

proto.lazyLoad = function() {
  var lazyLoad = this.options.lazyLoad;
  if ( !lazyLoad ) {
    return;
  }
  // get adjacent cells, use lazyLoad option for adjacent count
  var adjCount = typeof lazyLoad == 'number' ? lazyLoad : 0;
  var cellElems = this.getAdjacentCellElements( adjCount );
  // get lazy images in those cells
  var lazyImages = [];
  cellElems.forEach( function( cellElem ) {
    var lazyCellImages = getCellLazyImages( cellElem );
    lazyImages = lazyImages.concat( lazyCellImages );
  });
  // load lazy images
  lazyImages.forEach( function( img ) {
    new LazyLoader( img, this );
  }, this );
};

function getCellLazyImages( cellElem ) {
  // check if cell element is lazy image
  if ( cellElem.nodeName == 'IMG' ) {
    var lazyloadAttr = cellElem.getAttribute('data-flickity-lazyload');
    var srcAttr = cellElem.getAttribute('data-flickity-lazyload-src');
    var srcsetAttr = cellElem.getAttribute('data-flickity-lazyload-srcset');
    if ( lazyloadAttr || srcAttr || srcsetAttr ) {
      return [ cellElem ];
    }
  }
  // select lazy images in cell
  var lazySelector = 'img[data-flickity-lazyload], ' +
    'img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]';
  var imgs = cellElem.querySelectorAll( lazySelector );
  return utils.makeArray( imgs );
}

// -------------------------- LazyLoader -------------------------- //

/**
 * class to handle loading images
 */
function LazyLoader( img, flickity ) {
  this.img = img;
  this.flickity = flickity;
  this.load();
}

LazyLoader.prototype.handleEvent = utils.handleEvent;

LazyLoader.prototype.load = function() {
  this.img.addEventListener( 'load', this );
  this.img.addEventListener( 'error', this );
  // get src & srcset
  var src = this.img.getAttribute('data-flickity-lazyload') ||
    this.img.getAttribute('data-flickity-lazyload-src');
  var srcset = this.img.getAttribute('data-flickity-lazyload-srcset');
  // set src & serset
  this.img.src = src;
  if ( srcset ) {
    this.img.setAttribute( 'srcset', srcset );
  }
  // remove attr
  this.img.removeAttribute('data-flickity-lazyload');
  this.img.removeAttribute('data-flickity-lazyload-src');
  this.img.removeAttribute('data-flickity-lazyload-srcset');
};

LazyLoader.prototype.onload = function( event ) {
  this.complete( event, 'flickity-lazyloaded' );
};

LazyLoader.prototype.onerror = function( event ) {
  this.complete( event, 'flickity-lazyerror' );
};

LazyLoader.prototype.complete = function( event, className ) {
  // unbind events
  this.img.removeEventListener( 'load', this );
  this.img.removeEventListener( 'error', this );

  var cell = this.flickity.getParentCell( this.img );
  var cellElem = cell && cell.element;
  this.flickity.cellSizeChange( cellElem );

  this.img.classList.add( className );
  this.flickity.dispatchEvent( 'lazyLoad', event, cellElem );
};

// -----  ----- //

Flickity.LazyLoader = LazyLoader;

return Flickity;

}));

},{"./flickity":9,"fizzy-ui-utils":4}],12:[function(require,module,exports){
// page dots
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      'unipointer/unipointer',
      'fizzy-ui-utils/utils'
    ], function( Flickity, Unipointer, utils ) {
      return factory( window, Flickity, Unipointer, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('./flickity'),
      require('unipointer'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    factory(
      window,
      window.Flickity,
      window.Unipointer,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, Flickity, Unipointer, utils ) {

// -------------------------- PageDots -------------------------- //

'use strict';

function PageDots( parent ) {
  this.parent = parent;
  this._create();
}

PageDots.prototype = Object.create( Unipointer.prototype );

PageDots.prototype._create = function() {
  // create holder element
  this.holder = document.createElement('ol');
  this.holder.className = 'flickity-page-dots';
  // create dots, array of elements
  this.dots = [];
  // events
  this.handleClick = this.onClick.bind( this );
  this.on( 'pointerDown', this.parent.childUIPointerDown.bind( this.parent ) );
};

PageDots.prototype.activate = function() {
  this.setDots();
  this.holder.addEventListener( 'click', this.handleClick );
  this.bindStartEvent( this.holder );
  // add to DOM
  this.parent.element.appendChild( this.holder );
};

PageDots.prototype.deactivate = function() {
  this.holder.removeEventListener( 'click', this.handleClick );
  this.unbindStartEvent( this.holder );
  // remove from DOM
  this.parent.element.removeChild( this.holder );
};

PageDots.prototype.setDots = function() {
  // get difference between number of slides and number of dots
  var delta = this.parent.slides.length - this.dots.length;
  if ( delta > 0 ) {
    this.addDots( delta );
  } else if ( delta < 0 ) {
    this.removeDots( -delta );
  }
};

PageDots.prototype.addDots = function( count ) {
  var fragment = document.createDocumentFragment();
  var newDots = [];
  var length = this.dots.length;
  var max = length + count;

  for ( var i = length; i < max; i++ ) {
    var dot = document.createElement('li');
    dot.className = 'dot';
    dot.setAttribute( 'aria-label', 'Page dot ' + ( i + 1 ) );
    fragment.appendChild( dot );
    newDots.push( dot );
  }

  this.holder.appendChild( fragment );
  this.dots = this.dots.concat( newDots );
};

PageDots.prototype.removeDots = function( count ) {
  // remove from this.dots collection
  var removeDots = this.dots.splice( this.dots.length - count, count );
  // remove from DOM
  removeDots.forEach( function( dot ) {
    this.holder.removeChild( dot );
  }, this );
};

PageDots.prototype.updateSelected = function() {
  // remove selected class on previous
  if ( this.selectedDot ) {
    this.selectedDot.className = 'dot';
    this.selectedDot.removeAttribute('aria-current');
  }
  // don't proceed if no dots
  if ( !this.dots.length ) {
    return;
  }
  this.selectedDot = this.dots[ this.parent.selectedIndex ];
  this.selectedDot.className = 'dot is-selected';
  this.selectedDot.setAttribute( 'aria-current', 'step' );
};

PageDots.prototype.onTap = // old method name, backwards-compatible
PageDots.prototype.onClick = function( event ) {
  var target = event.target;
  // only care about dot clicks
  if ( target.nodeName != 'LI' ) {
    return;
  }

  this.parent.uiChange();
  var index = this.dots.indexOf( target );
  this.parent.select( index );
};

PageDots.prototype.destroy = function() {
  this.deactivate();
  this.allOff();
};

Flickity.PageDots = PageDots;

// -------------------------- Flickity -------------------------- //

utils.extend( Flickity.defaults, {
  pageDots: true
});

Flickity.createMethods.push('_createPageDots');

var proto = Flickity.prototype;

proto._createPageDots = function() {
  if ( !this.options.pageDots ) {
    return;
  }
  this.pageDots = new PageDots( this );
  // events
  this.on( 'activate', this.activatePageDots );
  this.on( 'select', this.updateSelectedPageDots );
  this.on( 'cellChange', this.updatePageDots );
  this.on( 'resize', this.updatePageDots );
  this.on( 'deactivate', this.deactivatePageDots );
};

proto.activatePageDots = function() {
  this.pageDots.activate();
};

proto.updateSelectedPageDots = function() {
  this.pageDots.updateSelected();
};

proto.updatePageDots = function() {
  this.pageDots.setDots();
};

proto.deactivatePageDots = function() {
  this.pageDots.deactivate();
};

// -----  ----- //

Flickity.PageDots = PageDots;

return Flickity;

}));

},{"./flickity":9,"fizzy-ui-utils":4,"unipointer":18}],13:[function(require,module,exports){
// player & autoPlay
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'ev-emitter/ev-emitter',
      'fizzy-ui-utils/utils',
      './flickity'
    ], function( EvEmitter, utils, Flickity ) {
      return factory( EvEmitter, utils, Flickity );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      require('ev-emitter'),
      require('fizzy-ui-utils'),
      require('./flickity')
    );
  } else {
    // browser global
    factory(
      window.EvEmitter,
      window.fizzyUIUtils,
      window.Flickity
    );
  }

}( window, function factory( EvEmitter, utils, Flickity ) {

'use strict';

// -------------------------- Player -------------------------- //

function Player( parent ) {
  this.parent = parent;
  this.state = 'stopped';
  // visibility change event handler
  this.onVisibilityChange = this.visibilityChange.bind( this );
  this.onVisibilityPlay = this.visibilityPlay.bind( this );
}

Player.prototype = Object.create( EvEmitter.prototype );

// start play
Player.prototype.play = function() {
  if ( this.state == 'playing' ) {
    return;
  }
  // do not play if page is hidden, start playing when page is visible
  var isPageHidden = document.hidden;
  if ( isPageHidden ) {
    document.addEventListener( 'visibilitychange', this.onVisibilityPlay );
    return;
  }

  this.state = 'playing';
  // listen to visibility change
  document.addEventListener( 'visibilitychange', this.onVisibilityChange );
  // start ticking
  this.tick();
};

Player.prototype.tick = function() {
  // do not tick if not playing
  if ( this.state != 'playing' ) {
    return;
  }

  var time = this.parent.options.autoPlay;
  // default to 3 seconds
  time = typeof time == 'number' ? time : 3000;
  var _this = this;
  // HACK: reset ticks if stopped and started within interval
  this.clear();
  this.timeout = setTimeout( function() {
    _this.parent.next( true );
    _this.tick();
  }, time );
};

Player.prototype.stop = function() {
  this.state = 'stopped';
  this.clear();
  // remove visibility change event
  document.removeEventListener( 'visibilitychange', this.onVisibilityChange );
};

Player.prototype.clear = function() {
  clearTimeout( this.timeout );
};

Player.prototype.pause = function() {
  if ( this.state == 'playing' ) {
    this.state = 'paused';
    this.clear();
  }
};

Player.prototype.unpause = function() {
  // re-start play if paused
  if ( this.state == 'paused' ) {
    this.play();
  }
};

// pause if page visibility is hidden, unpause if visible
Player.prototype.visibilityChange = function() {
  var isPageHidden = document.hidden;
  this[ isPageHidden ? 'pause' : 'unpause' ]();
};

Player.prototype.visibilityPlay = function() {
  this.play();
  document.removeEventListener( 'visibilitychange', this.onVisibilityPlay );
};

// -------------------------- Flickity -------------------------- //

utils.extend( Flickity.defaults, {
  pauseAutoPlayOnHover: true
});

Flickity.createMethods.push('_createPlayer');
var proto = Flickity.prototype;

proto._createPlayer = function() {
  this.player = new Player( this );

  this.on( 'activate', this.activatePlayer );
  this.on( 'uiChange', this.stopPlayer );
  this.on( 'pointerDown', this.stopPlayer );
  this.on( 'deactivate', this.deactivatePlayer );
};

proto.activatePlayer = function() {
  if ( !this.options.autoPlay ) {
    return;
  }
  this.player.play();
  this.element.addEventListener( 'mouseenter', this );
};

// Player API, don't hate the ... thanks I know where the door is

proto.playPlayer = function() {
  this.player.play();
};

proto.stopPlayer = function() {
  this.player.stop();
};

proto.pausePlayer = function() {
  this.player.pause();
};

proto.unpausePlayer = function() {
  this.player.unpause();
};

proto.deactivatePlayer = function() {
  this.player.stop();
  this.element.removeEventListener( 'mouseenter', this );
};

// ----- mouseenter/leave ----- //

// pause auto-play on hover
proto.onmouseenter = function() {
  if ( !this.options.pauseAutoPlayOnHover ) {
    return;
  }
  this.player.pause();
  this.element.addEventListener( 'mouseleave', this );
};

// resume auto-play on hover off
proto.onmouseleave = function() {
  this.player.unpause();
  this.element.removeEventListener( 'mouseleave', this );
};

// -----  ----- //

Flickity.Player = Player;

return Flickity;

}));

},{"./flickity":9,"ev-emitter":3,"fizzy-ui-utils":4}],14:[function(require,module,exports){
// prev/next buttons
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      './flickity',
      'unipointer/unipointer',
      'fizzy-ui-utils/utils'
    ], function( Flickity, Unipointer, utils ) {
      return factory( window, Flickity, Unipointer, utils );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('./flickity'),
      require('unipointer'),
      require('fizzy-ui-utils')
    );
  } else {
    // browser global
    factory(
      window,
      window.Flickity,
      window.Unipointer,
      window.fizzyUIUtils
    );
  }

}( window, function factory( window, Flickity, Unipointer, utils ) {
'use strict';

var svgURI = 'http://www.w3.org/2000/svg';

// -------------------------- PrevNextButton -------------------------- //

function PrevNextButton( direction, parent ) {
  this.direction = direction;
  this.parent = parent;
  this._create();
}

PrevNextButton.prototype = Object.create( Unipointer.prototype );

PrevNextButton.prototype._create = function() {
  // properties
  this.isEnabled = true;
  this.isPrevious = this.direction == -1;
  var leftDirection = this.parent.options.rightToLeft ? 1 : -1;
  this.isLeft = this.direction == leftDirection;

  var element = this.element = document.createElement('button');
  element.className = 'flickity-button flickity-prev-next-button';
  element.className += this.isPrevious ? ' previous' : ' next';
  // prevent button from submitting form http://stackoverflow.com/a/10836076/182183
  element.setAttribute( 'type', 'button' );
  // init as disabled
  this.disable();

  element.setAttribute( 'aria-label', this.isPrevious ? 'Previous' : 'Next' );

  // create arrow
  var svg = this.createSVG();
  element.appendChild( svg );
  // events
  this.parent.on( 'select', this.update.bind( this ) );
  this.on( 'pointerDown', this.parent.childUIPointerDown.bind( this.parent ) );
};

PrevNextButton.prototype.activate = function() {
  this.bindStartEvent( this.element );
  this.element.addEventListener( 'click', this );
  // add to DOM
  this.parent.element.appendChild( this.element );
};

PrevNextButton.prototype.deactivate = function() {
  // remove from DOM
  this.parent.element.removeChild( this.element );
  // click events
  this.unbindStartEvent( this.element );
  this.element.removeEventListener( 'click', this );
};

PrevNextButton.prototype.createSVG = function() {
  var svg = document.createElementNS( svgURI, 'svg');
  svg.setAttribute( 'class', 'flickity-button-icon' );
  svg.setAttribute( 'viewBox', '0 0 100 100' );
  var path = document.createElementNS( svgURI, 'path');
  var pathMovements = getArrowMovements( this.parent.options.arrowShape );
  path.setAttribute( 'd', pathMovements );
  path.setAttribute( 'class', 'arrow' );
  // rotate arrow
  if ( !this.isLeft ) {
    path.setAttribute( 'transform', 'translate(100, 100) rotate(180) ' );
  }
  svg.appendChild( path );
  return svg;
};

// get SVG path movmement
function getArrowMovements( shape ) {
  // use shape as movement if string
  if ( typeof shape == 'string' ) {
    return shape;
  }
  // create movement string
  return 'M ' + shape.x0 + ',50' +
    ' L ' + shape.x1 + ',' + ( shape.y1 + 50 ) +
    ' L ' + shape.x2 + ',' + ( shape.y2 + 50 ) +
    ' L ' + shape.x3 + ',50 ' +
    ' L ' + shape.x2 + ',' + ( 50 - shape.y2 ) +
    ' L ' + shape.x1 + ',' + ( 50 - shape.y1 ) +
    ' Z';
}

PrevNextButton.prototype.handleEvent = utils.handleEvent;

PrevNextButton.prototype.onclick = function() {
  if ( !this.isEnabled ) {
    return;
  }
  this.parent.uiChange();
  var method = this.isPrevious ? 'previous' : 'next';
  this.parent[ method ]();
};

// -----  ----- //

PrevNextButton.prototype.enable = function() {
  if ( this.isEnabled ) {
    return;
  }
  this.element.disabled = false;
  this.isEnabled = true;
};

PrevNextButton.prototype.disable = function() {
  if ( !this.isEnabled ) {
    return;
  }
  this.element.disabled = true;
  this.isEnabled = false;
};

PrevNextButton.prototype.update = function() {
  // index of first or last slide, if previous or next
  var slides = this.parent.slides;
  // enable is wrapAround and at least 2 slides
  if ( this.parent.options.wrapAround && slides.length > 1 ) {
    this.enable();
    return;
  }
  var lastIndex = slides.length ? slides.length - 1 : 0;
  var boundIndex = this.isPrevious ? 0 : lastIndex;
  var method = this.parent.selectedIndex == boundIndex ? 'disable' : 'enable';
  this[ method ]();
};

PrevNextButton.prototype.destroy = function() {
  this.deactivate();
  this.allOff();
};

// -------------------------- Flickity prototype -------------------------- //

utils.extend( Flickity.defaults, {
  prevNextButtons: true,
  arrowShape: {
    x0: 10,
    x1: 60, y1: 50,
    x2: 70, y2: 40,
    x3: 30
  }
});

Flickity.createMethods.push('_createPrevNextButtons');
var proto = Flickity.prototype;

proto._createPrevNextButtons = function() {
  if ( !this.options.prevNextButtons ) {
    return;
  }

  this.prevButton = new PrevNextButton( -1, this );
  this.nextButton = new PrevNextButton( 1, this );

  this.on( 'activate', this.activatePrevNextButtons );
};

proto.activatePrevNextButtons = function() {
  this.prevButton.activate();
  this.nextButton.activate();
  this.on( 'deactivate', this.deactivatePrevNextButtons );
};

proto.deactivatePrevNextButtons = function() {
  this.prevButton.deactivate();
  this.nextButton.deactivate();
  this.off( 'deactivate', this.deactivatePrevNextButtons );
};

// --------------------------  -------------------------- //

Flickity.PrevNextButton = PrevNextButton;

return Flickity;

}));

},{"./flickity":9,"fizzy-ui-utils":4,"unipointer":18}],15:[function(require,module,exports){
// slide
( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.Flickity = window.Flickity || {};
    window.Flickity.Slide = factory();
  }

}( window, function factory() {
'use strict';

function Slide( parent ) {
  this.parent = parent;
  this.isOriginLeft = parent.originSide == 'left';
  this.cells = [];
  this.outerWidth = 0;
  this.height = 0;
}

var proto = Slide.prototype;

proto.addCell = function( cell ) {
  this.cells.push( cell );
  this.outerWidth += cell.size.outerWidth;
  this.height = Math.max( cell.size.outerHeight, this.height );
  // first cell stuff
  if ( this.cells.length == 1 ) {
    this.x = cell.x; // x comes from first cell
    var beginMargin = this.isOriginLeft ? 'marginLeft' : 'marginRight';
    this.firstMargin = cell.size[ beginMargin ];
  }
};

proto.updateTarget = function() {
  var endMargin = this.isOriginLeft ? 'marginRight' : 'marginLeft';
  var lastCell = this.getLastCell();
  var lastMargin = lastCell ? lastCell.size[ endMargin ] : 0;
  var slideWidth = this.outerWidth - ( this.firstMargin + lastMargin );
  this.target = this.x + this.firstMargin + slideWidth * this.parent.cellAlign;
};

proto.getLastCell = function() {
  return this.cells[ this.cells.length - 1 ];
};

proto.select = function() {
  this.cells.forEach( function( cell ) {
    cell.select();
  });
};

proto.unselect = function() {
  this.cells.forEach( function( cell ) {
    cell.unselect();
  });
};

proto.getCellElements = function() {
  return this.cells.map( function( cell ) {
    return cell.element;
  });
};

return Slide;

}));

},{}],16:[function(require,module,exports){
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */

/* jshint browser: true, strict: true, undef: true, unused: true */
/* globals console: false */

( function( window, factory ) {
  /* jshint strict: false */ /* globals define, module */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( factory );
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory();
  } else {
    // browser global
    window.getSize = factory();
  }

})( window, function factory() {
'use strict';

// -------------------------- helpers -------------------------- //

// get a number from a string, not a percentage
function getStyleSize( value ) {
  var num = parseFloat( value );
  // not a percent like '100%', and a number
  var isValid = value.indexOf('%') == -1 && !isNaN( num );
  return isValid && num;
}

function noop() {}

var logError = typeof console == 'undefined' ? noop :
  function( message ) {
    console.error( message );
  };

// -------------------------- measurements -------------------------- //

var measurements = [
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'paddingBottom',
  'marginLeft',
  'marginRight',
  'marginTop',
  'marginBottom',
  'borderLeftWidth',
  'borderRightWidth',
  'borderTopWidth',
  'borderBottomWidth'
];

var measurementsLength = measurements.length;

function getZeroSize() {
  var size = {
    width: 0,
    height: 0,
    innerWidth: 0,
    innerHeight: 0,
    outerWidth: 0,
    outerHeight: 0
  };
  for ( var i=0; i < measurementsLength; i++ ) {
    var measurement = measurements[i];
    size[ measurement ] = 0;
  }
  return size;
}

// -------------------------- getStyle -------------------------- //

/**
 * getStyle, get style of element, check for Firefox bug
 * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */
function getStyle( elem ) {
  var style = getComputedStyle( elem );
  if ( !style ) {
    logError( 'Style returned ' + style +
      '. Are you running this code in a hidden iframe on Firefox? ' +
      'See https://bit.ly/getsizebug1' );
  }
  return style;
}

// -------------------------- setup -------------------------- //

var isSetup = false;

var isBoxSizeOuter;

/**
 * setup
 * check isBoxSizerOuter
 * do on first getSize() rather than on page load for Firefox bug
 */
function setup() {
  // setup once
  if ( isSetup ) {
    return;
  }
  isSetup = true;

  // -------------------------- box sizing -------------------------- //

  /**
   * Chrome & Safari measure the outer-width on style.width on border-box elems
   * IE11 & Firefox<29 measures the inner-width
   */
  var div = document.createElement('div');
  div.style.width = '200px';
  div.style.padding = '1px 2px 3px 4px';
  div.style.borderStyle = 'solid';
  div.style.borderWidth = '1px 2px 3px 4px';
  div.style.boxSizing = 'border-box';

  var body = document.body || document.documentElement;
  body.appendChild( div );
  var style = getStyle( div );
  // round value for browser zoom. desandro/masonry#928
  isBoxSizeOuter = Math.round( getStyleSize( style.width ) ) == 200;
  getSize.isBoxSizeOuter = isBoxSizeOuter;

  body.removeChild( div );
}

// -------------------------- getSize -------------------------- //

function getSize( elem ) {
  setup();

  // use querySeletor if elem is string
  if ( typeof elem == 'string' ) {
    elem = document.querySelector( elem );
  }

  // do not proceed on non-objects
  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {
    return;
  }

  var style = getStyle( elem );

  // if hidden, everything is 0
  if ( style.display == 'none' ) {
    return getZeroSize();
  }

  var size = {};
  size.width = elem.offsetWidth;
  size.height = elem.offsetHeight;

  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';

  // get all measurements
  for ( var i=0; i < measurementsLength; i++ ) {
    var measurement = measurements[i];
    var value = style[ measurement ];
    var num = parseFloat( value );
    // any 'auto', 'medium' value will be 0
    size[ measurement ] = !isNaN( num ) ? num : 0;
  }

  var paddingWidth = size.paddingLeft + size.paddingRight;
  var paddingHeight = size.paddingTop + size.paddingBottom;
  var marginWidth = size.marginLeft + size.marginRight;
  var marginHeight = size.marginTop + size.marginBottom;
  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
  var borderHeight = size.borderTopWidth + size.borderBottomWidth;

  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;

  // overwrite width and height if we can get it from style
  var styleWidth = getStyleSize( style.width );
  if ( styleWidth !== false ) {
    size.width = styleWidth +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
  }

  var styleHeight = getStyleSize( style.height );
  if ( styleHeight !== false ) {
    size.height = styleHeight +
      // add padding and border unless it's already including it
      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
  }

  size.innerWidth = size.width - ( paddingWidth + borderWidth );
  size.innerHeight = size.height - ( paddingHeight + borderHeight );

  size.outerWidth = size.width + marginWidth;
  size.outerHeight = size.height + marginHeight;

  return size;
}

return getSize;

});

},{}],17:[function(require,module,exports){
/*!
 * Unidragger v2.3.1
 * Draggable base class
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

( function( window, factory ) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'unipointer/unipointer'
    ], function( Unipointer ) {
      return factory( window, Unipointer );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('unipointer')
    );
  } else {
    // browser global
    window.Unidragger = factory(
      window,
      window.Unipointer
    );
  }

}( window, function factory( window, Unipointer ) {

'use strict';

// -------------------------- Unidragger -------------------------- //

function Unidragger() {}

// inherit Unipointer & EvEmitter
var proto = Unidragger.prototype = Object.create( Unipointer.prototype );

// ----- bind start ----- //

proto.bindHandles = function() {
  this._bindHandles( true );
};

proto.unbindHandles = function() {
  this._bindHandles( false );
};

/**
 * Add or remove start event
 * @param {Boolean} isAdd
 */
proto._bindHandles = function( isAdd ) {
  // munge isAdd, default to true
  isAdd = isAdd === undefined ? true : isAdd;
  // bind each handle
  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';
  var touchAction = isAdd ? this._touchActionValue : '';
  for ( var i=0; i < this.handles.length; i++ ) {
    var handle = this.handles[i];
    this._bindStartEvent( handle, isAdd );
    handle[ bindMethod ]( 'click', this );
    // touch-action: none to override browser touch gestures. metafizzy/flickity#540
    if ( window.PointerEvent ) {
      handle.style.touchAction = touchAction;
    }
  }
};

// prototype so it can be overwriteable by Flickity
proto._touchActionValue = 'none';

// ----- start event ----- //

/**
 * pointer start
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerDown = function( event, pointer ) {
  var isOkay = this.okayPointerDown( event );
  if ( !isOkay ) {
    return;
  }
  // track start event position
  // Safari 9 overrides pageX and pageY. These values needs to be copied. flickity#842
  this.pointerDownPointer = {
    pageX: pointer.pageX,
    pageY: pointer.pageY,
  };

  event.preventDefault();
  this.pointerDownBlur();
  // bind move and end events
  this._bindPostStartEvents( event );
  this.emitEvent( 'pointerDown', [ event, pointer ] );
};

// nodes that have text fields
var cursorNodes = {
  TEXTAREA: true,
  INPUT: true,
  SELECT: true,
  OPTION: true,
};

// input types that do not have text fields
var clickTypes = {
  radio: true,
  checkbox: true,
  button: true,
  submit: true,
  image: true,
  file: true,
};

// dismiss inputs with text fields. flickity#403, flickity#404
proto.okayPointerDown = function( event ) {
  var isCursorNode = cursorNodes[ event.target.nodeName ];
  var isClickType = clickTypes[ event.target.type ];
  var isOkay = !isCursorNode || isClickType;
  if ( !isOkay ) {
    this._pointerReset();
  }
  return isOkay;
};

// kludge to blur previously focused input
proto.pointerDownBlur = function() {
  var focused = document.activeElement;
  // do not blur body for IE10, metafizzy/flickity#117
  var canBlur = focused && focused.blur && focused != document.body;
  if ( canBlur ) {
    focused.blur();
  }
};

// ----- move event ----- //

/**
 * drag move
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerMove = function( event, pointer ) {
  var moveVector = this._dragPointerMove( event, pointer );
  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );
  this._dragMove( event, pointer, moveVector );
};

// base pointer move logic
proto._dragPointerMove = function( event, pointer ) {
  var moveVector = {
    x: pointer.pageX - this.pointerDownPointer.pageX,
    y: pointer.pageY - this.pointerDownPointer.pageY
  };
  // start drag if pointer has moved far enough to start drag
  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {
    this._dragStart( event, pointer );
  }
  return moveVector;
};

// condition if pointer has moved far enough to start drag
proto.hasDragStarted = function( moveVector ) {
  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;
};

// ----- end event ----- //

/**
 * pointer up
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerUp = function( event, pointer ) {
  this.emitEvent( 'pointerUp', [ event, pointer ] );
  this._dragPointerUp( event, pointer );
};

proto._dragPointerUp = function( event, pointer ) {
  if ( this.isDragging ) {
    this._dragEnd( event, pointer );
  } else {
    // pointer didn't move enough for drag to start
    this._staticClick( event, pointer );
  }
};

// -------------------------- drag -------------------------- //

// dragStart
proto._dragStart = function( event, pointer ) {
  this.isDragging = true;
  // prevent clicks
  this.isPreventingClicks = true;
  this.dragStart( event, pointer );
};

proto.dragStart = function( event, pointer ) {
  this.emitEvent( 'dragStart', [ event, pointer ] );
};

// dragMove
proto._dragMove = function( event, pointer, moveVector ) {
  // do not drag if not dragging yet
  if ( !this.isDragging ) {
    return;
  }

  this.dragMove( event, pointer, moveVector );
};

proto.dragMove = function( event, pointer, moveVector ) {
  event.preventDefault();
  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );
};

// dragEnd
proto._dragEnd = function( event, pointer ) {
  // set flags
  this.isDragging = false;
  // re-enable clicking async
  setTimeout( function() {
    delete this.isPreventingClicks;
  }.bind( this ) );

  this.dragEnd( event, pointer );
};

proto.dragEnd = function( event, pointer ) {
  this.emitEvent( 'dragEnd', [ event, pointer ] );
};

// ----- onclick ----- //

// handle all clicks and prevent clicks when dragging
proto.onclick = function( event ) {
  if ( this.isPreventingClicks ) {
    event.preventDefault();
  }
};

// ----- staticClick ----- //

// triggered after pointer down & up with no/tiny movement
proto._staticClick = function( event, pointer ) {
  // ignore emulated mouse up clicks
  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {
    return;
  }

  this.staticClick( event, pointer );

  // set flag for emulated clicks 300ms after touchend
  if ( event.type != 'mouseup' ) {
    this.isIgnoringMouseUp = true;
    // reset flag after 300ms
    setTimeout( function() {
      delete this.isIgnoringMouseUp;
    }.bind( this ), 400 );
  }
};

proto.staticClick = function( event, pointer ) {
  this.emitEvent( 'staticClick', [ event, pointer ] );
};

// ----- utils ----- //

Unidragger.getPointerPoint = Unipointer.getPointerPoint;

// -----  ----- //

return Unidragger;

}));

},{"unipointer":18}],18:[function(require,module,exports){
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */

/*jshint browser: true, undef: true, unused: true, strict: true */

( function( window, factory ) {
  // universal module definition
  /* jshint strict: false */ /*global define, module, require */
  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'ev-emitter/ev-emitter'
    ], function( EvEmitter ) {
      return factory( window, EvEmitter );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('ev-emitter')
    );
  } else {
    // browser global
    window.Unipointer = factory(
      window,
      window.EvEmitter
    );
  }

}( window, function factory( window, EvEmitter ) {

'use strict';

function noop() {}

function Unipointer() {}

// inherit EvEmitter
var proto = Unipointer.prototype = Object.create( EvEmitter.prototype );

proto.bindStartEvent = function( elem ) {
  this._bindStartEvent( elem, true );
};

proto.unbindStartEvent = function( elem ) {
  this._bindStartEvent( elem, false );
};

/**
 * Add or remove start event
 * @param {Boolean} isAdd - remove if falsey
 */
proto._bindStartEvent = function( elem, isAdd ) {
  // munge isAdd, default to true
  isAdd = isAdd === undefined ? true : isAdd;
  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';

  // default to mouse events
  var startEvent = 'mousedown';
  if ( window.PointerEvent ) {
    // Pointer Events
    startEvent = 'pointerdown';
  } else if ( 'ontouchstart' in window ) {
    // Touch Events. iOS Safari
    startEvent = 'touchstart';
  }
  elem[ bindMethod ]( startEvent, this );
};

// trigger handler methods for events
proto.handleEvent = function( event ) {
  var method = 'on' + event.type;
  if ( this[ method ] ) {
    this[ method ]( event );
  }
};

// returns the touch that we're keeping track of
proto.getTouch = function( touches ) {
  for ( var i=0; i < touches.length; i++ ) {
    var touch = touches[i];
    if ( touch.identifier == this.pointerIdentifier ) {
      return touch;
    }
  }
};

// ----- start event ----- //

proto.onmousedown = function( event ) {
  // dismiss clicks from right or middle buttons
  var button = event.button;
  if ( button && ( button !== 0 && button !== 1 ) ) {
    return;
  }
  this._pointerDown( event, event );
};

proto.ontouchstart = function( event ) {
  this._pointerDown( event, event.changedTouches[0] );
};

proto.onpointerdown = function( event ) {
  this._pointerDown( event, event );
};

/**
 * pointer start
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto._pointerDown = function( event, pointer ) {
  // dismiss right click and other pointers
  // button = 0 is okay, 1-4 not
  if ( event.button || this.isPointerDown ) {
    return;
  }

  this.isPointerDown = true;
  // save pointer identifier to match up touch events
  this.pointerIdentifier = pointer.pointerId !== undefined ?
    // pointerId for pointer events, touch.indentifier for touch events
    pointer.pointerId : pointer.identifier;

  this.pointerDown( event, pointer );
};

proto.pointerDown = function( event, pointer ) {
  this._bindPostStartEvents( event );
  this.emitEvent( 'pointerDown', [ event, pointer ] );
};

// hash of events to be bound after start event
var postStartEvents = {
  mousedown: [ 'mousemove', 'mouseup' ],
  touchstart: [ 'touchmove', 'touchend', 'touchcancel' ],
  pointerdown: [ 'pointermove', 'pointerup', 'pointercancel' ],
};

proto._bindPostStartEvents = function( event ) {
  if ( !event ) {
    return;
  }
  // get proper events to match start event
  var events = postStartEvents[ event.type ];
  // bind events to node
  events.forEach( function( eventName ) {
    window.addEventListener( eventName, this );
  }, this );
  // save these arguments
  this._boundPointerEvents = events;
};

proto._unbindPostStartEvents = function() {
  // check for _boundEvents, in case dragEnd triggered twice (old IE8 bug)
  if ( !this._boundPointerEvents ) {
    return;
  }
  this._boundPointerEvents.forEach( function( eventName ) {
    window.removeEventListener( eventName, this );
  }, this );

  delete this._boundPointerEvents;
};

// ----- move event ----- //

proto.onmousemove = function( event ) {
  this._pointerMove( event, event );
};

proto.onpointermove = function( event ) {
  if ( event.pointerId == this.pointerIdentifier ) {
    this._pointerMove( event, event );
  }
};

proto.ontouchmove = function( event ) {
  var touch = this.getTouch( event.changedTouches );
  if ( touch ) {
    this._pointerMove( event, touch );
  }
};

/**
 * pointer move
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */
proto._pointerMove = function( event, pointer ) {
  this.pointerMove( event, pointer );
};

// public
proto.pointerMove = function( event, pointer ) {
  this.emitEvent( 'pointerMove', [ event, pointer ] );
};

// ----- end event ----- //


proto.onmouseup = function( event ) {
  this._pointerUp( event, event );
};

proto.onpointerup = function( event ) {
  if ( event.pointerId == this.pointerIdentifier ) {
    this._pointerUp( event, event );
  }
};

proto.ontouchend = function( event ) {
  var touch = this.getTouch( event.changedTouches );
  if ( touch ) {
    this._pointerUp( event, touch );
  }
};

/**
 * pointer up
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */
proto._pointerUp = function( event, pointer ) {
  this._pointerDone();
  this.pointerUp( event, pointer );
};

// public
proto.pointerUp = function( event, pointer ) {
  this.emitEvent( 'pointerUp', [ event, pointer ] );
};

// ----- pointer done ----- //

// triggered on pointer up & pointer cancel
proto._pointerDone = function() {
  this._pointerReset();
  this._unbindPostStartEvents();
  this.pointerDone();
};

proto._pointerReset = function() {
  // reset properties
  this.isPointerDown = false;
  delete this.pointerIdentifier;
};

proto.pointerDone = noop;

// ----- pointer cancel ----- //

proto.onpointercancel = function( event ) {
  if ( event.pointerId == this.pointerIdentifier ) {
    this._pointerCancel( event, event );
  }
};

proto.ontouchcancel = function( event ) {
  var touch = this.getTouch( event.changedTouches );
  if ( touch ) {
    this._pointerCancel( event, touch );
  }
};

/**
 * pointer cancel
 * @param {Event} event
 * @param {Event or Touch} pointer
 * @private
 */
proto._pointerCancel = function( event, pointer ) {
  this._pointerDone();
  this.pointerCancel( event, pointer );
};

// public
proto.pointerCancel = function( event, pointer ) {
  this.emitEvent( 'pointerCancel', [ event, pointer ] );
};

// -----  ----- //

// utility function for getting x/y coords from event
Unipointer.getPointerPoint = function( pointer ) {
  return {
    x: pointer.pageX,
    y: pointer.pageY
  };
};

// -----  ----- //

return Unipointer;

}));

},{"ev-emitter":3}],19:[function(require,module,exports){
"use strict";

(function () {
  var Flickity = require('flickity'),
      Carousels;

  Carousels = {
    init: function init() {
      Carousels.initialiseCarousel();
    },
    initialiseCarousel: function initialiseCarousel() {
      var carousels = document.querySelectorAll('.JS--carousel');
      carousels.forEach(function (carousel) {
        var settings = {
          cellAlign: 'center',
          wrapAround: true,
          autoPlay: false,
          imagesLoaded: true,
          pageDots: false
        };
        var slides = carousel.querySelectorAll('.JS--carousel__slideWrap');

        if (carousel.dataset.plotCarouselType == 'image') {
          settings = {
            cellAlign: 'center',
            lazyLoad: 2,
            wrapAround: true,
            pageDots: false
          };
        }

        if (slides.length > 1) {
          var flkty = new Flickity(carousel, settings);
        }
      });
    }
  };
  module.exports = Carousels;
})();

},{"flickity":10}],20:[function(require,module,exports){
"use strict";

(function () {
  var FAQs;
  FAQs = {
    sections: document.querySelectorAll('.faqs'),
    init: function init() {
      if (!FAQs.sections) return;
      FAQs.sections.forEach(function (section) {
        return FAQs.initialiseListeners(section);
      });
    },
    initialiseListeners: function initialiseListeners(section) {
      var faqs = section.querySelectorAll('.faq');
      faqs.forEach(function (faq) {
        var question = faq.querySelector('.faq__question');
        var answer = faq.querySelector('.faq__answer');
        question.addEventListener('click', function () {
          faq.classList.toggle('faq--open');

          if (faq.classList.contains('faq--open')) {
            answer.style.maxHeight = answer.scrollHeight + 'px';
          } else {
            answer.style.maxHeight = 0;
          }
        });
      });
    }
  };
  module.exports = FAQs;
})();

},{}],21:[function(require,module,exports){
"use strict";

// LazyLoad for Plot by Jon Mills, Matty Glen & Michael Watson
// This module loads in images asyncronously. It will look for the class
// "JS--lazyLoad" and then look for a data-src on image or video tags. 
// It will then replace the src of that element with the image linked on
// the data attribute.
// If the element is not an image or a video- it will assign the data-src
// as a background image. 
// If the screen size is less than the defined mobileBreakpoint, we load
// the src from data-small-src instead. 
// Creation of these video and image objects can be made using the PHP
// helper in lib/helpers.php plotLazyLoad()
// If we need to stipulate the height of an image before it loads, to avoid
// any jumpiness, we can pass through a ratio (w/h) of the image so it's
// set before the image loads.
// We also handle autoplaying videos, if the video has an autoplay attribute.
// It will pause and play videos appropriately depending on if they're in
// view or not.
(function () {
  var LazyLoad;
  LazyLoad = {
    mobileBreakpoint: 640,
    images: document.querySelectorAll('.JS--lazyLoad'),
    config: {
      rootMargin: '0px',
      threshold: 0.01
    },
    observer: null,
    init: function init() {
      LazyLoad.observer = new IntersectionObserver(LazyLoad.handleImageLoad, LazyLoad.config);
      LazyLoad.loadImages();
    },
    loadImages: function loadImages() {
      LazyLoad.images.forEach(function (image) {
        LazyLoad.observer.observe(image);
      });
    },
    addElements: function addElements(elements) {
      return new Promise(function (resolve, reject) {
        elements.forEach(function (image) {
          LazyLoad.observer.observe(image);
        });
        resolve();
      });
    },
    handleImageLoad: function handleImageLoad(entries) {
      entries.forEach(function (entry) {
        var element = entry.target;

        if (!element.classList.contains('loaded') && !element.classList.contains('loading')) {
          if (!entry.isIntersecting) return;
          element.classList.add('loading');
          var tag = entry.isIntersecting && element.tagName;
          var src = element.dataset.src;

          if (LazyLoad.isSmallScreen() && element.dataset.smallSrc) {
            src = element.dataset.smallSrc;
          }

          if (tag == "VIDEO") {
            if (LazyLoad.isSmallScreen() && element.dataset.smallSrc) {
              element.src = element.dataset.smallSrc;
            } else {
              element.src = element.dataset.src;
              if (element.getAttribute('autoplay')) element.play();
            }

            element.classList.add('loaded');
          } else {
            LazyLoad.getImage(src, element).then(function (data) {
              var tag = element.tagName;

              if (tag == "IMG") {
                data.element.src = data.src;
              } else {
                data.element.style.backgroundImage = 'url(' + data.src + ')';
              }

              data.element.classList.add('loaded');
              data.element.classList.remove('loading');
            })["catch"](function (erroredSrc) {
              console.log(erroredSrc, 'image not found');
            });
          }
        } else {
          if (element.tagName == "VIDEO") if (element.getAttribute('autoplay')) if (!entry.isIntersecting && element.paused == false) element.pause();else element.play();
        }
      });
    },
    getImage: function getImage(src, element) {
      return new Promise(function (resolve, reject) {
        var img = new Image();

        img.onload = function () {
          resolve({
            src: src,
            element: element
          });
        };

        img.onerror = function () {
          reject({
            src: src,
            element: element
          });
        };

        img.src = src;
      });
    },
    isSmallScreen: function isSmallScreen() {
      if (window.innerWidth < LazyLoad.mobileBreakpoint) return true;
      return false;
    }
  };
  module.exports = LazyLoad;
})();

},{}],22:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Modals for Plot by Michael Watson
// A simple modals solution that looks for the class "JS--plotModalButton"
// And when clicked, reads the value set on data-plot-modal. it then looks
// for an HTML element called ".JS--plotModalContents" with a corresponding value.
// For example, <a class="JS--plotModalButton" data-plot-modal="1">Click me</a>
// Will find the following element:
// <div class="JS--plotModalContents">I am some modal content!</div>
// And will take the innerHTML to put inside a modal on the screen.
// Galleries can be created by connecting multiple Plot Modal Buttons
// by giving them a data-plot-modal-group option.
// They will then have working left and right arrows to navigate through
// Contents in a loop.
(function () {
  var LazyLoad = require('./lazyload'),
      Plot = require('./plot'),
      BodyScrollLock = require('body-scroll-lock'),
      Modals;

  Modals = {
    currentGroupItem: 0,
    groupLinks: [],
    currentModalId: null,
    isOpen: false,
    isLoading: false,
    controlsTimer: false,
    modalContent: document.querySelector('.JS--plotModalReplaceContents'),
    modalGroupControls: document.querySelector('.JS--plotModalControls'),
    modalGroupNext: document.querySelector('.JS--plotModalControls__next'),
    modalGroupBack: document.querySelector('.JS--plotModalControls__back'),
    plotModal: document.querySelector('.JS--plotModal'),
    init: function init() {
      Modals.createListeners();
      Modals.checkForModalNotification();
    },
    createListeners: function createListeners() {
      var closeButtons = document.querySelectorAll('.JS--closePlotModal');

      var _iterator = _createForOfIteratorHelper(closeButtons),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var closeButton = _step.value;
          closeButton.addEventListener('click', function (e) {
            if (e.target !== this) return;
            Modals.closePlotModal();
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      Modals.plotModal.addEventListener('mousemove', function () {
        if (Modals.currentModalId && !Plot.isTouchDevice()) {
          if (Modals.controlsTimer) clearTimeout(Modals.controlsTimer);
          if (Modals.plotModal.classList.contains('hideControls')) Modals.plotModal.classList.remove('hideControls');
          Modals.controlsTimer = setTimeout(function () {
            Modals.plotModal.classList.add('hideControls');
          }, 2200);
        }
      });
      document.querySelector('.siteWrap').addEventListener('click', function (e) {
        if (e.target.closest('[data-plot-modal]')) {
          e.preventDefault();
          Modals.openPlotModal(e.target.closest('[data-plot-modal]'));
        }
      });

      if (Modals.modalGroupBack) {
        Modals.modalGroupBack.addEventListener('click', Modals.triggerBackGroupItem);
      }

      if (Modals.modalGroupNext) {
        Modals.modalGroupNext.addEventListener('click', Modals.triggerNextGroupItem);
      }

      document.addEventListener('keydown', function (e) {
        if (e.which == 39 && Modals.groupLinks.length > 0) {
          Modals.triggerNextGroupItem();
        }

        if (e.which == 37 && Modals.groupLinks.length > 0) {
          Modals.triggerBackGroupItem();
        }

        if (Modals.isOpen && e.which == 27) {
          Modals.closePlotModal();
        }
      });
    },
    checkForModalNotification: function checkForModalNotification() {
      var notificationTrigger = document.querySelector('.JS--fakeButtonForModalNotifications');

      if (notificationTrigger) {
        if (sessionStorage.getItem('plotHasNotificationFired') !== "1") {
          sessionStorage.setItem('plotHasNotificationFired', '1');
          setTimeout(function () {
            Modals.openPlotModal(notificationTrigger);
          }, notificationTrigger.dataset.plotNotificationWait * 1000);
        }
      }
    },
    triggerBackGroupItem: function triggerBackGroupItem() {
      Modals.currentGroupItem--;

      if (Modals.currentGroupItem < 0) {
        Modals.currentGroupItem = Modals.groupLinks.length - 1;
      }

      Modals.openPlotModal(Modals.groupLinks[Modals.currentGroupItem]);
    },
    triggerNextGroupItem: function triggerNextGroupItem() {
      Modals.currentGroupItem++;

      if (Modals.currentGroupItem == Modals.groupLinks.length) {
        Modals.currentGroupItem = 0;
      }

      Modals.openPlotModal(Modals.groupLinks[Modals.currentGroupItem]);
    },
    openPlotModal: function openPlotModal(element) {
      if (Modals.isLoading == true) return false;
      var settings = {
        type: 'inline',
        // (inline|ajax) if the content is already in the dom or not
        groupId: '',
        //The optional ID of the group of modals used for gallery views
        contentsId: '',
        //The ID that references where, on the page, the content to use lives
        templatePart: '',
        //The template part to load, if AJAX
        ajaxData: {},
        //Data to send via AJAX
        modalClass: '' //A custom class to add to our modal

      };
      Modals.isLoading = true;

      if (element.dataset.plotModalType == 'ajax') {
        settings.type = 'ajax';
      }

      settings.contentsId = element.dataset.plotModalContents;
      settings.groupId = element.dataset.plotModalGroup;
      settings.templatePart = element.dataset.plotModalTemplatePart;
      settings.modalClass = element.dataset.plotModalClass;

      if (!settings.contentsId && settings.type == 'inline') {
        console.log('Inline Modals need a plot-modal-contents variable added');
        return false;
      }

      if (settings.type == 'ajax' && !settings.templatePart) {
        console.log('Ajax modals need a plot-modal-template-part variable added');
        return false;
      } //Check to see if it's part of a group


      if (Modals.groupLinks.length == 0 && settings.groupId) Modals.initialiseGroup(element);
      if (!settings.groupId) Modals.modalGroupControls.classList.add('hidden');

      if (settings.modalClass) {
        Modals.plotModal.classList.add(settings.modalClass);
      }

      if (settings.type == 'inline') {
        Modals.currentModalId = settings.contentsId; //Find content to insert in our modal

        var plotModalContents = document.querySelector('.JS--plotModalContents[data-plot-modal-contents="' + Modals.currentModalId + '"]');
        if (!plotModalContents.length == 0) return false;
        plotModalContents = plotModalContents.innerHTML;
        Modals.putContentsIntoModal(plotModalContents);
      } else {
        //AJAX loading content
        var ajaxData = {};
        document.body.classList.add('plotModalLoadingAjax');

        for (var key in element.dataset) {
          if (key.substring(0, 13) == 'plotModalData') {
            ajaxData[key.charAt(13).toLowerCase() + key.substring(14)] = element.dataset[key];
          }
        }

        var args = {
          returnOrWrite: 'return',
          templatePart: settings.templatePart,
          data: ajaxData
        };
        Plot.loadTemplatePart(args).then(function (html) {
          Modals.putContentsIntoModal(html);
        });
      }
    },
    putContentsIntoModal: function putContentsIntoModal(contents) {
      Modals.modalContent.style.minHeight = Modals.modalContent.clientHeight + 'px';
      Modals.modalContent.innerHTML = contents;
      BodyScrollLock.disableBodyScroll(Modals.plotModal);
      document.body.classList.add('plotModalInView');
      var newImages = Modals.modalContent.querySelectorAll('img');
      LazyLoad.addElements(newImages).then(function () {
        setTimeout(function () {
          Modals.modalContent.style.minHeight = 0;
        }, 50);
      });
      var newVideos = Modals.modalContent.querySelectorAll('video');
      newVideos.forEach(function (video) {
        var player = new MediaElementPlayer(video);
        player.play();
      });
      Modals.isOpen = true;
      Modals.isLoading = false;
      document.body.classList.remove('plotModalLoadingAjax');
    },
    initialiseGroup: function initialiseGroup(element) {
      Modals.groupLinks = document.querySelectorAll('[data-plot-modal-group="' + element.dataset.plotModalGroup + '"]');
      var i = 0;

      var _iterator2 = _createForOfIteratorHelper(Modals.groupLinks),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var groupLink = _step2.value;
          if (element == groupLink) Modals.currentGroupItem = i;
          i++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      if (Modals.currentModalId && !Plot.isTouchDevice()) Modals.controlsTimer = setTimeout(function () {
        Modals.plotModal.classList.add('hideControls');
      }, 3000);
      Modals.modalGroupControls.classList.remove('hidden');
    },
    closePlotModal: function closePlotModal() {
      document.body.classList.remove('plotModalInView');
      Modals.currentModalId = null;
      Modals.plotModal.classList = 'JS--plotModal plotModal';
      Modals.groupLinks = [];
      Modals.currentGroupItem = 0;
      Modals.modalContent.innerHTML = '';
      BodyScrollLock.enableBodyScroll(Modals.plotModal);
      Modals.isOpen = false;
    }
  };
  module.exports = Modals;
})();

},{"./lazyload":21,"./plot":24,"body-scroll-lock":1}],23:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var Smooth;
  Smooth = {
    trackedElementsObserver: null,
    standardScrollFramesObserver: null,
    mainScrollAnimationFrame: null,
    currentPosition: 0,
    mutationObserverDebounce: null,
    onScrollCallbackThrottler: null,
    ease: 0.07,
    lastPosition: 0,
    onScroll: null,
    standardScroll: false,
    scrollElements: [],
    topBarHeight: 0,
    scrollFrames: [],
    ticking: false,
    dom: {
      scrollWindow: document.querySelector('[data-plot-smooth-scroll]'),
      scrollFrames: document.querySelectorAll('[data-plot-smooth-scroll-frame]'),
      scrollElements: document.querySelectorAll('[data-plot-smooth-scroll-element]'),
      topBar: document.querySelector('[data-plot-smooth-scroll-topbar')
    },
    windowHeight: window.innerHeight,
    windowWidth: window.innerWidth,
    init: function init(settings) {
      //override any default settings with passed parameters
      Smooth.setSettings(settings);

      if (!Smooth.standardScroll) {
        //Set our current and last positions 
        //to the current scroll Y position, in case
        //we are scrolled down the page on load
        Smooth.currentPosition = window.scrollY;
        Smooth.lastPosition = window.scrollY; //Put fixed onto the whole site ready to 
        //intercept scrolling

        Smooth.setStyles();
        window.addEventListener('resize', Smooth.refresh, {
          passive: true
        });
        window.addEventListener('scroll', Smooth.scroll, {
          passive: true
        }); //Read through each scroll frame and set data
        //into a single array for processing later
        //{
        //      element           : element,      (the dom element)
        //      top               : 100,          (the offset top value without transforms, in pixels)
        //      height            : 300,          (the height of the element without transforms, in pixels)
        //      bottom            : 400,          (the offset bottom position value without transforms, in pixels)
        //      sticky            : false,        (if the element should behave like CSS sticky or not)
        //      parentBottom      : false || 500  (if the element is sticky, return the bottom position of its parent in pixels (when it should unstick))
        //  }

        Smooth.setScrollFrameData();
      } //If any scroll elements exist, we can add them and monitor them


      if (Smooth.dom.scrollElements) {
        //Read through each scroll element and set data
        //into a single array for processing later
        //{
        //      element         : element,          (the dom element)
        //      top             : 100,              (the offset top value without transforms, in pixels)
        //      height          : 300,              (the height of the element without transforms, in pixels)
        //      bottom          : 400,              (the offset bottom position value without transforms, in pixels)
        //      isVisible       : false,            (if the element is currently in the window frame or not)
        //      initialOffset   : .2,               (how far away this element is from the initial center of the screen)
        //      currentPosition : 0                 (how far up the viewport this element currently is (between -1 and 1))
        //      callback        : 'function.name'   (the name of a function you can call when this moves within view)
        // }
        Smooth.trackedElementsObserver = new IntersectionObserver(Smooth.trackVisibleElements, {
          rootMargin: '200px',
          threshold: 0.01
        });
        Smooth.setScrollElementData();
      } //Set up a mutation observer to listen out for changes in height,
      //to adjust our height of document accordingly


      Smooth.initMutationObserver(); //If there's a fixed topbar on this site, we can set the height
      //here, in order to offset any sticky positions. 

      Smooth.setTopBarHeight(); //If it's not standard scroll, set our initial scroll frame positions

      if (!Smooth.standardScroll) {
        Smooth.setPositionOfFrames();
      } else {
        Smooth.standardScrollFramesObserver = new IntersectionObserver(Smooth.trackStandardScrollFrames, {
          rootMargin: '0px',
          threshold: 0.01
        });

        var _iterator = _createForOfIteratorHelper(Smooth.dom.scrollFrames),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var frame = _step.value;
            Smooth.standardScrollFramesObserver.observe(frame);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } //Set our position of any scroll elements


      Smooth.positionScrollElements();
    },
    setSettings: function setSettings(settings) {
      if (!settings) return true;
      if (typeof settings.onScroll == 'function') Smooth.onScroll = settings.onScroll;
      if (settings.standardScroll == true) Smooth.standardScroll = true;
      if (settings.ease) Smooth.ease = settings.ease;
    },
    retriggerWindowSizeOnMutate: function retriggerWindowSizeOnMutate(mutationsList, observer) {
      if (!Smooth.mutationObserverDebounce) {
        Smooth.mutationObserverDebounce = setTimeout(function () {
          var changed = false;
          Smooth.scrollFrames.forEach(function (frame) {
            if (frame.height != frame.element.clientHeight) changed = true;
          });
          if (changed == true) Smooth.refresh();
          clearTimeout(Smooth.mutationObserverDebounce);
          Smooth.mutationObserverDebounce = null;
        }, 200);
      }
    },
    initMutationObserver: function initMutationObserver() {
      var _iterator2 = _createForOfIteratorHelper(Smooth.dom.scrollFrames),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var scrollFrame = _step2.value;
          var observer = new MutationObserver(Smooth.retriggerWindowSizeOnMutate);
          observer.observe(scrollFrame, {
            childList: true,
            attributes: true,
            subtree: true
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    destroy: function destroy() {
      Smooth.scrollElements.forEach(function (entry) {
        entry.element.removeAttribute('style');
      });
      Smooth.scrollFrames.forEach(function (entry) {
        entry.element.removeAttribute('style');
      });
      Smooth.trackedElementsObserver = null;
      Smooth.mainScrollAnimationFrame = null;
      Smooth.currentPosition = 0;
      Smooth.mutationObserverDebounce = null;
      Smooth.onScrollCallbackThrottler = null;
      Smooth.ease = 0.07;
      Smooth.lastPosition = 0;
      Smooth.onScroll = null;
      Smooth.standardScroll = false;
      Smooth.scrollElements = [];
      Smooth.topBarHeight = 0;
      Smooth.scrollFrames = [];
      Smooth.ticking = false;
      Smooth.dom.scrollWindow.removeAttribute('style');
    },
    addElements: function addElements(elements) {
      return new Promise(function (resolve, reject) {
        elements.forEach(function (element) {
          Smooth.trackedElementsObserver.observe(element);
        });
        resolve();
      });
    },
    scrollTo: function scrollTo(element) {
      window.scrollTo(0, Smooth.exactPositionOfElement(element) - 100);

      if (Smooth.standardScroll != false) {
        Smooth.ticking = true;
        Smooth.mainScrollAnimationFrame = requestAnimationFrame(Smooth.run);
      }
    },
    setScrollElementData: function setScrollElementData() {
      Smooth.dom.scrollElements = document.querySelectorAll('[data-plot-smooth-scroll-element]');
      Smooth.addElements(Smooth.dom.scrollElements);
      if (!Smooth.dom.scrollElements) return false;
      Smooth.scrollElements = [];
      Smooth.dom.scrollElements.forEach(function (element, i) {
        var elementTop = Smooth.exactPositionOfElement(element);
        var height = element.clientHeight;
        var callback = false,
            fromValue = -1,
            toValue = 1; //Is anything set on this element as a callback?

        if (element.dataset.plotSmoothScrollElement) {
          var c = element.dataset.plotSmoothScrollElement; //First up - have values been passed to this callback in this form: callback(2,5)

          var values = c.substring(c.indexOf('(') + 1, c.indexOf(')'));
          values = values.split(','); //Valid if we have 2, and from is less that to value

          if (values.length == 2 && values[0] < values[1]) {
            fromValue = Number(values[0]);
            toValue = Number(values[1]);
          }

          var potentialFunction = window[c];

          if (typeof potentialFunction === "function") {
            callback = potentialFunction.replace(/\s*\(.*?\)\s*/g, '');
          } else {
            var callbackSplit = c.replace(/\s*\(.*?\)\s*/g, '').split('.');

            if (callbackSplit.length == 2) {
              potentialFunction = window[callbackSplit[0]][callbackSplit[1]];

              if (typeof potentialFunction === "function") {
                callback = potentialFunction;
              }
            }
          }
        }

        var initialOffset = 0;
        if (elementTop < Smooth.windowHeight) initialOffset = (elementTop + height) / (Smooth.windowHeight + height) * (toValue - fromValue) + fromValue;
        Smooth.scrollElements[i] = {
          element: element,
          top: elementTop,
          height: height,
          bottom: elementTop + element.clientHeight,
          isVisible: elementTop < Smooth.currentPosition + Smooth.windowHeight && elementTop + height > Smooth.currentPosition,
          initialOffset: initialOffset,
          callback: callback,
          fromValue: fromValue,
          toValue: toValue,
          currentPosition: 0
        };
        element.dataset.plotSmoothScrollElementId = i;
      });
    },
    setTopBarHeight: function setTopBarHeight() {
      if (Smooth.dom.topBar) Smooth.topBarHeight = Smooth.dom.topBar.clientHeight;
    },
    setScrollFrameData: function setScrollFrameData() {
      Smooth.dom.scrollFrames = document.querySelectorAll('[data-plot-smooth-scroll-frame]');
      Smooth.scrollFrames = [];
      var newHeight = 0;
      Smooth.dom.scrollFrames.forEach(function (element) {
        var elementTop = Smooth.exactPositionOfElement(element);
        Smooth.scrollFrames.push({
          element: element,
          top: elementTop,
          height: element.clientHeight,
          bottom: elementTop + element.clientHeight,
          sticky: typeof element.dataset.plotSmoothScrollSticky != 'undefined' ? true : false,
          parentBottom: element.parentElement ? Smooth.exactPositionOfElement(element.parentElement) + element.parentElement.getBoundingClientRect().height : false
        });
      });
      document.body.style.height = "".concat(Smooth.dom.scrollWindow.scrollHeight, "px");
    },
    trackVisibleElements: function trackVisibleElements(entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting && entry) {
          entry.target.classList.add('plotSmoothScrollInView', 'plotSmoothScrollSeenOnce');
        } else {
          entry.target.classList.remove('plotSmoothScrollInView');
        }

        if (Smooth.scrollElements[entry.target.dataset.plotSmoothScrollElementId]) Smooth.scrollElements[entry.target.dataset.plotSmoothScrollElementId].isVisible = entry.isIntersecting;
      });
    },
    trackStandardScrollFrames: function trackStandardScrollFrames(entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting && entry) {
          entry.target.classList.add('plotSmoothScrollFrameInView', 'plotSmoothScrollFrameSeenOnce');
        } else {
          entry.target.classList.remove('plotSmoothScrollFrameInView');
        }
      });
    },
    refresh: function refresh() {
      if (Smooth.standardScroll) return true;
      Smooth.windowHeight = window.innerHeight;
      Smooth.windowWidth = window.innerWidth;
      Smooth.setScrollElementData();
      Smooth.setScrollFrameData();
      Smooth.setTopBarHeight();
      Smooth.scroll();
    },
    run: function run() {
      Smooth.lastPosition = Smooth.lerp(Smooth.lastPosition, Smooth.currentPosition, Smooth.ease);
      if (Smooth.lastPosition < .1) Smooth.lastPosition = 0;
      var diff = Smooth.currentPosition - Smooth.lastPosition;

      if (Math.abs(diff) < 0.5) {
        Smooth.ticking = false;
        diff = 0;
      }

      var velocity = diff / Smooth.windowWidth;
      Smooth.setPositionOfFrames();
      Smooth.fireOnScrollEvent(velocity);
      Smooth.positionScrollElements();
      if (Smooth.ticking == true) Smooth.mainScrollAnimationFrame = requestAnimationFrame(Smooth.run);
    },
    positionScrollElements: function positionScrollElements() {
      Smooth.scrollElements.forEach(function (entry) {
        if (entry.isVisible == true && entry.callback) {
          var currentPosition = (entry.top - Smooth.lastPosition + entry.height) / (Smooth.windowHeight + entry.height) * (entry.toValue - entry.fromValue) + entry.fromValue - entry.initialOffset;

          if (entry.currentPosition != currentPosition) {
            entry.currentPosition = currentPosition;
            entry.callback(entry.element, currentPosition);
          }
        }
      });
    },
    fireOnScrollEvent: function fireOnScrollEvent(velocity) {
      if (typeof Smooth.onScroll == 'function') if (Smooth.onScrollCallbackThrottler === null) {
        Smooth.onScrollCallbackThrottler = setTimeout(function () {
          Smooth.onScroll(Smooth.dom.scrollFrames, velocity);
          Smooth.onScrollCallbackThrottler = null;
        }, 50);
      }
    },
    setPositionOfFrames: function setPositionOfFrames() {
      var _iterator3 = _createForOfIteratorHelper(Smooth.scrollFrames),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var scrollFrame = _step3.value;
          var windowScrollPosition = Smooth.lastPosition;

          if (scrollFrame.sticky && scrollFrame.parentBottom) {
            windowScrollPosition = Smooth.calcPositionOfStickyElement(scrollFrame, windowScrollPosition);
          }

          if (windowScrollPosition > scrollFrame.bottom || windowScrollPosition + Smooth.windowHeight < scrollFrame.top) {
            scrollFrame.element.classList.remove('plotSmoothScrollFrameInView');
          } else {
            scrollFrame.element.classList.add('plotSmoothScrollFrameInView', 'plotSmoothScrollFrameSeenOnce');
            scrollFrame.element.style.transform = "translate3d(0, -".concat(windowScrollPosition, "px, 0)");
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    },
    scroll: function scroll() {
      Smooth.currentPosition = window.scrollY;

      if (Smooth.ticking == false) {
        Smooth.ticking = true;
        Smooth.mainScrollAnimationFrame = requestAnimationFrame(Smooth.run);
      }
    },
    setStyles: function setStyles() {
      Object.assign(Smooth.dom.scrollWindow.style, {
        position: 'fixed',
        top: 0,
        left: 0,
        height: '100%',
        width: '100%',
        overflow: 'hidden'
      });
    },
    calcPositionOfStickyElement: function calcPositionOfStickyElement(entry, position) {
      //If the item is below the bottom of it's parent
      if (position + Smooth.topBarHeight >= entry.parentBottom) return position;

      if (entry.parentBottom - position - Smooth.topBarHeight <= entry.height) {
        return entry.top - entry.parentBottom + position + entry.height;
      }

      if (position + Smooth.topBarHeight > entry.top) return entry.top - Smooth.topBarHeight;
      return position;
    },
    lerp: function lerp(a, b, n) {
      return (1 - n) * a + n * b;
    },
    exactPositionOfElement: function exactPositionOfElement(element) {
      var el = element,
          offsetTop = 0;

      do {
        offsetTop += el.offsetTop;
        el = el.offsetParent;
      } while (el);

      return offsetTop;
    }
  };
  module.exports = Smooth;
})();

},{}],24:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var BodyScrollLock = require('body-scroll-lock'),
      LazyLoad = require('./lazyload'),
      SyncScroll = require('./syncscroll'),
      Plot;

  Plot = {
    init: function init() {
      Plot.createListeners();
      SyncScroll.init();
      Plot.animateBannerNotifications();
    },
    createListeners: function createListeners() {
      var burgerMenuTriggers = document.querySelectorAll('.JS--menuTrigger');

      if (burgerMenuTriggers.length > 0) {
        var _iterator = _createForOfIteratorHelper(burgerMenuTriggers),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var burgerMenuTrigger = _step.value;
            burgerMenuTrigger.addEventListener('click', Plot.toggleBurger);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var sideSwipes = document.querySelectorAll('.plotSideSwipes');

      if (sideSwipes.length > 0) {
        Plot.sideSwipes(sideSwipes);
      }
    },
    animateBannerNotifications: function animateBannerNotifications() {
      var banner = document.querySelector('.JS--bannerNotification');
      if (banner) if (banner.dataset.animationType == 'always') {
        Plot.buildBannerRepeatingText(banner);
        window.addEventListener('resize', function () {
          Plot.buildBannerRepeatingText(banner);
        });
      } else {
        Plot.checkToSeeIfWeNeedToAnimationBanner(banner);
        window.addEventListener('resize', function () {
          Plot.checkToSeeIfWeNeedToAnimationBanner(banner);
        });
      }
    },
    checkToSeeIfWeNeedToAnimationBanner: function checkToSeeIfWeNeedToAnimationBanner(banner) {
      banner.innerHTML = "<div>".concat(banner.dataset.message, "</div>");
      var div1 = banner.querySelector('div:nth-of-type(1)');
      var windowWidth = window.innerWidth;

      if (div1.scrollWidth > windowWidth) {
        banner.classList.add('withAnimation');
        Plot.buildBannerRepeatingText(banner);
      } else {
        banner.classList.remove('withAnimation');
      }
    },
    buildBannerRepeatingText: function buildBannerRepeatingText(banner) {
      banner.innerHTML = "<div>".concat(banner.dataset.message, "</div><div>").concat(banner.dataset.message, "</div>");
      var div1 = banner.querySelector('div:nth-of-type(1)');
      var div2 = banner.querySelector('div:nth-of-type(2)');
      var windowWidth = window.innerWidth;
      div1.style.animationDuration = windowWidth / 20 + "s";
      div2.style.animationDuration = windowWidth / 20 + "s";
      var i = 0;

      while (div1.scrollWidth < windowWidth && i < 100) {
        div1.innerHTML = div1.innerHTML + " ".concat(banner.dataset.message);
        div2.innerHTML = div2.innerHTML + " ".concat(banner.dataset.message);
        i++;
      }
    },
    sideSwipes: function sideSwipes(_sideSwipes) {
      var _iterator2 = _createForOfIteratorHelper(_sideSwipes),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var sideSwipe = _step2.value;

          if (parseInt(sideSwipe.getBoundingClientRect().width) + 1 < parseInt(sideSwipe.scrollWidth)) {}
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    toggleBurger: function toggleBurger() {
      var burgerMenu = document.querySelector('.JS--burgerMenu');

      if (!document.documentElement.classList.contains('burgerOpen')) {
        document.documentElement.classList.add('burgerOpen');
        BodyScrollLock.disableBodyScroll(burgerMenu);
      } else {
        document.documentElement.classList.remove('burgerOpen');
        BodyScrollLock.enableBodyScroll(burgerMenu);
      }
    },
    isPage: function isPage(slug) {
      return document.body.classList.contains('page-' + slug);
    },
    fixVh: function fixVh() {
      // First we get the viewport height and we multiple it by 1% to get a value for a vh unit
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
    },
    isTouchDevice: function isTouchDevice() {
      var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');

      var mq = function mq(query) {
        return window.matchMedia(query).matches;
      };

      if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {
        document.body.addClass('isTouchDevice');
        return true;
      }

      var query = ['(', prefixes.join('touch-enabled),('), 'plot', ')'].join('');
      return mq(query);
    },
    areWeAtTheTop: function areWeAtTheTop(scrollTop) {
      if (scrollTop > 0) {
        document.body.classList.add('scrolled');
      } else {
        document.body.classList.remove('scrolled');
      }
    },
    loadTemplatePart: function loadTemplatePart(args) {
      var defaults = {
        templatePart: null,
        action: 'plotLoadTemplatePart',
        //This is the action fired into our PlotSite PHP setup.php file
        data: {},
        returnOrWrite: 'write',
        //(write|return) either adds content to contentArea, or returns new HTML in the promise
        contentArea: '.JS--ajaxTargetArea',
        append: false
      };
      var settings = Object.assign({}, defaults, args);

      try {
        if (settings.returnOrWrite == 'write') var contentArea = document.querySelector(settings.contentArea);
      } catch (e) {
        console.log('contentArea needs to be a valid selector!');
        return false;
      }

      if (contentArea == null && settings.returnOrWrite == 'write') {
        console.log('Couldn\'t find selector for contentArea on page.');
        return false;
      }

      if (settings.templatePart == null) {
        console.log('Couldn\'t find template part. Make sure you set one as templatePart, for example parts/ajax-content');
        return false;
      }

      if (typeof settings.append !== "boolean") {
        console.log('Value passed to append was not a boolean.');
        return false;
      }

      if (settings.returnOrWrite == 'write') contentArea.classList.add('plotLoading');
      settings.data = {
        data: settings.data,
        action: settings.action,
        templatePart: settings.templatePart
      };
      var queryString = Plot.toQueryString(settings.data);
      return fetch(au, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
        },
        body: queryString,
        credentials: 'same-origin'
      }).then(function (data) {
        return data.json();
      }).then(function (result) {
        if (settings.returnOrWrite == 'write') contentArea.classList.remove('plotLoading');

        if (result.success) {
          if (settings.returnOrWrite !== 'write') return result.html;

          if (settings.append) {
            contentArea.insertAdjacentHTML('beforeend', result.html);
          } else {
            contentArea.innerHTML = result.html;
          }

          contentArea.querySelectorAll('.JS--lazyLoad').forEach(function (el) {
            LazyLoad.observer.observe(el);
          });
          return result.html;
        }
      })["catch"](function (error) {
        console.log('error', error);
      });
    },
    dateFormat: function dateFormat(date, format) {
      if (format == 'dS M') return date.getDate() + Plot.getOrdinal(date.getDate()) + ' ' + Plot.getMonth(date);
      if (format == 'M dS') return Plot.getMonth(date) + ' ' + date.getDate() + Plot.getOrdinal(date.getDate());
      if (format == 'd/m/y') return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear().toString().substr(-2);
      if (format == 'm/d/y') return date.getMonth() + 1 + '/' + date.getDate() + '/' + date.getFullYear().toString().substr(-2);
      return Plot.getDayOfWeek(date);
    },
    getDayOfWeek: function getDayOfWeek(date) {
      var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      return days[date.getDay()];
    },
    getOrdinal: function getOrdinal(number) {
      if (number > 3 && number < 21) return 'th';

      switch (number % 10) {
        case 1:
          return "st";

        case 2:
          return "nd";

        case 3:
          return "rd";

        default:
          return "th";
      }
    },
    getMonth: function getMonth(date) {
      var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return monthNames[date.getMonth()];
    },
    toQueryString: function toQueryString(obj, prefix) {
      var str = [],
          k,
          v;

      for (var p in obj) {
        if (!obj.hasOwnProperty(p)) {
          continue;
        } // skip things from the prototype


        if (~p.indexOf('[')) {
          k = prefix ? prefix + "[" + p.substring(0, p.indexOf('[')) + "]" + p.substring(p.indexOf('[')) : p;
        } else {
          k = prefix ? prefix + "[" + p + "]" : p;
        }

        v = obj[p];
        str.push(_typeof(v) == "object" ? Plot.toQueryString(v, k) : encodeURIComponent(k) + "=" + encodeURIComponent(v));
      }

      return str.join("&");
    }
  };
  module.exports = Plot;
})();

},{"./lazyload":21,"./syncscroll":25,"body-scroll-lock":1}],25:[function(require,module,exports){
"use strict";

(function () {
  var Syncscroll;
  Syncscroll = {
    init: function init() {
      var Width = 'Width',
          Height = 'Height',
          Top = 'Top',
          Left = 'Left',
          scroll = 'scroll',
          client = 'client',
          EventListener = 'EventListener',
          addEventListener = 'add' + EventListener,
          length = 'length',
          Math_round = Math.round,
          names = {},
          reset = function reset() {
        var elems = document.getElementsByClassName('sync' + scroll); // clearing existing listeners

        var i, j, el, found, name;

        for (name in names) {
          if (names.hasOwnProperty(name)) {
            for (i = 0; i < names[name][length]; i++) {
              names[name][i]['remove' + EventListener](scroll, names[name][i].syn, 0);
            }
          }
        } // setting-up the new listeners


        for (i = 0; i < elems[length];) {
          found = j = 0;
          el = elems[i++];

          if (!(name = el.getAttribute('name'))) {
            // name attribute is not set
            continue;
          }

          el = el[scroll + 'er'] || el; // needed for intence
          // searching for existing entry in array of names;
          // searching for the element in that entry

          for (; j < (names[name] = names[name] || [])[length];) {
            found |= names[name][j++] == el;
          }

          if (!found) {
            names[name].push(el);
          }

          el.eX = el.eY = 0;

          (function (el, name) {
            el[addEventListener](scroll, el.syn = function () {
              var elems = names[name];
              var scrollX = el[scroll + Left];
              var scrollY = el[scroll + Top];
              var xRate = scrollX / (el[scroll + Width] - el[client + Width]);
              var yRate = scrollY / (el[scroll + Height] - el[client + Height]);
              var updateX = scrollX != el.eX;
              var updateY = scrollY != el.eY;
              var otherEl,
                  i = 0;
              el.eX = scrollX;
              el.eY = scrollY;

              for (; i < elems[length];) {
                otherEl = elems[i++];

                if (otherEl != el) {
                  if (updateX && Math_round(otherEl[scroll + Left] - (scrollX = otherEl.eX = Math_round(xRate * (otherEl[scroll + Width] - otherEl[client + Width]))))) {
                    otherEl[scroll + Left] = scrollX;
                  }

                  if (updateY && Math_round(otherEl[scroll + Top] - (scrollY = otherEl.eY = Math_round(yRate * (otherEl[scroll + Height] - otherEl[client + Height]))))) {
                    otherEl[scroll + Top] = scrollY;
                  }
                }
              }
            }, 0);
          })(el, name);
        }
      };

      if (document.readyState == "complete") {
        reset();
      } else {
        window[addEventListener]("load", reset, 0);
      }
    }
  };
  module.exports = Syncscroll;
})();

},{}],26:[function(require,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"dup":2}],27:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],28:[function(require,module,exports){
arguments[4][4][0].apply(exports,arguments)
},{"desandro-matches-selector":26,"dup":4}],29:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"./flickity":33,"dup":5,"fizzy-ui-utils":28}],30:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6,"fizzy-ui-utils":28}],31:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7,"get-size":40}],32:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"./flickity":33,"dup":8,"fizzy-ui-utils":28,"unidragger":43}],33:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"./animate":30,"./cell":31,"./slide":39,"dup":9,"ev-emitter":27,"fizzy-ui-utils":28,"get-size":40}],34:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"./add-remove-cell":29,"./drag":32,"./flickity":33,"./lazyload":35,"./page-dots":36,"./player":37,"./prev-next-button":38,"dup":10}],35:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"./flickity":33,"dup":11,"fizzy-ui-utils":28}],36:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"./flickity":33,"dup":12,"fizzy-ui-utils":28,"unipointer":44}],37:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"./flickity":33,"dup":13,"ev-emitter":27,"fizzy-ui-utils":28}],38:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"./flickity":33,"dup":14,"fizzy-ui-utils":28,"unipointer":44}],39:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"dup":15}],40:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"dup":16}],41:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /*!
   * Observer 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var gsap,
      _coreInitted,
      _clamp,
      _win,
      _doc,
      _docEl,
      _body,
      _isTouch,
      _pointerType,
      ScrollTrigger,
      _root,
      _normalizer,
      _eventTypes,
      _context,
      _getGSAP = function _getGSAP() {
    return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
  },
      _startup = 1,
      _observers = [],
      _scrollers = [],
      _proxies = [],
      _getTime = Date.now,
      _bridge = function _bridge(name, value) {
    return value;
  },
      _integrate = function _integrate() {
    var core = ScrollTrigger.core,
        data = core.bridge || {},
        scrollers = core._scrollers,
        proxies = core._proxies;
    scrollers.push.apply(scrollers, _scrollers);
    proxies.push.apply(proxies, _proxies);
    _scrollers = scrollers;
    _proxies = proxies;

    _bridge = function _bridge(name, value) {
      return data[name](value);
    };
  },
      _getProxyProp = function _getProxyProp(element, property) {
    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
  },
      _isViewport = function _isViewport(el) {
    return !!~_root.indexOf(el);
  },
      _addListener = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      _removeListener = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _scrollLeft = "scrollLeft",
      _scrollTop = "scrollTop",
      _onScroll = function _onScroll() {
    return _normalizer && _normalizer.isPressed || _scrollers.cache++;
  },
      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
    var cachingFunc = function cachingFunc(value) {
      if (value || value === 0) {
        _startup && (_win.history.scrollRestoration = "manual");
        var isNormalizing = _normalizer && _normalizer.isPressed;
        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0);
        f(value);
        cachingFunc.cacheID = _scrollers.cache;
        isNormalizing && _bridge("ss", value);
      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
        cachingFunc.cacheID = _scrollers.cache;
        cachingFunc.v = f();
      }

      return cachingFunc.v + cachingFunc.offset;
    };

    cachingFunc.offset = 0;
    return f && cachingFunc;
  },
      _horizontal = {
    s: _scrollLeft,
    p: "left",
    p2: "Left",
    os: "right",
    os2: "Right",
    d: "width",
    d2: "Width",
    a: "x",
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;
    })
  },
      _vertical = {
    s: _scrollTop,
    p: "top",
    p2: "Top",
    os: "bottom",
    os2: "Bottom",
    d: "height",
    d2: "Height",
    a: "y",
    op: _horizontal,
    sc: _scrollCacheFunc(function (value) {
      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;
    })
  },
      _getTarget = function _getTarget(t, self) {
    return (self && self._ctx && self._ctx.selector || gsap.utils.toArray)(t)[0] || (typeof t === "string" && gsap.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
  },
      _getScrollFunc = function _getScrollFunc(element, _ref) {
    var s = _ref.s,
        sc = _ref.sc;
    _isViewport(element) && (element = _doc.scrollingElement || _docEl);

    var i = _scrollers.indexOf(element),
        offset = sc === _vertical.sc ? 1 : 2;

    !~i && (i = _scrollers.push(element) - 1);
    _scrollers[i + offset] || _addListener(element, "scroll", _onScroll);
    var prev = _scrollers[i + offset],
        func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {
      return arguments.length ? element[s] = value : element[s];
    })));
    func.target = element;
    prev || (func.smooth = gsap.getProperty(element, "scrollBehavior") === "smooth");
    return func;
  },
      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
    var v1 = value,
        v2 = value,
        t1 = _getTime(),
        t2 = t1,
        min = minTimeRefresh || 50,
        dropToZeroTime = Math.max(500, min * 3),
        update = function update(value, force) {
      var t = _getTime();

      if (force || t - t1 > min) {
        v2 = v1;
        v1 = value;
        t2 = t1;
        t1 = t;
      } else if (useDelta) {
        v1 += value;
      } else {
        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
      }
    },
        reset = function reset() {
      v2 = v1 = useDelta ? 0 : v1;
      t2 = t1 = 0;
    },
        getVelocity = function getVelocity(latestValue) {
      var tOld = t2,
          vOld = v2,
          t = _getTime();

      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
    };

    return {
      update: update,
      reset: reset,
      getVelocity: getVelocity
    };
  },
      _getEvent = function _getEvent(e, preventDefault) {
    preventDefault && !e._gsapAllow && e.preventDefault();
    return e.changedTouches ? e.changedTouches[0] : e;
  },
      _getAbsoluteMax = function _getAbsoluteMax(a) {
    var max = Math.max.apply(Math, a),
        min = Math.min.apply(Math, a);
    return Math.abs(max) >= Math.abs(min) ? max : min;
  },
      _setScrollTrigger = function _setScrollTrigger() {
    ScrollTrigger = gsap.core.globals().ScrollTrigger;
    ScrollTrigger && ScrollTrigger.core && _integrate();
  },
      _initCore = function _initCore(core) {
    gsap = core || _getGSAP();

    if (gsap && typeof document !== "undefined" && document.body) {
      _win = window;
      _doc = document;
      _docEl = _doc.documentElement;
      _body = _doc.body;
      _root = [_win, _doc, _docEl, _body];
      _clamp = gsap.utils.clamp;

      _context = gsap.core.context || function () {};

      _pointerType = "onpointerenter" in _body ? "pointer" : "mouse";
      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
      _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
      setTimeout(function () {
        return _startup = 0;
      }, 500);

      _setScrollTrigger();

      _coreInitted = 1;
    }

    return _coreInitted;
  };

  _horizontal.op = _vertical;
  _scrollers.cache = 0;
  var Observer = function () {
    function Observer(vars) {
      this.init(vars);
    }

    var _proto = Observer.prototype;

    _proto.init = function init(vars) {
      _coreInitted || _initCore(gsap) || console.warn("Please gsap.registerPlugin(Observer)");
      ScrollTrigger || _setScrollTrigger();
      var tolerance = vars.tolerance,
          dragMinimum = vars.dragMinimum,
          type = vars.type,
          target = vars.target,
          lineHeight = vars.lineHeight,
          debounce = vars.debounce,
          preventDefault = vars.preventDefault,
          onStop = vars.onStop,
          onStopDelay = vars.onStopDelay,
          ignore = vars.ignore,
          wheelSpeed = vars.wheelSpeed,
          event = vars.event,
          onDragStart = vars.onDragStart,
          onDragEnd = vars.onDragEnd,
          onDrag = vars.onDrag,
          onPress = vars.onPress,
          onRelease = vars.onRelease,
          onRight = vars.onRight,
          onLeft = vars.onLeft,
          onUp = vars.onUp,
          onDown = vars.onDown,
          onChangeX = vars.onChangeX,
          onChangeY = vars.onChangeY,
          onChange = vars.onChange,
          onToggleX = vars.onToggleX,
          onToggleY = vars.onToggleY,
          onHover = vars.onHover,
          onHoverEnd = vars.onHoverEnd,
          onMove = vars.onMove,
          ignoreCheck = vars.ignoreCheck,
          isNormalizer = vars.isNormalizer,
          onGestureStart = vars.onGestureStart,
          onGestureEnd = vars.onGestureEnd,
          onWheel = vars.onWheel,
          onEnable = vars.onEnable,
          onDisable = vars.onDisable,
          onClick = vars.onClick,
          scrollSpeed = vars.scrollSpeed,
          capture = vars.capture,
          allowClicks = vars.allowClicks,
          lockAxis = vars.lockAxis,
          onLockAxis = vars.onLockAxis;
      this.target = target = _getTarget(target) || _docEl;
      this.vars = vars;
      ignore && (ignore = gsap.utils.toArray(ignore));
      tolerance = tolerance || 1e-9;
      dragMinimum = dragMinimum || 0;
      wheelSpeed = wheelSpeed || 1;
      scrollSpeed = scrollSpeed || 1;
      type = type || "wheel,touch,pointer";
      debounce = debounce !== false;
      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22);

      var id,
          onStopDelayedCall,
          dragged,
          moved,
          wheeled,
          locked,
          axis,
          self = this,
          prevDeltaX = 0,
          prevDeltaY = 0,
          scrollFuncX = _getScrollFunc(target, _horizontal),
          scrollFuncY = _getScrollFunc(target, _vertical),
          scrollX = scrollFuncX(),
          scrollY = scrollFuncY(),
          limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
          isViewport = _isViewport(target),
          ownerDoc = target.ownerDocument || _doc,
          deltaX = [0, 0, 0],
          deltaY = [0, 0, 0],
          onClickTime = 0,
          clickCapture = function clickCapture() {
        return onClickTime = _getTime();
      },
          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
      },
          onStopFunc = function onStopFunc() {
        self._vx.reset();

        self._vy.reset();

        onStopDelayedCall.pause();
        onStop && onStop(self);
      },
          update = function update() {
        var dx = self.deltaX = _getAbsoluteMax(deltaX),
            dy = self.deltaY = _getAbsoluteMax(deltaY),
            changedX = Math.abs(dx) >= tolerance,
            changedY = Math.abs(dy) >= tolerance;

        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY);

        if (changedX) {
          onRight && self.deltaX > 0 && onRight(self);
          onLeft && self.deltaX < 0 && onLeft(self);
          onChangeX && onChangeX(self);
          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
          prevDeltaX = self.deltaX;
          deltaX[0] = deltaX[1] = deltaX[2] = 0;
        }

        if (changedY) {
          onDown && self.deltaY > 0 && onDown(self);
          onUp && self.deltaY < 0 && onUp(self);
          onChangeY && onChangeY(self);
          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
          prevDeltaY = self.deltaY;
          deltaY[0] = deltaY[1] = deltaY[2] = 0;
        }

        if (moved || dragged) {
          onMove && onMove(self);

          if (dragged) {
            onDrag(self);
            dragged = false;
          }

          moved = false;
        }

        locked && !(locked = false) && onLockAxis && onLockAxis(self);

        if (wheeled) {
          onWheel(self);
          wheeled = false;
        }

        id = 0;
      },
          onDelta = function onDelta(x, y, index) {
        deltaX[index] += x;
        deltaY[index] += y;

        self._vx.update(x);

        self._vy.update(y);

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
        if (lockAxis && !axis) {
          self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
          locked = true;
        }

        if (axis !== "y") {
          deltaX[2] += x;

          self._vx.update(x, true);
        }

        if (axis !== "x") {
          deltaY[2] += y;

          self._vy.update(y, true);
        }

        debounce ? id || (id = requestAnimationFrame(update)) : update();
      },
          _onDrag = function _onDrag(e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y,
            isDragging = self.isDragging;
        self.x = x;
        self.y = y;

        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {
          onDrag && (dragged = true);
          isDragging || (self.isDragging = true);
          onTouchOrPointerDelta(dx, dy);
          isDragging || onDragStart && onDragStart(self);
        }
      },
          _onPress = self.onPress = function (e) {
        if (_ignoreCheck(e, 1) || e && e.button) {
          return;
        }

        self.axis = axis = null;
        onStopDelayedCall.pause();
        self.isPressed = true;
        e = _getEvent(e);
        prevDeltaX = prevDeltaY = 0;
        self.startX = self.x = e.clientX;
        self.startY = self.y = e.clientY;

        self._vx.reset();

        self._vy.reset();

        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);

        self.deltaX = self.deltaY = 0;
        onPress && onPress(self);
      },
          _onRelease = self.onRelease = function (e) {
        if (_ignoreCheck(e, 1)) {
          return;
        }

        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);

        var isTrackingDrag = !isNaN(self.y - self.startY),
            wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
            eventData = _getEvent(e);

        if (!wasDragging && isTrackingDrag) {
          self._vx.reset();

          self._vy.reset();

          if (preventDefault && allowClicks) {
            gsap.delayedCall(0.08, function () {
              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {
                if (e.target.click) {
                  e.target.click();
                } else if (ownerDoc.createEvent) {
                  var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                  syntheticEvent.initMouseEvent("click", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                  e.target.dispatchEvent(syntheticEvent);
                }
              }
            });
          }
        }

        self.isDragging = self.isGesturing = self.isPressed = false;
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
        onDragEnd && wasDragging && onDragEnd(self);
        onRelease && onRelease(self, wasDragging);
      },
          _onGestureStart = function _onGestureStart(e) {
        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
      },
          _onGestureEnd = function _onGestureEnd() {
        return (self.isGesturing = false) || onGestureEnd(self);
      },
          onScroll = function onScroll(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = scrollFuncX(),
            y = scrollFuncY();
        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
        scrollX = x;
        scrollY = y;
        onStop && onStopDelayedCall.restart(true);
      },
          _onWheel = function _onWheel(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        e = _getEvent(e, preventDefault);
        onWheel && (wheeled = true);
        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;
        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
        onStop && !isNormalizer && onStopDelayedCall.restart(true);
      },
          _onMove = function _onMove(e) {
        if (_ignoreCheck(e)) {
          return;
        }

        var x = e.clientX,
            y = e.clientY,
            dx = x - self.x,
            dy = y - self.y;
        self.x = x;
        self.y = y;
        moved = true;
        (dx || dy) && onTouchOrPointerDelta(dx, dy);
      },
          _onHover = function _onHover(e) {
        self.event = e;
        onHover(self);
      },
          _onHoverEnd = function _onHoverEnd(e) {
        self.event = e;
        onHoverEnd(self);
      },
          _onClick = function _onClick(e) {
        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
      };

      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
      self.deltaX = self.deltaY = 0;
      self._vx = _getVelocityProp(0, 50, true);
      self._vy = _getVelocityProp(0, 50, true);
      self.scrollX = scrollFuncX;
      self.scrollY = scrollFuncY;
      self.isDragging = self.isGesturing = self.isPressed = false;

      _context(this);

      self.enable = function (e) {
        if (!self.isEnabled) {
          _addListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          type.indexOf("scroll") >= 0 && _addListener(isViewport ? ownerDoc : target, "scroll", onScroll, preventDefault, capture);
          type.indexOf("wheel") >= 0 && _addListener(target, "wheel", _onWheel, preventDefault, capture);

          if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);

            _addListener(ownerDoc, _eventTypes[2], _onRelease);

            _addListener(ownerDoc, _eventTypes[3], _onRelease);

            allowClicks && _addListener(target, "click", clickCapture, false, true);
            onClick && _addListener(target, "click", _onClick);
            onGestureStart && _addListener(ownerDoc, "gesturestart", _onGestureStart);
            onGestureEnd && _addListener(ownerDoc, "gestureend", _onGestureEnd);
            onHover && _addListener(target, _pointerType + "enter", _onHover);
            onHoverEnd && _addListener(target, _pointerType + "leave", _onHoverEnd);
            onMove && _addListener(target, _pointerType + "move", _onMove);
          }

          self.isEnabled = true;
          e && e.type && _onPress(e);
          onEnable && onEnable(self);
        }

        return self;
      };

      self.disable = function () {
        if (self.isEnabled) {
          _observers.filter(function (o) {
            return o !== self && _isViewport(o.target);
          }).length || _removeListener(isViewport ? ownerDoc : target, "scroll", _onScroll);

          if (self.isPressed) {
            self._vx.reset();

            self._vy.reset();

            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
          }

          _removeListener(isViewport ? ownerDoc : target, "scroll", onScroll, capture);

          _removeListener(target, "wheel", _onWheel, capture);

          _removeListener(target, _eventTypes[0], _onPress, capture);

          _removeListener(ownerDoc, _eventTypes[2], _onRelease);

          _removeListener(ownerDoc, _eventTypes[3], _onRelease);

          _removeListener(target, "click", clickCapture, true);

          _removeListener(target, "click", _onClick);

          _removeListener(ownerDoc, "gesturestart", _onGestureStart);

          _removeListener(ownerDoc, "gestureend", _onGestureEnd);

          _removeListener(target, _pointerType + "enter", _onHover);

          _removeListener(target, _pointerType + "leave", _onHoverEnd);

          _removeListener(target, _pointerType + "move", _onMove);

          self.isEnabled = self.isPressed = self.isDragging = false;
          onDisable && onDisable(self);
        }
      };

      self.kill = self.revert = function () {
        self.disable();

        var i = _observers.indexOf(self);

        i >= 0 && _observers.splice(i, 1);
        _normalizer === self && (_normalizer = 0);
      };

      _observers.push(self);

      isNormalizer && _isViewport(target) && (_normalizer = self);
      self.enable(event);
    };

    _createClass(Observer, [{
      key: "velocityX",
      get: function get() {
        return this._vx.getVelocity();
      }
    }, {
      key: "velocityY",
      get: function get() {
        return this._vy.getVelocity();
      }
    }]);

    return Observer;
  }();
  Observer.version = "3.12.2";

  Observer.create = function (vars) {
    return new Observer(vars);
  };

  Observer.register = _initCore;

  Observer.getAll = function () {
    return _observers.slice();
  };

  Observer.getById = function (id) {
    return _observers.filter(function (o) {
      return o.vars.id === id;
    })[0];
  };

  _getGSAP() && gsap.registerPlugin(Observer);

  /*!
   * ScrollTrigger 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */

  var gsap$1,
      _coreInitted$1,
      _win$1,
      _doc$1,
      _docEl$1,
      _body$1,
      _root$1,
      _resizeDelay,
      _toArray,
      _clamp$1,
      _time2,
      _syncInterval,
      _refreshing,
      _pointerIsDown,
      _transformProp,
      _i,
      _prevWidth,
      _prevHeight,
      _autoRefresh,
      _sort,
      _suppressOverwrites,
      _ignoreResize,
      _normalizer$1,
      _ignoreMobileResize,
      _baseScreenHeight,
      _baseScreenWidth,
      _fixIOSBug,
      _context$1,
      _scrollRestoration,
      _div100vh,
      _100vh,
      _limitCallbacks,
      _startup$1 = 1,
      _getTime$1 = Date.now,
      _time1 = _getTime$1(),
      _lastScrollTime = 0,
      _enabled = 0,
      _parseClamp = function _parseClamp(value, type, self) {
    var clamp = _isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
    self["_" + type + "Clamp"] = clamp;
    return clamp ? value.substr(6, value.length - 7) : value;
  },
      _keepClamp = function _keepClamp(value, clamp) {
    return clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value;
  },
      _rafBugFix = function _rafBugFix() {
    return _enabled && requestAnimationFrame(_rafBugFix);
  },
      _pointerDownHandler = function _pointerDownHandler() {
    return _pointerIsDown = 1;
  },
      _pointerUpHandler = function _pointerUpHandler() {
    return _pointerIsDown = 0;
  },
      _passThrough = function _passThrough(v) {
    return v;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _getGSAP$1 = function _getGSAP() {
    return gsap$1 || _windowExists() && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;
  },
      _isViewport$1 = function _isViewport(e) {
    return !!~_root$1.indexOf(e);
  },
      _getViewportDimension = function _getViewportDimension(dimensionProperty) {
    return (dimensionProperty === "Height" ? _100vh : _win$1["inner" + dimensionProperty]) || _docEl$1["client" + dimensionProperty] || _body$1["client" + dimensionProperty];
  },
      _getBoundsFunc = function _getBoundsFunc(element) {
    return _getProxyProp(element, "getBoundingClientRect") || (_isViewport$1(element) ? function () {
      _winOffsets.width = _win$1.innerWidth;
      _winOffsets.height = _100vh;
      return _winOffsets;
    } : function () {
      return _getBounds(element);
    });
  },
      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
    var d = _ref.d,
        d2 = _ref.d2,
        a = _ref.a;
    return (a = _getProxyProp(scroller, "getBoundingClientRect")) ? function () {
      return a()[d];
    } : function () {
      return (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0;
    };
  },
      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
      return _winOffsets;
    };
  },
      _maxScroll = function _maxScroll(element, _ref2) {
    var s = _ref2.s,
        d2 = _ref2.d2,
        d = _ref2.d,
        a = _ref2.a;
    return Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport$1(element) ? (_docEl$1[s] || _body$1[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]);
  },
      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
    for (var i = 0; i < _autoRefresh.length; i += 3) {
      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
    }
  },
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _endAnimation = function _endAnimation(animation, reversed, pause) {
    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
  },
      _callback = function _callback(self, func) {
    if (self.enabled) {
      var result = func(self);
      result && result.totalTime && (self.callbackAnimation = result);
    }
  },
      _abs = Math.abs,
      _left = "left",
      _top = "top",
      _right = "right",
      _bottom = "bottom",
      _width = "width",
      _height = "height",
      _Right = "Right",
      _Left = "Left",
      _Top = "Top",
      _Bottom = "Bottom",
      _padding = "padding",
      _margin = "margin",
      _Width = "Width",
      _Height = "Height",
      _px = "px",
      _getComputedStyle = function _getComputedStyle(element) {
    return _win$1.getComputedStyle(element);
  },
      _makePositionable = function _makePositionable(element) {
    var position = _getComputedStyle(element).position;

    element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _getBounds = function _getBounds(element, withoutTransforms) {
    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap$1.to(element, {
      x: 0,
      y: 0,
      xPercent: 0,
      yPercent: 0,
      rotation: 0,
      rotationX: 0,
      rotationY: 0,
      scale: 1,
      skewX: 0,
      skewY: 0
    }).progress(1),
        bounds = element.getBoundingClientRect();
    tween && tween.progress(0).kill();
    return bounds;
  },
      _getSize = function _getSize(element, _ref3) {
    var d2 = _ref3.d2;
    return element["offset" + d2] || element["client" + d2] || 0;
  },
      _getLabelRatioArray = function _getLabelRatioArray(timeline) {
    var a = [],
        labels = timeline.labels,
        duration = timeline.duration(),
        p;

    for (p in labels) {
      a.push(labels[p] / duration);
    }

    return a;
  },
      _getClosestLabel = function _getClosestLabel(animation) {
    return function (value) {
      return gsap$1.utils.snap(_getLabelRatioArray(animation), value);
    };
  },
      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
    var snap = gsap$1.utils.snap(snapIncrementOrArray),
        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
      return a - b;
    });
    return a ? function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }

      var i;

      if (!direction) {
        return snap(value);
      }

      if (direction > 0) {
        value -= threshold;

        for (i = 0; i < a.length; i++) {
          if (a[i] >= value) {
            return a[i];
          }
        }

        return a[i - 1];
      } else {
        i = a.length;
        value += threshold;

        while (i--) {
          if (a[i] <= value) {
            return a[i];
          }
        }
      }

      return a[0];
    } : function (value, direction, threshold) {
      if (threshold === void 0) {
        threshold = 1e-3;
      }

      var snapped = snap(value);
      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
    };
  },
      _getLabelAtDirection = function _getLabelAtDirection(timeline) {
    return function (value, st) {
      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
    };
  },
      _multiListener = function _multiListener(func, element, types, callback) {
    return types.split(",").forEach(function (type) {
      return func(element, type, callback);
    });
  },
      _addListener$1 = function _addListener(element, type, func, nonPassive, capture) {
    return element.addEventListener(type, func, {
      passive: !nonPassive,
      capture: !!capture
    });
  },
      _removeListener$1 = function _removeListener(element, type, func, capture) {
    return element.removeEventListener(type, func, !!capture);
  },
      _wheelListener = function _wheelListener(func, el, scrollFunc) {
    scrollFunc = scrollFunc && scrollFunc.wheelHandler;

    if (scrollFunc) {
      func(el, "wheel", scrollFunc);
      func(el, "touchmove", scrollFunc);
    }
  },
      _markerDefaults = {
    startColor: "green",
    endColor: "red",
    indent: 0,
    fontSize: "16px",
    fontWeight: "normal"
  },
      _defaults = {
    toggleActions: "play",
    anticipatePin: 0
  },
      _keywords = {
    top: 0,
    left: 0,
    center: 0.5,
    bottom: 1,
    right: 1
  },
      _offsetToPx = function _offsetToPx(value, size) {
    if (_isString(value)) {
      var eqIndex = value.indexOf("="),
          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;

      if (~eqIndex) {
        value.indexOf("%") > eqIndex && (relative *= size / 100);
        value = value.substr(0, eqIndex - 1);
      }

      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
    }

    return value;
  },
      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
    var startColor = _ref4.startColor,
        endColor = _ref4.endColor,
        fontSize = _ref4.fontSize,
        indent = _ref4.indent,
        fontWeight = _ref4.fontWeight;

    var e = _doc$1.createElement("div"),
        useFixedPosition = _isViewport$1(container) || _getProxyProp(container, "pinType") === "fixed",
        isScroller = type.indexOf("scroller") !== -1,
        parent = useFixedPosition ? _body$1 : container,
        isStart = type.indexOf("start") !== -1,
        color = isStart ? startColor : endColor,
        css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

    css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
    matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
    e._isStart = isStart;
    e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
    e.style.cssText = css;
    e.innerText = name || name === 0 ? type + "-" + name : type;
    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
    e._offset = e["offset" + direction.op.d2];

    _positionMarker(e, 0, direction, isStart);

    return e;
  },
      _positionMarker = function _positionMarker(marker, start, direction, flipped) {
    var vars = {
      display: "block"
    },
        side = direction[flipped ? "os2" : "p2"],
        oppositeSide = direction[flipped ? "p2" : "os2"];
    marker._isFlipped = flipped;
    vars[direction.a + "Percent"] = flipped ? -100 : 0;
    vars[direction.a] = flipped ? "1px" : 0;
    vars["border" + side + _Width] = 1;
    vars["border" + oppositeSide + _Width] = 0;
    vars[direction.p] = start + "px";
    gsap$1.set(marker, vars);
  },
      _triggers = [],
      _ids = {},
      _rafID,
      _sync = function _sync() {
    return _getTime$1() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));
  },
      _onScroll$1 = function _onScroll() {
    if (!_normalizer$1 || !_normalizer$1.isPressed || _normalizer$1.startX > _body$1.clientWidth) {
      _scrollers.cache++;

      if (_normalizer$1) {
        _rafID || (_rafID = requestAnimationFrame(_updateAll));
      } else {
        _updateAll();
      }

      _lastScrollTime || _dispatch("scrollStart");
      _lastScrollTime = _getTime$1();
    }
  },
      _setBaseDimensions = function _setBaseDimensions() {
    _baseScreenWidth = _win$1.innerWidth;
    _baseScreenHeight = _win$1.innerHeight;
  },
      _onResize = function _onResize() {
    _scrollers.cache++;
    !_refreshing && !_ignoreResize && !_doc$1.fullscreenElement && !_doc$1.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win$1.innerWidth || Math.abs(_win$1.innerHeight - _baseScreenHeight) > _win$1.innerHeight * 0.25) && _resizeDelay.restart(true);
  },
      _listeners = {},
      _emptyArray = [],
      _softRefresh = function _softRefresh() {
    return _removeListener$1(ScrollTrigger$1, "scrollEnd", _softRefresh) || _refreshAll(true);
  },
      _dispatch = function _dispatch(type) {
    return _listeners[type] && _listeners[type].map(function (f) {
      return f();
    }) || _emptyArray;
  },
      _savedStyles = [],
      _revertRecorded = function _revertRecorded(media) {
    for (var i = 0; i < _savedStyles.length; i += 5) {
      if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {
        _savedStyles[i].style.cssText = _savedStyles[i + 1];
        _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
        _savedStyles[i + 3].uncache = 1;
      }
    }
  },
      _revertAll = function _revertAll(kill, media) {
    var trigger;

    for (_i = 0; _i < _triggers.length; _i++) {
      trigger = _triggers[_i];

      if (trigger && (!media || trigger._ctx === media)) {
        if (kill) {
          trigger.kill(1);
        } else {
          trigger.revert(true, true);
        }
      }
    }

    media && _revertRecorded(media);
    media || _dispatch("revert");
  },
      _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
    _scrollers.cache++;
    (force || !_refreshingAll) && _scrollers.forEach(function (obj) {
      return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
    });
    _isString(scrollRestoration) && (_win$1.history.scrollRestoration = _scrollRestoration = scrollRestoration);
  },
      _refreshingAll,
      _refreshID = 0,
      _queueRefreshID,
      _queueRefreshAll = function _queueRefreshAll() {
    if (_queueRefreshID !== _refreshID) {
      var id = _queueRefreshID = _refreshID;
      requestAnimationFrame(function () {
        return id === _refreshID && _refreshAll(true);
      });
    }
  },
      _refresh100vh = function _refresh100vh() {
    _body$1.appendChild(_div100vh);

    _100vh = _div100vh.offsetHeight || _win$1.innerHeight;

    _body$1.removeChild(_div100vh);
  },
      _refreshAll = function _refreshAll(force, skipRevert) {
    if (_lastScrollTime && !force) {
      _addListener$1(ScrollTrigger$1, "scrollEnd", _softRefresh);

      return;
    }

    _refresh100vh();

    _refreshingAll = ScrollTrigger$1.isRefreshing = true;

    _scrollers.forEach(function (obj) {
      return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
    });

    var refreshInits = _dispatch("refreshInit");

    _sort && ScrollTrigger$1.sort();
    skipRevert || _revertAll();

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && (obj.target.style.scrollBehavior = "auto");
        obj(0);
      }
    });

    _triggers.slice(0).forEach(function (t) {
      return t.refresh();
    });

    _triggers.forEach(function (t, i) {
      if (t._subPinOffset && t.pin) {
        var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
            original = t.pin[prop];
        t.revert(true, 1);
        t.adjustPinSpacing(t.pin[prop] - original);
        t.refresh();
      }
    });

    _triggers.forEach(function (t) {
      var max = _maxScroll(t.scroller, t._dir);

      (t.vars.end === "max" || t._endClamp && t.end > max) && t.setPositions(t.start, Math.max(t.start + 1, max), true);
    });

    refreshInits.forEach(function (result) {
      return result && result.render && result.render(-1);
    });

    _scrollers.forEach(function (obj) {
      if (_isFunction(obj)) {
        obj.smooth && requestAnimationFrame(function () {
          return obj.target.style.scrollBehavior = "smooth";
        });
        obj.rec && obj(obj.rec);
      }
    });

    _clearScrollMemory(_scrollRestoration, 1);

    _resizeDelay.pause();

    _refreshID++;
    _refreshingAll = 2;

    _updateAll(2);

    _triggers.forEach(function (t) {
      return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
    });

    _refreshingAll = ScrollTrigger$1.isRefreshing = false;

    _dispatch("refresh");
  },
      _lastScroll = 0,
      _direction = 1,
      _primary,
      _updateAll = function _updateAll(force) {
    if (!_refreshingAll || force === 2) {
      ScrollTrigger$1.isUpdating = true;
      _primary && _primary.update(0);

      var l = _triggers.length,
          time = _getTime$1(),
          recordVelocity = time - _time1 >= 50,
          scroll = l && _triggers[0].scroll();

      _direction = _lastScroll > scroll ? -1 : 1;
      _refreshingAll || (_lastScroll = scroll);

      if (recordVelocity) {
        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
          _lastScrollTime = 0;

          _dispatch("scrollEnd");
        }

        _time2 = _time1;
        _time1 = time;
      }

      if (_direction < 0) {
        _i = l;

        while (_i-- > 0) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }

        _direction = 1;
      } else {
        for (_i = 0; _i < l; _i++) {
          _triggers[_i] && _triggers[_i].update(0, recordVelocity);
        }
      }

      ScrollTrigger$1.isUpdating = false;
    }

    _rafID = 0;
  },
      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
      _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
      _swapPinOut = function _swapPinOut(pin, spacer, state) {
    _setState(state);

    var cache = pin._gsap;

    if (cache.spacerIsNative) {
      _setState(cache.spacerState);
    } else if (pin._gsap.swappedIn) {
      var parent = spacer.parentNode;

      if (parent) {
        parent.insertBefore(pin, spacer);
        parent.removeChild(spacer);
      }
    }

    pin._gsap.swappedIn = false;
  },
      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
    if (!pin._gsap.swappedIn) {
      var i = _propNamesToCopy.length,
          spacerStyle = spacer.style,
          pinStyle = pin.style,
          p;

      while (i--) {
        p = _propNamesToCopy[i];
        spacerStyle[p] = cs[p];
      }

      spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
      cs.display === "inline" && (spacerStyle.display = "inline-block");
      pinStyle[_bottom] = pinStyle[_right] = "auto";
      spacerStyle.flexBasis = cs.flexBasis || "auto";
      spacerStyle.overflow = "visible";
      spacerStyle.boxSizing = "border-box";
      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
      spacerStyle[_height] = _getSize(pin, _vertical) + _px;
      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";

      _setState(spacerState);

      pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
      pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
      pinStyle[_padding] = cs[_padding];

      if (pin.parentNode !== spacer) {
        pin.parentNode.insertBefore(spacer, pin);
        spacer.appendChild(pin);
      }

      pin._gsap.swappedIn = true;
    }
  },
      _capsExp = /([A-Z])/g,
      _setState = function _setState(state) {
    if (state) {
      var style = state.t.style,
          l = state.length,
          i = 0,
          p,
          value;
      (state.t._gsap || gsap$1.core.getCache(state.t)).uncache = 1;

      for (; i < l; i += 2) {
        value = state[i + 1];
        p = state[i];

        if (value) {
          style[p] = value;
        } else if (style[p]) {
          style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
        }
      }
    }
  },
      _getState = function _getState(element) {
    var l = _stateProps.length,
        style = element.style,
        state = [],
        i = 0;

    for (; i < l; i++) {
      state.push(_stateProps[i], style[_stateProps[i]]);
    }

    state.t = element;
    return state;
  },
      _copyState = function _copyState(state, override, omitOffsets) {
    var result = [],
        l = state.length,
        i = omitOffsets ? 8 : 0,
        p;

    for (; i < l; i += 2) {
      p = state[i];
      result.push(p, p in override ? override[p] : state[i + 1]);
    }

    result.t = state.t;
    return result;
  },
      _winOffsets = {
    left: 0,
    top: 0
  },
      _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {
    _isFunction(value) && (value = value(self));

    if (_isString(value) && value.substr(0, 3) === "max") {
      value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
    }

    var time = containerAnimation ? containerAnimation.time() : 0,
        p1,
        p2,
        element;
    containerAnimation && containerAnimation.seek(0);
    isNaN(value) || (value = +value);

    if (!_isNumber(value)) {
      _isFunction(trigger) && (trigger = trigger(self));
      var offsets = (value || "0").split(" "),
          bounds,
          localOffset,
          globalOffset,
          display;
      element = _getTarget(trigger, self) || _body$1;
      bounds = _getBounds(element) || {};

      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
        display = element.style.display;
        element.style.display = "block";
        bounds = _getBounds(element);
        display ? element.style.display = display : element.style.removeProperty("display");
      }

      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
      globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
      scrollerSize -= scrollerSize - globalOffset;
    } else {
      containerAnimation && (value = gsap$1.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
      markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
    }

    if (clampZeroProp) {
      self[clampZeroProp] = value || -0.001;
      value < 0 && (value = 0);
    }

    if (marker) {
      var position = value + scrollerSize,
          isStart = marker._isStart;
      p1 = "scroll" + direction.d2;

      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body$1[p1], _docEl$1[p1]) : marker.parentNode[p1]) <= position + 1);

      if (useFixedPosition) {
        scrollerBounds = _getBounds(markerScroller);
        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
      }
    }

    if (containerAnimation && element) {
      p1 = _getBounds(element);
      containerAnimation.seek(scrollerMax);
      p2 = _getBounds(element);
      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
      value = value / containerAnimation._caScrollDist * scrollerMax;
    }

    containerAnimation && containerAnimation.seek(time);
    return containerAnimation ? value : Math.round(value);
  },
      _prefixExp = /(webkit|moz|length|cssText|inset)/i,
      _reparent = function _reparent(element, parent, top, left) {
    if (element.parentNode !== parent) {
      var style = element.style,
          p,
          cs;

      if (parent === _body$1) {
        element._stOrig = style.cssText;
        cs = _getComputedStyle(element);

        for (p in cs) {
          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
            style[p] = cs[p];
          }
        }

        style.top = top;
        style.left = left;
      } else {
        style.cssText = element._stOrig;
      }

      gsap$1.core.getCache(element).uncache = 1;
      parent.appendChild(element);
    }
  },
      _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {
    var last1 = initialValue,
        last2 = last1;
    return function (value) {
      var current = Math.round(getValueFunc());

      if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {
        value = current;
        onInterrupt && onInterrupt();
      }

      last2 = last1;
      last1 = value;
      return value;
    };
  },
      _shiftMarker = function _shiftMarker(marker, direction, value) {
    var vars = {};
    vars[direction.p] = "+=" + value;
    gsap$1.set(marker, vars);
  },
      _getTweenCreator = function _getTweenCreator(scroller, direction) {
    var getScroll = _getScrollFunc(scroller, direction),
        prop = "_scroll" + direction.p2,
        getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
      var tween = getTween.tween,
          onComplete = vars.onComplete,
          modifiers = {};
      initialValue = initialValue || getScroll();

      var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {
        tween.kill();
        getTween.tween = 0;
      });

      change2 = change1 && change2 || 0;
      change1 = change1 || scrollTo - initialValue;
      tween && tween.kill();
      vars[prop] = scrollTo;
      vars.modifiers = modifiers;

      modifiers[prop] = function () {
        return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
      };

      vars.onUpdate = function () {
        _scrollers.cache++;

        _updateAll();
      };

      vars.onComplete = function () {
        getTween.tween = 0;
        onComplete && onComplete.call(tween);
      };

      tween = getTween.tween = gsap$1.to(scroller, vars);
      return tween;
    };

    scroller[prop] = getScroll;

    getScroll.wheelHandler = function () {
      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
    };

    _addListener$1(scroller, "wheel", getScroll.wheelHandler);

    ScrollTrigger$1.isTouch && _addListener$1(scroller, "touchmove", getScroll.wheelHandler);
    return getTween;
  };

  var ScrollTrigger$1 = function () {
    function ScrollTrigger(vars, animation) {
      _coreInitted$1 || ScrollTrigger.register(gsap$1) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");

      _context$1(this);

      this.init(vars, animation);
    }

    var _proto = ScrollTrigger.prototype;

    _proto.init = function init(vars, animation) {
      this.progress = this.start = 0;
      this.vars && this.kill(true, true);

      if (!_enabled) {
        this.update = this.refresh = this.kill = _passThrough;
        return;
      }

      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {
        trigger: vars
      } : vars, _defaults);

      var _vars = vars,
          onUpdate = _vars.onUpdate,
          toggleClass = _vars.toggleClass,
          id = _vars.id,
          onToggle = _vars.onToggle,
          onRefresh = _vars.onRefresh,
          scrub = _vars.scrub,
          trigger = _vars.trigger,
          pin = _vars.pin,
          pinSpacing = _vars.pinSpacing,
          invalidateOnRefresh = _vars.invalidateOnRefresh,
          anticipatePin = _vars.anticipatePin,
          onScrubComplete = _vars.onScrubComplete,
          onSnapComplete = _vars.onSnapComplete,
          once = _vars.once,
          snap = _vars.snap,
          pinReparent = _vars.pinReparent,
          pinSpacer = _vars.pinSpacer,
          containerAnimation = _vars.containerAnimation,
          fastScrollEnd = _vars.fastScrollEnd,
          preventOverlaps = _vars.preventOverlaps,
          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,
          isToggle = !scrub && scrub !== 0,
          scroller = _getTarget(vars.scroller || _win$1),
          scrollerCache = gsap$1.core.getCache(scroller),
          isViewport = _isViewport$1(scroller),
          useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || isViewport && "fixed") === "fixed",
          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
          toggleActions = isToggle && vars.toggleActions.split(" "),
          markers = "markers" in vars ? vars.markers : _defaults.markers,
          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
          self = this,
          onRefreshInit = vars.onRefreshInit && function () {
        return vars.onRefreshInit(self);
      },
          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
          lastSnap = 0,
          lastRefresh = 0,
          prevProgress = 0,
          scrollFunc = _getScrollFunc(scroller, direction),
          tweenTo,
          pinCache,
          snapFunc,
          scroll1,
          scroll2,
          start,
          end,
          markerStart,
          markerEnd,
          markerStartTrigger,
          markerEndTrigger,
          markerVars,
          executingOnRefresh,
          change,
          pinOriginalState,
          pinActiveState,
          pinState,
          spacer,
          offset,
          pinGetter,
          pinSetter,
          pinStart,
          pinChange,
          spacingStart,
          spacerState,
          markerStartSetter,
          pinMoves,
          markerEndSetter,
          cs,
          snap1,
          snap2,
          scrubTween,
          scrubSmooth,
          snapDurClamp,
          snapDelayedCall,
          prevScroll,
          prevAnimProgress,
          caMarkerSetter,
          customRevertReturn;

      self._startClamp = self._endClamp = false;
      self._dir = direction;
      anticipatePin *= 45;
      self.scroller = scroller;
      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
      scroll1 = scrollFunc();
      self.vars = vars;
      animation = animation || vars.animation;

      if ("refreshPriority" in vars) {
        _sort = 1;
        vars.refreshPriority === -9999 && (_primary = self);
      }

      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
        top: _getTweenCreator(scroller, _vertical),
        left: _getTweenCreator(scroller, _horizontal)
      };
      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

      self.scrubDuration = function (value) {
        scrubSmooth = _isNumber(value) && value;

        if (!scrubSmooth) {
          scrubTween && scrubTween.progress(1).kill();
          scrubTween = 0;
        } else {
          scrubTween ? scrubTween.duration(value) : scrubTween = gsap$1.to(animation, {
            ease: "expo",
            totalProgress: "+=0",
            duration: scrubSmooth,
            paused: true,
            onComplete: function onComplete() {
              return onScrubComplete && onScrubComplete(self);
            }
          });
        }
      };

      if (animation) {
        animation.vars.lazy = false;
        animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true);
        self.animation = animation.pause();
        animation.scrollTrigger = self;
        self.scrubDuration(scrub);
        snap1 = 0;
        id || (id = animation.vars.id);
      }

      if (snap) {
        if (!_isObject(snap) || snap.push) {
          snap = {
            snapTo: snap
          };
        }

        "scrollBehavior" in _body$1.style && gsap$1.set(isViewport ? [_body$1, _docEl$1] : scroller, {
          scrollBehavior: "auto"
        });

        _scrollers.forEach(function (o) {
          return _isFunction(o) && o.target === (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller) && (o.smooth = false);
        });

        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
          return _snapDirectional(snap.snapTo)(value, _getTime$1() - lastRefresh < 500 ? 0 : st.direction);
        } : gsap$1.utils.snap(snap.snapTo);
        snapDurClamp = snap.duration || {
          min: 0.1,
          max: 2
        };
        snapDurClamp = _isObject(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);
        snapDelayedCall = gsap$1.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
          var scroll = scrollFunc(),
              refreshedRecently = _getTime$1() - lastRefresh < 500,
              tween = tweenTo.tween;

          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
            var progress = (scroll - start) / change,
                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime$1() - _time2) * 1000 || 0,
                change1 = gsap$1.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
                naturalEnd = progress + (snap.inertia === false ? 0 : change1),
                endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),
                endScroll = Math.round(start + endValue * change),
                _snap = snap,
                onStart = _snap.onStart,
                _onInterrupt = _snap.onInterrupt,
                _onComplete = _snap.onComplete;

            if (scroll <= end && scroll >= start && endScroll !== scroll) {
              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
                return;
              }

              if (snap.inertia === false) {
                change1 = endValue - progress;
              }

              tweenTo(endScroll, {
                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
                ease: snap.ease || "power3",
                data: _abs(endScroll - scroll),
                onInterrupt: function onInterrupt() {
                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
                },
                onComplete: function onComplete() {
                  self.update();
                  lastSnap = scrollFunc();
                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                  onSnapComplete && onSnapComplete(self);
                  _onComplete && _onComplete(self);
                }
              }, scroll, change1 * change, endScroll - scroll - change1 * change);
              onStart && onStart(self, tweenTo.tween);
            }
          } else if (self.isActive && lastSnap !== scroll) {
            snapDelayedCall.restart(true);
          }
        }).pause();
      }

      id && (_ids[id] = self);
      trigger = self.trigger = _getTarget(trigger || pin !== true && pin);
      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
      customRevertReturn && (customRevertReturn = customRevertReturn(self));
      pin = pin === true ? trigger : _getTarget(pin);
      _isString(toggleClass) && (toggleClass = {
        targets: trigger,
        className: toggleClass
      });

      if (pin) {
        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding);
        self.pin = pin;
        pinCache = gsap$1.core.getCache(pin);

        if (!pinCache.spacer) {
          if (pinSpacer) {
            pinSpacer = _getTarget(pinSpacer);
            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement);
            pinCache.spacerIsNative = !!pinSpacer;
            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
          }

          pinCache.spacer = spacer = pinSpacer || _doc$1.createElement("div");
          spacer.classList.add("pin-spacer");
          id && spacer.classList.add("pin-spacer-" + id);
          pinCache.pinState = pinOriginalState = _getState(pin);
        } else {
          pinOriginalState = pinCache.pinState;
        }

        vars.force3D !== false && gsap$1.set(pin, {
          force3D: true
        });
        self.spacer = spacer = pinCache.spacer;
        cs = _getComputedStyle(pin);
        spacingStart = cs[pinSpacing + direction.os2];
        pinGetter = gsap$1.getProperty(pin);
        pinSetter = gsap$1.quickSetter(pin, direction.a, _px);

        _swapPinIn(pin, spacer, cs);

        pinState = _getState(pin);
      }

      if (markers) {
        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
        markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
        markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
        offset = markerStartTrigger["offset" + direction.op.d2];

        var content = _getTarget(_getProxyProp(scroller, "content") || scroller);

        markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
        markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
        containerAnimation && (caMarkerSetter = gsap$1.quickSetter([markerStart, markerEnd], direction.a, _px));

        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true)) {
          _makePositionable(isViewport ? _body$1 : scroller);

          gsap$1.set([markerStartTrigger, markerEndTrigger], {
            force3D: true
          });
          markerStartSetter = gsap$1.quickSetter(markerStartTrigger, direction.a, _px);
          markerEndSetter = gsap$1.quickSetter(markerEndTrigger, direction.a, _px);
        }
      }

      if (containerAnimation) {
        var oldOnUpdate = containerAnimation.vars.onUpdate,
            oldParams = containerAnimation.vars.onUpdateParams;
        containerAnimation.eventCallback("onUpdate", function () {
          self.update(0, 0, 1);
          oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
        });
      }

      self.previous = function () {
        return _triggers[_triggers.indexOf(self) - 1];
      };

      self.next = function () {
        return _triggers[_triggers.indexOf(self) + 1];
      };

      self.revert = function (revert, temp) {
        if (!temp) {
          return self.kill(true);
        }

        var r = revert !== false || !self.enabled,
            prevRefreshing = _refreshing;

        if (r !== self.isReverted) {
          if (r) {
            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0);
            prevProgress = self.progress;
            prevAnimProgress = animation && animation.progress();
          }

          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
            return m.style.display = r ? "none" : "block";
          });

          if (r) {
            _refreshing = self;
            self.update(r);
          }

          if (pin && (!pinReparent || !self.isActive)) {
            if (r) {
              _swapPinOut(pin, spacer, pinOriginalState);
            } else {
              _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
            }
          }

          r || self.update(r);
          _refreshing = prevRefreshing;
          self.isReverted = r;
        }
      };

      self.refresh = function (soft, force, position, pinOffset) {
        if ((_refreshing || !self.enabled) && !force) {
          return;
        }

        if (pin && soft && _lastScrollTime) {
          _addListener$1(ScrollTrigger, "scrollEnd", _softRefresh);

          return;
        }

        !_refreshingAll && onRefreshInit && onRefreshInit(self);
        _refreshing = self;

        if (tweenTo.tween && !position) {
          tweenTo.tween.kill();
          tweenTo.tween = 0;
        }

        scrubTween && scrubTween.pause();
        invalidateOnRefresh && animation && animation.revert({
          kill: false
        }).invalidate();
        self.isReverted || self.revert(true, true);
        self._subPinOffset = false;

        var size = getScrollerSize(),
            scrollerBounds = getScrollerOffsets(),
            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
            isFirstRefresh = change <= 0.01,
            offset = 0,
            otherPinOffset = pinOffset || 0,
            parsedEnd = _isObject(position) ? position.end : vars.end,
            parsedEndTrigger = vars.endTrigger || trigger,
            parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
            i = triggerIndex,
            cs,
            bounds,
            scroll,
            isVertical,
            override,
            curTrigger,
            curPin,
            oppositeScroll,
            initted,
            revertedPins,
            forcedOverflow,
            markerStartOffset,
            markerEndOffset;

        if (markers && _isObject(position)) {
          markerStartOffset = gsap$1.getProperty(markerStartTrigger, direction.p);
          markerEndOffset = gsap$1.getProperty(markerEndTrigger, direction.p);
        }

        while (i--) {
          curTrigger = _triggers[i];
          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self);
          curPin = curTrigger.pin;

          if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
            revertedPins || (revertedPins = []);
            revertedPins.unshift(curTrigger);
            curTrigger.revert(true, true);
          }

          if (curTrigger !== _triggers[i]) {
            triggerIndex--;
            i--;
          }
        }

        _isFunction(parsedStart) && (parsedStart = parsedStart(self));
        parsedStart = _parseClamp(parsedStart, "start", self);
        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

        if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
          if (~parsedEnd.indexOf(" ")) {
            parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
          } else {
            offset = _offsetToPx(parsedEnd.substr(2), size);
            parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap$1.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset;
            parsedEndTrigger = trigger;
          }
        }

        parsedEnd = _parseClamp(parsedEnd, "end", self);
        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
        offset = 0;
        i = triggerIndex;

        while (i--) {
          curTrigger = _triggers[i];
          curPin = curTrigger.pin;

          if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
            cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);

            if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {
              offset += cs * (1 - curTrigger.progress);
            }

            curPin === pin && (otherPinOffset += cs);
          }
        }

        start += offset;
        end += offset;
        self._startClamp && (self._startClamp += offset);

        if (self._endClamp && !_refreshingAll) {
          self._endClamp = end || -0.001;
          end = Math.min(end, _maxScroll(scroller, direction));
        }

        change = end - start || (start -= 0.01) && 0.001;

        if (isFirstRefresh) {
          prevProgress = gsap$1.utils.clamp(0, 1, gsap$1.utils.normalize(start, end, prevScroll));
        }

        self._pinPush = otherPinOffset;

        if (markerStart && offset) {
          cs = {};
          cs[direction.a] = "+=" + offset;
          pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
          gsap$1.set([markerStart, markerEnd], cs);
        }

        if (pin) {
          cs = _getComputedStyle(pin);
          isVertical = direction === _vertical;
          scroll = scrollFunc();
          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;

          if (!max && end > 1) {
            forcedOverflow = (isViewport ? _doc$1.scrollingElement || _docEl$1 : scroller).style;
            forcedOverflow = {
              style: forcedOverflow,
              value: forcedOverflow["overflow" + direction.a.toUpperCase()]
            };

            if (isViewport && _getComputedStyle(_body$1)["overflow" + direction.a.toUpperCase()] !== "scroll") {
              forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
            }
          }

          _swapPinIn(pin, spacer, cs);

          pinState = _getState(pin);
          bounds = _getBounds(pin, true);
          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();

          if (pinSpacing) {
            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
            spacerState.t = spacer;
            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;
            i && spacerState.push(direction.d, i + _px);

            _setState(spacerState);

            if (pinnedContainer) {
              _triggers.forEach(function (t) {
                if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                  t._subPinOffset = true;
                }
              });
            }

            useFixedPosition && scrollFunc(prevScroll);
          }

          if (useFixedPosition) {
            override = {
              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
              boxSizing: "border-box",
              position: "fixed"
            };
            override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
            override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
            override[_padding] = cs[_padding];
            override[_padding + _Top] = cs[_padding + _Top];
            override[_padding + _Right] = cs[_padding + _Right];
            override[_padding + _Bottom] = cs[_padding + _Bottom];
            override[_padding + _Left] = cs[_padding + _Left];
            pinActiveState = _copyState(pinOriginalState, override, pinReparent);
            _refreshingAll && scrollFunc(0);
          }

          if (animation) {
            initted = animation._initted;

            _suppressOverwrites(1);

            animation.render(animation.duration(), true, true);
            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
            pinMoves = Math.abs(change - pinChange) > 1;
            useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2);
            animation.render(0, true, true);
            initted || animation.invalidate(true);
            animation.parent || animation.totalTime(animation.totalTime());

            _suppressOverwrites(0);
          } else {
            pinChange = change;
          }

          forcedOverflow && (forcedOverflow.value ? forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty("overflow-" + direction.a));
        } else if (trigger && scrollFunc() && !containerAnimation) {
          bounds = trigger.parentNode;

          while (bounds && bounds !== _body$1) {
            if (bounds._pinOffset) {
              start -= bounds._pinOffset;
              end -= bounds._pinOffset;
            }

            bounds = bounds.parentNode;
          }
        }

        revertedPins && revertedPins.forEach(function (t) {
          return t.revert(false, true);
        });
        self.start = start;
        self.end = end;
        scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc();

        if (!containerAnimation && !_refreshingAll) {
          scroll1 < prevScroll && scrollFunc(prevScroll);
          self.scroll.rec = 0;
        }

        self.revert(false, true);
        lastRefresh = _getTime$1();

        if (snapDelayedCall) {
          lastSnap = -1;
          snapDelayedCall.restart(true);
        }

        _refreshing = 0;
        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true);

        if (isFirstRefresh || prevProgress !== self.progress || containerAnimation) {
          animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap$1.utils.normalize(start, end, 0) : prevProgress, true);
          self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;
        }

        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
        scrubTween && scrubTween.invalidate();

        if (!isNaN(markerStartOffset)) {
          markerStartOffset -= gsap$1.getProperty(markerStartTrigger, direction.p);
          markerEndOffset -= gsap$1.getProperty(markerEndTrigger, direction.p);

          _shiftMarker(markerStartTrigger, direction, markerStartOffset);

          _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));

          _shiftMarker(markerEndTrigger, direction, markerEndOffset);

          _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
        }

        isFirstRefresh && !_refreshingAll && self.update();

        if (onRefresh && !_refreshingAll && !executingOnRefresh) {
          executingOnRefresh = true;
          onRefresh(self);
          executingOnRefresh = false;
        }
      };

      self.getVelocity = function () {
        return (scrollFunc() - scroll2) / (_getTime$1() - _time2) * 1000 || 0;
      };

      self.endAnimation = function () {
        _endAnimation(self.callbackAnimation);

        if (animation) {
          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
        }
      };

      self.labelToScroll = function (label) {
        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
      };

      self.getTrailing = function (name) {
        var i = _triggers.indexOf(self),
            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);

        return (_isString(name) ? a.filter(function (t) {
          return t.vars.preventOverlaps === name;
        }) : a).filter(function (t) {
          return self.direction > 0 ? t.end <= start : t.start >= end;
        });
      };

      self.update = function (reset, recordVelocity, forceFake) {
        if (containerAnimation && !forceFake && !reset) {
          return;
        }

        var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
            p = reset ? 0 : (scroll - start) / change,
            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
            prevProgress = self.progress,
            isActive,
            wasActive,
            toggleState,
            action,
            stateChanged,
            toggled,
            isAtMax,
            isTakingAction;

        if (recordVelocity) {
          scroll2 = scroll1;
          scroll1 = containerAnimation ? scrollFunc() : scroll;

          if (snap) {
            snap2 = snap1;
            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
          }
        }

        anticipatePin && !clipped && pin && !_refreshing && !_startup$1 && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime$1() - _time2) * anticipatePin && (clipped = 0.0001);

        if (clipped !== prevProgress && self.enabled) {
          isActive = self.isActive = !!clipped && clipped < 1;
          wasActive = !!prevProgress && prevProgress < 1;
          toggled = isActive !== wasActive;
          stateChanged = toggled || !!clipped !== !!prevProgress;
          self.direction = clipped > prevProgress ? 1 : -1;
          self.progress = clipped;

          if (stateChanged && !_refreshing) {
            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3;

            if (isToggle) {
              action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState];
              isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
            }
          }

          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
            return t.endAnimation();
          }));

          if (!isToggle) {
            if (scrubTween && !_refreshing && !_startup$1) {
              scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start);

              if (scrubTween.resetTo) {
                scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
              } else {
                scrubTween.vars.totalProgress = clipped;
                scrubTween.invalidate().restart();
              }
            } else if (animation) {
              animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
            }
          }

          if (pin) {
            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);

            if (!useFixedPosition) {
              pinSetter(_round(pinStart + pinChange * clipped));
            } else if (stateChanged) {
              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction);

              if (pinReparent) {
                if (!reset && (isActive || isAtMax)) {
                  var bounds = _getBounds(pin, true),
                      _offset = scroll - start;

                  _reparent(pin, _body$1, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);
                } else {
                  _reparent(pin, spacer);
                }
              }

              _setState(isActive || isAtMax ? pinActiveState : pinState);

              pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
            }
          }

          snap && !tweenTo.tween && !_refreshing && !_startup$1 && snapDelayedCall.restart(true);
          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
            return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
          });
          onUpdate && !isToggle && !reset && onUpdate(self);

          if (stateChanged && !_refreshing) {
            if (isToggle) {
              if (isTakingAction) {
                if (action === "complete") {
                  animation.pause().totalProgress(1);
                } else if (action === "reset") {
                  animation.restart(true).pause();
                } else if (action === "restart") {
                  animation.restart(true);
                } else {
                  animation[action]();
                }
              }

              onUpdate && onUpdate(self);
            }

            if (toggled || !_limitCallbacks) {
              onToggle && toggled && _callback(self, onToggle);
              callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0);

              if (!toggled) {
                toggleState = clipped === 1 ? 1 : 3;
                callbacks[toggleState] && _callback(self, callbacks[toggleState]);
              }
            }

            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
              _endAnimation(self.callbackAnimation);

              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
            }
          } else if (isToggle && onUpdate && !_refreshing) {
            onUpdate(self);
          }
        }

        if (markerEndSetter) {
          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
          markerEndSetter(n);
        }

        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
      };

      self.enable = function (reset, refresh) {
        if (!self.enabled) {
          self.enabled = true;

          _addListener$1(scroller, "resize", _onResize);

          isViewport || _addListener$1(scroller, "scroll", _onScroll$1);
          onRefreshInit && _addListener$1(ScrollTrigger, "refreshInit", onRefreshInit);

          if (reset !== false) {
            self.progress = prevProgress = 0;
            scroll1 = scroll2 = lastSnap = scrollFunc();
          }

          refresh !== false && self.refresh();
        }
      };

      self.getTween = function (snap) {
        return snap && tweenTo ? tweenTo.tween : scrubTween;
      };

      self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
        if (containerAnimation) {
          var st = containerAnimation.scrollTrigger,
              duration = containerAnimation.duration(),
              _change = st.end - st.start;

          newStart = st.start + _change * newStart / duration;
          newEnd = st.start + _change * newEnd / duration;
        }

        self.refresh(false, false, {
          start: _keepClamp(newStart, keepClamp && !!self._startClamp),
          end: _keepClamp(newEnd, keepClamp && !!self._endClamp)
        }, pinOffset);
        self.update();
      };

      self.adjustPinSpacing = function (amount) {
        if (spacerState && amount) {
          var i = spacerState.indexOf(direction.d) + 1;
          spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
          spacerState[1] = parseFloat(spacerState[1]) + amount + _px;

          _setState(spacerState);
        }
      };

      self.disable = function (reset, allowAnimation) {
        if (self.enabled) {
          reset !== false && self.revert(true, true);
          self.enabled = self.isActive = false;
          allowAnimation || scrubTween && scrubTween.pause();
          prevScroll = 0;
          pinCache && (pinCache.uncache = 1);
          onRefreshInit && _removeListener$1(ScrollTrigger, "refreshInit", onRefreshInit);

          if (snapDelayedCall) {
            snapDelayedCall.pause();
            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
          }

          if (!isViewport) {
            var i = _triggers.length;

            while (i--) {
              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
                return;
              }
            }

            _removeListener$1(scroller, "resize", _onResize);

            isViewport || _removeListener$1(scroller, "scroll", _onScroll$1);
          }
        }
      };

      self.kill = function (revert, allowAnimation) {
        self.disable(revert, allowAnimation);
        scrubTween && !allowAnimation && scrubTween.kill();
        id && delete _ids[id];

        var i = _triggers.indexOf(self);

        i >= 0 && _triggers.splice(i, 1);
        i === _i && _direction > 0 && _i--;
        i = 0;

        _triggers.forEach(function (t) {
          return t.scroller === self.scroller && (i = 1);
        });

        i || _refreshingAll || (self.scroll.rec = 0);

        if (animation) {
          animation.scrollTrigger = null;
          revert && animation.revert({
            kill: false
          });
          allowAnimation || animation.kill();
        }

        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
          return m.parentNode && m.parentNode.removeChild(m);
        });
        _primary === self && (_primary = 0);

        if (pin) {
          pinCache && (pinCache.uncache = 1);
          i = 0;

          _triggers.forEach(function (t) {
            return t.pin === pin && i++;
          });

          i || (pinCache.spacer = 0);
        }

        vars.onKill && vars.onKill(self);
      };

      _triggers.push(self);

      self.enable(false, false);
      customRevertReturn && customRevertReturn(self);

      if (animation && animation.add && !change) {
        var updateFunc = self.update;

        self.update = function () {
          self.update = updateFunc;
          start || end || self.refresh();
        };

        gsap$1.delayedCall(0.01, self.update);
        change = 0.01;
        start = end = 0;
      } else {
        self.refresh();
      }

      pin && _queueRefreshAll();
    };

    ScrollTrigger.register = function register(core) {
      if (!_coreInitted$1) {
        gsap$1 = core || _getGSAP$1();
        _windowExists() && window.document && ScrollTrigger.enable();
        _coreInitted$1 = _enabled;
      }

      return _coreInitted$1;
    };

    ScrollTrigger.defaults = function defaults(config) {
      if (config) {
        for (var p in config) {
          _defaults[p] = config[p];
        }
      }

      return _defaults;
    };

    ScrollTrigger.disable = function disable(reset, kill) {
      _enabled = 0;

      _triggers.forEach(function (trigger) {
        return trigger[kill ? "kill" : "disable"](reset);
      });

      _removeListener$1(_win$1, "wheel", _onScroll$1);

      _removeListener$1(_doc$1, "scroll", _onScroll$1);

      clearInterval(_syncInterval);

      _removeListener$1(_doc$1, "touchcancel", _passThrough);

      _removeListener$1(_body$1, "touchstart", _passThrough);

      _multiListener(_removeListener$1, _doc$1, "pointerdown,touchstart,mousedown", _pointerDownHandler);

      _multiListener(_removeListener$1, _doc$1, "pointerup,touchend,mouseup", _pointerUpHandler);

      _resizeDelay.kill();

      _iterateAutoRefresh(_removeListener$1);

      for (var i = 0; i < _scrollers.length; i += 3) {
        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);

        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);
      }
    };

    ScrollTrigger.enable = function enable() {
      _win$1 = window;
      _doc$1 = document;
      _docEl$1 = _doc$1.documentElement;
      _body$1 = _doc$1.body;

      if (gsap$1) {
        _toArray = gsap$1.utils.toArray;
        _clamp$1 = gsap$1.utils.clamp;
        _context$1 = gsap$1.core.context || _passThrough;
        _suppressOverwrites = gsap$1.core.suppressOverwrites || _passThrough;
        _scrollRestoration = _win$1.history.scrollRestoration || "auto";
        _lastScroll = _win$1.pageYOffset;
        gsap$1.core.globals("ScrollTrigger", ScrollTrigger);

        if (_body$1) {
          _enabled = 1;
          _div100vh = document.createElement("div");
          _div100vh.style.height = "100vh";
          _div100vh.style.position = "absolute";

          _refresh100vh();

          _rafBugFix();

          Observer.register(gsap$1);
          ScrollTrigger.isTouch = Observer.isTouch;
          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent);

          _addListener$1(_win$1, "wheel", _onScroll$1);

          _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];

          if (gsap$1.matchMedia) {
            ScrollTrigger.matchMedia = function (vars) {
              var mm = gsap$1.matchMedia(),
                  p;

              for (p in vars) {
                mm.add(p, vars[p]);
              }

              return mm;
            };

            gsap$1.addEventListener("matchMediaInit", function () {
              return _revertAll();
            });
            gsap$1.addEventListener("matchMediaRevert", function () {
              return _revertRecorded();
            });
            gsap$1.addEventListener("matchMedia", function () {
              _refreshAll(0, 1);

              _dispatch("matchMedia");
            });
            gsap$1.matchMedia("(orientation: portrait)", function () {
              _setBaseDimensions();

              return _setBaseDimensions;
            });
          } else {
            console.warn("Requires GSAP 3.11.0 or later");
          }

          _setBaseDimensions();

          _addListener$1(_doc$1, "scroll", _onScroll$1);

          var bodyStyle = _body$1.style,
              border = bodyStyle.borderTopStyle,
              AnimationProto = gsap$1.core.Animation.prototype,
              bounds,
              i;
          AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", {
            value: function value() {
              return this.time(-0.01, true);
            }
          });
          bodyStyle.borderTopStyle = "solid";
          bounds = _getBounds(_body$1);
          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0;
          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style");
          _syncInterval = setInterval(_sync, 250);
          gsap$1.delayedCall(0.5, function () {
            return _startup$1 = 0;
          });

          _addListener$1(_doc$1, "touchcancel", _passThrough);

          _addListener$1(_body$1, "touchstart", _passThrough);

          _multiListener(_addListener$1, _doc$1, "pointerdown,touchstart,mousedown", _pointerDownHandler);

          _multiListener(_addListener$1, _doc$1, "pointerup,touchend,mouseup", _pointerUpHandler);

          _transformProp = gsap$1.utils.checkPrefix("transform");

          _stateProps.push(_transformProp);

          _coreInitted$1 = _getTime$1();
          _resizeDelay = gsap$1.delayedCall(0.2, _refreshAll).pause();
          _autoRefresh = [_doc$1, "visibilitychange", function () {
            var w = _win$1.innerWidth,
                h = _win$1.innerHeight;

            if (_doc$1.hidden) {
              _prevWidth = w;
              _prevHeight = h;
            } else if (_prevWidth !== w || _prevHeight !== h) {
              _onResize();
            }
          }, _doc$1, "DOMContentLoaded", _refreshAll, _win$1, "load", _refreshAll, _win$1, "resize", _onResize];

          _iterateAutoRefresh(_addListener$1);

          _triggers.forEach(function (trigger) {
            return trigger.enable(0, 1);
          });

          for (i = 0; i < _scrollers.length; i += 3) {
            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);

            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);
          }
        }
      }
    };

    ScrollTrigger.config = function config(vars) {
      "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
      var ms = vars.syncInterval;
      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
      "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

      if ("autoRefreshEvents" in vars) {
        _iterateAutoRefresh(_removeListener$1) || _iterateAutoRefresh(_addListener$1, vars.autoRefreshEvents || "none");
        _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
      }
    };

    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
      var t = _getTarget(target),
          i = _scrollers.indexOf(t),
          isViewport = _isViewport$1(t);

      if (~i) {
        _scrollers.splice(i, isViewport ? 6 : 2);
      }

      if (vars) {
        isViewport ? _proxies.unshift(_win$1, vars, _body$1, vars, _docEl$1, vars) : _proxies.unshift(t, vars);
      }
    };

    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
      _triggers.forEach(function (t) {
        return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
      });
    };

    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {
      var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
          offset = bounds[horizontal ? _width : _height] * ratio || 0;
      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win$1.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win$1.innerHeight;
    };

    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {
      _isString(element) && (element = _getTarget(element));
      var bounds = element.getBoundingClientRect(),
          size = bounds[horizontal ? _width : _height],
          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
      return horizontal ? (bounds.left + offset) / _win$1.innerWidth : (bounds.top + offset) / _win$1.innerHeight;
    };

    ScrollTrigger.killAll = function killAll(allowListeners) {
      _triggers.slice(0).forEach(function (t) {
        return t.vars.id !== "ScrollSmoother" && t.kill();
      });

      if (allowListeners !== true) {
        var listeners = _listeners.killAll || [];
        _listeners = {};
        listeners.forEach(function (f) {
          return f();
        });
      }
    };

    return ScrollTrigger;
  }();
  ScrollTrigger$1.version = "3.12.2";

  ScrollTrigger$1.saveStyles = function (targets) {
    return targets ? _toArray(targets).forEach(function (target) {
      if (target && target.style) {
        var i = _savedStyles.indexOf(target);

        i >= 0 && _savedStyles.splice(i, 5);

        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap$1.core.getCache(target), _context$1());
      }
    }) : _savedStyles;
  };

  ScrollTrigger$1.revert = function (soft, media) {
    return _revertAll(!soft, media);
  };

  ScrollTrigger$1.create = function (vars, animation) {
    return new ScrollTrigger$1(vars, animation);
  };

  ScrollTrigger$1.refresh = function (safe) {
    return safe ? _onResize() : (_coreInitted$1 || ScrollTrigger$1.register()) && _refreshAll(true);
  };

  ScrollTrigger$1.update = function (force) {
    return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
  };

  ScrollTrigger$1.clearScrollMemory = _clearScrollMemory;

  ScrollTrigger$1.maxScroll = function (element, horizontal) {
    return _maxScroll(element, horizontal ? _horizontal : _vertical);
  };

  ScrollTrigger$1.getScrollFunc = function (element, horizontal) {
    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
  };

  ScrollTrigger$1.getById = function (id) {
    return _ids[id];
  };

  ScrollTrigger$1.getAll = function () {
    return _triggers.filter(function (t) {
      return t.vars.id !== "ScrollSmoother";
    });
  };

  ScrollTrigger$1.isScrolling = function () {
    return !!_lastScrollTime;
  };

  ScrollTrigger$1.snapDirectional = _snapDirectional;

  ScrollTrigger$1.addEventListener = function (type, callback) {
    var a = _listeners[type] || (_listeners[type] = []);
    ~a.indexOf(callback) || a.push(callback);
  };

  ScrollTrigger$1.removeEventListener = function (type, callback) {
    var a = _listeners[type],
        i = a && a.indexOf(callback);
    i >= 0 && a.splice(i, 1);
  };

  ScrollTrigger$1.batch = function (targets, vars) {
    var result = [],
        varsCopy = {},
        interval = vars.interval || 0.016,
        batchMax = vars.batchMax || 1e9,
        proxyCallback = function proxyCallback(type, callback) {
      var elements = [],
          triggers = [],
          delay = gsap$1.delayedCall(interval, function () {
        callback(elements, triggers);
        elements = [];
        triggers = [];
      }).pause();
      return function (self) {
        elements.length || delay.restart(true);
        elements.push(self.trigger);
        triggers.push(self);
        batchMax <= elements.length && delay.progress(1);
      };
    },
        p;

    for (p in vars) {
      varsCopy[p] = p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
    }

    if (_isFunction(batchMax)) {
      batchMax = batchMax();

      _addListener$1(ScrollTrigger$1, "refresh", function () {
        return batchMax = vars.batchMax();
      });
    }

    _toArray(targets).forEach(function (target) {
      var config = {};

      for (p in varsCopy) {
        config[p] = varsCopy[p];
      }

      config.trigger = target;
      result.push(ScrollTrigger$1.create(config));
    });

    return result;
  };

  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
  },
      _allowNativePanning = function _allowNativePanning(target, direction) {
    if (direction === true) {
      target.style.removeProperty("touch-action");
    } else {
      target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none";
    }

    target === _docEl$1 && _allowNativePanning(_body$1, direction);
  },
      _overflow = {
    auto: 1,
    scroll: 1
  },
      _nestedScroll = function _nestedScroll(_ref5) {
    var event = _ref5.event,
        target = _ref5.target,
        axis = _ref5.axis;

    var node = (event.changedTouches ? event.changedTouches[0] : event).target,
        cache = node._gsap || gsap$1.core.getCache(node),
        time = _getTime$1(),
        cs;

    if (!cache._isScrollT || time - cache._isScrollT > 2000) {
      while (node && node !== _body$1 && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {
        node = node.parentNode;
      }

      cache._isScroll = node && node !== target && !_isViewport$1(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
      cache._isScrollT = time;
    }

    if (cache._isScroll || axis === "x") {
      event.stopPropagation();
      event._gsapAllow = true;
    }
  },
      _inputObserver = function _inputObserver(target, type, inputs, nested) {
    return Observer.create({
      target: target,
      capture: true,
      debounce: false,
      lockAxis: true,
      type: type,
      onWheel: nested = nested && _nestedScroll,
      onPress: nested,
      onDrag: nested,
      onScroll: nested,
      onEnable: function onEnable() {
        return inputs && _addListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, false, true);
      },
      onDisable: function onDisable() {
        return _removeListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, true);
      }
    });
  },
      _inputExp = /(input|label|select|textarea)/i,
      _inputIsFocused,
      _captureInputs = function _captureInputs(e) {
    var isInput = _inputExp.test(e.target.tagName);

    if (isInput || _inputIsFocused) {
      e._gsapAllow = true;
      _inputIsFocused = isInput;
    }
  },
      _getScrollNormalizer = function _getScrollNormalizer(vars) {
    _isObject(vars) || (vars = {});
    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
    vars.type || (vars.type = "wheel,touch");
    vars.debounce = !!vars.debounce;
    vars.id = vars.id || "normalizer";

    var _vars2 = vars,
        normalizeScrollX = _vars2.normalizeScrollX,
        momentum = _vars2.momentum,
        allowNestedScroll = _vars2.allowNestedScroll,
        onRelease = _vars2.onRelease,
        self,
        maxY,
        target = _getTarget(vars.target) || _docEl$1,
        smoother = gsap$1.core.globals().ScrollSmoother,
        smootherInstance = smoother && smoother.get(),
        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),
        scrollFuncY = _getScrollFunc(target, _vertical),
        scrollFuncX = _getScrollFunc(target, _horizontal),
        scale = 1,
        initialScale = (Observer.isTouch && _win$1.visualViewport ? _win$1.visualViewport.scale * _win$1.visualViewport.width : _win$1.outerWidth) / _win$1.innerWidth,
        wheelRefresh = 0,
        resolveMomentumDuration = _isFunction(momentum) ? function () {
      return momentum(self);
    } : function () {
      return momentum || 2.8;
    },
        lastRefreshID,
        skipTouchMove,
        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
        resumeTouchMove = function resumeTouchMove() {
      return skipTouchMove = false;
    },
        scrollClampX = _passThrough,
        scrollClampY = _passThrough,
        updateClamps = function updateClamps() {
      maxY = _maxScroll(target, _vertical);
      scrollClampY = _clamp$1(_fixIOSBug ? 1 : 0, maxY);
      normalizeScrollX && (scrollClampX = _clamp$1(0, _maxScroll(target, _horizontal)));
      lastRefreshID = _refreshID;
    },
        removeContentOffset = function removeContentOffset() {
      content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
      content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
      scrollFuncY.offset = scrollFuncY.cacheID = 0;
    },
        ignoreDrag = function ignoreDrag() {
      if (skipTouchMove) {
        requestAnimationFrame(resumeTouchMove);

        var offset = _round(self.deltaY / 2),
            scroll = scrollClampY(scrollFuncY.v - offset);

        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
          scrollFuncY.offset = scroll - scrollFuncY.v;

          var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);

          content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
          content._gsap.y = y + "px";
          scrollFuncY.cacheID = _scrollers.cache;

          _updateAll();
        }

        return true;
      }

      scrollFuncY.offset && removeContentOffset();
      skipTouchMove = true;
    },
        tween,
        startScrollX,
        startScrollY,
        onStopDelayedCall,
        onResize = function onResize() {
      updateClamps();

      if (tween.isActive() && tween.vars.scrollY > maxY) {
        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
      }
    };

    content && gsap$1.set(content, {
      y: "+=0"
    });

    vars.ignoreCheck = function (e) {
      return _fixIOSBug && e.type === "touchmove" && ignoreDrag() || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
    };

    vars.onPress = function () {
      skipTouchMove = false;
      var prevScale = scale;
      scale = _round((_win$1.visualViewport && _win$1.visualViewport.scale || 1) / initialScale);
      tween.pause();
      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
      startScrollX = scrollFuncX();
      startScrollY = scrollFuncY();
      updateClamps();
      lastRefreshID = _refreshID;
    };

    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
      scrollFuncY.offset && removeContentOffset();

      if (!wasDragging) {
        onStopDelayedCall.restart(true);
      } else {
        _scrollers.cache++;
        var dur = resolveMomentumDuration(),
            currentScroll,
            endScroll;

        if (normalizeScrollX) {
          currentScroll = scrollFuncX();
          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227;
          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
          tween.vars.scrollX = scrollClampX(endScroll);
        }

        currentScroll = scrollFuncY();
        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227;
        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
        tween.vars.scrollY = scrollClampY(endScroll);
        tween.invalidate().duration(dur).play(0.01);

        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
          gsap$1.to({}, {
            onUpdate: onResize,
            duration: dur
          });
        }
      }

      onRelease && onRelease(self);
    };

    vars.onWheel = function () {
      tween._ts && tween.pause();

      if (_getTime$1() - wheelRefresh > 1000) {
        lastRefreshID = 0;
        wheelRefresh = _getTime$1();
      }
    };

    vars.onChange = function (self, dx, dy, xArray, yArray) {
      _refreshID !== lastRefreshID && updateClamps();
      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1]));

      if (dy) {
        scrollFuncY.offset && removeContentOffset();
        var isTouch = yArray[2] === dy,
            y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
            yClamped = scrollClampY(y);
        isTouch && y !== yClamped && (startScrollY += yClamped - y);
        scrollFuncY(yClamped);
      }

      (dy || dx) && _updateAll();
    };

    vars.onEnable = function () {
      _allowNativePanning(target, normalizeScrollX ? false : "x");

      ScrollTrigger$1.addEventListener("refresh", onResize);

      _addListener$1(_win$1, "resize", onResize);

      if (scrollFuncY.smooth) {
        scrollFuncY.target.style.scrollBehavior = "auto";
        scrollFuncY.smooth = scrollFuncX.smooth = false;
      }

      inputObserver.enable();
    };

    vars.onDisable = function () {
      _allowNativePanning(target, true);

      _removeListener$1(_win$1, "resize", onResize);

      ScrollTrigger$1.removeEventListener("refresh", onResize);
      inputObserver.kill();
    };

    vars.lockAxis = vars.lockAxis !== false;
    self = new Observer(vars);
    self.iOS = _fixIOSBug;
    _fixIOSBug && !scrollFuncY() && scrollFuncY(1);
    _fixIOSBug && gsap$1.ticker.add(_passThrough);
    onStopDelayedCall = self._dc;
    tween = gsap$1.to(self, {
      ease: "power4",
      paused: true,
      scrollX: normalizeScrollX ? "+=0.1" : "+=0",
      scrollY: "+=0.1",
      modifiers: {
        scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
          return tween.pause();
        })
      },
      onUpdate: _updateAll,
      onComplete: onStopDelayedCall.vars.onComplete
    });
    return self;
  };

  ScrollTrigger$1.sort = function (func) {
    return _triggers.sort(func || function (a, b) {
      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);
    });
  };

  ScrollTrigger$1.observe = function (vars) {
    return new Observer(vars);
  };

  ScrollTrigger$1.normalizeScroll = function (vars) {
    if (typeof vars === "undefined") {
      return _normalizer$1;
    }

    if (vars === true && _normalizer$1) {
      return _normalizer$1.enable();
    }

    if (vars === false) {
      return _normalizer$1 && _normalizer$1.kill();
    }

    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
    _normalizer$1 && _normalizer$1.target === normalizer.target && _normalizer$1.kill();
    _isViewport$1(normalizer.target) && (_normalizer$1 = normalizer);
    return normalizer;
  };

  ScrollTrigger$1.core = {
    _getVelocityProp: _getVelocityProp,
    _inputObserver: _inputObserver,
    _scrollers: _scrollers,
    _proxies: _proxies,
    bridge: {
      ss: function ss() {
        _lastScrollTime || _dispatch("scrollStart");
        _lastScrollTime = _getTime$1();
      },
      ref: function ref() {
        return _refreshing;
      }
    }
  };
  _getGSAP$1() && gsap$1.registerPlugin(ScrollTrigger$1);

  exports.ScrollTrigger = ScrollTrigger$1;
  exports.default = ScrollTrigger$1;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

},{}],42:[function(require,module,exports){
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.window = global.window || {}));
}(this, (function (exports) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /*!
   * GSAP 3.12.2
   * https://greensock.com
   *
   * @license Copyright 2008-2023, GreenSock. All rights reserved.
   * Subject to the terms at https://greensock.com/standard-license or for
   * Club GreenSock members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  */
  var _config = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
      lineHeight: ""
    }
  },
      _defaults = {
    duration: .5,
    overwrite: false,
    delay: 0
  },
      _suppressOverwrites,
      _reverting,
      _context,
      _bigNum = 1e8,
      _tinyNum = 1 / _bigNum,
      _2PI = Math.PI * 2,
      _HALF_PI = _2PI / 4,
      _gsID = 0,
      _sqrt = Math.sqrt,
      _cos = Math.cos,
      _sin = Math.sin,
      _isString = function _isString(value) {
    return typeof value === "string";
  },
      _isFunction = function _isFunction(value) {
    return typeof value === "function";
  },
      _isNumber = function _isNumber(value) {
    return typeof value === "number";
  },
      _isUndefined = function _isUndefined(value) {
    return typeof value === "undefined";
  },
      _isObject = function _isObject(value) {
    return typeof value === "object";
  },
      _isNotFalse = function _isNotFalse(value) {
    return value !== false;
  },
      _windowExists = function _windowExists() {
    return typeof window !== "undefined";
  },
      _isFuncOrString = function _isFuncOrString(value) {
    return _isFunction(value) || _isString(value);
  },
      _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
      _isArray = Array.isArray,
      _strictNumExp = /(?:-?\.?\d|\.)+/gi,
      _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
      _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
      _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
      _relExp = /[+-]=-?[.\d]+/,
      _delimitedValueExp = /[^,'"\[\]\s]+/gi,
      _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
      _globalTimeline,
      _win,
      _coreInitted,
      _doc,
      _globals = {},
      _installScope = {},
      _coreReady,
      _install = function _install(scope) {
    return (_installScope = _merge(scope, _globals)) && gsap;
  },
      _missingPlugin = function _missingPlugin(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
  },
      _warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
  },
      _addGlobal = function _addGlobal(name, obj) {
    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
  },
      _emptyFunc = function _emptyFunc() {
    return 0;
  },
      _startAtRevertConfig = {
    suppressEvents: true,
    isStart: true,
    kill: false
  },
      _revertConfigNoKill = {
    suppressEvents: true,
    kill: false
  },
      _revertConfig = {
    suppressEvents: true
  },
      _reservedProps = {},
      _lazyTweens = [],
      _lazyLookup = {},
      _lastRenderedFrame,
      _plugins = {},
      _effects = {},
      _nextGCFrame = 30,
      _harnessPlugins = [],
      _callbackNames = "",
      _harness = function _harness(targets) {
    var target = targets[0],
        harnessPlugin,
        i;
    _isObject(target) || _isFunction(target) || (targets = [targets]);

    if (!(harnessPlugin = (target._gsap || {}).harness)) {
      i = _harnessPlugins.length;

      while (i-- && !_harnessPlugins[i].targetTest(target)) {}

      harnessPlugin = _harnessPlugins[i];
    }

    i = targets.length;

    while (i--) {
      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
    }

    return targets;
  },
      _getCache = function _getCache(target) {
    return target._gsap || _harness(toArray(target))[0]._gsap;
  },
      _getProperty = function _getProperty(target, property, v) {
    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
  },
      _forEachName = function _forEachName(names, func) {
    return (names = names.split(",")).forEach(func) || names;
  },
      _round = function _round(value) {
    return Math.round(value * 100000) / 100000 || 0;
  },
      _roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
  },
      _parseRelative = function _parseRelative(start, value) {
    var operator = value.charAt(0),
        end = parseFloat(value.substr(2));
    start = parseFloat(start);
    return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
  },
      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    var l = toFind.length,
        i = 0;

    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

    return i < l;
  },
      _lazyRender = function _lazyRender() {
    var l = _lazyTweens.length,
        a = _lazyTweens.slice(0),
        i,
        tween;

    _lazyLookup = {};
    _lazyTweens.length = 0;

    for (i = 0; i < l; i++) {
      tween = a[i];
      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
  },
      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    _lazyTweens.length && !_reverting && _lazyRender();
    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));
    _lazyTweens.length && !_reverting && _lazyRender();
  },
      _numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
  },
      _passThrough = function _passThrough(p) {
    return p;
  },
      _setDefaults = function _setDefaults(obj, defaults) {
    for (var p in defaults) {
      p in obj || (obj[p] = defaults[p]);
    }

    return obj;
  },
      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function (obj, defaults) {
      for (var p in defaults) {
        p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
      }
    };
  },
      _merge = function _merge(base, toMerge) {
    for (var p in toMerge) {
      base[p] = toMerge[p];
    }

    return base;
  },
      _mergeDeep = function _mergeDeep(base, toMerge) {
    for (var p in toMerge) {
      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
    }

    return base;
  },
      _copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {},
        p;

    for (p in obj) {
      p in excluding || (copy[p] = obj[p]);
    }

    return copy;
  },
      _inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || _globalTimeline,
        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

    if (_isNotFalse(vars.inherit)) {
      while (parent) {
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
      }
    }

    return vars;
  },
      _arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length,
        match = i === a2.length;

    while (match && i-- && a1[i] === a2[i]) {}

    return i < 0;
  },
      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = parent[lastProp],
        t;

    if (sortBy) {
      t = child[sortBy];

      while (prev && prev[sortBy] > t) {
        prev = prev._prev;
      }
    }

    if (prev) {
      child._next = prev._next;
      prev._next = child;
    } else {
      child._next = parent[firstProp];
      parent[firstProp] = child;
    }

    if (child._next) {
      child._next._prev = child;
    } else {
      parent[lastProp] = child;
    }

    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
  },
      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) {
      firstProp = "_first";
    }

    if (lastProp === void 0) {
      lastProp = "_last";
    }

    var prev = child._prev,
        next = child._next;

    if (prev) {
      prev._next = next;
    } else if (parent[firstProp] === child) {
      parent[firstProp] = next;
    }

    if (next) {
      next._prev = prev;
    } else if (parent[lastProp] === child) {
      parent[lastProp] = prev;
    }

    child._next = child._prev = child.parent = null;
  },
      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
    child._act = 0;
  },
      _uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
      var a = animation;

      while (a) {
        a._dirty = 1;
        a = a.parent;
      }
    }

    return animation;
  },
      _recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;

    while (parent && parent.parent) {
      parent._dirty = 1;
      parent.totalDuration();
      parent = parent.parent;
    }

    return animation;
  },
      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
  },
      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
  },
      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
  },
      _animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
  },
      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
  },
      _setEnd = function _setEnd(animation) {
    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
  },
      _alignPlayhead = function _alignPlayhead(animation, totalTime) {
    var parent = animation._dp;

    if (parent && parent.smoothChildTiming && animation._ts) {
      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

      _setEnd(animation);

      parent._dirty || _uncache(parent, animation);
    }

    return animation;
  },
      _postAddChecks = function _postAddChecks(timeline, child) {
    var t;

    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
      t = _parentToChildTotalTime(timeline.rawTime(), child);

      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
        child.render(t, true);
      }
    }

    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
      if (timeline._dur < timeline.duration()) {
        t = timeline;

        while (t._dp) {
          t.rawTime() >= 0 && t.totalTime(t._tTime);
          t = t._dp;
        }
      }

      timeline._zTime = -_tinyNum;
    }
  },
      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && _removeFromParent(child);
    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

    _isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || _postAddChecks(timeline, child);
    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);
    return timeline;
  },
      _scrollTrigger = function _scrollTrigger(animation, trigger) {
    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
  },
      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
    _initTween(tween, time, tTime);

    if (!tween._initted) {
      return 1;
    }

    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
      _lazyTweens.push(tween);

      tween._lazy = [tTime, suppressEvents];
      return 1;
    }
  },
      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
  },
      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
  },
      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio,
        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
        repeatDelay = tween._rDelay,
        tTime = 0,
        pt,
        iteration,
        prevIteration;

    if (repeatDelay && tween._repeat) {
      tTime = _clamp(0, tween._tDur, totalTime);
      iteration = _animationCycle(tTime, repeatDelay);
      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
        prevRatio = 1 - ratio;
        tween.vars.repeatRefresh && tween._initted && tween.invalidate();
      }
    }

    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
        return;
      }

      prevIteration = tween._zTime;
      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);
      suppressEvents || (suppressEvents = totalTime && !prevIteration);
      tween.ratio = ratio;
      tween._from && (ratio = 1 - ratio);
      tween._time = 0;
      tween._tTime = tTime;
      pt = tween._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }

      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
        ratio && _removeFromParent(tween, 1);

        if (!suppressEvents && !_reverting) {
          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

          tween._prom && tween._prom();
        }
      }
    } else if (!tween._zTime) {
      tween._zTime = totalTime;
    }
  },
      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;

    if (time > prevTime) {
      child = animation._first;

      while (child && child._start <= time) {
        if (child.data === "isPause" && child._start > prevTime) {
          return child;
        }

        child = child._next;
      }
    } else {
      child = animation._last;

      while (child && child._start >= time) {
        if (child.data === "isPause" && child._start < prevTime) {
          return child;
        }

        child = child._prev;
      }
    }
  },
      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat,
        dur = _roundPrecise(duration) || 0,
        totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
    animation.parent && _setEnd(animation);
    skipUncache || _uncache(animation.parent, animation);
    return animation;
  },
      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
  },
      _zeroPosition = {
    _start: 0,
    endTime: _emptyFunc,
    totalDuration: _emptyFunc
  },
      _parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels,
        recent = animation._recent || _zeroPosition,
        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,
        i,
        offset,
        isPercent;

    if (_isString(position) && (isNaN(position) || position in labels)) {
      offset = position.charAt(0);
      isPercent = position.substr(-1) === "%";
      i = position.indexOf("=");

      if (offset === "<" || offset === ">") {
        i >= 0 && (position = position.replace(/=/, ""));
        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
      }

      if (i < 0) {
        position in labels || (labels[position] = clippedDuration);
        return labels[position];
      }

      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

      if (isPercent && percentAnimation) {
        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
      }

      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }

    return position == null ? clippedDuration : +position;
  },
      _createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = _isNumber(params[1]),
        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
        vars = params[varsIndex],
        irVars,
        parent;

    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;

    if (type) {
      irVars = vars;
      parent = timeline;

      while (parent && !("immediateRender" in irVars)) {
        irVars = parent.vars.defaults || {};
        parent = _isNotFalse(parent.vars.inherit) && parent.parent;
      }

      vars.immediateRender = _isNotFalse(irVars.immediateRender);
      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];
    }

    return new Tween(params[0], vars, params[varsIndex + 1]);
  },
      _conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
  },
      _clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
  },
      getUnit = function getUnit(value, v) {
    return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
  },
      clamp = function clamp(min, max, value) {
    return _conditionalReturn(value, function (v) {
      return _clamp(min, max, v);
    });
  },
      _slice = [].slice,
      _isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;
  },
      _flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) {
      accumulator = [];
    }

    return ar.forEach(function (value) {
      var _accumulator;

      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
    }) || accumulator;
  },
      toArray = function toArray(value, scope, leaveStrings) {
    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
  },
      selector = function selector(value) {
    value = toArray(value)[0] || _warn("Invalid scope") || {};
    return function (v) {
      var el = value.current || value.nativeElement || value;
      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);
    };
  },
      shuffle = function shuffle(a) {
    return a.sort(function () {
      return .5 - Math.random();
    });
  },
      distribute = function distribute(v) {
    if (_isFunction(v)) {
      return v;
    }

    var vars = _isObject(v) ? v : {
      each: v
    },
        ease = _parseEase(vars.ease),
        from = vars.from || 0,
        base = parseFloat(vars.base) || 0,
        cache = {},
        isDecimal = from > 0 && from < 1,
        ratios = isNaN(from) || isDecimal,
        axis = vars.axis,
        ratioX = from,
        ratioY = from;

    if (_isString(from)) {
      ratioX = ratioY = {
        center: .5,
        edges: .5,
        end: 1
      }[from] || 0;
    } else if (!isDecimal && ratios) {
      ratioX = from[0];
      ratioY = from[1];
    }

    return function (i, target, a) {
      var l = (a || vars).length,
          distances = cache[l],
          originX,
          originY,
          x,
          y,
          d,
          j,
          max,
          min,
          wrapAt;

      if (!distances) {
        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];

        if (!wrapAt) {
          max = -_bigNum;

          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

          wrapAt--;
        }

        distances = cache[l] = [];
        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
        max = 0;
        min = _bigNum;

        for (j = 0; j < l; j++) {
          x = j % wrapAt - originX;
          y = originY - (j / wrapAt | 0);
          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
          d > max && (max = d);
          d < min && (min = d);
        }

        from === "random" && shuffle(distances);
        distances.max = max - min;
        distances.min = min;
        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
        distances.b = l < 0 ? base - l : base;
        distances.u = getUnit(vars.amount || vars.each) || 0;
        ease = ease && l < 0 ? _invertEase(ease) : ease;
      }

      l = (distances[i] - distances.min) / distances.max || 0;
      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;
    };
  },
      _roundModifier = function _roundModifier(v) {
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length);
    return function (raw) {
      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));
    };
  },
      snap = function snap(snapTo, value) {
    var isArray = _isArray(snapTo),
        radius,
        is2D;

    if (!isArray && _isObject(snapTo)) {
      radius = isArray = snapTo.radius || _bigNum;

      if (snapTo.values) {
        snapTo = toArray(snapTo.values);

        if (is2D = !_isNumber(snapTo[0])) {
          radius *= radius;
        }
      } else {
        snapTo = _roundModifier(snapTo.increment);
      }
    }

    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
      is2D = snapTo(raw);
      return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function (raw) {
      var x = parseFloat(is2D ? raw.x : raw),
          y = parseFloat(is2D ? raw.y : 0),
          min = _bigNum,
          closest = 0,
          i = snapTo.length,
          dx,
          dy;

      while (i--) {
        if (is2D) {
          dx = snapTo[i].x - x;
          dy = snapTo[i].y - y;
          dx = dx * dx + dy * dy;
        } else {
          dx = Math.abs(snapTo[i] - x);
        }

        if (dx < min) {
          min = dx;
          closest = i;
        }
      }

      closest = !radius || min <= radius ? snapTo[closest] : raw;
      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
    });
  },
      random = function random(min, max, roundingIncrement, returnFunction) {
    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
  },
      pipe = function pipe() {
    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
      functions[_key] = arguments[_key];
    }

    return function (value) {
      return functions.reduce(function (v, f) {
        return f(v);
      }, value);
    };
  },
      unitize = function unitize(func, unit) {
    return function (value) {
      return func(parseFloat(value)) + (unit || getUnit(value));
    };
  },
      normalize = function normalize(min, max, value) {
    return mapRange(min, max, 0, 1, value);
  },
      _wrapArray = function _wrapArray(a, wrapper, value) {
    return _conditionalReturn(value, function (index) {
      return a[~~wrapper(index)];
    });
  },
      wrap = function wrap(min, max, value) {
    var range = max - min;
    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
      return (range + (value - min) % range) % range + min;
    });
  },
      wrapYoyo = function wrapYoyo(min, max, value) {
    var range = max - min,
        total = range * 2;
    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
      value = (total + (value - min) % total) % total || 0;
      return min + (value > range ? total - value : value);
    });
  },
      _replaceRandom = function _replaceRandom(value) {
    var prev = 0,
        s = "",
        i,
        nums,
        end,
        isArray;

    while (~(i = value.indexOf("random(", prev))) {
      end = value.indexOf(")", i);
      isArray = value.charAt(i + 7) === "[";
      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
      prev = end + 1;
    }

    return s + value.substr(prev, value.length - prev);
  },
      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
    var inRange = inMax - inMin,
        outRange = outMax - outMin;
    return _conditionalReturn(value, function (value) {
      return outMin + ((value - inMin) / inRange * outRange || 0);
    });
  },
      interpolate = function interpolate(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function (p) {
      return (1 - p) * start + p * end;
    };

    if (!func) {
      var isString = _isString(start),
          master = {},
          p,
          i,
          interpolators,
          l,
          il;

      progress === true && (mutate = 1) && (progress = null);

      if (isString) {
        start = {
          p: start
        };
        end = {
          p: end
        };
      } else if (_isArray(start) && !_isArray(end)) {
        interpolators = [];
        l = start.length;
        il = l - 2;

        for (i = 1; i < l; i++) {
          interpolators.push(interpolate(start[i - 1], start[i]));
        }

        l--;

        func = function func(p) {
          p *= l;
          var i = Math.min(il, ~~p);
          return interpolators[i](p - i);
        };

        progress = end;
      } else if (!mutate) {
        start = _merge(_isArray(start) ? [] : {}, start);
      }

      if (!interpolators) {
        for (p in end) {
          _addPropTween.call(master, start, p, "get", end[p]);
        }

        func = function func(p) {
          return _renderPropTweens(p, master) || (isString ? start.p : start);
        };
      }
    }

    return _conditionalReturn(progress, func);
  },
      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    var labels = timeline.labels,
        min = _bigNum,
        p,
        distance,
        label;

    for (p in labels) {
      distance = labels[p] - fromTime;

      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
        label = p;
        min = distance;
      }
    }

    return label;
  },
      _callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars,
        callback = v[type],
        prevContext = _context,
        context = animation._ctx,
        params,
        scope,
        result;

    if (!callback) {
      return;
    }

    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && _lazyTweens.length && _lazyRender();
    context && (_context = context);
    result = params ? callback.apply(scope, params) : callback.call(scope);
    _context = prevContext;
    return result;
  },
      _interrupt = function _interrupt(animation) {
    _removeFromParent(animation);

    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);
    animation.progress() < 1 && _callback(animation, "onInterrupt");
    return animation;
  },
      _quickTween,
      _registerPluginQueue = [],
      _createPlugin = function _createPlugin(config) {
    if (_windowExists() && config) {
      config = !config.name && config["default"] || config;

      var name = config.name,
          isFunc = _isFunction(config),
          Plugin = name && !isFunc && config.init ? function () {
        this._props = [];
      } : config,
          instanceDefaults = {
        init: _emptyFunc,
        render: _renderPropTweens,
        add: _addPropTween,
        kill: _killPropTweensOf,
        modifier: _addPluginModifier,
        rawVars: 0
      },
          statics = {
        targetTest: 0,
        get: 0,
        getSetter: _getSetter,
        aliases: {},
        register: 0
      };

      _wake();

      if (config !== Plugin) {
        if (_plugins[name]) {
          return;
        }

        _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));

        _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));

        _plugins[Plugin.prop = name] = Plugin;

        if (config.targetTest) {
          _harnessPlugins.push(Plugin);

          _reservedProps[name] = 1;
        }

        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";
      }

      _addGlobal(name, Plugin);

      config.register && config.register(gsap, Plugin, PropTween);
    } else {
      config && _registerPluginQueue.push(config);
    }
  },
      _255 = 255,
      _colorLookup = {
    aqua: [0, _255, _255],
    lime: [0, _255, 0],
    silver: [192, 192, 192],
    black: [0, 0, 0],
    maroon: [128, 0, 0],
    teal: [0, 128, 128],
    blue: [0, 0, _255],
    navy: [0, 0, 128],
    white: [_255, _255, _255],
    olive: [128, 128, 0],
    yellow: [_255, _255, 0],
    orange: [_255, 165, 0],
    gray: [128, 128, 128],
    purple: [128, 0, 128],
    green: [0, 128, 0],
    red: [_255, 0, 0],
    pink: [_255, 192, 203],
    cyan: [0, _255, _255],
    transparent: [_255, _255, _255, 0]
  },
      _hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
  },
      splitColor = function splitColor(v, toHSL, forceAlpha) {
    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
        r,
        g,
        b,
        h,
        s,
        l,
        max,
        min,
        d,
        wasHSL;

    if (!a) {
      if (v.substr(-1) === ",") {
        v = v.substr(0, v.length - 1);
      }

      if (_colorLookup[v]) {
        a = _colorLookup[v];
      } else if (v.charAt(0) === "#") {
        if (v.length < 6) {
          r = v.charAt(1);
          g = v.charAt(2);
          b = v.charAt(3);
          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
        }

        if (v.length === 9) {
          a = parseInt(v.substr(1, 6), 16);
          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
        }

        v = parseInt(v.substr(1), 16);
        a = [v >> 16, v >> 8 & _255, v & _255];
      } else if (v.substr(0, 3) === "hsl") {
        a = wasHSL = v.match(_strictNumExp);

        if (!toHSL) {
          h = +a[0] % 360 / 360;
          s = +a[1] / 100;
          l = +a[2] / 100;
          g = l <= .5 ? l * (s + 1) : l + s - l * s;
          r = l * 2 - g;
          a.length > 3 && (a[3] *= 1);
          a[0] = _hue(h + 1 / 3, r, g);
          a[1] = _hue(h, r, g);
          a[2] = _hue(h - 1 / 3, r, g);
        } else if (~v.indexOf("=")) {
          a = v.match(_numExp);
          forceAlpha && a.length < 4 && (a[3] = 1);
          return a;
        }
      } else {
        a = v.match(_strictNumExp) || _colorLookup.transparent;
      }

      a = a.map(Number);
    }

    if (toHSL && !wasHSL) {
      r = a[0] / _255;
      g = a[1] / _255;
      b = a[2] / _255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;

      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
        h *= 60;
      }

      a[0] = ~~(h + .5);
      a[1] = ~~(s * 100 + .5);
      a[2] = ~~(l * 100 + .5);
    }

    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
  },
      _colorOrderData = function _colorOrderData(v) {
    var values = [],
        c = [],
        i = -1;
    v.split(_colorExp).forEach(function (v) {
      var a = v.match(_numWithUnitExp) || [];
      values.push.apply(values, a);
      c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
  },
      _formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "",
        colors = (s + result).match(_colorExp),
        type = toHSL ? "hsla(" : "rgba(",
        i = 0,
        c,
        shell,
        d,
        l;

    if (!colors) {
      return s;
    }

    colors = colors.map(function (color) {
      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });

    if (orderMatchData) {
      d = _colorOrderData(s);
      c = orderMatchData.c;

      if (c.join(result) !== d.c.join(result)) {
        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
      }
    }

    if (!shell) {
      shell = s.split(_colorExp);
      l = shell.length - 1;

      for (; i < l; i++) {
        result += shell[i] + colors[i];
      }
    }

    return result + shell[l];
  },
      _colorExp = function () {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
        p;

    for (p in _colorLookup) {
      s += "|" + p + "\\b";
    }

    return new RegExp(s + ")", "gi");
  }(),
      _hslExp = /hsl[a]?\(/,
      _colorStringFilter = function _colorStringFilter(a) {
    var combined = a.join(" "),
        toHSL;
    _colorExp.lastIndex = 0;

    if (_colorExp.test(combined)) {
      toHSL = _hslExp.test(combined);
      a[1] = _formatColors(a[1], toHSL);
      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));
      return true;
    }
  },
      _tickerActive,
      _ticker = function () {
    var _getTime = Date.now,
        _lagThreshold = 500,
        _adjustedLag = 33,
        _startTime = _getTime(),
        _lastUpdate = _startTime,
        _gap = 1000 / 240,
        _nextTime = _gap,
        _listeners = [],
        _id,
        _req,
        _raf,
        _self,
        _delta,
        _i,
        _tick = function _tick(v) {
      var elapsed = _getTime() - _lastUpdate,
          manual = v === true,
          overlap,
          dispatch,
          time,
          frame;

      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
      _lastUpdate += elapsed;
      time = _lastUpdate - _startTime;
      overlap = time - _nextTime;

      if (overlap > 0 || manual) {
        frame = ++_self.frame;
        _delta = time - _self.time * 1000;
        _self.time = time = time / 1000;
        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
        dispatch = 1;
      }

      manual || (_id = _req(_tick));

      if (dispatch) {
        for (_i = 0; _i < _listeners.length; _i++) {
          _listeners[_i](time, _delta, frame, v);
        }
      }
    };

    _self = {
      time: 0,
      frame: 0,
      tick: function tick() {
        _tick(true);
      },
      deltaRatio: function deltaRatio(fps) {
        return _delta / (1000 / (fps || 60));
      },
      wake: function wake() {
        if (_coreReady) {
          if (!_coreInitted && _windowExists()) {
            _win = _coreInitted = window;
            _doc = _win.document || {};
            _globals.gsap = gsap;
            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);

            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});

            _raf = _win.requestAnimationFrame;

            _registerPluginQueue.forEach(_createPlugin);
          }

          _id && _self.sleep();

          _req = _raf || function (f) {
            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
          };

          _tickerActive = 1;

          _tick(2);
        }
      },
      sleep: function sleep() {
        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);
        _tickerActive = 0;
        _req = _emptyFunc;
      },
      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
        _lagThreshold = threshold || Infinity;
        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
      },
      fps: function fps(_fps) {
        _gap = 1000 / (_fps || 240);
        _nextTime = _self.time * 1000 + _gap;
      },
      add: function add(callback, once, prioritize) {
        var func = once ? function (t, d, f, v) {
          callback(t, d, f, v);

          _self.remove(func);
        } : callback;

        _self.remove(callback);

        _listeners[prioritize ? "unshift" : "push"](func);

        _wake();

        return func;
      },
      remove: function remove(callback, i) {
        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
      },
      _listeners: _listeners
    };
    return _self;
  }(),
      _wake = function _wake() {
    return !_tickerActive && _ticker.wake();
  },
      _easeMap = {},
      _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
      _quotesExp = /["']/g,
      _parseObjectInString = function _parseObjectInString(value) {
    var obj = {},
        split = value.substr(1, value.length - 3).split(":"),
        key = split[0],
        i = 1,
        l = split.length,
        index,
        val,
        parsedVal;

    for (; i < l; i++) {
      val = split[i];
      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
      parsedVal = val.substr(0, index);
      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
      key = val.substr(index + 1).trim();
    }

    return obj;
  },
      _valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1,
        close = value.indexOf(")"),
        nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
  },
      _configEaseFromString = function _configEaseFromString(name) {
    var split = (name + "").split("("),
        ease = _easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
  },
      _invertEase = function _invertEase(ease) {
    return function (p) {
      return 1 - ease(1 - p);
    };
  },
      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first,
        ease;

    while (child) {
      if (child instanceof Timeline) {
        _propagateYoyoEase(child, isYoyo);
      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
        if (child.timeline) {
          _propagateYoyoEase(child.timeline, isYoyo);
        } else {
          ease = child._ease;
          child._ease = child._yEase;
          child._yEase = ease;
          child._yoyo = isYoyo;
        }
      }

      child = child._next;
    }
  },
      _parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
  },
      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) {
      easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
      };
    }

    if (easeInOut === void 0) {
      easeInOut = function easeInOut(p) {
        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
      };
    }

    var ease = {
      easeIn: easeIn,
      easeOut: easeOut,
      easeInOut: easeInOut
    },
        lowercaseName;

    _forEachName(names, function (name) {
      _easeMap[name] = _globals[name] = ease;
      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

      for (var p in ease) {
        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
      }
    });

    return ease;
  },
      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function (p) {
      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
    };
  },
      _configElastic = function _configElastic(type, amplitude, period) {
    var p1 = amplitude >= 1 ? amplitude : 1,
        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
        easeOut = function easeOut(p) {
      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    p2 = _2PI / p2;

    ease.config = function (amplitude, period) {
      return _configElastic(type, amplitude, period);
    };

    return ease;
  },
      _configBack = function _configBack(type, overshoot) {
    if (overshoot === void 0) {
      overshoot = 1.70158;
    }

    var easeOut = function easeOut(p) {
      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
    },
        ease = type === "out" ? easeOut : type === "in" ? function (p) {
      return 1 - easeOut(1 - p);
    } : _easeInOutFromOut(easeOut);

    ease.config = function (overshoot) {
      return _configBack(type, overshoot);
    };

    return ease;
  };

  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
    var power = i < 5 ? i + 1 : i;

    _insertEase(name + ",Power" + (power - 1), i ? function (p) {
      return Math.pow(p, power);
    } : function (p) {
      return p;
    }, function (p) {
      return 1 - Math.pow(1 - p, power);
    }, function (p) {
      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
  });

  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

  (function (n, c) {
    var n1 = 1 / c,
        n2 = 2 * n1,
        n3 = 2.5 * n1,
        easeOut = function easeOut(p) {
      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
    };

    _insertEase("Bounce", function (p) {
      return 1 - easeOut(1 - p);
    }, easeOut);
  })(7.5625, 2.75);

  _insertEase("Expo", function (p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
  });

  _insertEase("Circ", function (p) {
    return -(_sqrt(1 - p * p) - 1);
  });

  _insertEase("Sine", function (p) {
    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
  });

  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
    config: function config(steps, immediateStart) {
      if (steps === void 0) {
        steps = 1;
      }

      var p1 = 1 / steps,
          p2 = steps + (immediateStart ? 0 : 1),
          p3 = immediateStart ? 1 : 0,
          max = 1 - _tinyNum;
      return function (p) {
        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
      };
    }
  };
  _defaults.ease = _easeMap["quad.out"];

  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
    return _callbackNames += name + "," + name + "Params,";
  });

  var GSCache = function GSCache(target, harness) {
    this.id = _gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : _getProperty;
    this.set = harness ? harness.getSetter : _getSetter;
  };
  var Animation = function () {
    function Animation(vars) {
      this.vars = vars;
      this._delay = +vars.delay || 0;

      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
        this._rDelay = vars.repeatDelay || 0;
        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
      }

      this._ts = 1;

      _setDuration(this, +vars.duration, 1, 1);

      this.data = vars.data;

      if (_context) {
        this._ctx = _context;

        _context.data.push(this);
      }

      _tickerActive || _ticker.wake();
    }

    var _proto = Animation.prototype;

    _proto.delay = function delay(value) {
      if (value || value === 0) {
        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
        this._delay = value;
        return this;
      }

      return this._delay;
    };

    _proto.duration = function duration(value) {
      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };

    _proto.totalDuration = function totalDuration(value) {
      if (!arguments.length) {
        return this._tDur;
      }

      this._dirty = 0;
      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    };

    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
      _wake();

      if (!arguments.length) {
        return this._tTime;
      }

      var parent = this._dp;

      if (parent && parent.smoothChildTiming && this._ts) {
        _alignPlayhead(this, _totalTime);

        !parent._dp || parent.parent || _postAddChecks(parent, this);

        while (parent && parent.parent) {
          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
            parent.totalTime(parent._tTime, true);
          }

          parent = parent.parent;
        }

        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
          _addToTimeline(this._dp, this, this._start - this._delay);
        }
      }

      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
        this._ts || (this._pTime = _totalTime);

        _lazySafeRender(this, _totalTime, suppressEvents);
      }

      return this;
    };

    _proto.time = function time(value, suppressEvents) {
      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;
    };

    _proto.totalProgress = function totalProgress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };

    _proto.progress = function progress(value, suppressEvents) {
      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };

    _proto.iteration = function iteration(value, suppressEvents) {
      var cycleDuration = this.duration() + this._rDelay;

      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
    };

    _proto.timeScale = function timeScale(value) {
      if (!arguments.length) {
        return this._rts === -_tinyNum ? 0 : this._rts;
      }

      if (this._rts === value) {
        return this;
      }

      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;
      this._rts = +value || 0;
      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;
      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);

      _setEnd(this);

      return _recacheAncestors(this);
    };

    _proto.paused = function paused(value) {
      if (!arguments.length) {
        return this._ps;
      }

      if (this._ps !== value) {
        this._ps = value;

        if (value) {
          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());
          this._ts = this._act = 0;
        } else {
          _wake();

          this._ts = this._rts;
          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));
        }
      }

      return this;
    };

    _proto.startTime = function startTime(value) {
      if (arguments.length) {
        this._start = value;
        var parent = this.parent || this._dp;
        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
        return this;
      }

      return this._start;
    };

    _proto.endTime = function endTime(includeRepeats) {
      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    };

    _proto.rawTime = function rawTime(wrapRepeats) {
      var parent = this.parent || this._dp;
      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };

    _proto.revert = function revert(config) {
      if (config === void 0) {
        config = _revertConfig;
      }

      var prevIsReverting = _reverting;
      _reverting = config;

      if (this._initted || this._startAt) {
        this.timeline && this.timeline.revert(config);
        this.totalTime(-0.01, config.suppressEvents);
      }

      this.data !== "nested" && config.kill !== false && this.kill();
      _reverting = prevIsReverting;
      return this;
    };

    _proto.globalTime = function globalTime(rawTime) {
      var animation = this,
          time = arguments.length ? rawTime : animation.rawTime();

      while (animation) {
        time = animation._start + time / (animation._ts || 1);
        animation = animation._dp;
      }

      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -Infinity : this._sat.globalTime(rawTime) : time;
    };

    _proto.repeat = function repeat(value) {
      if (arguments.length) {
        this._repeat = value === Infinity ? -2 : value;
        return _onUpdateTotalDuration(this);
      }

      return this._repeat === -2 ? Infinity : this._repeat;
    };

    _proto.repeatDelay = function repeatDelay(value) {
      if (arguments.length) {
        var time = this._time;
        this._rDelay = value;

        _onUpdateTotalDuration(this);

        return time ? this.time(time) : this;
      }

      return this._rDelay;
    };

    _proto.yoyo = function yoyo(value) {
      if (arguments.length) {
        this._yoyo = value;
        return this;
      }

      return this._yoyo;
    };

    _proto.seek = function seek(position, suppressEvents) {
      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
    };

    _proto.restart = function restart(includeDelay, suppressEvents) {
      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
    };

    _proto.play = function play(from, suppressEvents) {
      from != null && this.seek(from, suppressEvents);
      return this.reversed(false).paused(false);
    };

    _proto.reverse = function reverse(from, suppressEvents) {
      from != null && this.seek(from || this.totalDuration(), suppressEvents);
      return this.reversed(true).paused(false);
    };

    _proto.pause = function pause(atTime, suppressEvents) {
      atTime != null && this.seek(atTime, suppressEvents);
      return this.paused(true);
    };

    _proto.resume = function resume() {
      return this.paused(false);
    };

    _proto.reversed = function reversed(value) {
      if (arguments.length) {
        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));
        return this;
      }

      return this._rts < 0;
    };

    _proto.invalidate = function invalidate() {
      this._initted = this._act = 0;
      this._zTime = -_tinyNum;
      return this;
    };

    _proto.isActive = function isActive() {
      var parent = this.parent || this._dp,
          start = this._start,
          rawTime;
      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
    };

    _proto.eventCallback = function eventCallback(type, callback, params) {
      var vars = this.vars;

      if (arguments.length > 1) {
        if (!callback) {
          delete vars[type];
        } else {
          vars[type] = callback;
          params && (vars[type + "Params"] = params);
          type === "onUpdate" && (this._onUpdate = callback);
        }

        return this;
      }

      return vars[type];
    };

    _proto.then = function then(onFulfilled) {
      var self = this;
      return new Promise(function (resolve) {
        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
            _resolve = function _resolve() {
          var _then = self.then;
          self.then = null;
          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
          resolve(f);
          self.then = _then;
        };

        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
          _resolve();
        } else {
          self._prom = _resolve;
        }
      });
    };

    _proto.kill = function kill() {
      _interrupt(this);
    };

    return Animation;
  }();

  _setDefaults(Animation.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
  });

  var Timeline = function (_Animation) {
    _inheritsLoose(Timeline, _Animation);

    function Timeline(vars, position) {
      var _this;

      if (vars === void 0) {
        vars = {};
      }

      _this = _Animation.call(this, vars) || this;
      _this.labels = {};
      _this.smoothChildTiming = !!vars.smoothChildTiming;
      _this.autoRemoveChildren = !!vars.autoRemoveChildren;
      _this._sort = _isNotFalse(vars.sortChildren);
      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
      vars.reversed && _this.reverse();
      vars.paused && _this.paused(true);
      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
      return _this;
    }

    var _proto2 = Timeline.prototype;

    _proto2.to = function to(targets, vars, position) {
      _createTweenType(0, arguments, this);

      return this;
    };

    _proto2.from = function from(targets, vars, position) {
      _createTweenType(1, arguments, this);

      return this;
    };

    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
      _createTweenType(2, arguments, this);

      return this;
    };

    _proto2.set = function set(targets, vars, position) {
      vars.duration = 0;
      vars.parent = this;
      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
      vars.immediateRender = !!vars.immediateRender;
      new Tween(targets, vars, _parsePosition(this, position), 1);
      return this;
    };

    _proto2.call = function call(callback, params, position) {
      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
    };

    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.duration = duration;
      vars.stagger = vars.stagger || stagger;
      vars.onComplete = onCompleteAll;
      vars.onCompleteParams = onCompleteAllParams;
      vars.parent = this;
      new Tween(targets, vars, _parsePosition(this, position));
      return this;
    };

    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
      vars.runBackwards = 1;
      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
      toVars.startAt = fromVars;
      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };

    _proto2.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._dirty ? this.totalDuration() : this._tDur,
          dur = this._dur,
          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
          time,
          child,
          next,
          iteration,
          cycleDuration,
          prevPaused,
          pauseTween,
          timeScale,
          prevStart,
          prevIteration,
          yoyo,
          isYoyo;
      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

      if (tTime !== this._tTime || force || crossingStart) {
        if (prevTime !== this._time && dur) {
          tTime += this._time - prevTime;
          totalTime += this._time - prevTime;
        }

        time = tTime;
        prevStart = this._start;
        timeScale = this._ts;
        prevPaused = !timeScale;

        if (crossingStart) {
          dur || (prevTime = this._zTime);
          (totalTime || !suppressEvents) && (this._zTime = totalTime);
        }

        if (this._repeat) {
          yoyo = this._yoyo;
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && totalTime < 0) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);
          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);

          if (yoyo && iteration & 1) {
            time = dur - time;
            isYoyo = 1;
          }

          if (iteration !== prevIteration && !this._lock) {
            var rewinding = yoyo && prevIteration & 1,
                doesWrap = rewinding === (yoyo && iteration & 1);
            iteration < prevIteration && (rewinding = !rewinding);
            prevTime = rewinding ? 0 : tTime % dur ? dur : tTime;
            this._lock = 1;
            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
            this._tTime = tTime;
            !suppressEvents && this.parent && _callback(this, "onRepeat");
            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
              return this;
            }

            dur = this._dur;
            tDur = this._tDur;

            if (doesWrap) {
              this._lock = 2;
              prevTime = rewinding ? dur : -0.0001;
              this.render(prevTime, true);
              this.vars.repeatRefresh && !isYoyo && this.invalidate();
            }

            this._lock = 0;

            if (!this._ts && !prevPaused) {
              return this;
            }

            _propagateYoyoEase(this, isYoyo);
          }
        }

        if (this._hasPause && !this._forcing && this._lock < 2) {
          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

          if (pauseTween) {
            tTime -= time - (time = pauseTween._start);
          }
        }

        this._tTime = tTime;
        this._time = time;
        this._act = !timeScale;

        if (!this._initted) {
          this._onUpdate = this.vars.onUpdate;
          this._initted = 1;
          this._zTime = totalTime;
          prevTime = 0;
        }

        if (!prevTime && time && !suppressEvents && !iteration) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        if (time >= prevTime && totalTime >= 0) {
          child = this._first;

          while (child) {
            next = child._next;

            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = -_tinyNum);
                break;
              }
            }

            child = next;
          }
        } else {
          child = this._last;
          var adjustedTime = totalTime < 0 ? totalTime : time;

          while (child) {
            next = child._prev;

            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
              if (child.parent !== this) {
                return this.render(totalTime, suppressEvents, force);
              }

              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));

              if (time !== this._time || !this._ts && !prevPaused) {
                pauseTween = 0;
                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);
                break;
              }
            }

            child = next;
          }
        }

        if (pauseTween && !suppressEvents) {
          this.pause();
          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

          if (this._ts) {
            this._start = prevStart;

            _setEnd(this);

            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto2.add = function add(child, position) {
      var _this2 = this;

      _isNumber(position) || (position = _parsePosition(this, position, child));

      if (!(child instanceof Animation)) {
        if (_isArray(child)) {
          child.forEach(function (obj) {
            return _this2.add(obj, position);
          });
          return this;
        }

        if (_isString(child)) {
          return this.addLabel(child, position);
        }

        if (_isFunction(child)) {
          child = Tween.delayedCall(0, child);
        } else {
          return this;
        }
      }

      return this !== child ? _addToTimeline(this, child, position) : this;
    };

    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
      if (nested === void 0) {
        nested = true;
      }

      if (tweens === void 0) {
        tweens = true;
      }

      if (timelines === void 0) {
        timelines = true;
      }

      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = -_bigNum;
      }

      var a = [],
          child = this._first;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          if (child instanceof Tween) {
            tweens && a.push(child);
          } else {
            timelines && a.push(child);
            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
          }
        }

        child = child._next;
      }

      return a;
    };

    _proto2.getById = function getById(id) {
      var animations = this.getChildren(1, 1, 1),
          i = animations.length;

      while (i--) {
        if (animations[i].vars.id === id) {
          return animations[i];
        }
      }
    };

    _proto2.remove = function remove(child) {
      if (_isString(child)) {
        return this.removeLabel(child);
      }

      if (_isFunction(child)) {
        return this.killTweensOf(child);
      }

      _removeLinkedListItem(this, child);

      if (child === this._recent) {
        this._recent = this._last;
      }

      return _uncache(this);
    };

    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
      if (!arguments.length) {
        return this._tTime;
      }

      this._forcing = 1;

      if (!this._dp && this._ts) {
        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
      }

      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

      this._forcing = 0;
      return this;
    };

    _proto2.addLabel = function addLabel(label, position) {
      this.labels[label] = _parsePosition(this, position);
      return this;
    };

    _proto2.removeLabel = function removeLabel(label) {
      delete this.labels[label];
      return this;
    };

    _proto2.addPause = function addPause(position, callback, params) {
      var t = Tween.delayedCall(0, callback || _emptyFunc, params);
      t.data = "isPause";
      this._hasPause = 1;
      return _addToTimeline(this, t, _parsePosition(this, position));
    };

    _proto2.removePause = function removePause(position) {
      var child = this._first;
      position = _parsePosition(this, position);

      while (child) {
        if (child._start === position && child.data === "isPause") {
          _removeFromParent(child);
        }

        child = child._next;
      }
    };

    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      var tweens = this.getTweensOf(targets, onlyActive),
          i = tweens.length;

      while (i--) {
        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
      }

      return this;
    };

    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
      var a = [],
          parsedTargets = toArray(targets),
          child = this._first,
          isGlobalTime = _isNumber(onlyActive),
          children;

      while (child) {
        if (child instanceof Tween) {
          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
            a.push(child);
          }
        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
          a.push.apply(a, children);
        }

        child = child._next;
      }

      return a;
    };

    _proto2.tweenTo = function tweenTo(position, vars) {
      vars = vars || {};

      var tl = this,
          endTime = _parsePosition(tl, position),
          _vars = vars,
          startAt = _vars.startAt,
          _onStart = _vars.onStart,
          onStartParams = _vars.onStartParams,
          immediateRender = _vars.immediateRender,
          initted,
          tween = Tween.to(tl, _setDefaults({
        ease: vars.ease || "none",
        lazy: false,
        immediateRender: false,
        time: endTime,
        overwrite: "auto",
        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
        onStart: function onStart() {
          tl.pause();

          if (!initted) {
            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
            initted = 1;
          }

          _onStart && _onStart.apply(tween, onStartParams || []);
        }
      }, vars));

      return immediateRender ? tween.render(0) : tween;
    };

    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
      return this.tweenTo(toPosition, _setDefaults({
        startAt: {
          time: _parsePosition(this, fromPosition)
        }
      }, vars));
    };

    _proto2.recent = function recent() {
      return this._recent;
    };

    _proto2.nextLabel = function nextLabel(afterTime) {
      if (afterTime === void 0) {
        afterTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, afterTime));
    };

    _proto2.previousLabel = function previousLabel(beforeTime) {
      if (beforeTime === void 0) {
        beforeTime = this._time;
      }

      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
    };

    _proto2.currentLabel = function currentLabel(value) {
      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
    };

    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
      if (ignoreBeforeTime === void 0) {
        ignoreBeforeTime = 0;
      }

      var child = this._first,
          labels = this.labels,
          p;

      while (child) {
        if (child._start >= ignoreBeforeTime) {
          child._start += amount;
          child._end += amount;
        }

        child = child._next;
      }

      if (adjustLabels) {
        for (p in labels) {
          if (labels[p] >= ignoreBeforeTime) {
            labels[p] += amount;
          }
        }
      }

      return _uncache(this);
    };

    _proto2.invalidate = function invalidate(soft) {
      var child = this._first;
      this._lock = 0;

      while (child) {
        child.invalidate(soft);
        child = child._next;
      }

      return _Animation.prototype.invalidate.call(this, soft);
    };

    _proto2.clear = function clear(includeLabels) {
      if (includeLabels === void 0) {
        includeLabels = true;
      }

      var child = this._first,
          next;

      while (child) {
        next = child._next;
        this.remove(child);
        child = next;
      }

      this._dp && (this._time = this._tTime = this._pTime = 0);
      includeLabels && (this.labels = {});
      return _uncache(this);
    };

    _proto2.totalDuration = function totalDuration(value) {
      var max = 0,
          self = this,
          child = self._last,
          prevStart = _bigNum,
          prev,
          start,
          parent;

      if (arguments.length) {
        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
      }

      if (self._dirty) {
        parent = self.parent;

        while (child) {
          prev = child._prev;
          child._dirty && child.totalDuration();
          start = child._start;

          if (start > prevStart && self._sort && child._ts && !self._lock) {
            self._lock = 1;
            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
          } else {
            prevStart = start;
          }

          if (start < 0 && child._ts) {
            max -= start;

            if (!parent && !self._dp || parent && parent.smoothChildTiming) {
              self._start += start / self._ts;
              self._time -= start;
              self._tTime -= start;
            }

            self.shiftChildren(-start, false, -1e999);
            prevStart = 0;
          }

          child._end > max && child._ts && (max = child._end);
          child = prev;
        }

        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

        self._dirty = 0;
      }

      return self._tDur;
    };

    Timeline.updateRoot = function updateRoot(time) {
      if (_globalTimeline._ts) {
        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

        _lastRenderedFrame = _ticker.frame;
      }

      if (_ticker.frame >= _nextGCFrame) {
        _nextGCFrame += _config.autoSleep || 120;
        var child = _globalTimeline._first;
        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
          while (child && !child._ts) {
            child = child._next;
          }

          child || _ticker.sleep();
        }
      }
    };

    return Timeline;
  }(Animation);

  _setDefaults(Timeline.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
  });

  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
        index = 0,
        matchIndex = 0,
        result,
        startNums,
        color,
        endNum,
        chunk,
        startNum,
        hasRandom,
        a;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (hasRandom = ~end.indexOf("random(")) {
      end = _replaceRandom(end);
    }

    if (stringFilter) {
      a = [start, end];
      stringFilter(a, target, prop);
      start = a[0];
      end = a[1];
    }

    startNums = start.match(_complexStringNumExp) || [];

    while (result = _complexStringNumExp.exec(end)) {
      endNum = result[0];
      chunk = end.substring(index, result.index);

      if (color) {
        color = (color + 1) % 5;
      } else if (chunk.substr(-5) === "rgba(") {
        color = 1;
      }

      if (endNum !== startNums[matchIndex++]) {
        startNum = parseFloat(startNums[matchIndex - 1]) || 0;
        pt._pt = {
          _next: pt._pt,
          p: chunk || matchIndex === 1 ? chunk : ",",
          s: startNum,
          c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
          m: color && color < 4 ? Math.round : 0
        };
        index = _complexStringNumExp.lastIndex;
      }
    }

    pt.c = index < end.length ? end.substring(index, end.length) : "";
    pt.fp = funcParam;

    if (_relExp.test(end) || hasRandom) {
      pt.e = 0;
    }

    this._pt = pt;
    return pt;
  },
      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
    _isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop],
        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
        pt;

    if (_isString(end)) {
      if (~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (end.charAt(1) === "=") {
        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

        if (pt || pt === 0) {
          end = pt;
        }
      }
    }

    if (!optional || parsedStart !== end || _forceAllPropTweens) {
      if (!isNaN(parsedStart * end) && end !== "") {
        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
        funcParam && (pt.fp = funcParam);
        modifier && pt.modifier(modifier, this, target);
        return this._pt = pt;
      }

      !currentValue && !(prop in target) && _missingPlugin(prop, end);
      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
    }
  },
      _processVars = function _processVars(vars, index, target, targets, tween) {
    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
    }

    var copy = {},
        p;

    for (p in vars) {
      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
    }

    return copy;
  },
      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;

    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

      if (tween !== _quickTween) {
        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];
        i = plugin._props.length;

        while (i--) {
          ptLookup[plugin._props[i]] = pt;
        }
      }
    }

    return plugin;
  },
      _overwritingTween,
      _forceAllPropTweens,
      _initTween = function _initTween(tween, time, tTime) {
    var vars = tween.vars,
        ease = vars.ease,
        startAt = vars.startAt,
        immediateRender = vars.immediateRender,
        lazy = vars.lazy,
        onUpdate = vars.onUpdate,
        onUpdateParams = vars.onUpdateParams,
        callbackScope = vars.callbackScope,
        runBackwards = vars.runBackwards,
        yoyoEase = vars.yoyoEase,
        keyframes = vars.keyframes,
        autoRevert = vars.autoRevert,
        dur = tween._dur,
        prevStartAt = tween._startAt,
        targets = tween._targets,
        parent = tween.parent,
        fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
        autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
        tl = tween.timeline,
        cleanVars,
        i,
        p,
        pt,
        target,
        hasPriority,
        gsData,
        harness,
        plugin,
        ptLookup,
        index,
        harnessVars,
        overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = _parseEase(ease, _defaults.ease);
    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

    if (yoyoEase && tween._yoyo && !tween._repeat) {
      yoyoEase = tween._yEase;
      tween._yEase = tween._ease;
      tween._ease = yoyoEase;
    }

    tween._from = !tl && !!vars.runBackwards;

    if (!tl || keyframes && !vars.stagger) {
      harness = targets[0] ? _getCache(targets[0]).harness : 0;
      harnessVars = harness && vars[harness.prop];
      cleanVars = _copyExcluding(vars, _reservedProps);

      if (prevStartAt) {
        prevStartAt._zTime < 0 && prevStartAt.progress(1);
        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);
        prevStartAt._lazy = 0;
      }

      if (startAt) {
        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
          data: "isStart",
          overwrite: false,
          parent: parent,
          immediateRender: true,
          lazy: !prevStartAt && _isNotFalse(lazy),
          startAt: null,
          delay: 0,
          onUpdate: onUpdate,
          onUpdateParams: onUpdateParams,
          callbackScope: callbackScope,
          stagger: 0
        }, startAt)));

        tween._startAt._dp = 0;
        tween._startAt._sat = tween;
        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);

        if (immediateRender) {
          if (dur && time <= 0 && tTime <= 0) {
            time && (tween._zTime = time);
            return;
          }
        }
      } else if (runBackwards && dur) {
        if (!prevStartAt) {
          time && (immediateRender = false);
          p = _setDefaults({
            overwrite: false,
            data: "isFromStart",
            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
            immediateRender: immediateRender,
            stagger: 0,
            parent: parent
          }, cleanVars);
          harnessVars && (p[harness.prop] = harnessVars);

          _removeFromParent(tween._startAt = Tween.set(targets, p));

          tween._startAt._dp = 0;
          tween._startAt._sat = tween;
          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
          tween._zTime = time;

          if (!immediateRender) {
            _initTween(tween._startAt, _tinyNum, _tinyNum);
          } else if (!time) {
            return;
          }
        }
      }

      tween._pt = tween._ptCache = 0;
      lazy = dur && _isNotFalse(lazy) || lazy && !dur;

      for (i = 0; i < targets.length; i++) {
        target = targets[i];
        gsData = target._gsap || _harness(targets)[i]._gsap;
        tween._ptLookup[i] = ptLookup = {};
        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();
        index = fullTargets === targets ? i : fullTargets.indexOf(target);

        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

          plugin._props.forEach(function (name) {
            ptLookup[name] = pt;
          });

          plugin.priority && (hasPriority = 1);
        }

        if (!harness || harnessVars) {
          for (p in cleanVars) {
            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
              plugin.priority && (hasPriority = 1);
            } else {
              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
          }
        }

        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

        if (autoOverwrite && tween._pt) {
          _overwritingTween = tween;

          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));

          overwritten = !tween.parent;
          _overwritingTween = 0;
        }

        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
      }

      hasPriority && _sortPropTweensByPriority(tween);
      tween._onInit && tween._onInit(tween);
    }

    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten;
    keyframes && time <= 0 && tl.render(_bigNum, true, true);
  },
      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {
    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
        pt,
        rootPT,
        lookup,
        i;

    if (!ptCache) {
      ptCache = tween._ptCache[property] = [];
      lookup = tween._ptLookup;
      i = tween._targets.length;

      while (i--) {
        pt = lookup[i][property];

        if (pt && pt.d && pt.d._pt) {
          pt = pt.d._pt;

          while (pt && pt.p !== property && pt.fp !== property) {
            pt = pt._next;
          }
        }

        if (!pt) {
          _forceAllPropTweens = 1;
          tween.vars[property] = "+=0";

          _initTween(tween, time);

          _forceAllPropTweens = 0;
          return 1;
        }

        ptCache.push(pt);
      }
    }

    i = ptCache.length;

    while (i--) {
      rootPT = ptCache[i];
      pt = rootPT._pt || rootPT;
      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
      pt.c = value - pt.s;
      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));
      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));
    }
  },
      _addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? _getCache(targets[0]).harness : 0,
        propertyAliases = harness && harness.aliases,
        copy,
        p,
        i,
        aliases;

    if (!propertyAliases) {
      return vars;
    }

    copy = _merge({}, vars);

    for (p in propertyAliases) {
      if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;

        while (i--) {
          copy[aliases[i]] = copy[p];
        }
      }
    }

    return copy;
  },
      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut",
        p,
        a;

    if (_isArray(obj)) {
      a = allProps[prop] || (allProps[prop] = []);
      obj.forEach(function (value, i) {
        return a.push({
          t: i / (obj.length - 1) * 100,
          v: value,
          e: ease
        });
      });
    } else {
      for (p in obj) {
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
          t: parseFloat(prop),
          v: obj[p],
          e: ease
        });
      }
    }
  },
      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
  },
      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
      _staggerPropsToSkip = {};

  _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
    return _staggerPropsToSkip[name] = 1;
  });

  var Tween = function (_Animation2) {
    _inheritsLoose(Tween, _Animation2);

    function Tween(targets, vars, position, skipInherit) {
      var _this3;

      if (typeof vars === "number") {
        position.duration = vars;
        vars = position;
        position = null;
      }

      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
      var _this3$vars = _this3.vars,
          duration = _this3$vars.duration,
          delay = _this3$vars.delay,
          immediateRender = _this3$vars.immediateRender,
          stagger = _this3$vars.stagger,
          overwrite = _this3$vars.overwrite,
          keyframes = _this3$vars.keyframes,
          defaults = _this3$vars.defaults,
          scrollTrigger = _this3$vars.scrollTrigger,
          yoyoEase = _this3$vars.yoyoEase,
          parent = vars.parent || _globalTimeline,
          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
          tl,
          i,
          copy,
          l,
          p,
          curTarget,
          staggerFunc,
          staggerVarsToMerge;
      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];
      _this3._ptLookup = [];
      _this3._overwrite = overwrite;

      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
        vars = _this3.vars;
        tl = _this3.timeline = new Timeline({
          data: "nested",
          defaults: defaults || {},
          targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
        });
        tl.kill();
        tl.parent = tl._dp = _assertThisInitialized(_this3);
        tl._start = 0;

        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          l = parsedTargets.length;
          staggerFunc = stagger && distribute(stagger);

          if (_isObject(stagger)) {
            for (p in stagger) {
              if (~_staggerTweenProps.indexOf(p)) {
                staggerVarsToMerge || (staggerVarsToMerge = {});
                staggerVarsToMerge[p] = stagger[p];
              }
            }
          }

          for (i = 0; i < l; i++) {
            copy = _copyExcluding(vars, _staggerPropsToSkip);
            copy.stagger = 0;
            yoyoEase && (copy.yoyoEase = yoyoEase);
            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
            curTarget = parsedTargets[i];
            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

            if (!stagger && l === 1 && copy.delay) {
              _this3._delay = delay = copy.delay;
              _this3._start += delay;
              copy.delay = 0;
            }

            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
            tl._ease = _easeMap.none;
          }

          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;
        } else if (keyframes) {
          _inheritDefaults(_setDefaults(tl.vars.defaults, {
            ease: "none"
          }));

          tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
          var time = 0,
              a,
              kf,
              v;

          if (_isArray(keyframes)) {
            keyframes.forEach(function (frame) {
              return tl.to(parsedTargets, frame, ">");
            });
            tl.duration();
          } else {
            copy = {};

            for (p in keyframes) {
              p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
            }

            for (p in copy) {
              a = copy[p].sort(function (a, b) {
                return a.t - b.t;
              });
              time = 0;

              for (i = 0; i < a.length; i++) {
                kf = a[i];
                v = {
                  ease: kf.e,
                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                };
                v[p] = kf.v;
                tl.to(parsedTargets, v, time);
                time += v.duration;
              }
            }

            tl.duration() < duration && tl.to({}, {
              duration: duration - tl.duration()
            });
          }
        }

        duration || _this3.duration(duration = tl.duration());
      } else {
        _this3.timeline = 0;
      }

      if (overwrite === true && !_suppressOverwrites) {
        _overwritingTween = _assertThisInitialized(_this3);

        _globalTimeline.killTweensOf(parsedTargets);

        _overwritingTween = 0;
      }

      _addToTimeline(parent, _assertThisInitialized(_this3), position);

      vars.reversed && _this3.reverse();
      vars.paused && _this3.paused(true);

      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
        _this3._tTime = -_tinyNum;

        _this3.render(Math.max(0, -delay) || 0);
      }

      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
      return _this3;
    }

    var _proto3 = Tween.prototype;

    _proto3.render = function render(totalTime, suppressEvents, force) {
      var prevTime = this._time,
          tDur = this._tDur,
          dur = this._dur,
          isNegative = totalTime < 0,
          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
          time,
          pt,
          iteration,
          cycleDuration,
          prevIteration,
          isYoyo,
          ratio,
          timeline,
          yoyoEase;

      if (!dur) {
        _renderZeroDurationTween(this, totalTime, suppressEvents, force);
      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {
        time = tTime;
        timeline = this.timeline;

        if (this._repeat) {
          cycleDuration = dur + this._rDelay;

          if (this._repeat < -1 && isNegative) {
            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
          }

          time = _roundPrecise(tTime % cycleDuration);

          if (tTime === tDur) {
            iteration = this._repeat;
            time = dur;
          } else {
            iteration = ~~(tTime / cycleDuration);

            if (iteration && iteration === tTime / cycleDuration) {
              time = dur;
              iteration--;
            }

            time > dur && (time = dur);
          }

          isYoyo = this._yoyo && iteration & 1;

          if (isYoyo) {
            yoyoEase = this._yEase;
            time = dur - time;
          }

          prevIteration = _animationCycle(this._tTime, cycleDuration);

          if (time === prevTime && !force && this._initted) {
            this._tTime = tTime;
            return this;
          }

          if (iteration !== prevIteration) {
            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);

            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
              this._lock = force = 1;
              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
            }
          }
        }

        if (!this._initted) {
          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
            this._tTime = 0;
            return this;
          }

          if (prevTime !== this._time) {
            return this;
          }

          if (dur !== this._dur) {
            return this.render(totalTime, suppressEvents, force);
          }
        }

        this._tTime = tTime;
        this._time = time;

        if (!this._act && this._ts) {
          this._act = 1;
          this._lazy = 0;
        }

        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

        if (this._from) {
          this.ratio = ratio = 1 - ratio;
        }

        if (time && !prevTime && !suppressEvents && !iteration) {
          _callback(this, "onStart");

          if (this._tTime !== tTime) {
            return this;
          }
        }

        pt = this._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

        if (this._onUpdate && !suppressEvents) {
          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);

          _callback(this, "onUpdate");
        }

        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);

          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
          }
        }
      }

      return this;
    };

    _proto3.targets = function targets() {
      return this._targets;
    };

    _proto3.invalidate = function invalidate(soft) {
      (!soft || !this.vars.runBackwards) && (this._startAt = 0);
      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
      this._ptLookup = [];
      this.timeline && this.timeline.invalidate(soft);
      return _Animation2.prototype.invalidate.call(this, soft);
    };

    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {
      _tickerActive || _ticker.wake();
      this._ts || this.play();
      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
          ratio;
      this._initted || _initTween(this, time);
      ratio = this._ease(time / this._dur);

      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {
        return this.resetTo(property, value, start, startIsRelative);
      }

      _alignPlayhead(this, 0);

      this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
      return this.render(0);
    };

    _proto3.kill = function kill(targets, vars) {
      if (vars === void 0) {
        vars = "all";
      }

      if (!targets && (!vars || vars === "all")) {
        this._lazy = this._pt = 0;
        return this.parent ? _interrupt(this) : this;
      }

      if (this.timeline) {
        var tDur = this.timeline.totalDuration();
        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);
        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);
        return this;
      }

      var parsedTargets = this._targets,
          killingTargets = targets ? toArray(targets) : parsedTargets,
          propTweenLookup = this._ptLookup,
          firstPT = this._pt,
          overwrittenProps,
          curLookup,
          curOverwriteProps,
          props,
          p,
          pt,
          i;

      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
        vars === "all" && (this._pt = 0);
        return _interrupt(this);
      }

      overwrittenProps = this._op = this._op || [];

      if (vars !== "all") {
        if (_isString(vars)) {
          p = {};

          _forEachName(vars, function (name) {
            return p[name] = 1;
          });

          vars = p;
        }

        vars = _addAliasesToVars(parsedTargets, vars);
      }

      i = parsedTargets.length;

      while (i--) {
        if (~killingTargets.indexOf(parsedTargets[i])) {
          curLookup = propTweenLookup[i];

          if (vars === "all") {
            overwrittenProps[i] = vars;
            props = curLookup;
            curOverwriteProps = {};
          } else {
            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
            props = vars;
          }

          for (p in props) {
            pt = curLookup && curLookup[p];

            if (pt) {
              if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                _removeLinkedListItem(this, pt, "_pt");
              }

              delete curLookup[p];
            }

            if (curOverwriteProps !== "all") {
              curOverwriteProps[p] = 1;
            }
          }
        }
      }

      this._initted && !this._pt && firstPT && _interrupt(this);
      return this;
    };

    Tween.to = function to(targets, vars) {
      return new Tween(targets, vars, arguments[2]);
    };

    Tween.from = function from(targets, vars) {
      return _createTweenType(1, arguments);
    };

    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
      return new Tween(callback, 0, {
        immediateRender: false,
        lazy: false,
        overwrite: false,
        delay: delay,
        onComplete: callback,
        onReverseComplete: callback,
        onCompleteParams: params,
        onReverseCompleteParams: params,
        callbackScope: scope
      });
    };

    Tween.fromTo = function fromTo(targets, fromVars, toVars) {
      return _createTweenType(2, arguments);
    };

    Tween.set = function set(targets, vars) {
      vars.duration = 0;
      vars.repeatDelay || (vars.repeat = 0);
      return new Tween(targets, vars);
    };

    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
      return _globalTimeline.killTweensOf(targets, props, onlyActive);
    };

    return Tween;
  }(Animation);

  _setDefaults(Tween.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
  });

  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
    Tween[name] = function () {
      var tl = new Timeline(),
          params = _slice.call(arguments, 0);

      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
      return tl[name].apply(tl, params);
    };
  });

  var _setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
  },
      _setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
  },
      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
  },
      _setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
  },
      _getSetter = function _getSetter(target, property) {
    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
  },
      _renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
  },
      _renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
  },
      _renderComplexString = function _renderComplexString(ratio, data) {
    var pt = data._pt,
        s = "";

    if (!ratio && data.b) {
      s = data.b;
    } else if (ratio === 1 && data.e) {
      s = data.e;
    } else {
      while (pt) {
        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;
        pt = pt._next;
      }

      s += data.c;
    }

    data.set(data.t, data.p, s, data);
  },
      _renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;

    while (pt) {
      pt.r(ratio, pt.d);
      pt = pt._next;
    }
  },
      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt,
        next;

    while (pt) {
      next = pt._next;
      pt.p === property && pt.modifier(modifier, tween, target);
      pt = next;
    }
  },
      _killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt,
        hasNonDependentRemaining,
        next;

    while (pt) {
      next = pt._next;

      if (pt.p === property && !pt.op || pt.op === property) {
        _removeLinkedListItem(this, pt, "_pt");
      } else if (!pt.dep) {
        hasNonDependentRemaining = 1;
      }

      pt = next;
    }

    return !hasNonDependentRemaining;
  },
      _setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
  },
      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
    var pt = parent._pt,
        next,
        pt2,
        first,
        last;

    while (pt) {
      next = pt._next;
      pt2 = first;

      while (pt2 && pt2.pr > pt.pr) {
        pt2 = pt2._next;
      }

      if (pt._prev = pt2 ? pt2._prev : last) {
        pt._prev._next = pt;
      } else {
        first = pt;
      }

      if (pt._next = pt2) {
        pt2._prev = pt;
      } else {
        last = pt;
      }

      pt = next;
    }

    parent._pt = first;
  };

  var PropTween = function () {
    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
      this.t = target;
      this.s = start;
      this.c = change;
      this.p = prop;
      this.r = renderer || _renderPlain;
      this.d = data || this;
      this.set = setter || _setterPlain;
      this.pr = priority || 0;
      this._next = next;

      if (next) {
        next._prev = this;
      }
    }

    var _proto4 = PropTween.prototype;

    _proto4.modifier = function modifier(func, tween, target) {
      this.mSet = this.mSet || this.set;
      this.set = _setterWithModifier;
      this.m = func;
      this.mt = target;
      this.tween = tween;
    };

    return PropTween;
  }();

  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
    return _reservedProps[name] = 1;
  });

  _globals.TweenMax = _globals.TweenLite = Tween;
  _globals.TimelineLite = _globals.TimelineMax = Timeline;
  _globalTimeline = new Timeline({
    sortChildren: false,
    defaults: _defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
  });
  _config.stringFilter = _colorStringFilter;

  var _media = [],
      _listeners = {},
      _emptyArray = [],
      _lastMediaTime = 0,
      _contextID = 0,
      _dispatch = function _dispatch(type) {
    return (_listeners[type] || _emptyArray).map(function (f) {
      return f();
    });
  },
      _onMediaChange = function _onMediaChange() {
    var time = Date.now(),
        matches = [];

    if (time - _lastMediaTime > 2) {
      _dispatch("matchMediaInit");

      _media.forEach(function (c) {
        var queries = c.queries,
            conditions = c.conditions,
            match,
            p,
            anyMatch,
            toggled;

        for (p in queries) {
          match = _win.matchMedia(queries[p]).matches;
          match && (anyMatch = 1);

          if (match !== conditions[p]) {
            conditions[p] = match;
            toggled = 1;
          }
        }

        if (toggled) {
          c.revert();
          anyMatch && matches.push(c);
        }
      });

      _dispatch("matchMediaRevert");

      matches.forEach(function (c) {
        return c.onMatch(c);
      });
      _lastMediaTime = time;

      _dispatch("matchMedia");
    }
  };

  var Context = function () {
    function Context(func, scope) {
      this.selector = scope && selector(scope);
      this.data = [];
      this._r = [];
      this.isReverted = false;
      this.id = _contextID++;
      func && this.add(func);
    }

    var _proto5 = Context.prototype;

    _proto5.add = function add(name, func, scope) {
      if (_isFunction(name)) {
        scope = func;
        func = name;
        name = _isFunction;
      }

      var self = this,
          f = function f() {
        var prev = _context,
            prevSelector = self.selector,
            result;
        prev && prev !== self && prev.data.push(self);
        scope && (self.selector = selector(scope));
        _context = self;
        result = func.apply(self, arguments);
        _isFunction(result) && self._r.push(result);
        _context = prev;
        self.selector = prevSelector;
        self.isReverted = false;
        return result;
      };

      self.last = f;
      return name === _isFunction ? f(self) : name ? self[name] = f : f;
    };

    _proto5.ignore = function ignore(func) {
      var prev = _context;
      _context = null;
      func(this);
      _context = prev;
    };

    _proto5.getTweens = function getTweens() {
      var a = [];
      this.data.forEach(function (e) {
        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
      });
      return a;
    };

    _proto5.clear = function clear() {
      this._r.length = this.data.length = 0;
    };

    _proto5.kill = function kill(revert, matchMedia) {
      var _this4 = this;

      if (revert) {
        var tweens = this.getTweens();
        this.data.forEach(function (t) {
          if (t.data === "isFlip") {
            t.revert();
            t.getChildren(true, true, false).forEach(function (tween) {
              return tweens.splice(tweens.indexOf(tween), 1);
            });
          }
        });
        tweens.map(function (t) {
          return {
            g: t.globalTime(0),
            t: t
          };
        }).sort(function (a, b) {
          return b.g - a.g || -Infinity;
        }).forEach(function (o) {
          return o.t.revert(revert);
        });
        this.data.forEach(function (e) {
          return !(e instanceof Tween) && e.revert && e.revert(revert);
        });

        this._r.forEach(function (f) {
          return f(revert, _this4);
        });

        this.isReverted = true;
      } else {
        this.data.forEach(function (e) {
          return e.kill && e.kill();
        });
      }

      this.clear();

      if (matchMedia) {
        var i = _media.length;

        while (i--) {
          _media[i].id === this.id && _media.splice(i, 1);
        }
      }
    };

    _proto5.revert = function revert(config) {
      this.kill(config || {});
    };

    return Context;
  }();

  var MatchMedia = function () {
    function MatchMedia(scope) {
      this.contexts = [];
      this.scope = scope;
    }

    var _proto6 = MatchMedia.prototype;

    _proto6.add = function add(conditions, func, scope) {
      _isObject(conditions) || (conditions = {
        matches: conditions
      });
      var context = new Context(0, scope || this.scope),
          cond = context.conditions = {},
          mq,
          p,
          active;
      _context && !context.selector && (context.selector = _context.selector);
      this.contexts.push(context);
      func = context.add("onMatch", func);
      context.queries = conditions;

      for (p in conditions) {
        if (p === "all") {
          active = 1;
        } else {
          mq = _win.matchMedia(conditions[p]);

          if (mq) {
            _media.indexOf(context) < 0 && _media.push(context);
            (cond[p] = mq.matches) && (active = 1);
            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
          }
        }
      }

      active && func(context);
      return this;
    };

    _proto6.revert = function revert(config) {
      this.kill(config || {});
    };

    _proto6.kill = function kill(revert) {
      this.contexts.forEach(function (c) {
        return c.kill(revert, true);
      });
    };

    return MatchMedia;
  }();

  var _gsap = {
    registerPlugin: function registerPlugin() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      args.forEach(function (config) {
        return _createPlugin(config);
      });
    },
    timeline: function timeline(vars) {
      return new Timeline(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
      return _globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property, unit, uncache) {
      _isString(target) && (target = toArray(target)[0]);

      var getter = _getCache(target || {}).get,
          format = unit ? _passThrough : _numericIfPossible;

      unit === "native" && (unit = "");
      return !target ? target : !property ? function (property, unit, uncache) {
        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
    },
    quickSetter: function quickSetter(target, property, unit) {
      target = toArray(target);

      if (target.length > 1) {
        var setters = target.map(function (t) {
          return gsap.quickSetter(t, property, unit);
        }),
            l = setters.length;
        return function (value) {
          var i = l;

          while (i--) {
            setters[i](value);
          }
        };
      }

      target = target[0] || {};

      var Plugin = _plugins[property],
          cache = _getCache(target),
          p = cache.harness && (cache.harness.aliases || {})[property] || property,
          setter = Plugin ? function (value) {
        var p = new Plugin();
        _quickTween._pt = 0;
        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
        p.render(1, p);
        _quickTween._pt && _renderPropTweens(1, _quickTween);
      } : cache.set(target, p);

      return Plugin ? setter : function (value) {
        return setter(target, p, unit ? value + unit : value, cache, 1);
      };
    },
    quickTo: function quickTo(target, property, vars) {
      var _merge2;

      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = "+=0.1", _merge2.paused = true, _merge2), vars || {})),
          func = function func(value, start, startIsRelative) {
        return tween.resetTo(property, value, start, startIsRelative);
      };

      func.tween = tween;
      return func;
    },
    isTweening: function isTweening(targets) {
      return _globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
      return _mergeDeep(_defaults, value || {});
    },
    config: function config(value) {
      return _mergeDeep(_config, value || {});
    },
    registerEffect: function registerEffect(_ref3) {
      var name = _ref3.name,
          effect = _ref3.effect,
          plugins = _ref3.plugins,
          defaults = _ref3.defaults,
          extendTimeline = _ref3.extendTimeline;
      (plugins || "").split(",").forEach(function (pluginName) {
        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
      });

      _effects[name] = function (targets, vars, tl) {
        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
      };

      if (extendTimeline) {
        Timeline.prototype[name] = function (targets, vars, position) {
          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
        };
      }
    },
    registerEase: function registerEase(name, ease) {
      _easeMap[name] = _parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
    },
    getById: function getById(id) {
      return _globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
      if (vars === void 0) {
        vars = {};
      }

      var tl = new Timeline(vars),
          child,
          next;
      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

      _globalTimeline.remove(tl);

      tl._dp = 0;
      tl._time = tl._tTime = _globalTimeline._time;
      child = _globalTimeline._first;

      while (child) {
        next = child._next;

        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
          _addToTimeline(tl, child, child._start - child._delay);
        }

        child = next;
      }

      _addToTimeline(_globalTimeline, tl, 0);

      return tl;
    },
    context: function context(func, scope) {
      return func ? new Context(func, scope) : _context;
    },
    matchMedia: function matchMedia(scope) {
      return new MatchMedia(scope);
    },
    matchMediaRefresh: function matchMediaRefresh() {
      return _media.forEach(function (c) {
        var cond = c.conditions,
            found,
            p;

        for (p in cond) {
          if (cond[p]) {
            cond[p] = false;
            found = 1;
          }
        }

        found && c.revert();
      }) || _onMediaChange();
    },
    addEventListener: function addEventListener(type, callback) {
      var a = _listeners[type] || (_listeners[type] = []);
      ~a.indexOf(callback) || a.push(callback);
    },
    removeEventListener: function removeEventListener(type, callback) {
      var a = _listeners[type],
          i = a && a.indexOf(callback);
      i >= 0 && a.splice(i, 1);
    },
    utils: {
      wrap: wrap,
      wrapYoyo: wrapYoyo,
      distribute: distribute,
      random: random,
      snap: snap,
      normalize: normalize,
      getUnit: getUnit,
      clamp: clamp,
      splitColor: splitColor,
      toArray: toArray,
      selector: selector,
      mapRange: mapRange,
      pipe: pipe,
      unitize: unitize,
      interpolate: interpolate,
      shuffle: shuffle
    },
    install: _install,
    effects: _effects,
    ticker: _ticker,
    updateRoot: Timeline.updateRoot,
    plugins: _plugins,
    globalTimeline: _globalTimeline,
    core: {
      PropTween: PropTween,
      globals: _addGlobal,
      Tween: Tween,
      Timeline: Timeline,
      Animation: Animation,
      getCache: _getCache,
      _removeLinkedListItem: _removeLinkedListItem,
      reverting: function reverting() {
        return _reverting;
      },
      context: function context(toAdd) {
        if (toAdd && _context) {
          _context.data.push(toAdd);

          toAdd._ctx = _context;
        }

        return _context;
      },
      suppressOverwrites: function suppressOverwrites(value) {
        return _suppressOverwrites = value;
      }
    }
  };

  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
    return _gsap[name] = Tween[name];
  });

  _ticker.add(Timeline.updateRoot);

  _quickTween = _gsap.to({}, {
    duration: 0
  });

  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;

    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
      pt = pt._next;
    }

    return pt;
  },
      _addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets,
        p,
        i,
        pt;

    for (p in modifiers) {
      i = targets.length;

      while (i--) {
        pt = tween._ptLookup[i][p];

        if (pt && (pt = pt.d)) {
          if (pt._pt) {
            pt = _getPluginPropTween(pt, p);
          }

          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
        }
      }
    }
  },
      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
      name: name,
      rawVars: 1,
      init: function init(target, vars, tween) {
        tween._onInit = function (tween) {
          var temp, p;

          if (_isString(vars)) {
            temp = {};

            _forEachName(vars, function (name) {
              return temp[name] = 1;
            });

            vars = temp;
          }

          if (modifier) {
            temp = {};

            for (p in vars) {
              temp[p] = modifier(vars[p]);
            }

            vars = temp;
          }

          _addModifiers(tween, vars);
        };
      }
    };
  };

  var gsap = _gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
      var p, pt, v;
      this.tween = tween;

      for (p in vars) {
        v = target.getAttribute(p) || "";
        pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
        pt.op = p;
        pt.b = v;

        this._props.push(p);
      }
    },
    render: function render(ratio, data) {
      var pt = data._pt;

      while (pt) {
        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);
        pt = pt._next;
      }
    }
  }, {
    name: "endArray",
    init: function init(target, value) {
      var i = value.length;

      while (i--) {
        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
      }
    }
  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;
  Tween.version = Timeline.version = gsap.version = "3.12.2";
  _coreReady = 1;
  _windowExists() && _wake();
  var Power0 = _easeMap.Power0,
      Power1 = _easeMap.Power1,
      Power2 = _easeMap.Power2,
      Power3 = _easeMap.Power3,
      Power4 = _easeMap.Power4,
      Linear = _easeMap.Linear,
      Quad = _easeMap.Quad,
      Cubic = _easeMap.Cubic,
      Quart = _easeMap.Quart,
      Quint = _easeMap.Quint,
      Strong = _easeMap.Strong,
      Elastic = _easeMap.Elastic,
      Back = _easeMap.Back,
      SteppedEase = _easeMap.SteppedEase,
      Bounce = _easeMap.Bounce,
      Sine = _easeMap.Sine,
      Expo = _easeMap.Expo,
      Circ = _easeMap.Circ;

  var _win$1,
      _doc$1,
      _docElement,
      _pluginInitted,
      _tempDiv,
      _tempDivStyler,
      _recentSetterPlugin,
      _reverting$1,
      _windowExists$1 = function _windowExists() {
    return typeof window !== "undefined";
  },
      _transformProps = {},
      _RAD2DEG = 180 / Math.PI,
      _DEG2RAD = Math.PI / 180,
      _atan2 = Math.atan2,
      _bigNum$1 = 1e8,
      _capsExp = /([A-Z])/g,
      _horizontalExp = /(left|right|width|margin|padding|x)/i,
      _complexExp = /[\s,\(]\S/,
      _propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
  },
      _renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
  },
      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
  },
      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
  },
      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
  },
      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
  },
      _setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
  },
      _setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
  },
      _setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
  },
      _setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
  },
      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
  },
      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
  },
      _transformProp = "transform",
      _transformOriginProp = _transformProp + "Origin",
      _saveStyle = function _saveStyle(property, isNotCSS) {
    var _this = this;

    var target = this.target,
        style = target.style;

    if (property in _transformProps && style) {
      this.tfm = this.tfm || {};

      if (property !== "transform") {
        property = _propertyAliases[property] || property;
        ~property.indexOf(",") ? property.split(",").forEach(function (a) {
          return _this.tfm[a] = _get(target, a);
        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);
      } else {
        return _propertyAliases.transform.split(",").forEach(function (p) {
          return _saveStyle.call(_this, p, isNotCSS);
        });
      }

      if (this.props.indexOf(_transformProp) >= 0) {
        return;
      }

      if (target._gsap.svg) {
        this.svgo = target.getAttribute("data-svg-origin");
        this.props.push(_transformOriginProp, isNotCSS, "");
      }

      property = _transformProp;
    }

    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
  },
      _removeIndependentTransforms = function _removeIndependentTransforms(style) {
    if (style.translate) {
      style.removeProperty("translate");
      style.removeProperty("scale");
      style.removeProperty("rotate");
    }
  },
      _revertStyle = function _revertStyle() {
    var props = this.props,
        target = this.target,
        style = target.style,
        cache = target._gsap,
        i,
        p;

    for (i = 0; i < props.length; i += 3) {
      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
    }

    if (this.tfm) {
      for (p in this.tfm) {
        cache[p] = this.tfm[p];
      }

      if (cache.svg) {
        cache.renderTransform();
        target.setAttribute("data-svg-origin", this.svgo || "");
      }

      i = _reverting$1();

      if ((!i || !i.isStart) && !style[_transformProp]) {
        _removeIndependentTransforms(style);

        cache.uncache = 1;
      }
    }
  },
      _getStyleSaver = function _getStyleSaver(target, properties) {
    var saver = {
      target: target,
      props: [],
      revert: _revertStyle,
      save: _saveStyle
    };
    target._gsap || gsap.core.getCache(target);
    properties && properties.split(",").forEach(function (p) {
      return saver.save(p);
    });
    return saver;
  },
      _supports3D,
      _createElement = function _createElement(type, ns) {
    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type);
    return e.style ? e : _doc$1.createElement(type);
  },
      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || "";
  },
      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
    var e = element || _tempDiv,
        s = e.style,
        i = 5;

    if (property in s && !preferPrefix) {
      return property;
    }

    property = property.charAt(0).toUpperCase() + property.substr(1);

    while (i-- && !(_prefixes[i] + property in s)) {}

    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
  },
      _initCore = function _initCore() {
    if (_windowExists$1() && window.document) {
      _win$1 = window;
      _doc$1 = _win$1.document;
      _docElement = _doc$1.documentElement;
      _tempDiv = _createElement("div") || {
        style: {}
      };
      _tempDivStyler = _createElement("div");
      _transformProp = _checkPropPrefix(_transformProp);
      _transformOriginProp = _transformProp + "Origin";
      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";
      _supports3D = !!_checkPropPrefix("perspective");
      _reverting$1 = gsap.core.reverting;
      _pluginInitted = 1;
    }
  },
      _getBBoxHack = function _getBBoxHack(swapIfPossible) {
    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
        oldParent = this.parentNode,
        oldSibling = this.nextSibling,
        oldCSS = this.style.cssText,
        bbox;

    _docElement.appendChild(svg);

    svg.appendChild(this);
    this.style.display = "block";

    if (swapIfPossible) {
      try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox;
        this.getBBox = _getBBoxHack;
      } catch (e) {}
    } else if (this._gsapBBox) {
      bbox = this._gsapBBox();
    }

    if (oldParent) {
      if (oldSibling) {
        oldParent.insertBefore(this, oldSibling);
      } else {
        oldParent.appendChild(this);
      }
    }

    _docElement.removeChild(svg);

    this.style.cssText = oldCSS;
    return bbox;
  },
      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;

    while (i--) {
      if (target.hasAttribute(attributesArray[i])) {
        return target.getAttribute(attributesArray[i]);
      }
    }
  },
      _getBBox = function _getBBox(target) {
    var bounds;

    try {
      bounds = target.getBBox();
    } catch (error) {
      bounds = _getBBoxHack.call(target, true);
    }

    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
      width: 0,
      height: 0
    } : bounds;
  },
      _isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
  },
      _removeProperty = function _removeProperty(target, property) {
    if (property) {
      var style = target.style;

      if (property in _transformProps && property !== _transformOriginProp) {
        property = _transformProp;
      }

      if (style.removeProperty) {
        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {
          property = "-" + property;
        }

        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());
      } else {
        style.removeAttribute(property);
      }
    }
  },
      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;

    plugin._props.push(property);

    return pt;
  },
      _nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
  },
      _nonStandardLayouts = {
    grid: 1,
    flex: 1
  },
      _convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0,
        curUnit = (value + "").trim().substr((curValue + "").length) || "px",
        style = _tempDiv.style,
        horizontal = _horizontalExp.test(property),
        isRootSVG = target.tagName.toLowerCase() === "svg",
        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
        amount = 100,
        toPixels = unit === "px",
        toPercent = unit === "%",
        px,
        parent,
        cache,
        isSVG;

    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
      return curValue;
    }

    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && _isSVG(target);

    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
    }

    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

    if (isSVG) {
      parent = (target.ownerSVGElement || {}).parentNode;
    }

    if (!parent || parent === _doc$1 || !parent.appendChild) {
      parent = _doc$1.body;
    }

    cache = parent._gsap;

    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
      return _round(curValue / cache.width * amount);
    } else {
      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
      parent === target && (style.position = "static");
      parent.appendChild(_tempDiv);
      px = _tempDiv[measureProperty];
      parent.removeChild(_tempDiv);
      style.position = "absolute";

      if (horizontal && toPercent) {
        cache = _getCache(parent);
        cache.time = _ticker.time;
        cache.width = parent[measureProperty];
      }
    }

    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
  },
      _get = function _get(target, property, unit, uncache) {
    var value;
    _pluginInitted || _initCore();

    if (property in _propertyAliases && property !== "transform") {
      property = _propertyAliases[property];

      if (~property.indexOf(",")) {
        property = property.split(",")[0];
      }
    }

    if (_transformProps[property] && property !== "transform") {
      value = _parseTransform(target, uncache);
      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
      value = target.style[property];

      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);
      }
    }

    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
  },
      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    if (!start || start === "none") {
      var p = _checkPropPrefix(prop, target, 1),
          s = p && _getComputedProperty(target, p, 1);

      if (s && s !== start) {
        prop = p;
        start = s;
      } else if (prop === "borderColor") {
        start = _getComputedProperty(target, "borderTopColor");
      }
    }

    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
        index = 0,
        matchIndex = 0,
        a,
        result,
        startValues,
        startNum,
        color,
        startValue,
        endValue,
        endNum,
        chunk,
        endUnit,
        startUnit,
        endValues;
    pt.b = start;
    pt.e = end;
    start += "";
    end += "";

    if (end === "auto") {
      target.style[prop] = end;
      end = _getComputedProperty(target, prop) || end;
      target.style[prop] = start;
    }

    a = [start, end];

    _colorStringFilter(a);

    start = a[0];
    end = a[1];
    startValues = start.match(_numWithUnitExp) || [];
    endValues = end.match(_numWithUnitExp) || [];

    if (endValues.length) {
      while (result = _numWithUnitExp.exec(end)) {
        endValue = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
          color = 1;
        }

        if (endValue !== (startValue = startValues[matchIndex++] || "")) {
          startNum = parseFloat(startValue) || 0;
          startUnit = startValue.substr((startNum + "").length);
          endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
          endNum = parseFloat(endValue);
          endUnit = endValue.substr((endNum + "").length);
          index = _numWithUnitExp.lastIndex - endUnit.length;

          if (!endUnit) {
            endUnit = endUnit || _config.units[prop] || startUnit;

            if (index === end.length) {
              end += endUnit;
              pt.e += endUnit;
            }
          }

          if (startUnit !== endUnit) {
            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
          }

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            s: startNum,
            c: endNum - startNum,
            m: color && color < 4 || prop === "zIndex" ? Math.round : 0
          };
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : "";
    } else {
      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
    }

    _relExp.test(end) && (pt.e = 0);
    this._pt = pt;
    return pt;
  },
      _keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
  },
      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "),
        x = split[0],
        y = split[1] || "50%";

    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
      value = x;
      x = y;
      y = value;
    }

    split[0] = _keywordToPercent[x] || x;
    split[1] = _keywordToPercent[y] || y;
    return split.join(" ");
  },
      _renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
      var target = data.t,
          style = target.style,
          props = data.u,
          cache = target._gsap,
          prop,
          clearTransforms,
          i;

      if (props === "all" || props === true) {
        style.cssText = "";
        clearTransforms = 1;
      } else {
        props = props.split(",");
        i = props.length;

        while (--i > -1) {
          prop = props[i];

          if (_transformProps[prop]) {
            clearTransforms = 1;
            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
          }

          _removeProperty(target, prop);
        }
      }

      if (clearTransforms) {
        _removeProperty(target, _transformProp);

        if (cache) {
          cache.svg && target.removeAttribute("transform");

          _parseTransform(target, 1);

          cache.uncache = 1;

          _removeIndependentTransforms(style);
        }
      }
    }
  },
      _specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
      if (tween.data !== "isFromStart") {
        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
        pt.u = endValue;
        pt.pr = -10;
        pt.tween = tween;

        plugin._props.push(property);

        return 1;
      }
    }
  },
      _identity2DMatrix = [1, 0, 0, 1, 0, 0],
      _rotationalProperties = {},
      _isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
  },
      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = _getComputedProperty(target, _transformProp);

    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
  },
      _getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || _getCache(target),
        style = target.style,
        matrix = _getComputedTransformMatrixAsArray(target),
        parent,
        nextSibling,
        temp,
        addedToDOM;

    if (cache.svg && target.getAttribute("transform")) {
      temp = target.transform.baseVal.consolidate().matrix;
      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
      temp = style.display;
      style.display = "block";
      parent = target.parentNode;

      if (!parent || !target.offsetParent) {
        addedToDOM = 1;
        nextSibling = target.nextElementSibling;

        _docElement.appendChild(target);
      }

      matrix = _getComputedTransformMatrixAsArray(target);
      temp ? style.display = temp : _removeProperty(target, "display");

      if (addedToDOM) {
        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
      }
    }

    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
  },
      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap,
        matrix = matrixArray || _getMatrix(target, true),
        xOriginOld = cache.xOrigin || 0,
        yOriginOld = cache.yOrigin || 0,
        xOffsetOld = cache.xOffset || 0,
        yOffsetOld = cache.yOffset || 0,
        a = matrix[0],
        b = matrix[1],
        c = matrix[2],
        d = matrix[3],
        tx = matrix[4],
        ty = matrix[5],
        originSplit = origin.split(" "),
        xOrigin = parseFloat(originSplit[0]) || 0,
        yOrigin = parseFloat(originSplit[1]) || 0,
        bounds,
        determinant,
        x,
        y;

    if (!originIsAbsolute) {
      bounds = _getBBox(target);
      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
      xOrigin = x;
      yOrigin = y;
    }

    if (smooth || smooth !== false && cache.smooth) {
      tx = xOrigin - xOriginOld;
      ty = yOrigin - yOriginOld;
      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else {
      cache.xOffset = cache.yOffset = 0;
    }

    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[_transformOriginProp] = "0px 0px";

    if (pluginToAddPropTweensTo) {
      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }

    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
  },
      _parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new GSCache(target);

    if ("x" in cache && !uncache && !cache.uncache) {
      return cache;
    }

    var style = target.style,
        invertedScaleX = cache.scaleX < 0,
        px = "px",
        deg = "deg",
        cs = getComputedStyle(target),
        origin = _getComputedProperty(target, _transformOriginProp) || "0",
        x,
        y,
        z,
        scaleX,
        scaleY,
        rotation,
        rotationX,
        rotationY,
        skewX,
        skewY,
        perspective,
        xOrigin,
        yOrigin,
        matrix,
        angle,
        cos,
        sin,
        a,
        b,
        c,
        d,
        a12,
        a22,
        t1,
        t2,
        t3,
        a13,
        a23,
        a33,
        a42,
        a43,
        a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && _isSVG(target));

    if (cs.translate) {
      if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
        style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
      }

      style.scale = style.rotate = style.translate = "none";
    }

    matrix = _getMatrix(target, cache.svg);

    if (cache.svg) {
      if (cache.uncache) {
        t2 = target.getBBox();
        origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
        t1 = "";
      } else {
        t1 = !uncache && target.getAttribute("data-svg-origin");
      }

      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }

    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;

    if (matrix !== _identity2DMatrix) {
      a = matrix[0];
      b = matrix[1];
      c = matrix[2];
      d = matrix[3];
      x = a12 = matrix[4];
      y = a22 = matrix[5];

      if (matrix.length === 6) {
        scaleX = Math.sqrt(a * a + b * b);
        scaleY = Math.sqrt(d * d + c * c);
        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;
        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

        if (cache.svg) {
          x -= xOrigin - (xOrigin * a + yOrigin * c);
          y -= yOrigin - (xOrigin * b + yOrigin * d);
        }
      } else {
        a32 = matrix[6];
        a42 = matrix[7];
        a13 = matrix[8];
        a23 = matrix[9];
        a33 = matrix[10];
        a43 = matrix[11];
        x = matrix[12];
        y = matrix[13];
        z = matrix[14];
        angle = _atan2(a32, a33);
        rotationX = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a12 * cos + a13 * sin;
          t2 = a22 * cos + a23 * sin;
          t3 = a32 * cos + a33 * sin;
          a13 = a12 * -sin + a13 * cos;
          a23 = a22 * -sin + a23 * cos;
          a33 = a32 * -sin + a33 * cos;
          a43 = a42 * -sin + a43 * cos;
          a12 = t1;
          a22 = t2;
          a32 = t3;
        }

        angle = _atan2(-c, a33);
        rotationY = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(-angle);
          sin = Math.sin(-angle);
          t1 = a * cos - a13 * sin;
          t2 = b * cos - a23 * sin;
          t3 = c * cos - a33 * sin;
          a43 = d * sin + a43 * cos;
          a = t1;
          b = t2;
          c = t3;
        }

        angle = _atan2(b, a);
        rotation = angle * _RAD2DEG;

        if (angle) {
          cos = Math.cos(angle);
          sin = Math.sin(angle);
          t1 = a * cos + b * sin;
          t2 = a12 * cos + a22 * sin;
          b = b * cos - a * sin;
          a22 = a22 * cos - a12 * sin;
          a = t1;
          a12 = t2;
        }

        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
          rotationX = rotation = 0;
          rotationY = 180 - rotationY;
        }

        scaleX = _round(Math.sqrt(a * a + b * b + c * c));
        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
        angle = _atan2(a12, a22);
        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
      }

      if (cache.svg) {
        t1 = target.getAttribute("transform");
        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
        t1 && target.setAttribute("transform", t1);
      }
    }

    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
      if (invertedScaleX) {
        scaleX *= -1;
        skewX += rotation <= 0 ? 180 : -180;
        rotation += rotation <= 0 ? 180 : -180;
      } else {
        scaleY *= -1;
        skewX += skewX <= 0 ? 180 : -180;
      }
    }

    uncache = uncache || cache.uncache;
    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = _round(scaleX);
    cache.scaleY = _round(scaleY);
    cache.rotation = _round(rotation) + deg;
    cache.rotationX = _round(rotationX) + deg;
    cache.rotationY = _round(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;

    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {
      style[_transformOriginProp] = _firstTwoOnly(origin);
    }

    cache.xOffset = cache.yOffset = 0;
    cache.force3D = _config.force3D;
    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
  },
      _firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
  },
      _addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = getUnit(start);
    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
  },
      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;

    _renderCSSTransforms(ratio, cache);
  },
      _zeroDeg = "0deg",
      _zeroPx = "0px",
      _endParenthesis = ") ",
      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this,
        xPercent = _ref.xPercent,
        yPercent = _ref.yPercent,
        x = _ref.x,
        y = _ref.y,
        z = _ref.z,
        rotation = _ref.rotation,
        rotationY = _ref.rotationY,
        rotationX = _ref.rotationX,
        skewX = _ref.skewX,
        skewY = _ref.skewY,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        transformPerspective = _ref.transformPerspective,
        force3D = _ref.force3D,
        target = _ref.target,
        zOrigin = _ref.zOrigin,
        transforms = "",
        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;

    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
      var angle = parseFloat(rotationY) * _DEG2RAD,
          a13 = Math.sin(angle),
          a33 = Math.cos(angle),
          cos;

      angle = parseFloat(rotationX) * _DEG2RAD;
      cos = Math.cos(angle);
      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }

    if (transformPerspective !== _zeroPx) {
      transforms += "perspective(" + transformPerspective + _endParenthesis;
    }

    if (xPercent || yPercent) {
      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    }

    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
    }

    if (rotation !== _zeroDeg) {
      transforms += "rotate(" + rotation + _endParenthesis;
    }

    if (rotationY !== _zeroDeg) {
      transforms += "rotateY(" + rotationY + _endParenthesis;
    }

    if (rotationX !== _zeroDeg) {
      transforms += "rotateX(" + rotationX + _endParenthesis;
    }

    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
    }

    if (scaleX !== 1 || scaleY !== 1) {
      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
    }

    target.style[_transformProp] = transforms || "translate(0, 0)";
  },
      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this,
        xPercent = _ref2.xPercent,
        yPercent = _ref2.yPercent,
        x = _ref2.x,
        y = _ref2.y,
        rotation = _ref2.rotation,
        skewX = _ref2.skewX,
        skewY = _ref2.skewY,
        scaleX = _ref2.scaleX,
        scaleY = _ref2.scaleY,
        target = _ref2.target,
        xOrigin = _ref2.xOrigin,
        yOrigin = _ref2.yOrigin,
        xOffset = _ref2.xOffset,
        yOffset = _ref2.yOffset,
        forceCSS = _ref2.forceCSS,
        tx = parseFloat(x),
        ty = parseFloat(y),
        a11,
        a21,
        a12,
        a22,
        temp;

    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);

    if (skewY) {
      skewY = parseFloat(skewY);
      skewX += skewY;
      rotation += skewY;
    }

    if (rotation || skewX) {
      rotation *= _DEG2RAD;
      skewX *= _DEG2RAD;
      a11 = Math.cos(rotation) * scaleX;
      a21 = Math.sin(rotation) * scaleX;
      a12 = Math.sin(rotation - skewX) * -scaleY;
      a22 = Math.cos(rotation - skewX) * scaleY;

      if (skewX) {
        skewY *= _DEG2RAD;
        temp = Math.tan(skewX - skewY);
        temp = Math.sqrt(1 + temp * temp);
        a12 *= temp;
        a22 *= temp;

        if (skewY) {
          temp = Math.tan(skewY);
          temp = Math.sqrt(1 + temp * temp);
          a11 *= temp;
          a21 *= temp;
        }
      }

      a11 = _round(a11);
      a21 = _round(a21);
      a12 = _round(a12);
      a22 = _round(a22);
    } else {
      a11 = scaleX;
      a22 = scaleY;
      a21 = a12 = 0;
    }

    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
      tx = _convertToUnit(target, "x", x, "px");
      ty = _convertToUnit(target, "y", y, "px");
    }

    if (xOrigin || yOrigin || xOffset || yOffset) {
      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }

    if (xPercent || yPercent) {
      temp = target.getBBox();
      tx = _round(tx + xPercent / 100 * temp.width);
      ty = _round(ty + yPercent / 100 * temp.height);
    }

    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[_transformProp] = temp);
  },
      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
    var cap = 360,
        isString = _isString(endValue),
        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
        change = endNum - startNum,
        finalValue = startNum + change + "deg",
        direction,
        pt;

    if (isString) {
      direction = endValue.split("_")[1];

      if (direction === "short") {
        change %= cap;

        if (change !== change % (cap / 2)) {
          change += change < 0 ? cap : -cap;
        }
      }

      if (direction === "cw" && change < 0) {
        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      } else if (direction === "ccw" && change > 0) {
        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;
      }
    }

    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";

    plugin._props.push(property);

    return pt;
  },
      _assign = function _assign(target, source) {
    for (var p in source) {
      target[p] = source[p];
    }

    return target;
  },
      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    var startCache = _assign({}, target._gsap),
        exclude = "perspective,force3D,transformOrigin,svgOrigin",
        style = target.style,
        endCache,
        p,
        startValue,
        endValue,
        startNum,
        endNum,
        startUnit,
        endUnit;

    if (startCache.svg) {
      startValue = target.getAttribute("transform");
      target.setAttribute("transform", "");
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);

      _removeProperty(target, _transformProp);

      target.setAttribute("transform", startValue);
    } else {
      startValue = getComputedStyle(target)[_transformProp];
      style[_transformProp] = transforms;
      endCache = _parseTransform(target, 1);
      style[_transformProp] = startValue;
    }

    for (p in _transformProps) {
      startValue = startCache[p];
      endValue = endCache[p];

      if (startValue !== endValue && exclude.indexOf(p) < 0) {
        startUnit = getUnit(startValue);
        endUnit = getUnit(endValue);
        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
        endNum = parseFloat(endValue);
        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
        plugin._pt.u = endUnit || 0;

        plugin._props.push(p);
      }
    }

    _assign(endCache, startCache);
  };

  _forEachName("padding,margin,Width,Radius", function (name, index) {
    var t = "Top",
        r = "Right",
        b = "Bottom",
        l = "Left",
        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
      return index < 2 ? name + side : "border" + side + name;
    });

    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
      var a, vars;

      if (arguments.length < 4) {
        a = props.map(function (prop) {
          return _get(plugin, prop, property);
        });
        vars = a.join(" ");
        return vars.split(a[0]).length === 5 ? a[0] : vars;
      }

      a = (endValue + "").split(" ");
      vars = {};
      props.forEach(function (prop, i) {
        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
      });
      plugin.init(target, vars, tween);
    };
  });

  var CSSPlugin = {
    name: "css",
    register: _initCore,
    targetTest: function targetTest(target) {
      return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
      var props = this._props,
          style = target.style,
          startAt = tween.vars.startAt,
          startValue,
          endValue,
          endNum,
          startNum,
          type,
          specialProp,
          p,
          startUnit,
          endUnit,
          relative,
          isTransformRelated,
          transformPropTween,
          cache,
          smooth,
          hasPriority,
          inlineProps;
      _pluginInitted || _initCore();
      this.styles = this.styles || _getStyleSaver(target);
      inlineProps = this.styles.props;
      this.tween = tween;

      for (p in vars) {
        if (p === "autoRound") {
          continue;
        }

        endValue = vars[p];

        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
          continue;
        }

        type = typeof endValue;
        specialProp = _specialProps[p];

        if (type === "function") {
          endValue = endValue.call(tween, index, target, targets);
          type = typeof endValue;
        }

        if (type === "string" && ~endValue.indexOf("random(")) {
          endValue = _replaceRandom(endValue);
        }

        if (specialProp) {
          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
        } else if (p.substr(0, 2) === "--") {
          startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
          endValue += "";
          _colorExp.lastIndex = 0;

          if (!_colorExp.test(startValue)) {
            startUnit = getUnit(startValue);
            endUnit = getUnit(endValue);
          }

          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
          this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
          props.push(p);
          inlineProps.push(p, 0, style[p]);
        } else if (type !== "undefined") {
          if (startAt && p in startAt) {
            startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
            _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
            getUnit(startValue + "") || (startValue += _config.units[p] || getUnit(_get(target, p)) || "");
            (startValue + "").charAt(1) === "=" && (startValue = _get(target, p));
          } else {
            startValue = _get(target, p);
          }

          startNum = parseFloat(startValue);
          relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
          relative && (endValue = endValue.substr(2));
          endNum = parseFloat(endValue);

          if (p in _propertyAliases) {
            if (p === "autoAlpha") {
              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                startNum = 0;
              }

              inlineProps.push("visibility", 0, style.visibility);

              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
            }

            if (p !== "scale" && p !== "transform") {
              p = _propertyAliases[p];
              ~p.indexOf(",") && (p = p.split(",")[0]);
            }
          }

          isTransformRelated = p in _transformProps;

          if (isTransformRelated) {
            this.styles.save(p);

            if (!transformPropTween) {
              cache = target._gsap;
              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);
              smooth = vars.smoothOrigin !== false && cache.smooth;
              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);
              transformPropTween.dep = 1;
            }

            if (p === "scale") {
              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
              this._pt.u = 0;
              props.push("scaleY", p);
              p += "X";
            } else if (p === "transformOrigin") {
              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
              endValue = _convertKeywordsToPercentages(endValue);

              if (cache.svg) {
                _applySVGOrigin(target, endValue, 0, smooth, 0, this);
              } else {
                endUnit = parseFloat(endValue.split(" ")[2]) || 0;
                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
              }

              continue;
            } else if (p === "svgOrigin") {
              _applySVGOrigin(target, endValue, 1, smooth, 0, this);

              continue;
            } else if (p in _rotationalProperties) {
              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);

              continue;
            } else if (p === "smoothOrigin") {
              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

              continue;
            } else if (p === "force3D") {
              cache[p] = endValue;
              continue;
            } else if (p === "transform") {
              _addRawTransformPTs(this, endValue, target);

              continue;
            }
          } else if (!(p in style)) {
            p = _checkPropPrefix(p) || p;
          }

          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
            startUnit = (startValue + "").substr((startNum + "").length);
            endNum || (endNum = 0);
            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
            this._pt.u = endUnit || 0;

            if (startUnit !== endUnit && endUnit !== "%") {
              this._pt.b = startValue;
              this._pt.r = _renderCSSPropWithBeginning;
            }
          } else if (!(p in style)) {
            if (p in target) {
              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
            } else if (p !== "parseTransform") {
              _missingPlugin(p, endValue);

              continue;
            }
          } else {
            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
          }

          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));
          props.push(p);
        }
      }

      hasPriority && _sortPropTweensByPriority(this);
    },
    render: function render(ratio, data) {
      if (data.tween._time || !_reverting$1()) {
        var pt = data._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }
      } else {
        data.styles.revert();
      }
    },
    get: _get,
    aliases: _propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
      var p = _propertyAliases[property];
      p && p.indexOf(",") < 0 && (property = p);
      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
    },
    core: {
      _removeProperty: _removeProperty,
      _getMatrix: _getMatrix
    }
  };
  gsap.utils.checkPrefix = _checkPropPrefix;
  gsap.core.getStyleSaver = _getStyleSaver;

  (function (positionAndScale, rotation, others, aliases) {
    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
      _transformProps[name] = 1;
    });

    _forEachName(rotation, function (name) {
      _config.units[name] = "deg";
      _rotationalProperties[name] = 1;
    });

    _propertyAliases[all[13]] = positionAndScale + "," + rotation;

    _forEachName(aliases, function (name) {
      var split = name.split(":");
      _propertyAliases[split[1]] = all[split[0]];
    });
  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
    _config.units[name] = "px";
  });

  gsap.registerPlugin(CSSPlugin);

  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,
      TweenMaxWithCSS = gsapWithCSS.core.Tween;

  exports.Back = Back;
  exports.Bounce = Bounce;
  exports.CSSPlugin = CSSPlugin;
  exports.Circ = Circ;
  exports.Cubic = Cubic;
  exports.Elastic = Elastic;
  exports.Expo = Expo;
  exports.Linear = Linear;
  exports.Power0 = Power0;
  exports.Power1 = Power1;
  exports.Power2 = Power2;
  exports.Power3 = Power3;
  exports.Power4 = Power4;
  exports.Quad = Quad;
  exports.Quart = Quart;
  exports.Quint = Quint;
  exports.Sine = Sine;
  exports.SteppedEase = SteppedEase;
  exports.Strong = Strong;
  exports.TimelineLite = Timeline;
  exports.TimelineMax = Timeline;
  exports.TweenLite = Tween;
  exports.TweenMax = TweenMaxWithCSS;
  exports.default = gsapWithCSS;
  exports.gsap = gsapWithCSS;

  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}

})));

},{}],43:[function(require,module,exports){
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */

/*jshint browser: true, unused: true, undef: true, strict: true */

( function( window, factory ) {
  // universal module definition
  /*jshint strict: false */ /*globals define, module, require */

  if ( typeof define == 'function' && define.amd ) {
    // AMD
    define( [
      'unipointer/unipointer'
    ], function( Unipointer ) {
      return factory( window, Unipointer );
    });
  } else if ( typeof module == 'object' && module.exports ) {
    // CommonJS
    module.exports = factory(
      window,
      require('unipointer')
    );
  } else {
    // browser global
    window.Unidragger = factory(
      window,
      window.Unipointer
    );
  }

}( window, function factory( window, Unipointer ) {

'use strict';

// -------------------------- Unidragger -------------------------- //

function Unidragger() {}

// inherit Unipointer & EvEmitter
var proto = Unidragger.prototype = Object.create( Unipointer.prototype );

// ----- bind start ----- //

proto.bindHandles = function() {
  this._bindHandles( true );
};

proto.unbindHandles = function() {
  this._bindHandles( false );
};

/**
 * Add or remove start event
 * @param {Boolean} isAdd
 */
proto._bindHandles = function( isAdd ) {
  // munge isAdd, default to true
  isAdd = isAdd === undefined ? true : isAdd;
  // bind each handle
  var bindMethod = isAdd ? 'addEventListener' : 'removeEventListener';
  var touchAction = isAdd ? this._touchActionValue : '';
  for ( var i=0; i < this.handles.length; i++ ) {
    var handle = this.handles[i];
    this._bindStartEvent( handle, isAdd );
    handle[ bindMethod ]( 'click', this );
    // touch-action: none to override browser touch gestures. metafizzy/flickity#540
    if ( window.PointerEvent ) {
      handle.style.touchAction = touchAction;
    }
  }
};

// prototype so it can be overwriteable by Flickity
proto._touchActionValue = 'none';

// ----- start event ----- //

/**
 * pointer start
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerDown = function( event, pointer ) {
  var isOkay = this.okayPointerDown( event );
  if ( !isOkay ) {
    return;
  }
  // track start event position
  this.pointerDownPointer = pointer;

  event.preventDefault();
  this.pointerDownBlur();
  // bind move and end events
  this._bindPostStartEvents( event );
  this.emitEvent( 'pointerDown', [ event, pointer ] );
};

// nodes that have text fields
var cursorNodes = {
  TEXTAREA: true,
  INPUT: true,
  SELECT: true,
  OPTION: true,
};

// input types that do not have text fields
var clickTypes = {
  radio: true,
  checkbox: true,
  button: true,
  submit: true,
  image: true,
  file: true,
};

// dismiss inputs with text fields. flickity#403, flickity#404
proto.okayPointerDown = function( event ) {
  var isCursorNode = cursorNodes[ event.target.nodeName ];
  var isClickType = clickTypes[ event.target.type ];
  var isOkay = !isCursorNode || isClickType;
  if ( !isOkay ) {
    this._pointerReset();
  }
  return isOkay;
};

// kludge to blur previously focused input
proto.pointerDownBlur = function() {
  var focused = document.activeElement;
  // do not blur body for IE10, metafizzy/flickity#117
  var canBlur = focused && focused.blur && focused != document.body;
  if ( canBlur ) {
    focused.blur();
  }
};

// ----- move event ----- //

/**
 * drag move
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerMove = function( event, pointer ) {
  var moveVector = this._dragPointerMove( event, pointer );
  this.emitEvent( 'pointerMove', [ event, pointer, moveVector ] );
  this._dragMove( event, pointer, moveVector );
};

// base pointer move logic
proto._dragPointerMove = function( event, pointer ) {
  var moveVector = {
    x: pointer.pageX - this.pointerDownPointer.pageX,
    y: pointer.pageY - this.pointerDownPointer.pageY
  };
  // start drag if pointer has moved far enough to start drag
  if ( !this.isDragging && this.hasDragStarted( moveVector ) ) {
    this._dragStart( event, pointer );
  }
  return moveVector;
};

// condition if pointer has moved far enough to start drag
proto.hasDragStarted = function( moveVector ) {
  return Math.abs( moveVector.x ) > 3 || Math.abs( moveVector.y ) > 3;
};

// ----- end event ----- //

/**
 * pointer up
 * @param {Event} event
 * @param {Event or Touch} pointer
 */
proto.pointerUp = function( event, pointer ) {
  this.emitEvent( 'pointerUp', [ event, pointer ] );
  this._dragPointerUp( event, pointer );
};

proto._dragPointerUp = function( event, pointer ) {
  if ( this.isDragging ) {
    this._dragEnd( event, pointer );
  } else {
    // pointer didn't move enough for drag to start
    this._staticClick( event, pointer );
  }
};

// -------------------------- drag -------------------------- //

// dragStart
proto._dragStart = function( event, pointer ) {
  this.isDragging = true;
  // prevent clicks
  this.isPreventingClicks = true;
  this.dragStart( event, pointer );
};

proto.dragStart = function( event, pointer ) {
  this.emitEvent( 'dragStart', [ event, pointer ] );
};

// dragMove
proto._dragMove = function( event, pointer, moveVector ) {
  // do not drag if not dragging yet
  if ( !this.isDragging ) {
    return;
  }

  this.dragMove( event, pointer, moveVector );
};

proto.dragMove = function( event, pointer, moveVector ) {
  event.preventDefault();
  this.emitEvent( 'dragMove', [ event, pointer, moveVector ] );
};

// dragEnd
proto._dragEnd = function( event, pointer ) {
  // set flags
  this.isDragging = false;
  // re-enable clicking async
  setTimeout( function() {
    delete this.isPreventingClicks;
  }.bind( this ) );

  this.dragEnd( event, pointer );
};

proto.dragEnd = function( event, pointer ) {
  this.emitEvent( 'dragEnd', [ event, pointer ] );
};

// ----- onclick ----- //

// handle all clicks and prevent clicks when dragging
proto.onclick = function( event ) {
  if ( this.isPreventingClicks ) {
    event.preventDefault();
  }
};

// ----- staticClick ----- //

// triggered after pointer down & up with no/tiny movement
proto._staticClick = function( event, pointer ) {
  // ignore emulated mouse up clicks
  if ( this.isIgnoringMouseUp && event.type == 'mouseup' ) {
    return;
  }

  this.staticClick( event, pointer );

  // set flag for emulated clicks 300ms after touchend
  if ( event.type != 'mouseup' ) {
    this.isIgnoringMouseUp = true;
    // reset flag after 300ms
    setTimeout( function() {
      delete this.isIgnoringMouseUp;
    }.bind( this ), 400 );
  }
};

proto.staticClick = function( event, pointer ) {
  this.emitEvent( 'staticClick', [ event, pointer ] );
};

// ----- utils ----- //

Unidragger.getPointerPoint = Unipointer.getPointerPoint;

// -----  ----- //

return Unidragger;

}));

},{"unipointer":44}],44:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"dup":18,"ev-emitter":27}],45:[function(require,module,exports){
"use strict";

(function () {
  var CountdownTimer;
  CountdownTimer = {
    dom: {
      countdownTimer: document.querySelector('.JS--countdownTimer')
    },
    addedToDom: false,
    releaseMonth: '',
    releaseDay: '',
    releaseHour: '',
    releaseMinute: '',
    releaseDate: '',
    periodicStartDate: '',
    periodicEndDate: '',
    periodicFrequency: '',
    customNextDate: '',
    countdownInterval: '',
    init: function init() {
      if (CountdownTimer.dom.countdownTimer) {
        CountdownTimer.releaseMonth = CountdownTimer.dom.countdownTimer.dataset.month ? CountdownTimer.dom.countdownTimer.dataset.month : 11;
        CountdownTimer.releaseDay = CountdownTimer.dom.countdownTimer.dataset.day ? CountdownTimer.dom.countdownTimer.dataset.day : 28;
        CountdownTimer.releaseHour = CountdownTimer.dom.countdownTimer.dataset.hour ? CountdownTimer.dom.countdownTimer.dataset.hour : 11;
        CountdownTimer.releaseMinute = CountdownTimer.dom.countdownTimer.dataset.minutes ? CountdownTimer.dom.countdownTimer.dataset.minutes : 59;
        CountdownTimer.periodicStartDate = CountdownTimer.dom.countdownTimer.dataset.periodicStartDate ? CountdownTimer.dom.countdownTimer.dataset.periodicStartDate : null;
        CountdownTimer.periodicEndDate = CountdownTimer.dom.countdownTimer.dataset.periodicEndDate ? CountdownTimer.dom.countdownTimer.dataset.periodicEndDate : null;
        CountdownTimer.periodicFrequency = CountdownTimer.dom.countdownTimer.dataset.periodicFrequency ? CountdownTimer.dom.countdownTimer.dataset.periodicFrequency : null;
        CountdownTimer.customNextDate = CountdownTimer.dom.countdownTimer.dataset.customNextDate ? CountdownTimer.dom.countdownTimer.dataset.customNextDate : null;
      }

      CountdownTimer.initCountdownTimer();
    },
    isValidDateTime: function isValidDateTime(dateTimeString) {
      var parsedDate = Date.parse(dateTimeString);
      return !isNaN(parsedDate) && !isNaN(Date.parse(new Date(parsedDate).toISOString()));
    },
    initCountdownTimer: function initCountdownTimer() {
      function startCountdown() {
        var targetDateTime = CountdownTimer.customNextDate ? new Date(CountdownTimer.customNextDate) : CountdownTimer.getNextDate(CountdownTimer.periodicStartDate, CountdownTimer.periodicFrequency);
        CountdownTimer.countdownInterval = setInterval(updateCountdown, 1000);

        function updateCountdown() {
          var currentTime = new Date();
          var timeDifference = targetDateTime - currentTime;

          if (timeDifference <= 0 || CountdownTimer.periodicEndDate && new Date(CountdownTimer.periodicEndDate) < currentTime || CountdownTimer.periodicEndDate && new Date(CountdownTimer.periodicEndDate) < targetDateTime) {
            CountdownTimer.setTimerToZero();
            return;
          }

          var months = Math.floor(timeDifference / (1000 * 60 * 60 * 24 * 30));
          var days = Math.floor(timeDifference % (1000 * 60 * 60 * 24 * 30) / (1000 * 60 * 60 * 24));
          var hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
          var minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));
          var seconds = Math.floor(timeDifference % (1000 * 60) / 1000);

          var togglePlural = function togglePlural(unit, elem) {
            var plural = elem.parentNode.querySelector('.countdownTimer__unitPlural');

            if (unit !== 1) {
              plural.classList.remove('hide');
            } else if (!plural.classList.contains('hide')) {
              plural.classList.add('hide');
            }
          };

          document.getElementById('months').innerText = months < 10 ? "0".concat(months) : months, document.getElementById('days').innerText = days < 10 ? "0".concat(days) : days, document.getElementById('hours').innerText = hours < 10 ? "0".concat(hours) : hours, document.getElementById('minutes').innerText = minutes < 10 ? "0".concat(minutes) : minutes;
          togglePlural(months, document.getElementById('months'));
          togglePlural(days, document.getElementById('days'));
          togglePlural(hours, document.getElementById('hours'));
          togglePlural(minutes, document.getElementById('minutes'));
        }
      }

      if (CountdownTimer.periodicStartDate && CountdownTimer.isValidDateTime(CountdownTimer.periodicStartDate) || CountdownTimer.customNextDate && CountdownTimer.isValidDateTime(CountdownTimer.customNextDate)) {
        startCountdown();
      }
    },
    setTimerToZero: function setTimerToZero() {
      clearInterval(CountdownTimer.countdownInterval);
      document.getElementById('months').innerText = '00', document.getElementById('days').innerText = '00', document.getElementById('hours').innerText = '00', document.getElementById('minutes').innerText = '00'; // document.getElementById('seconds').innerText = '0';
    },
    getNextDate: function getNextDate(periodicStartDate, periodicFrequency) {
      var currentDate = new Date();
      var currentDay = currentDate.getDate();
      var currentMonth = currentDate.getMonth();
      var currentYear = currentDate.getFullYear();
      var currentHour = currentDate.getHours();
      var currentMinute = currentDate.getMinutes();
      var nextDate = '';
      var nextMonth;

      if (new Date(periodicStartDate) > currentDate) {
        nextDate = new Date(periodicStartDate);
      } else if (periodicStartDate && periodicFrequency == 'monthly') {
        nextDate = new Date(periodicStartDate);
        nextDate.setMonth(currentMonth);

        if (currentDay > nextDate.getDate() || currentDay === nextDate.getDate() && (currentHour > nextDate.getHours() || currentHour === nextDate.getHours() && currentMinute >= nextDate.getMinutes())) {
          nextMonth = (currentMonth + 1) % 12; // Wrap to January if December

          nextDate.setMonth(nextMonth);

          if (nextMonth === 0) {
            nextDate.setYear(currentYear + 1);
          }
        }
      } else if (periodicStartDate && periodicFrequency == 'every-other-month') {
        var getNextOccurrence = function getNextOccurrence(startMonth, increment) {
          var currentDate = new Date();
          var currentYear = currentDate.getFullYear();
          var currentMonth = currentDate.getMonth() + 1; // Month is 0-indexed in JavaScript (0 = January, 1 = February, ...)

          var nextMonth = startMonth; // Calculate the number of months between the current month and the start month

          var monthsUntilNextOccurrence = (12 + nextMonth - currentMonth) % 12; // Calculate the number of months to add for the next occurrence

          var monthsToAdd = monthsUntilNextOccurrence >= 1 ? increment : 1; // Calculate the next month

          nextMonth = (nextMonth + monthsToAdd) % 12;
          if (nextMonth === 0) nextMonth = 12; // Handle December

          var nextDate = new Date(currentYear, nextMonth - 1, 1);

          while (nextDate.getMonth() < currentDate.getMonth()) {
            nextDate.setMonth(nextDate.getMonth() + increment);
          }

          return nextDate.getMonth(); // Months are 0-indexed
        };

        var startDateMonth = new Date(periodicStartDate).getMonth();
        nextDate = new Date(periodicStartDate);
        nextDate.setMonth(getNextOccurrence(startDateMonth + 1, 3));

        if (currentMonth === nextDate.getMonth()) {
          if (currentDay > nextDate.getDate() || currentDay === nextDate.getDate() && (currentHour > nextDate.getHours() || currentHour === nextDate.getHours() && currentMinute >= nextDate.getMinutes())) {
            nextMonth = (currentMonth + 2) % 12; // Wrap to January if December

            nextDate.setMonth(nextMonth);

            if (nextMonth === 0) {
              nextDate.setYear(currentYear + 1);
            }
          }
        }
      }

      return nextDate;
    }
  };
  module.exports = CountdownTimer;
})();

},{}],46:[function(require,module,exports){
"use strict";

var _require = require("gsap/dist/gsap"),
    gsap = _require.gsap;

var _require2 = require("gsap/dist/ScrollTrigger"),
    ScrollTrigger = _require2.ScrollTrigger;

var Flickity = require('flickity');

gsap.registerPlugin(ScrollTrigger);
var fixedFiftyFifties = document.querySelectorAll('.fixedFiftyFifty');

var slideTimeline = function slideTimeline(textContent, image, indicator, isLast, isFirst) {
  var tl = gsap.timeline();

  if (!isFirst) {
    tl.fromTo(image, {
      y: '100%'
    }, {
      y: '0',
      duration: 3
    });
    tl.to(indicator, {
      backgroundColor: 'var(--strong-pink)',
      duration: 0
    }, '<.25');
    tl.to(textContent, {
      opacity: 1,
      zIndex: 1,
      duration: 1
    }, '<.5');
  }

  if (!isLast) {
    tl.to(textContent, {
      opacity: 0,
      zIndex: 0,
      duration: 2
    }, "+=1.5");
    tl.to(indicator, {
      backgroundColor: 'var(--grey)',
      duration: 0
    }, '<1');
  } else {
    //so there is a pause at the end
    tl.to(textContent, {
      opacity: 1,
      zIndex: 1,
      duration: 1
    }, '+=1');
  }

  return tl;
};

if (fixedFiftyFifties && fixedFiftyFifties.length) {
  fixedFiftyFifties.forEach(function (fixedFiftyFifty) {
    var fiftyFiftyDesktopInner = fixedFiftyFifty.querySelector('.fixedFiftyFifty__inner--desktop');
    var textContent = fiftyFiftyDesktopInner.querySelectorAll('.textContent');
    var images = fiftyFiftyDesktopInner.querySelectorAll('.fixedFiftyFifty__imageWrap');
    var indicators = fiftyFiftyDesktopInner.querySelectorAll('.fiftyFifty__indicators span');
    var mediaQuery = gsap.matchMedia();
    mediaQuery.add("(min-width: 1024px)", function () {
      var tl = gsap.timeline({
        scrollTrigger: {
          trigger: fixedFiftyFifty,
          start: "top top",
          scrub: .3,
          // onEnter, onLeave, onEnterBack, and onLeaveBack
          // toggleActions: "play pause reverse pause",
          pin: true,
          end: function end() {
            return "+=" + textContent.length * fixedFiftyFifty.offsetHeight * 2.5 + 'px';
          } // markers:true

        }
      }); // let indicatorsTimeline = gsap.timeline();
      // // indicatorsTimeline.to(indicators[0], {backgroundColor:'pink', duration:0});
      // indicatorsTimeline.to(indicators[0], {backgroundColor:'grey', duration:0}, '+=4');
      // indicatorsTimeline.to(indicators[1], {backgroundColor:'pink', duration:0});
      // indicatorsTimeline.to(indicators[1], {backgroundColor:'grey', duration:0}, '+=4');
      // indicatorsTimeline.to(indicators[2], {backgroundColor:'pink', duration:0});

      textContent.forEach(function (tc, i) {
        tl.add(slideTimeline(tc, images[i], indicators[i], i == textContent.length - 1, i == 0), i > 0 ? '-=0.9' : '<');
      });
    });
    var fixedFiftyFiftyMobileInner = fixedFiftyFifty.querySelector('.fixedFiftyFifty__inner--mobile');
    var settings = {
      wrapAround: false,
      autoPlay: false,
      imagesLoaded: true,
      pageDots: false,
      prevNextButtons: false,
      contain: true,
      cellAlign: 'left',
      watchCSS: true
    };
    var flkty = new Flickity(fixedFiftyFiftyMobileInner, settings);
    fixedFiftyFifty.querySelector('[data-carousel-prev]').addEventListener('click', function (e) {
      e.preventDefault();
      flkty.previous();
    });
    fixedFiftyFifty.querySelector('[data-carousel-next]').addEventListener('click', function (e) {
      e.preventDefault();
      flkty.next();
    });
  });
}

},{"flickity":34,"gsap/dist/ScrollTrigger":41,"gsap/dist/gsap":42}],47:[function(require,module,exports){
"use strict";

(function () {
  var RollerText;
  RollerText = {
    phrases: ['multi-day', 'weekend', 'boutique', 'country', 'holiday', 'rock', 'city', 'dance', 'post-punk', 'family', 'metal', 'jazz', 'weird', 'special', 'classical', 'winter'],
    dom: {
      textWrap: document.querySelector('.rollerText'),
      current: document.querySelector('[data-text-current]'),
      next: document.querySelector('[data-text-next]')
    },
    intervalLength: 1500,
    nextPhrase: 'winter',
    counter: null,
    ticker: false,
    init: function init() {
      if (RollerText.dom.textWrap) RollerText.startcounter();
    },
    startcounter: function startcounter() {
      RollerText.setWidth(RollerText.dom.current);
      var i = 1;
      RollerText.counter = setInterval(function () {
        var currentPhrase = RollerText.phrases[i];
        var nextPhrase = RollerText.phrases[i + 1] ? RollerText.phrases[i + 1] : RollerText.phrases[0];
        RollerText.dom.textWrap.classList.add('turn');
        RollerText.setWidth(RollerText.dom.next);
        setTimeout(function () {
          RollerText.dom.textWrap.classList.remove('turn'); // Update mobile screen image

          RollerText.dom.current.textContent = currentPhrase;
          RollerText.dom.next.textContent = nextPhrase;
        }, 1000); // If we reach the end of the themes, reset to first theme

        i >= RollerText.phrases.length - 1 ? i = 0 : i++;
      }, RollerText.intervalLength);
    },
    setWidth: function setWidth(element) {
      var textWidth = element.getBoundingClientRect().width;
      RollerText.dom.textWrap.style.width = "".concat(textWidth, "px");
    }
  };
  module.exports = RollerText;
})();

},{}],48:[function(require,module,exports){
"use strict";

(function () {
  var Testimonials,
      Flickity = require('flickity');

  Testimonials = {
    dom: {
      container: document.querySelector('.JS--testimonials')
    },
    init: function init() {
      if (Testimonials.dom.container && Testimonials.dom.container.children.length > 1) Testimonials.createCarousel();
    },
    createCarousel: function createCarousel() {
      var settings = {
        cellAlign: 'center',
        wrapAround: true,
        autoPlay: false,
        imagesLoaded: true,
        pageDots: false
      };
      new Flickity(Testimonials.dom.container, settings);
    }
  };
  module.exports = Testimonials;
})();

},{"flickity":34}],49:[function(require,module,exports){
"use strict";

var tickerBanners = document.querySelectorAll('.JS--plot-ticker');

if (tickerBanners && tickerBanners.length) {
  tickerBanners.forEach(function (tickerBanner) {
    var maxWindowWidth = window.matchMedia("(min-width: 639px)");

    var resetBanner = function resetBanner() {
      tickerBanner.classList.remove('animate');
      var containers = tickerBanner.querySelectorAll('.ticker-container');
      var messages = containers[0].querySelectorAll('.message');

      if (containers[1]) {
        containers[1].remove();
      }

      if (messages.length > 1) {
        messages.forEach(function (msg, index) {
          if (index > 0) {
            msg.remove();
          }
        });
      }

      if (!maxWindowWidth.matches) {
        setupBanner();
      }
    };

    var setupBanner = function setupBanner() {
      var tickerContainer = tickerBanner.querySelector('.ticker-container');
      var message = tickerBanner.querySelector('.message');
      var messageWidth = message.offsetWidth;
      var bannerWidth = tickerBanner.offsetWidth;
      var howManyFit = Math.ceil(bannerWidth / messageWidth);

      if (howManyFit) {
        for (var i = 0; i < howManyFit; i++) {
          var _clone = message.cloneNode(true);

          tickerContainer.appendChild(_clone);
        }

        var clone = tickerContainer.cloneNode(true);
        tickerBanner.appendChild(clone);
        tickerBanner.classList.add('animate');
        tickerBanner.querySelectorAll('.ticker-container').forEach(function (el) {
          var speed = bannerWidth > 600 ? bannerWidth : 600;
          el.style.animationDuration = speed / 15 + 's';
        });
      }
    }; // tickerBanner.addEventListener('mouseenter', ()=>{
    //     let tickerContainer = tickerBanner.querySelectorAll('.ticker-container');
    //     tickerContainer.forEach(container=>{
    //         container.style.animationPlayState = 'paused';
    //     })
    // })
    // tickerBanner.addEventListener('mouseleave', ()=>{
    //     let tickerContainer = tickerBanner.querySelectorAll('.ticker-container');
    //     tickerContainer.forEach(container=>{
    //         container.style.animationPlayState = 'running';
    //     })
    // })


    if (!maxWindowWidth.matches) {
      setupBanner();
    }

    var screenSize = window.innerWidth;
    window.addEventListener('resize', function () {
      if (window.innerWidth !== screenSize) {
        screenSize = window.innerWidth;
        resetBanner();
      }
    });
  });
}

},{}],50:[function(require,module,exports){
"use strict";

var _ogl = _interopRequireDefault(require("./libs/ogl.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Import necessary libraries
// Define the size of the image
var imgSize = [1700, 1133];
var started = false; // Get the canvas wrapper element

var wraps = document.querySelectorAll('.plotEffectBanner');
wraps.forEach(function (wrap) {
  var assetsToLoad = 1; // Check if the device is touch-capable

  var isTouchCapable = ("ontouchstart" in window); // Vertex shader code for rendering

  var vertex = "\n        attribute vec2 uv;\n        attribute vec2 position;\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = vec4(position, 0, 1);\n        }\n    "; // Fragment shader code for rendering

  var fragment = "\n        precision highp float;\n        precision highp int;\n        uniform sampler2D tBackground; \n        uniform sampler2D tBackground2; \n        uniform sampler2D tLogo; \n        uniform sampler2D tFlow;\n        varying vec2 vUv;\n        uniform vec4 res; \n        uniform float mouseX;\n\n\n        void main() {\n            // Get the flow values from the flowmap texture\n            vec3 flow = texture2D(tFlow, vUv).rgb;\n\n            // Calculate the UV coordinates and apply flow offsets\n            vec2 uv = 0.5 * gl_FragCoord.xy / res.xy;\n            vec2 myUV = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n\n            myUV -= flow.xy * (0.6 * 0.7);\n\n            // Calculate two more UV coordinates for the gree & blue channels\n            vec2 myUV2 = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n            myUV2 -= flow.xy * (-0.2 * 0.7);\n            vec2 myUV3 = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n            myUV3 -= flow.xy * (0.8 * 0.7);\n\n\n            vec2 myUV21 = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n            myUV21 -= flow.xy * (0.6 * 0.3);\n\n            // Calculate two more UV coordinates for the gree & blue channels\n            vec2 myUV22 = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n            myUV22 -= flow.xy * (-0.4 * 0.9);\n            vec2 myUV23 = (uv - vec2(0.5)) * res.zw + vec2(0.5);\n            myUV23 -= flow.xy * (0.4 * 0.2);\n\n            // Get color values from the background texture for each UV coordinate\n            vec3 tex = texture2D(tBackground, myUV).rgb;\n            vec3 tex2 = texture2D(tBackground, myUV2).rgb;\n            vec3 tex3 = texture2D(tBackground, myUV3).rgb;\n\n            // Get color values from the background texture for each UV coordinate\n            vec3 tex21 = texture2D(tBackground2, myUV21).rgb;\n            vec3 tex22 = texture2D(tBackground2, myUV22).rgb;\n            vec3 tex23 = texture2D(tBackground2, myUV23).rgb;\n\n            // Combine tBackground2 (with flow applied) with tBackground (with flow applied)\n            vec4 blendedColor = mix(vec4(tex.r, tex2.g, tex3.b, 1.0), vec4(tex21.r, tex22.g, tex23.b, 1.0), 0.5);\n        \n            gl_FragColor = blendedColor;\n            \n            \n        }\n    "; // Initialize the rendering process

  var init = function init() {
    // Create a WebGL renderer
    var renderer = new _ogl["default"].Renderer({
      dpr: 2
    });
    var gl = renderer.gl; // Append the canvas to the wrapper element

    wrap.appendChild(gl.canvas); // Initialize height and flag for updating style

    var h = wrap.clientHeight * 1; // Aspect ratio variable

    var aspect = 2; // Mouse position and velocity vectors

    var mouse = new _ogl["default"].Vec2(-1);
    var velocity = new _ogl["default"].Vec2(); // Function to resize the canvas and update the aspect ratio

    function resize() {
      var a1, a2;
      var imageAspect = imgSize[1] / imgSize[0];

      if (h / wrap.clientWidth < imageAspect) {
        a1 = 1;
        a2 = h / wrap.clientWidth / imageAspect;
      } else {
        a1 = wrap.clientWidth / h * imageAspect;
        a2 = 1;
      }

      h = wrap.clientHeight * 1;
      mesh.program.uniforms.res.value = new _ogl["default"].Vec4(wrap.clientWidth, h, a1, a2);
      renderer.setSize(wrap.clientWidth, h);
      aspect = wrap.clientWidth / h;
    } // Create a flowmap for fluid simulation


    var flowmap = new _ogl["default"].Flowmap(gl, {
      size: 512,
      falloff: 0.4,
      dissipation: 0.99
    }); // Define the geometry of a triangle for rendering

    var geometry = new _ogl["default"].Geometry(gl, {
      position: {
        size: 2,
        data: new Float32Array([-1, -1, 3, -1, -1, 3])
      },
      uv: {
        size: 2,
        data: new Float32Array([0, 0, 2, 0, 0, 2])
      }
    }); // Create a texture for the background image

    var texture = new _ogl["default"].Texture(gl, {
      minFilter: gl.LINEAR,
      magFilter: gl.LINEAR
    }); // Load the image and set it as the texture

    var img = new Image();
    var loaded = 0;

    img.onload = function () {
      texture.image = img;
      loaded++;
      console.log(loaded, assetsToLoad);

      if (loaded == assetsToLoad) {
        begin();
      }
    };

    img.crossOrigin = "Anonymous";
    img.src = wrap.dataset.bg; // Load the image 2 and set it as the texture

    var img2 = new Image();
    var texture2 = new _ogl["default"].Texture(gl, {
      minFilter: gl.LINEAR,
      magFilter: gl.LINEAR
    });

    img2.onload = function () {
      texture2.image = img2;
      loaded++;

      if (loaded == assetsToLoad) {
        begin();
      }
    };

    img2.crossOrigin = "Anonymous";
    img2.src = wrap.dataset.bgAlt;
    var mouseX = 0.5; // Calculate aspect ratio for the image

    var a1, a2;
    var imageAspect = imgSize[1] / imgSize[0];

    if (h / wrap.clientWidth < imageAspect) {
      a1 = 1;
      a2 = h / wrap.clientWidth / imageAspect;
    } else {
      a1 = wrap.clientWidth / h * imageAspect;
      a2 = 1;
    } // Create a rendering program with shaders and uniforms


    var program = new _ogl["default"].Program(gl, {
      vertex: vertex,
      fragment: fragment,
      uniforms: {
        uTime: {
          value: 0
        },
        tBackground: {
          value: texture
        },
        tBackground2: {
          value: texture2
        },
        mouseX: {
          value: mouseX
        },
        res: {
          value: new _ogl["default"].Vec4(wrap.clientWidth, h, a1, a2)
        },
        img: {
          value: new _ogl["default"].Vec2(imgSize[0], imgSize[1])
        },
        tFlow: flowmap.uniform
      }
    }); // Create a mesh for rendering the triangle

    var mesh = new _ogl["default"].Mesh(gl, {
      geometry: geometry,
      program: program
    });

    function begin() {
      // Add event listener for window resize
      window.addEventListener("resize", resize, false);
      setTimeout(function () {
        // Call resize function initially
        resize(); // document.body.classList.remove('hideBanner');
      }, 100); // Add mouse movement event listener if not touch-capable

      if (!isTouchCapable) {
        window.addEventListener("mousemove", updateMouse, false);
      } // Track the scroll position and handle banner visibility


      var scrollPosition = window.scrollY;
      window.addEventListener('wheel', function () {
        scrollPosition = window.scrollY;

        if (scrollPosition < h && disabled == true) {
          disabled = false;
          requestAnimationFrame(update);
        }
      }); // Variables for tracking time and whether the animation is disabled

      var lastTime;
      var disabled = false;
      var lastMouse = new _ogl["default"].Vec2(); // Function to handle mouse movement and velocity calculation

      function updateMouse(e) {
        if (scrollPosition <= h) {
          if (e.changedTouches && e.changedTouches.length) {
            e.x = e.changedTouches[0].pageX;
            e.y = e.changedTouches[0].pageY;
          }

          if (e.x === undefined) {
            e.x = e.pageX;
            e.y = e.pageY;
          } // Calculate the adjusted mouse position considering the scroll position


          var adjustedY = e.y + scrollPosition; // Set mouse position in 0 to 1 range

          mouse.set(e.x / gl.renderer.width, 1.0 - adjustedY / gl.renderer.height); // Calculate mouse velocity

          if (!lastTime) {
            lastTime = performance.now();
            lastMouse.set(e.x, adjustedY);
          }

          var deltaX = e.x - lastMouse.x;
          var deltaY = adjustedY - lastMouse.y;

          if (deltaX != 0 && deltaY != 0) {
            lastMouse.set(e.x, adjustedY);
            var time = performance.now();
            var delta = Math.max(10.4, time - lastTime);
            lastTime = time;
            velocity.x = deltaX / delta;
            velocity.y = deltaY / delta;
            velocity.needsUpdate = true;
          }
        }
      } // Handle mobile devices with touch support


      if (isTouchCapable) {
        var src = wrap.dataset.bg;
        wrap.classList.add('mobileFadeIn');
        wrap.style.backgroundImage = "url(".concat(src, ")");
      } else {
        // Start the animation loop
        requestAnimationFrame(update);
      }

      function customLerp(current, target, speed) {
        // Calculate the difference between the current and target values
        var diff = target - current; // Use the absolute value of the velocity to determine if it's increasing or decreasing

        var absVelocity = Math.abs(diff); // Define a threshold to distinguish between speeding up and slowing down

        var threshold = 0.001; // Use a different lerp speed depending on the velocity direction

        if (absVelocity > threshold) {
          // Speed up when the velocity is increasing
          return current + diff * speed;
        } else {
          // Slow down when the velocity is decreasing or close to zero
          return current + diff * (speed / 10);
        }
      } // Animation loop function


      function update(t) {
        if (scrollPosition <= h) {
          // Reset velocity when mouse is not moving
          if (!velocity.needsUpdate) {
            velocity.set(0);
          }

          velocity.needsUpdate = false; // Update the flowmap inputs

          flowmap.aspect = aspect;
          flowmap.mouse.copy(mouse);
          if (mesh.program.uniforms.mouseX != mouse.x) mesh.program.uniforms.mouseX.value = mouse.x >= 0 ? mouse.x : 0.5;
          flowmap.velocity.x = customLerp(flowmap.velocity.x, velocity.x, 0.05);
          flowmap.velocity.y = customLerp(flowmap.velocity.y, velocity.y, 0.02);
          flowmap.update(); // Render the mesh

          renderer.render({
            scene: mesh
          }); // Continue the animation loop

          requestAnimationFrame(update);

          if (started === false) {
            started = true;
            document.body.classList.add('canvasLoaded');
          }
        } else {
          // Hide the banner and disable animation
          if (disabled == false) {
            disabled = true;
            document.body.classList.add('hideBanner');
          }
        }
      }
    }
  };

  init();
  console.log(wrap);
});

},{"./libs/ogl.js":51}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ogl = function (t) {
  "use strict";

  function e(t) {
    var e = t[0],
        i = t[1],
        r = t[2];
    return Math.sqrt(e * e + i * i + r * r);
  }

  function i(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t;
  }

  function r(t, e, i) {
    return t[0] = e[0] + i[0], t[1] = e[1] + i[1], t[2] = e[2] + i[2], t;
  }

  function s(t, e, i) {
    return t[0] = e[0] - i[0], t[1] = e[1] - i[1], t[2] = e[2] - i[2], t;
  }

  function n(t, e, i) {
    return t[0] = e[0] * i, t[1] = e[1] * i, t[2] = e[2] * i, t;
  }

  function a(t, e) {
    var i = e[0],
        r = e[1],
        s = e[2],
        n = i * i + r * r + s * s;
    return n > 0 && (n = 1 / Math.sqrt(n)), t[0] = e[0] * n, t[1] = e[1] * n, t[2] = e[2] * n, t;
  }

  function h(t, e) {
    return t[0] * e[0] + t[1] * e[1] + t[2] * e[2];
  }

  var o = function () {
    var t = [0, 0, 0],
        e = [0, 0, 0];
    return function (r, s) {
      i(t, r), i(e, s), a(t, t), a(e, e);
      var n = h(t, e);
      return n > 1 ? 0 : n < -1 ? Math.PI : Math.acos(n);
    };
  }();

  var l = /*#__PURE__*/function (_Array) {
    _inherits(l, _Array);

    var _super = _createSuper(l);

    function l() {
      var _this;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;

      _classCallCheck(this, l);

      return _possibleConstructorReturn(_this, (_this = _super.call(this, t, e, i), _assertThisInitialized(_this)));
    }

    _createClass(l, [{
      key: "set",
      value: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
        return t.length ? this.copy(t) : (function (t, e, i, r) {
          t[0] = e, t[1] = i, t[2] = r;
        }(this, t, e, i), this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return i(this, t), this;
      }
    }, {
      key: "add",
      value: function add(t, e) {
        return e ? r(this, t, e) : r(this, this, t), this;
      }
    }, {
      key: "sub",
      value: function sub(t, e) {
        return e ? s(this, t, e) : s(this, this, t), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        var e, i, r;
        return t.length ? (i = this, r = t, (e = this)[0] = i[0] * r[0], e[1] = i[1] * r[1], e[2] = i[2] * r[2]) : n(this, this, t), this;
      }
    }, {
      key: "divide",
      value: function divide(t) {
        var e, i, r;
        return t.length ? (i = this, r = t, (e = this)[0] = i[0] / r[0], e[1] = i[1] / r[1], e[2] = i[2] / r[2]) : n(this, this, 1 / t), this;
      }
    }, {
      key: "inverse",
      value: function inverse() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        var e, i;
        return i = t, (e = this)[0] = 1 / i[0], e[1] = 1 / i[1], e[2] = 1 / i[2], this;
      }
    }, {
      key: "len",
      value: function len() {
        return e(this);
      }
    }, {
      key: "distance",
      value: function distance(t) {
        return t ? function (t, e) {
          var i = e[0] - t[0],
              r = e[1] - t[1],
              s = e[2] - t[2];
          return Math.sqrt(i * i + r * r + s * s);
        }(this, t) : e(this);
      }
    }, {
      key: "squaredLen",
      value: function squaredLen() {
        return this.squaredDistance();
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(t) {
        return t ? function (t, e) {
          var i = e[0] - t[0],
              r = e[1] - t[1],
              s = e[2] - t[2];
          return i * i + r * r + s * s;
        }(this, t) : function (t) {
          var e = t[0],
              i = t[1],
              r = t[2];
          return e * e + i * i + r * r;
        }(this);
      }
    }, {
      key: "negate",
      value: function negate() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        var e, i;
        return i = t, (e = this)[0] = -i[0], e[1] = -i[1], e[2] = -i[2], this;
      }
    }, {
      key: "cross",
      value: function cross(t, e) {
        return function (t, e, i) {
          var r = e[0],
              s = e[1],
              n = e[2],
              a = i[0],
              h = i[1],
              o = i[2];
          t[0] = s * o - n * h, t[1] = n * a - r * o, t[2] = r * h - s * a;
        }(this, t, e), this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        return n(this, this, t), this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return a(this, this), this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return h(this, t);
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return i = t, (e = this)[0] === i[0] && e[1] === i[1] && e[2] === i[2];
        var e, i;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return function (t, e, i) {
          var r = e[0],
              s = e[1],
              n = e[2],
              a = i[3] * r + i[7] * s + i[11] * n + i[15];
          a = a || 1, t[0] = (i[0] * r + i[4] * s + i[8] * n + i[12]) / a, t[1] = (i[1] * r + i[5] * s + i[9] * n + i[13]) / a, t[2] = (i[2] * r + i[6] * s + i[10] * n + i[14]) / a;
        }(this, this, t), this;
      }
    }, {
      key: "applyQuaternion",
      value: function applyQuaternion(t) {
        return function (t, e, i) {
          var r = e[0],
              s = e[1],
              n = e[2],
              a = i[0],
              h = i[1],
              o = i[2],
              l = h * n - o * s,
              u = o * r - a * n,
              c = a * s - h * r,
              d = h * c - o * u,
              g = o * l - a * c,
              p = a * u - h * l,
              m = 2 * i[3];
          l *= m, u *= m, c *= m, d *= 2, g *= 2, p *= 2, t[0] = r + l + d, t[1] = s + u + g, t[2] = n + c + p;
        }(this, this, t), this;
      }
    }, {
      key: "angle",
      value: function angle(t) {
        return o(this, t);
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        return function (t, e, i, r) {
          var s = e[0],
              n = e[1],
              a = e[2];
          t[0] = s + r * (i[0] - s), t[1] = n + r * (i[1] - n), t[2] = a + r * (i[2] - a);
        }(this, this, t, e), this;
      }
    }, {
      key: "clone",
      value: function clone() {
        return new l(this[0], this[1], this[2]);
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this[0] = t[e], this[1] = t[e + 1], this[2] = t[e + 2], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this[0], t[e + 1] = this[1], t[e + 2] = this[2], t;
      }
    }, {
      key: "transformDirection",
      value: function transformDirection(t) {
        var e = this[0],
            i = this[1],
            r = this[2];
        return this[0] = t[0] * e + t[4] * i + t[8] * r, this[1] = t[1] * e + t[5] * i + t[9] * r, this[2] = t[2] * e + t[6] * i + t[10] * r, this.normalize();
      }
    }, {
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(t) {
        this[2] = t;
      }
    }]);

    return l;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  var u = new l();
  var c = 0,
      d = 0;

  var g = /*#__PURE__*/function () {
    function g(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, g);

      this.gl = t, this.attributes = e, this.id = c++, this.VAOs = {}, this.drawRange = {
        start: 0,
        count: 0
      }, this.instancedCount = 0, this.gl.renderer.bindVertexArray(null), this.gl.renderer.currentGeometry = null, this.glState = this.gl.renderer.state;

      for (var _t in e) {
        this.addAttribute(_t, e[_t]);
      }
    }

    _createClass(g, [{
      key: "addAttribute",
      value: function addAttribute(t, e) {
        if (this.attributes[t] = e, e.id = d++, e.size = e.size || 1, e.type = e.type || (e.data.constructor === Float32Array ? this.gl.FLOAT : e.data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT), e.target = "index" === t ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER, e.normalize = e.normalize || !1, e.buffer = this.gl.createBuffer(), e.count = e.data.length / e.size, e.divisor = e.instanced || 0, e.needsUpdate = !1, this.updateAttribute(e), e.divisor) {
          if (this.isInstanced = !0, this.instancedCount && this.instancedCount !== e.count * e.divisor) return console.warn("geometry has multiple instanced buffers of different length"), this.instancedCount = Math.min(this.instancedCount, e.count * e.divisor);
          this.instancedCount = e.count * e.divisor;
        } else "index" === t ? this.drawRange.count = e.count : this.attributes.index || (this.drawRange.count = Math.max(this.drawRange.count, e.count));
      }
    }, {
      key: "updateAttribute",
      value: function updateAttribute(t) {
        this.glState.boundBuffer !== t.id && (this.gl.bindBuffer(t.target, t.buffer), this.glState.boundBuffer = t.id), this.gl.bufferData(t.target, t.data, this.gl.STATIC_DRAW), t.needsUpdate = !1;
      }
    }, {
      key: "setIndex",
      value: function setIndex(t) {
        this.addAttribute("index", t);
      }
    }, {
      key: "setDrawRange",
      value: function setDrawRange(t, e) {
        this.drawRange.start = t, this.drawRange.count = e;
      }
    }, {
      key: "setInstancedCount",
      value: function setInstancedCount(t) {
        this.instancedCount = t;
      }
    }, {
      key: "createVAO",
      value: function createVAO(t) {
        this.VAOs[t.attributeOrder] = this.gl.renderer.createVertexArray(), this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]), this.bindAttributes(t);
      }
    }, {
      key: "bindAttributes",
      value: function bindAttributes(t) {
        var _this2 = this;

        t.attributeLocations.forEach(function (t, e) {
          if (!_this2.attributes[e]) return void console.warn("active attribute ".concat(e, " not being supplied"));
          var i = _this2.attributes[e];
          _this2.gl.bindBuffer(i.target, i.buffer), _this2.glState.boundBuffer = i.id, _this2.gl.vertexAttribPointer(t, i.size, i.type, i.normalize, 0, 0), _this2.gl.enableVertexAttribArray(t), _this2.gl.renderer.vertexAttribDivisor(t, i.divisor);
        }), this.attributes.index && this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);
      }
    }, {
      key: "draw",
      value: function draw(_ref) {
        var _this3 = this;

        var t = _ref.program,
            _ref$mode = _ref.mode,
            e = _ref$mode === void 0 ? this.gl.TRIANGLES : _ref$mode;
        this.gl.renderer.currentGeometry !== "".concat(this.id, "_").concat(t.attributeOrder) && (this.VAOs[t.attributeOrder] || this.createVAO(t), this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]), this.gl.renderer.currentGeometry = "".concat(this.id, "_").concat(t.attributeOrder)), t.attributeLocations.forEach(function (t, e) {
          var i = _this3.attributes[e];
          i.needsUpdate && _this3.updateAttribute(i);
        }), this.isInstanced ? this.attributes.index ? this.gl.renderer.drawElementsInstanced(e, this.drawRange.count, this.attributes.index.type, this.drawRange.start, this.instancedCount) : this.gl.renderer.drawArraysInstanced(e, this.drawRange.start, this.drawRange.count, this.instancedCount) : this.attributes.index ? this.gl.drawElements(e, this.drawRange.count, this.attributes.index.type, this.drawRange.start) : this.gl.drawArrays(e, this.drawRange.start, this.drawRange.count);
      }
    }, {
      key: "computeBoundingBox",
      value: function computeBoundingBox(t) {
        !t && this.attributes.position && (t = this.attributes.position.data), t || console.warn("No position buffer found to compute bounds"), this.bounds || (this.bounds = {
          min: new l(),
          max: new l(),
          center: new l(),
          scale: new l(),
          radius: 1 / 0
        });
        var e = this.bounds.min,
            i = this.bounds.max,
            r = this.bounds.center,
            s = this.bounds.scale;
        e.set(1 / 0), i.set(-1 / 0);

        for (var _r = 0, _s = t.length; _r < _s; _r += 3) {
          var _s2 = t[_r],
              _n = t[_r + 1],
              _a = t[_r + 2];
          e.x = Math.min(_s2, e.x), e.y = Math.min(_n, e.y), e.z = Math.min(_a, e.z), i.x = Math.max(_s2, i.x), i.y = Math.max(_n, i.y), i.z = Math.max(_a, i.z);
        }

        s.sub(i, e), r.add(e, i).divide(2);
      }
    }, {
      key: "computeBoundingSphere",
      value: function computeBoundingSphere(t) {
        !t && this.attributes.position && (t = this.attributes.position.data), t || console.warn("No position buffer found to compute bounds"), this.bounds || this.computeBoundingBox(t);
        var e = 0;

        for (var _i = 0, _r2 = t.length; _i < _r2; _i += 3) {
          u.fromArray(t, _i), e = Math.max(e, this.bounds.center.squaredDistance(u));
        }

        this.bounds.radius = Math.sqrt(e);
      }
    }, {
      key: "remove",
      value: function remove() {
        this.vao && this.gl.renderer.deleteVertexArray(this.vao);

        for (var _t2 in this.attributes) {
          this.gl.deleteBuffer(this.attributes[_t2].buffer), delete this.attributes[_t2];
        }
      }
    }]);

    return g;
  }();

  var p = 0;
  var m = {};

  var f = /*#__PURE__*/function () {
    function f(t) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          e = _ref2.vertex,
          i = _ref2.fragment,
          _ref2$uniforms = _ref2.uniforms,
          r = _ref2$uniforms === void 0 ? {} : _ref2$uniforms,
          _ref2$transparent = _ref2.transparent,
          s = _ref2$transparent === void 0 ? !1 : _ref2$transparent,
          _ref2$cullFace = _ref2.cullFace,
          n = _ref2$cullFace === void 0 ? t.BACK : _ref2$cullFace,
          _ref2$frontFace = _ref2.frontFace,
          a = _ref2$frontFace === void 0 ? t.CCW : _ref2$frontFace,
          _ref2$depthTest = _ref2.depthTest,
          h = _ref2$depthTest === void 0 ? !0 : _ref2$depthTest,
          _ref2$depthWrite = _ref2.depthWrite,
          o = _ref2$depthWrite === void 0 ? !0 : _ref2$depthWrite,
          _ref2$depthFunc = _ref2.depthFunc,
          l = _ref2$depthFunc === void 0 ? t.LESS : _ref2$depthFunc;

      _classCallCheck(this, f);

      this.gl = t, this.uniforms = r, this.id = p++, e || console.warn("vertex shader not supplied"), i || console.warn("fragment shader not supplied"), this.transparent = s, this.cullFace = n, this.frontFace = a, this.depthTest = h, this.depthWrite = o, this.depthFunc = l, this.blendFunc = {}, this.blendEquation = {}, this.transparent && !this.blendFunc.src && (this.gl.renderer.premultipliedAlpha ? this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA) : this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA));
      var u = t.createShader(t.VERTEX_SHADER);
      t.shaderSource(u, e), t.compileShader(u), "" !== t.getShaderInfoLog(u) && console.warn("".concat(t.getShaderInfoLog(u), "\nVertex Shader\n").concat(w(e)));
      var c = t.createShader(t.FRAGMENT_SHADER);
      if (t.shaderSource(c, i), t.compileShader(c), "" !== t.getShaderInfoLog(c) && console.warn("".concat(t.getShaderInfoLog(c), "\nFragment Shader\n").concat(w(i))), this.program = t.createProgram(), t.attachShader(this.program, u), t.attachShader(this.program, c), t.linkProgram(this.program), !t.getProgramParameter(this.program, t.LINK_STATUS)) return console.warn(t.getProgramInfoLog(this.program));
      t.deleteShader(u), t.deleteShader(c), this.uniformLocations = new Map();
      var d = t.getProgramParameter(this.program, t.ACTIVE_UNIFORMS);

      for (var _e = 0; _e < d; _e++) {
        var _i2 = t.getActiveUniform(this.program, _e);

        this.uniformLocations.set(_i2, t.getUniformLocation(this.program, _i2.name));

        var _r3 = _i2.name.match(/(\w+)/g);

        _i2.uniformName = _r3[0], 3 === _r3.length ? (_i2.isStructArray = !0, _i2.structIndex = Number(_r3[1]), _i2.structProperty = _r3[2]) : 2 === _r3.length && isNaN(Number(_r3[1])) && (_i2.isStruct = !0, _i2.structProperty = _r3[1]);
      }

      this.attributeLocations = new Map();
      var g = [],
          m = t.getProgramParameter(this.program, t.ACTIVE_ATTRIBUTES);

      for (var _e2 = 0; _e2 < m; _e2++) {
        var _i3 = t.getActiveAttrib(this.program, _e2),
            _r4 = t.getAttribLocation(this.program, _i3.name);

        g[_r4] = _i3.name, this.attributeLocations.set(_i3.name, _r4);
      }

      this.attributeOrder = g.join("");
    }

    _createClass(f, [{
      key: "setBlendFunc",
      value: function setBlendFunc(t, e, i, r) {
        this.blendFunc.src = t, this.blendFunc.dst = e, this.blendFunc.srcAlpha = i, this.blendFunc.dstAlpha = r, t && (this.transparent = !0);
      }
    }, {
      key: "setBlendEquation",
      value: function setBlendEquation(t, e) {
        this.blendEquation.modeRGB = t, this.blendEquation.modeAlpha = e;
      }
    }, {
      key: "applyState",
      value: function applyState() {
        this.depthTest ? this.gl.renderer.enable(this.gl.DEPTH_TEST) : this.gl.renderer.disable(this.gl.DEPTH_TEST), this.cullFace ? this.gl.renderer.enable(this.gl.CULL_FACE) : this.gl.renderer.disable(this.gl.CULL_FACE), this.blendFunc.src ? this.gl.renderer.enable(this.gl.BLEND) : this.gl.renderer.disable(this.gl.BLEND), this.cullFace && this.gl.renderer.setCullFace(this.cullFace), this.gl.renderer.setFrontFace(this.frontFace), this.gl.renderer.setDepthMask(this.depthWrite), this.gl.renderer.setDepthFunc(this.depthFunc), this.blendFunc.src && this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha), this.blendEquation.modeRGB && this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);
      }
    }, {
      key: "use",
      value: function use() {
        var _this4 = this;

        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref3$flipFaces = _ref3.flipFaces,
            t = _ref3$flipFaces === void 0 ? !1 : _ref3$flipFaces;

        var e = -1;
        this.gl.renderer.currentProgram === this.id || (this.gl.useProgram(this.program), this.gl.renderer.currentProgram = this.id), this.uniformLocations.forEach(function (t, i) {
          var r = i.uniformName,
              s = _this4.uniforms[r];
          if (i.isStruct && (s = s[i.structProperty], r += ".".concat(i.structProperty)), i.isStructArray && (s = s[i.structIndex][i.structProperty], r += "[".concat(i.structIndex, "].").concat(i.structProperty)), !s) return M("Active uniform ".concat(r, " has not been supplied"));
          if (s && void 0 === s.value) return M("".concat(r, " uniform is missing a value parameter"));
          if (s.value.texture) return e += 1, s.value.update(e), x(_this4.gl, i.type, t, e);

          if (s.value.length && s.value[0].texture) {
            var _r5 = [];
            return s.value.forEach(function (t) {
              e += 1, t.update(e), _r5.push(e);
            }), x(_this4.gl, i.type, t, _r5);
          }

          x(_this4.gl, i.type, t, s.value);
        }), this.applyState(), t && this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);
      }
    }, {
      key: "remove",
      value: function remove() {
        this.gl.deleteProgram(this.program);
      }
    }]);

    return f;
  }();

  function x(t, e, i, r) {
    r = r.length ? function (t) {
      var e = t.length,
          i = t[0].length;
      if (void 0 === i) return t;
      var r = e * i;
      var s = m[r];
      s || (m[r] = s = new Float32Array(r));

      for (var _r6 = 0; _r6 < e; _r6++) {
        s.set(t[_r6], _r6 * i);
      }

      return s;
    }(r) : r;
    var s = t.renderer.state.uniformLocations.get(i);
    if (r.length) {
      if (void 0 === s) t.renderer.state.uniformLocations.set(i, r.slice(0));else {
        if (function (t, e) {
          if (t.length !== e.length) return !1;

          for (var _i4 = 0, _r7 = t.length; _i4 < _r7; _i4++) {
            if (t[_i4] !== e[_i4]) return !1;
          }

          return !0;
        }(s, r)) return;
        s.set(r), t.renderer.state.uniformLocations.set(i, s);
      }
    } else {
      if (s === r) return;
      t.renderer.state.uniformLocations.set(i, r);
    }

    switch (e) {
      case 5126:
        return r.length ? t.uniform1fv(i, r) : t.uniform1f(i, r);

      case 35664:
        return t.uniform2fv(i, r);

      case 35665:
        return t.uniform3fv(i, r);

      case 35666:
        return t.uniform4fv(i, r);

      case 35670:
      case 5124:
      case 35678:
      case 35680:
        return r.length ? t.uniform1iv(i, r) : t.uniform1i(i, r);

      case 35671:
      case 35667:
        return t.uniform2iv(i, r);

      case 35672:
      case 35668:
        return t.uniform3iv(i, r);

      case 35673:
      case 35669:
        return t.uniform4iv(i, r);

      case 35674:
        return t.uniformMatrix2fv(i, !1, r);

      case 35675:
        return t.uniformMatrix3fv(i, !1, r);

      case 35676:
        return t.uniformMatrix4fv(i, !1, r);
    }
  }

  function w(t) {
    var e = t.split("\n");

    for (var _t3 = 0; _t3 < e.length; _t3++) {
      e[_t3] = _t3 + 1 + ": " + e[_t3];
    }

    return e.join("\n");
  }

  var b = 0;

  function M(t) {
    b > 100 || (console.warn(t), ++b > 100 && console.warn("More than 100 program warnings - stopping logs."));
  }

  var v = new l();

  function A(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t;
  }

  function E(t, e, i, r, s) {
    return t[0] = e, t[1] = i, t[2] = r, t[3] = s, t;
  }

  function y(t, e) {
    var i = e[0],
        r = e[1],
        s = e[2],
        n = e[3],
        a = i * i + r * r + s * s + n * n;
    return a > 0 && (a = 1 / Math.sqrt(a)), t[0] = i * a, t[1] = r * a, t[2] = s * a, t[3] = n * a, t;
  }

  function F(t, e, i) {
    var r = e[0],
        s = e[1],
        n = e[2],
        a = e[3],
        h = i[0],
        o = i[1],
        l = i[2],
        u = i[3];
    return t[0] = r * u + a * h + s * l - n * o, t[1] = s * u + a * o + n * h - r * l, t[2] = n * u + a * l + r * o - s * h, t[3] = a * u - r * h - s * o - n * l, t;
  }

  var T = A,
      _ = E,
      R = function R(t, e) {
    return t[0] * e[0] + t[1] * e[1] + t[2] * e[2] + t[3] * e[3];
  },
      S = y;

  var N = /*#__PURE__*/function (_Array2) {
    _inherits(N, _Array2);

    var _super2 = _createSuper(N);

    function N() {
      var _this5;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

      _classCallCheck(this, N);

      return _possibleConstructorReturn(_this5, (_this5 = _super2.call(this, t, e, i, r), _this5.onChange = function () {}, _assertThisInitialized(_this5)));
    }

    _createClass(N, [{
      key: "identity",
      value: function identity() {
        var t;
        return (t = this)[0] = 0, t[1] = 0, t[2] = 0, t[3] = 1, this.onChange(), this;
      }
    }, {
      key: "set",
      value: function set(t, e, i, r) {
        return t.length ? this.copy(t) : (_(this, t, e, i, r), this.onChange(), this);
      }
    }, {
      key: "rotateX",
      value: function rotateX(t) {
        return function (t, e, i) {
          i *= .5;
          var r = e[0],
              s = e[1],
              n = e[2],
              a = e[3],
              h = Math.sin(i),
              o = Math.cos(i);
          t[0] = r * o + a * h, t[1] = s * o + n * h, t[2] = n * o - s * h, t[3] = a * o - r * h;
        }(this, this, t), this.onChange(), this;
      }
    }, {
      key: "rotateY",
      value: function rotateY(t) {
        return function (t, e, i) {
          i *= .5;
          var r = e[0],
              s = e[1],
              n = e[2],
              a = e[3],
              h = Math.sin(i),
              o = Math.cos(i);
          t[0] = r * o - n * h, t[1] = s * o + a * h, t[2] = n * o + r * h, t[3] = a * o - s * h;
        }(this, this, t), this.onChange(), this;
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(t) {
        return function (t, e, i) {
          i *= .5;
          var r = e[0],
              s = e[1],
              n = e[2],
              a = e[3],
              h = Math.sin(i),
              o = Math.cos(i);
          t[0] = r * o + s * h, t[1] = s * o - r * h, t[2] = n * o + a * h, t[3] = a * o - n * h;
        }(this, this, t), this.onChange(), this;
      }
    }, {
      key: "inverse",
      value: function inverse() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = i * i + r * r + s * s + n * n,
              h = a ? 1 / a : 0;
          t[0] = -i * h, t[1] = -r * h, t[2] = -s * h, t[3] = n * h;
        }(this, t), this.onChange(), this;
      }
    }, {
      key: "conjugate",
      value: function conjugate() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        var e, i;
        return i = t, (e = this)[0] = -i[0], e[1] = -i[1], e[2] = -i[2], e[3] = i[3], this.onChange(), this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return T(this, t), this.onChange(), this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        return S(this, t), this.onChange(), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t, e) {
        return e ? F(this, t, e) : F(this, this, t), this.onChange(), this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return R(this, t);
      }
    }, {
      key: "fromMatrix3",
      value: function fromMatrix3(t) {
        return function (t, e) {
          var i,
              r = e[0] + e[4] + e[8];
          if (r > 0) i = Math.sqrt(r + 1), t[3] = .5 * i, i = .5 / i, t[0] = (e[5] - e[7]) * i, t[1] = (e[6] - e[2]) * i, t[2] = (e[1] - e[3]) * i;else {
            var _r8 = 0;
            e[4] > e[0] && (_r8 = 1), e[8] > e[3 * _r8 + _r8] && (_r8 = 2);

            var _s3 = (_r8 + 1) % 3,
                _n2 = (_r8 + 2) % 3;

            i = Math.sqrt(e[3 * _r8 + _r8] - e[3 * _s3 + _s3] - e[3 * _n2 + _n2] + 1), t[_r8] = .5 * i, i = .5 / i, t[3] = (e[3 * _s3 + _n2] - e[3 * _n2 + _s3]) * i, t[_s3] = (e[3 * _s3 + _r8] + e[3 * _r8 + _s3]) * i, t[_n2] = (e[3 * _n2 + _r8] + e[3 * _r8 + _n2]) * i;
          }
        }(this, t), this.onChange(), this;
      }
    }, {
      key: "fromEuler",
      value: function fromEuler(t) {
        return function (t, e) {
          var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "YXZ";
          var r = Math.sin(.5 * e[0]),
              s = Math.cos(.5 * e[0]),
              n = Math.sin(.5 * e[1]),
              a = Math.cos(.5 * e[1]),
              h = Math.sin(.5 * e[2]),
              o = Math.cos(.5 * e[2]);
          "XYZ" === i ? (t[0] = r * a * o + s * n * h, t[1] = s * n * o - r * a * h, t[2] = s * a * h + r * n * o, t[3] = s * a * o - r * n * h) : "YXZ" === i ? (t[0] = r * a * o + s * n * h, t[1] = s * n * o - r * a * h, t[2] = s * a * h - r * n * o, t[3] = s * a * o + r * n * h) : "ZXY" === i ? (t[0] = r * a * o - s * n * h, t[1] = s * n * o + r * a * h, t[2] = s * a * h + r * n * o, t[3] = s * a * o - r * n * h) : "ZYX" === i ? (t[0] = r * a * o - s * n * h, t[1] = s * n * o + r * a * h, t[2] = s * a * h - r * n * o, t[3] = s * a * o + r * n * h) : "YZX" === i ? (t[0] = r * a * o + s * n * h, t[1] = s * n * o + r * a * h, t[2] = s * a * h - r * n * o, t[3] = s * a * o - r * n * h) : "XZY" === i && (t[0] = r * a * o - s * n * h, t[1] = s * n * o - r * a * h, t[2] = s * a * h + r * n * o, t[3] = s * a * o + r * n * h);
        }(this, t, t.order), this;
      }
    }, {
      key: "fromAxisAngle",
      value: function fromAxisAngle(t, e) {
        return function (t, e, i) {
          i *= .5;
          var r = Math.sin(i);
          t[0] = r * e[0], t[1] = r * e[1], t[2] = r * e[2], t[3] = Math.cos(i);
        }(this, t, e), this;
      }
    }, {
      key: "slerp",
      value: function slerp(t, e) {
        return function (t, e, i, r) {
          var s,
              n,
              a,
              h,
              o,
              l = e[0],
              u = e[1],
              c = e[2],
              d = e[3],
              g = i[0],
              p = i[1],
              m = i[2],
              f = i[3];
          (n = l * g + u * p + c * m + d * f) < 0 && (n = -n, g = -g, p = -p, m = -m, f = -f), 1 - n > 1e-6 ? (s = Math.acos(n), a = Math.sin(s), h = Math.sin((1 - r) * s) / a, o = Math.sin(r * s) / a) : (h = 1 - r, o = r), t[0] = h * l + o * g, t[1] = h * u + o * p, t[2] = h * c + o * m, t[3] = h * d + o * f;
        }(this, this, t, e), this;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this[0] = t[e], this[1] = t[e + 1], this[2] = t[e + 2], this[3] = t[e + 3], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this[0], t[e + 1] = this[1], t[e + 2] = this[2], t[e + 3] = this[3], t;
      }
    }, {
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t, this.onChange();
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t, this.onChange();
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(t) {
        this[2] = t, this.onChange();
      }
    }, {
      key: "w",
      get: function get() {
        return this[3];
      },
      set: function set(t) {
        this[3] = t, this.onChange();
      }
    }]);

    return N;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  function L(t, e, i) {
    var r = e[0],
        s = e[1],
        n = e[2],
        a = e[3],
        h = e[4],
        o = e[5],
        l = e[6],
        u = e[7],
        c = e[8],
        d = e[9],
        g = e[10],
        p = e[11],
        m = e[12],
        f = e[13],
        x = e[14],
        w = e[15],
        b = i[0],
        M = i[1],
        v = i[2],
        A = i[3];
    return t[0] = b * r + M * h + v * c + A * m, t[1] = b * s + M * o + v * d + A * f, t[2] = b * n + M * l + v * g + A * x, t[3] = b * a + M * u + v * p + A * w, b = i[4], M = i[5], v = i[6], A = i[7], t[4] = b * r + M * h + v * c + A * m, t[5] = b * s + M * o + v * d + A * f, t[6] = b * n + M * l + v * g + A * x, t[7] = b * a + M * u + v * p + A * w, b = i[8], M = i[9], v = i[10], A = i[11], t[8] = b * r + M * h + v * c + A * m, t[9] = b * s + M * o + v * d + A * f, t[10] = b * n + M * l + v * g + A * x, t[11] = b * a + M * u + v * p + A * w, b = i[12], M = i[13], v = i[14], A = i[15], t[12] = b * r + M * h + v * c + A * m, t[13] = b * s + M * o + v * d + A * f, t[14] = b * n + M * l + v * g + A * x, t[15] = b * a + M * u + v * p + A * w, t;
  }

  var P = /*#__PURE__*/function (_Array3) {
    _inherits(P, _Array3);

    var _super3 = _createSuper(P);

    function P() {
      var _this6;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var h = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var o = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var l = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var u = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var c = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var d = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var g = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var p = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      _classCallCheck(this, P);

      return _possibleConstructorReturn(_this6, (_this6 = _super3.call(this, t, e, i, r, s, n, a, h, o, l, u, c, d, g, p, m), _assertThisInitialized(_this6)));
    }

    _createClass(P, [{
      key: "set",
      value: function set(t, e, i, r, s, n, a, h, o, l, u, c, d, g, p, m) {
        return t.length ? this.copy(t) : (function (t, e, i, r, s, n, a, h, o, l, u, c, d, g, p, m, f) {
          t[0] = e, t[1] = i, t[2] = r, t[3] = s, t[4] = n, t[5] = a, t[6] = h, t[7] = o, t[8] = l, t[9] = u, t[10] = c, t[11] = d, t[12] = g, t[13] = p, t[14] = m, t[15] = f;
        }(this, t, e, i, r, s, n, a, h, o, l, u, c, d, g, p, m), this);
      }
    }, {
      key: "translate",
      value: function translate(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r,
              s,
              n,
              a,
              h,
              o,
              l,
              u,
              c,
              d,
              g,
              p,
              m = i[0],
              f = i[1],
              x = i[2];
          e === t ? (t[12] = e[0] * m + e[4] * f + e[8] * x + e[12], t[13] = e[1] * m + e[5] * f + e[9] * x + e[13], t[14] = e[2] * m + e[6] * f + e[10] * x + e[14], t[15] = e[3] * m + e[7] * f + e[11] * x + e[15]) : (r = e[0], s = e[1], n = e[2], a = e[3], h = e[4], o = e[5], l = e[6], u = e[7], c = e[8], d = e[9], g = e[10], p = e[11], t[0] = r, t[1] = s, t[2] = n, t[3] = a, t[4] = h, t[5] = o, t[6] = l, t[7] = u, t[8] = c, t[9] = d, t[10] = g, t[11] = p, t[12] = r * m + h * f + c * x + e[12], t[13] = s * m + o * f + d * x + e[13], t[14] = n * m + l * f + g * x + e[14], t[15] = a * m + u * f + p * x + e[15]);
        }(this, e, t), this;
      }
    }, {
      key: "rotateX",
      value: function rotateX(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = Math.sin(i),
              s = Math.cos(i),
              n = e[4],
              a = e[5],
              h = e[6],
              o = e[7],
              l = e[8],
              u = e[9],
              c = e[10],
              d = e[11];
          e !== t && (t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[12] = e[12], t[13] = e[13], t[14] = e[14], t[15] = e[15]), t[4] = n * s + l * r, t[5] = a * s + u * r, t[6] = h * s + c * r, t[7] = o * s + d * r, t[8] = l * s - n * r, t[9] = u * s - a * r, t[10] = c * s - h * r, t[11] = d * s - o * r;
        }(this, e, t), this;
      }
    }, {
      key: "rotateY",
      value: function rotateY(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = Math.sin(i),
              s = Math.cos(i),
              n = e[0],
              a = e[1],
              h = e[2],
              o = e[3],
              l = e[8],
              u = e[9],
              c = e[10],
              d = e[11];
          e !== t && (t[4] = e[4], t[5] = e[5], t[6] = e[6], t[7] = e[7], t[12] = e[12], t[13] = e[13], t[14] = e[14], t[15] = e[15]), t[0] = n * s - l * r, t[1] = a * s - u * r, t[2] = h * s - c * r, t[3] = o * s - d * r, t[8] = n * r + l * s, t[9] = a * r + u * s, t[10] = h * r + c * s, t[11] = o * r + d * s;
        }(this, e, t), this;
      }
    }, {
      key: "rotateZ",
      value: function rotateZ(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = Math.sin(i),
              s = Math.cos(i),
              n = e[0],
              a = e[1],
              h = e[2],
              o = e[3],
              l = e[4],
              u = e[5],
              c = e[6],
              d = e[7];
          e !== t && (t[8] = e[8], t[9] = e[9], t[10] = e[10], t[11] = e[11], t[12] = e[12], t[13] = e[13], t[14] = e[14], t[15] = e[15]), t[0] = n * s + l * r, t[1] = a * s + u * r, t[2] = h * s + c * r, t[3] = o * s + d * r, t[4] = l * s - n * r, t[5] = u * s - a * r, t[6] = c * s - h * r, t[7] = d * s - o * r;
        }(this, e, t), this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = i[0],
              s = i[1],
              n = i[2];
          t[0] = e[0] * r, t[1] = e[1] * r, t[2] = e[2] * r, t[3] = e[3] * r, t[4] = e[4] * s, t[5] = e[5] * s, t[6] = e[6] * s, t[7] = e[7] * s, t[8] = e[8] * n, t[9] = e[9] * n, t[10] = e[10] * n, t[11] = e[11] * n, t[12] = e[12], t[13] = e[13], t[14] = e[14], t[15] = e[15];
        }(this, e, "number" == typeof t ? [t, t, t] : t), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t, e) {
        return e ? L(this, t, e) : L(this, this, t), this;
      }
    }, {
      key: "identity",
      value: function identity() {
        var t;
        return (t = this)[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = 1, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e, i;
        return i = t, (e = this)[0] = i[0], e[1] = i[1], e[2] = i[2], e[3] = i[3], e[4] = i[4], e[5] = i[5], e[6] = i[6], e[7] = i[7], e[8] = i[8], e[9] = i[9], e[10] = i[10], e[11] = i[11], e[12] = i[12], e[13] = i[13], e[14] = i[14], e[15] = i[15], this;
      }
    }, {
      key: "fromPerspective",
      value: function fromPerspective() {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            t = _ref4.fov,
            e = _ref4.aspect,
            i = _ref4.near,
            r = _ref4.far;

        return function (t, e, i, r, s) {
          var n = 1 / Math.tan(e / 2),
              a = 1 / (r - s);
          t[0] = n / i, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = n, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = (s + r) * a, t[11] = -1, t[12] = 0, t[13] = 0, t[14] = 2 * s * r * a, t[15] = 0;
        }(this, t, e, i, r), this;
      }
    }, {
      key: "fromOrthogonal",
      value: function fromOrthogonal(_ref5) {
        var t = _ref5.left,
            e = _ref5.right,
            i = _ref5.bottom,
            r = _ref5.top,
            s = _ref5.near,
            n = _ref5.far;
        return function (t, e, i, r, s, n, a) {
          var h = 1 / (e - i),
              o = 1 / (r - s),
              l = 1 / (n - a);
          t[0] = -2 * h, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = -2 * o, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 2 * l, t[11] = 0, t[12] = (e + i) * h, t[13] = (s + r) * o, t[14] = (a + n) * l, t[15] = 1;
        }(this, t, e, i, r, s, n), this;
      }
    }, {
      key: "fromQuaternion",
      value: function fromQuaternion(t) {
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = i + i,
              h = r + r,
              o = s + s,
              l = i * a,
              u = r * a,
              c = r * h,
              d = s * a,
              g = s * h,
              p = s * o,
              m = n * a,
              f = n * h,
              x = n * o;
          t[0] = 1 - c - p, t[1] = u + x, t[2] = d - f, t[3] = 0, t[4] = u - x, t[5] = 1 - l - p, t[6] = g + m, t[7] = 0, t[8] = d + f, t[9] = g - m, t[10] = 1 - l - c, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;
        }(this, t), this;
      }
    }, {
      key: "setPosition",
      value: function setPosition(t) {
        return this.x = t[0], this.y = t[1], this.z = t[2], this;
      }
    }, {
      key: "inverse",
      value: function inverse() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = e[4],
              h = e[5],
              o = e[6],
              l = e[7],
              u = e[8],
              c = e[9],
              d = e[10],
              g = e[11],
              p = e[12],
              m = e[13],
              f = e[14],
              x = e[15],
              w = i * h - r * a,
              b = i * o - s * a,
              M = i * l - n * a,
              v = r * o - s * h,
              A = r * l - n * h,
              E = s * l - n * o,
              y = u * m - c * p,
              F = u * f - d * p,
              T = u * x - g * p,
              _ = c * f - d * m,
              R = c * x - g * m,
              S = d * x - g * f,
              N = w * S - b * R + M * _ + v * T - A * F + E * y;

          N && (N = 1 / N, t[0] = (h * S - o * R + l * _) * N, t[1] = (s * R - r * S - n * _) * N, t[2] = (m * E - f * A + x * v) * N, t[3] = (d * A - c * E - g * v) * N, t[4] = (o * T - a * S - l * F) * N, t[5] = (i * S - s * T + n * F) * N, t[6] = (f * M - p * E - x * b) * N, t[7] = (u * E - d * M + g * b) * N, t[8] = (a * R - h * T + l * y) * N, t[9] = (r * T - i * R - n * y) * N, t[10] = (p * A - m * M + x * w) * N, t[11] = (c * M - u * A - g * w) * N, t[12] = (h * F - a * _ - o * y) * N, t[13] = (i * _ - r * F + s * y) * N, t[14] = (m * b - p * v - f * w) * N, t[15] = (u * v - c * b + d * w) * N);
        }(this, t), this;
      }
    }, {
      key: "compose",
      value: function compose(t, e, i) {
        return function (t, e, i, r) {
          var s = e[0],
              n = e[1],
              a = e[2],
              h = e[3],
              o = s + s,
              l = n + n,
              u = a + a,
              c = s * o,
              d = s * l,
              g = s * u,
              p = n * l,
              m = n * u,
              f = a * u,
              x = h * o,
              w = h * l,
              b = h * u,
              M = r[0],
              v = r[1],
              A = r[2];
          t[0] = (1 - (p + f)) * M, t[1] = (d + b) * M, t[2] = (g - w) * M, t[3] = 0, t[4] = (d - b) * v, t[5] = (1 - (c + f)) * v, t[6] = (m + x) * v, t[7] = 0, t[8] = (g + w) * A, t[9] = (m - x) * A, t[10] = (1 - (c + p)) * A, t[11] = 0, t[12] = i[0], t[13] = i[1], t[14] = i[2], t[15] = 1;
        }(this, t, e, i), this;
      }
    }, {
      key: "getRotation",
      value: function getRotation(t) {
        return function (t, e) {
          var i = e[0] + e[5] + e[10],
              r = 0;
          i > 0 ? (r = 2 * Math.sqrt(i + 1), t[3] = .25 * r, t[0] = (e[6] - e[9]) / r, t[1] = (e[8] - e[2]) / r, t[2] = (e[1] - e[4]) / r) : e[0] > e[5] && e[0] > e[10] ? (r = 2 * Math.sqrt(1 + e[0] - e[5] - e[10]), t[3] = (e[6] - e[9]) / r, t[0] = .25 * r, t[1] = (e[1] + e[4]) / r, t[2] = (e[8] + e[2]) / r) : e[5] > e[10] ? (r = 2 * Math.sqrt(1 + e[5] - e[0] - e[10]), t[3] = (e[8] - e[2]) / r, t[0] = (e[1] + e[4]) / r, t[1] = .25 * r, t[2] = (e[6] + e[9]) / r) : (r = 2 * Math.sqrt(1 + e[10] - e[0] - e[5]), t[3] = (e[1] - e[4]) / r, t[0] = (e[8] + e[2]) / r, t[1] = (e[6] + e[9]) / r, t[2] = .25 * r);
        }(t, this), this;
      }
    }, {
      key: "getTranslation",
      value: function getTranslation(t) {
        var e, i;
        return i = this, (e = t)[0] = i[12], e[1] = i[13], e[2] = i[14], this;
      }
    }, {
      key: "getScaling",
      value: function getScaling(t) {
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[4],
              a = e[5],
              h = e[6],
              o = e[8],
              l = e[9],
              u = e[10];
          t[0] = Math.sqrt(i * i + r * r + s * s), t[1] = Math.sqrt(n * n + a * a + h * h), t[2] = Math.sqrt(o * o + l * l + u * u);
        }(t, this), this;
      }
    }, {
      key: "getMaxScaleOnAxis",
      value: function getMaxScaleOnAxis() {
        return function (t) {
          var e = t[0],
              i = t[1],
              r = t[2],
              s = t[4],
              n = t[5],
              a = t[6],
              h = t[8],
              o = t[9],
              l = t[10];
          var u = e * e + i * i + r * r,
              c = s * s + n * n + a * a,
              d = h * h + o * o + l * l;
          return Math.sqrt(Math.max(u, c, d));
        }(this);
      }
    }, {
      key: "lookAt",
      value: function lookAt(t, e, i) {
        return function (t, e, i, r) {
          var s = e[0],
              n = e[1],
              a = e[2],
              h = r[0],
              o = r[1],
              l = r[2],
              u = s - i[0],
              c = n - i[1],
              d = a - i[2],
              g = u * u + c * c + d * d;
          g > 0 && (u *= g = 1 / Math.sqrt(g), c *= g, d *= g);
          var p = o * d - l * c,
              m = l * u - h * d,
              f = h * c - o * u;
          (g = p * p + m * m + f * f) > 0 && (p *= g = 1 / Math.sqrt(g), m *= g, f *= g), t[0] = p, t[1] = m, t[2] = f, t[3] = 0, t[4] = c * f - d * m, t[5] = d * p - u * f, t[6] = u * m - c * p, t[7] = 0, t[8] = u, t[9] = c, t[10] = d, t[11] = 0, t[12] = s, t[13] = n, t[14] = a, t[15] = 1;
        }(this, t, e, i), this;
      }
    }, {
      key: "determinant",
      value: function determinant() {
        return function (t) {
          var e = t[0],
              i = t[1],
              r = t[2],
              s = t[3],
              n = t[4],
              a = t[5],
              h = t[6],
              o = t[7],
              l = t[8],
              u = t[9],
              c = t[10],
              d = t[11],
              g = t[12],
              p = t[13],
              m = t[14],
              f = t[15];
          return (e * a - i * n) * (c * f - d * m) - (e * h - r * n) * (u * f - d * p) + (e * o - s * n) * (u * m - c * p) + (i * h - r * a) * (l * f - d * g) - (i * o - s * a) * (l * m - c * g) + (r * o - s * h) * (l * p - u * g);
        }(this);
      }
    }, {
      key: "x",
      set: function set(t) {
        this[12] = t;
      },
      get: function get() {
        return this[12];
      }
    }, {
      key: "y",
      set: function set(t) {
        this[13] = t;
      },
      get: function get() {
        return this[13];
      }
    }, {
      key: "z",
      set: function set(t) {
        this[14] = t;
      },
      get: function get() {
        return this[14];
      }
    }, {
      key: "w",
      set: function set(t) {
        this[15] = t;
      },
      get: function get() {
        return this[15];
      }
    }]);

    return P;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  var O = new P();

  var B = /*#__PURE__*/function (_Array4) {
    _inherits(B, _Array4);

    var _super4 = _createSuper(B);

    function B() {
      var _this7;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "YXZ";

      _classCallCheck(this, B);

      return _possibleConstructorReturn(_this7, (_this7 = _super4.call(this, t, e, i), _this7.order = r, _this7.onChange = function () {}, _assertThisInitialized(_this7)));
    }

    _createClass(B, [{
      key: "set",
      value: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
        return t.length ? this.copy(t) : (this[0] = t, this[1] = e, this[2] = i, this.onChange(), this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this[0] = t[0], this[1] = t[1], this[2] = t[2], this;
      }
    }, {
      key: "reorder",
      value: function reorder(t) {
        return this.order = t, this.onChange(), this;
      }
    }, {
      key: "fromRotationMatrix",
      value: function fromRotationMatrix(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.order;
        return function (t, e) {
          var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "YXZ";
          "XYZ" === i ? (t[1] = Math.asin(Math.min(Math.max(e[8], -1), 1)), Math.abs(e[8]) < .99999 ? (t[0] = Math.atan2(-e[9], e[10]), t[2] = Math.atan2(-e[4], e[0])) : (t[0] = Math.atan2(e[6], e[5]), t[2] = 0)) : "YXZ" === i ? (t[0] = Math.asin(-Math.min(Math.max(e[9], -1), 1)), Math.abs(e[9]) < .99999 ? (t[1] = Math.atan2(e[8], e[10]), t[2] = Math.atan2(e[1], e[5])) : (t[1] = Math.atan2(-e[2], e[0]), t[2] = 0)) : "ZXY" === i ? (t[0] = Math.asin(Math.min(Math.max(e[6], -1), 1)), Math.abs(e[6]) < .99999 ? (t[1] = Math.atan2(-e[2], e[10]), t[2] = Math.atan2(-e[4], e[5])) : (t[1] = 0, t[2] = Math.atan2(e[1], e[0]))) : "ZYX" === i ? (t[1] = Math.asin(-Math.min(Math.max(e[2], -1), 1)), Math.abs(e[2]) < .99999 ? (t[0] = Math.atan2(e[6], e[10]), t[2] = Math.atan2(e[1], e[0])) : (t[0] = 0, t[2] = Math.atan2(-e[4], e[5]))) : "YZX" === i ? (t[2] = Math.asin(Math.min(Math.max(e[1], -1), 1)), Math.abs(e[1]) < .99999 ? (t[0] = Math.atan2(-e[9], e[5]), t[1] = Math.atan2(-e[2], e[0])) : (t[0] = 0, t[1] = Math.atan2(e[8], e[10]))) : "XZY" === i && (t[2] = Math.asin(-Math.min(Math.max(e[4], -1), 1)), Math.abs(e[4]) < .99999 ? (t[0] = Math.atan2(e[6], e[5]), t[1] = Math.atan2(e[8], e[0])) : (t[0] = Math.atan2(-e[9], e[10]), t[1] = 0));
        }(this, t, e), this;
      }
    }, {
      key: "fromQuaternion",
      value: function fromQuaternion(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.order;
        return O.fromQuaternion(t), this.fromRotationMatrix(O, e);
      }
    }, {
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t, this.onChange();
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t, this.onChange();
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(t) {
        this[2] = t, this.onChange();
      }
    }]);

    return B;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  var C = /*#__PURE__*/function () {
    function C() {
      var _this8 = this;

      _classCallCheck(this, C);

      this.parent = null, this.children = [], this.visible = !0, this.matrix = new P(), this.worldMatrix = new P(), this.matrixAutoUpdate = !0, this.position = new l(), this.quaternion = new N(), this.scale = new l(1), this.rotation = new B(), this.up = new l(0, 1, 0), this.rotation.onChange = function () {
        return _this8.quaternion.fromEuler(_this8.rotation);
      }, this.quaternion.onChange = function () {
        return _this8.rotation.fromQuaternion(_this8.quaternion);
      };
    }

    _createClass(C, [{
      key: "setParent",
      value: function setParent(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        e && this.parent && t !== this.parent && this.parent.removeChild(this, !1), this.parent = t, e && t && t.addChild(this, !1);
      }
    }, {
      key: "addChild",
      value: function addChild(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        ~this.children.indexOf(t) || this.children.push(t), e && t.setParent(this, !1);
      }
    }, {
      key: "removeChild",
      value: function removeChild(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        ~this.children.indexOf(t) && this.children.splice(this.children.indexOf(t), 1), e && t.setParent(null, !1);
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld(t) {
        this.matrixAutoUpdate && this.updateMatrix(), (this.worldMatrixNeedsUpdate || t) && (null === this.parent ? this.worldMatrix.copy(this.matrix) : this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix), this.worldMatrixNeedsUpdate = !1, t = !0);

        for (var _e3 = 0, _i5 = this.children.length; _e3 < _i5; _e3++) {
          this.children[_e3].updateMatrixWorld(t);
        }
      }
    }, {
      key: "updateMatrix",
      value: function updateMatrix() {
        this.matrix.compose(this.quaternion, this.position, this.scale), this.worldMatrixNeedsUpdate = !0;
      }
    }, {
      key: "traverse",
      value: function traverse(t) {
        if (!t(this)) for (var _e4 = 0, _i6 = this.children.length; _e4 < _i6; _e4++) {
          this.children[_e4].traverse(t);
        }
      }
    }, {
      key: "decompose",
      value: function decompose() {
        this.matrix.getTranslation(this.position), this.matrix.getRotation(this.quaternion), this.matrix.getScaling(this.scale), this.rotation.fromQuaternion(this.quaternion);
      }
    }, {
      key: "lookAt",
      value: function lookAt(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        e ? this.matrix.lookAt(this.position, t, this.up) : this.matrix.lookAt(t, this.position, this.up), this.matrix.getRotation(this.quaternion), this.rotation.fromQuaternion(this.quaternion);
      }
    }]);

    return C;
  }();

  var D = new P(),
      U = new l(),
      z = new l();

  function I(t, e, i) {
    var r = e[0],
        s = e[1],
        n = e[2],
        a = e[3],
        h = e[4],
        o = e[5],
        l = e[6],
        u = e[7],
        c = e[8],
        d = i[0],
        g = i[1],
        p = i[2],
        m = i[3],
        f = i[4],
        x = i[5],
        w = i[6],
        b = i[7],
        M = i[8];
    return t[0] = d * r + g * a + p * l, t[1] = d * s + g * h + p * u, t[2] = d * n + g * o + p * c, t[3] = m * r + f * a + x * l, t[4] = m * s + f * h + x * u, t[5] = m * n + f * o + x * c, t[6] = w * r + b * a + M * l, t[7] = w * s + b * h + M * u, t[8] = w * n + b * o + M * c, t;
  }

  var q = /*#__PURE__*/function (_Array5) {
    _inherits(q, _Array5);

    var _super5 = _createSuper(q);

    function q() {
      var _this9;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var h = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var o = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;

      _classCallCheck(this, q);

      return _possibleConstructorReturn(_this9, (_this9 = _super5.call(this, t, e, i, r, s, n, a, h, o), _assertThisInitialized(_this9)));
    }

    _createClass(q, [{
      key: "set",
      value: function set(t, e, i, r, s, n, a, h, o) {
        return t.length ? this.copy(t) : (function (t, e, i, r, s, n, a, h, o, l) {
          t[0] = e, t[1] = i, t[2] = r, t[3] = s, t[4] = n, t[5] = a, t[6] = h, t[7] = o, t[8] = l;
        }(this, t, e, i, r, s, n, a, h, o), this);
      }
    }, {
      key: "translate",
      value: function translate(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = e[0],
              s = e[1],
              n = e[2],
              a = e[3],
              h = e[4],
              o = e[5],
              l = e[6],
              u = e[7],
              c = e[8],
              d = i[0],
              g = i[1];
          t[0] = r, t[1] = s, t[2] = n, t[3] = a, t[4] = h, t[5] = o, t[6] = d * r + g * a + l, t[7] = d * s + g * h + u, t[8] = d * n + g * o + c;
        }(this, e, t), this;
      }
    }, {
      key: "rotate",
      value: function rotate(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = e[0],
              s = e[1],
              n = e[2],
              a = e[3],
              h = e[4],
              o = e[5],
              l = e[6],
              u = e[7],
              c = e[8],
              d = Math.sin(i),
              g = Math.cos(i);
          t[0] = g * r + d * a, t[1] = g * s + d * h, t[2] = g * n + d * o, t[3] = g * a - d * r, t[4] = g * h - d * s, t[5] = g * o - d * n, t[6] = l, t[7] = u, t[8] = c;
        }(this, e, t), this;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        return function (t, e, i) {
          var r = i[0],
              s = i[1];
          t[0] = r * e[0], t[1] = r * e[1], t[2] = r * e[2], t[3] = s * e[3], t[4] = s * e[4], t[5] = s * e[5], t[6] = e[6], t[7] = e[7], t[8] = e[8];
        }(this, e, t), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t, e) {
        return e ? I(this, t, e) : I(this, this, t), this;
      }
    }, {
      key: "identity",
      value: function identity() {
        var t;
        return (t = this)[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = 0, t[7] = 0, t[8] = 1, this;
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e, i;
        return i = t, (e = this)[0] = i[0], e[1] = i[1], e[2] = i[2], e[3] = i[3], e[4] = i[4], e[5] = i[5], e[6] = i[6], e[7] = i[7], e[8] = i[8], this;
      }
    }, {
      key: "fromMatrix4",
      value: function fromMatrix4(t) {
        var e, i;
        return i = t, (e = this)[0] = i[0], e[1] = i[1], e[2] = i[2], e[3] = i[4], e[4] = i[5], e[5] = i[6], e[6] = i[8], e[7] = i[9], e[8] = i[10], this;
      }
    }, {
      key: "fromQuaternion",
      value: function fromQuaternion(t) {
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = i + i,
              h = r + r,
              o = s + s,
              l = i * a,
              u = r * a,
              c = r * h,
              d = s * a,
              g = s * h,
              p = s * o,
              m = n * a,
              f = n * h,
              x = n * o;
          t[0] = 1 - c - p, t[3] = u - x, t[6] = d + f, t[1] = u + x, t[4] = 1 - l - p, t[7] = g - m, t[2] = d - f, t[5] = g + m, t[8] = 1 - l - c;
        }(this, t), this;
      }
    }, {
      key: "fromBasis",
      value: function fromBasis(t, e, i) {
        return this.set(t[0], t[1], t[2], e[0], e[1], e[2], i[0], i[1], i[2]), this;
      }
    }, {
      key: "inverse",
      value: function inverse() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = e[4],
              h = e[5],
              o = e[6],
              l = e[7],
              u = e[8],
              c = u * a - h * l,
              d = -u * n + h * o,
              g = l * n - a * o,
              p = i * c + r * d + s * g;
          p && (p = 1 / p, t[0] = c * p, t[1] = (-u * r + s * l) * p, t[2] = (h * r - s * a) * p, t[3] = d * p, t[4] = (u * i - s * o) * p, t[5] = (-h * i + s * n) * p, t[6] = g * p, t[7] = (-l * i + r * o) * p, t[8] = (a * i - r * n) * p);
        }(this, t), this;
      }
    }, {
      key: "getNormalMatrix",
      value: function getNormalMatrix(t) {
        return function (t, e) {
          var i = e[0],
              r = e[1],
              s = e[2],
              n = e[3],
              a = e[4],
              h = e[5],
              o = e[6],
              l = e[7],
              u = e[8],
              c = e[9],
              d = e[10],
              g = e[11],
              p = e[12],
              m = e[13],
              f = e[14],
              x = e[15],
              w = i * h - r * a,
              b = i * o - s * a,
              M = i * l - n * a,
              v = r * o - s * h,
              A = r * l - n * h,
              E = s * l - n * o,
              y = u * m - c * p,
              F = u * f - d * p,
              T = u * x - g * p,
              _ = c * f - d * m,
              R = c * x - g * m,
              S = d * x - g * f,
              N = w * S - b * R + M * _ + v * T - A * F + E * y;

          N && (N = 1 / N, t[0] = (h * S - o * R + l * _) * N, t[1] = (o * T - a * S - l * F) * N, t[2] = (a * R - h * T + l * y) * N, t[3] = (s * R - r * S - n * _) * N, t[4] = (i * S - s * T + n * F) * N, t[5] = (r * T - i * R - n * y) * N, t[6] = (m * E - f * A + x * v) * N, t[7] = (f * M - p * E - x * b) * N, t[8] = (p * A - m * M + x * w) * N);
        }(this, t), this;
      }
    }]);

    return q;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  var G = 0;

  var Y = /*#__PURE__*/function (_C) {
    _inherits(Y, _C);

    var _super6 = _createSuper(Y);

    function Y(t) {
      var _this10;

      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          e = _ref6.geometry,
          i = _ref6.program,
          _ref6$mode = _ref6.mode,
          r = _ref6$mode === void 0 ? t.TRIANGLES : _ref6$mode,
          _ref6$frustumCulled = _ref6.frustumCulled,
          s = _ref6$frustumCulled === void 0 ? !0 : _ref6$frustumCulled,
          _ref6$renderOrder = _ref6.renderOrder,
          n = _ref6$renderOrder === void 0 ? 0 : _ref6$renderOrder;

      _classCallCheck(this, Y);

      _this10 = _super6.call(this, t), _this10.gl = t, _this10.id = G++, _this10.geometry = e, _this10.program = i, _this10.mode = r, _this10.frustumCulled = s, _this10.renderOrder = n, _this10.modelViewMatrix = new P(), _this10.normalMatrix = new q(), _this10.program.uniforms.modelMatrix || Object.assign(_this10.program.uniforms, {
        modelMatrix: {
          value: null
        },
        viewMatrix: {
          value: null
        },
        modelViewMatrix: {
          value: null
        },
        normalMatrix: {
          value: null
        },
        projectionMatrix: {
          value: null
        },
        cameraPosition: {
          value: null
        }
      });
      return _this10;
    }

    _createClass(Y, [{
      key: "draw",
      value: function draw() {
        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            t = _ref7.camera;

        this.onBeforeRender && this.onBeforeRender({
          mesh: this,
          camera: t
        }), t && (this.program.uniforms.projectionMatrix.value = t.projectionMatrix, this.program.uniforms.cameraPosition.value = t.position, this.program.uniforms.viewMatrix.value = t.viewMatrix, this.modelViewMatrix.multiply(t.viewMatrix, this.worldMatrix), this.normalMatrix.getNormalMatrix(this.modelViewMatrix), this.program.uniforms.modelMatrix.value = this.worldMatrix, this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix, this.program.uniforms.normalMatrix.value = this.normalMatrix);
        var e = this.program.cullFace && this.worldMatrix.determinant() < 0;
        this.program.use({
          flipFaces: e
        }), this.geometry.draw({
          mode: this.mode,
          program: this.program
        }), this.onAfterRender && this.onAfterRender({
          mesh: this,
          camera: t
        });
      }
    }]);

    return Y;
  }(C);

  var k = new Uint8Array(4);

  function V(t) {
    return 0 == (t & t - 1);
  }

  var X = 0;

  var W = /*#__PURE__*/function () {
    function W(t) {
      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          e = _ref8.image,
          _ref8$target = _ref8.target,
          i = _ref8$target === void 0 ? t.TEXTURE_2D : _ref8$target,
          _ref8$type = _ref8.type,
          r = _ref8$type === void 0 ? t.UNSIGNED_BYTE : _ref8$type,
          _ref8$format = _ref8.format,
          s = _ref8$format === void 0 ? t.RGBA : _ref8$format,
          _ref8$internalFormat = _ref8.internalFormat,
          n = _ref8$internalFormat === void 0 ? s : _ref8$internalFormat,
          _ref8$wrapS = _ref8.wrapS,
          a = _ref8$wrapS === void 0 ? t.CLAMP_TO_EDGE : _ref8$wrapS,
          _ref8$wrapT = _ref8.wrapT,
          h = _ref8$wrapT === void 0 ? t.CLAMP_TO_EDGE : _ref8$wrapT,
          _ref8$generateMipmaps = _ref8.generateMipmaps,
          o = _ref8$generateMipmaps === void 0 ? !0 : _ref8$generateMipmaps,
          _ref8$minFilter = _ref8.minFilter,
          l = _ref8$minFilter === void 0 ? o ? t.NEAREST_MIPMAP_LINEAR : t.LINEAR : _ref8$minFilter,
          _ref8$magFilter = _ref8.magFilter,
          u = _ref8$magFilter === void 0 ? t.LINEAR : _ref8$magFilter,
          _ref8$premultiplyAlph = _ref8.premultiplyAlpha,
          c = _ref8$premultiplyAlph === void 0 ? !1 : _ref8$premultiplyAlph,
          _ref8$unpackAlignment = _ref8.unpackAlignment,
          d = _ref8$unpackAlignment === void 0 ? 4 : _ref8$unpackAlignment,
          _ref8$flipY = _ref8.flipY,
          g = _ref8$flipY === void 0 ? !0 : _ref8$flipY,
          _ref8$level = _ref8.level,
          p = _ref8$level === void 0 ? 0 : _ref8$level,
          m = _ref8.width,
          _ref8$height = _ref8.height,
          f = _ref8$height === void 0 ? m : _ref8$height;

      _classCallCheck(this, W);

      this.gl = t, this.id = X++, this.image = e, this.target = i, this.type = r, this.format = s, this.internalFormat = n, this.minFilter = l, this.magFilter = u, this.wrapS = a, this.wrapT = h, this.generateMipmaps = o, this.premultiplyAlpha = c, this.unpackAlignment = d, this.flipY = g, this.level = p, this.width = m, this.height = f, this.texture = this.gl.createTexture(), this.store = {
        image: null
      }, this.glState = this.gl.renderer.state, this.state = {}, this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR, this.state.magFilter = this.gl.LINEAR, this.state.wrapS = this.gl.REPEAT, this.state.wrapT = this.gl.REPEAT;
    }

    _createClass(W, [{
      key: "bind",
      value: function bind() {
        this.glState.textureUnits[this.glState.activeTextureUnit] !== this.id && (this.gl.bindTexture(this.target, this.texture), this.glState.textureUnits[this.glState.activeTextureUnit] = this.id);
      }
    }, {
      key: "update",
      value: function update() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var e = !(this.image === this.store.image && !this.needsUpdate);
        (e || this.glState.textureUnits[t] !== this.id) && (this.gl.renderer.activeTexture(t), this.bind()), e && (this.needsUpdate = !1, this.flipY !== this.glState.flipY && (this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY), this.glState.flipY = this.flipY), this.premultiplyAlpha !== this.glState.premultiplyAlpha && (this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha), this.glState.premultiplyAlpha = this.premultiplyAlpha), this.unpackAlignment !== this.glState.unpackAlignment && (this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment), this.glState.unpackAlignment = this.unpackAlignment), this.minFilter !== this.state.minFilter && (this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter), this.state.minFilter = this.minFilter), this.magFilter !== this.state.magFilter && (this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter), this.state.magFilter = this.magFilter), this.wrapS !== this.state.wrapS && (this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS), this.state.wrapS = this.wrapS), this.wrapT !== this.state.wrapT && (this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT), this.state.wrapT = this.wrapT), this.image ? (this.image.width && (this.width = this.image.width, this.height = this.image.height), this.gl.renderer.isWebgl2 || ArrayBuffer.isView(this.image) ? this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image) : this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image), this.generateMipmaps && (this.gl.renderer.isWebgl2 || V(this.image.width) && V(this.image.height) ? this.gl.generateMipmap(this.target) : (this.generateMipmaps = !1, this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE, this.minFilter = this.gl.LINEAR))) : this.width ? this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null) : this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, k), this.store.image = this.image, this.onUpdate && this.onUpdate());
      }
    }]);

    return W;
  }();

  var j = function j(t) {
    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref9$width = _ref9.width,
        e = _ref9$width === void 0 ? t.canvas.width : _ref9$width,
        _ref9$height = _ref9.height,
        i = _ref9$height === void 0 ? t.canvas.height : _ref9$height,
        _ref9$target = _ref9.target,
        r = _ref9$target === void 0 ? t.FRAMEBUFFER : _ref9$target,
        _ref9$color = _ref9.color,
        s = _ref9$color === void 0 ? 1 : _ref9$color,
        _ref9$depth = _ref9.depth,
        n = _ref9$depth === void 0 ? !0 : _ref9$depth,
        _ref9$stencil = _ref9.stencil,
        a = _ref9$stencil === void 0 ? !1 : _ref9$stencil,
        _ref9$depthTexture = _ref9.depthTexture,
        h = _ref9$depthTexture === void 0 ? !1 : _ref9$depthTexture,
        _ref9$wrapS = _ref9.wrapS,
        o = _ref9$wrapS === void 0 ? t.CLAMP_TO_EDGE : _ref9$wrapS,
        _ref9$wrapT = _ref9.wrapT,
        l = _ref9$wrapT === void 0 ? t.CLAMP_TO_EDGE : _ref9$wrapT,
        _ref9$minFilter = _ref9.minFilter,
        u = _ref9$minFilter === void 0 ? t.LINEAR : _ref9$minFilter,
        _ref9$magFilter = _ref9.magFilter,
        c = _ref9$magFilter === void 0 ? u : _ref9$magFilter,
        _ref9$type = _ref9.type,
        d = _ref9$type === void 0 ? t.UNSIGNED_BYTE : _ref9$type,
        _ref9$format = _ref9.format,
        g = _ref9$format === void 0 ? t.RGBA : _ref9$format,
        _ref9$internalFormat = _ref9.internalFormat,
        p = _ref9$internalFormat === void 0 ? g : _ref9$internalFormat,
        m = _ref9.unpackAlignment,
        f = _ref9.premultiplyAlpha;

    _classCallCheck(this, j);

    this.gl = t, this.width = e, this.height = i, this.buffer = this.gl.createFramebuffer(), this.target = r, this.gl.bindFramebuffer(this.target, this.buffer), this.textures = [];

    for (var _r9 = 0; _r9 < s; _r9++) {
      this.textures.push(new W(t, {
        width: e,
        height: i,
        wrapS: o,
        wrapT: l,
        minFilter: u,
        magFilter: c,
        type: d,
        format: g,
        internalFormat: p,
        unpackAlignment: m,
        premultiplyAlpha: f,
        flipY: !1,
        generateMipmaps: !1
      })), this.textures[_r9].update(), this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + _r9, this.gl.TEXTURE_2D, this.textures[_r9].texture, 0);
    }

    this.texture = this.textures[0], h && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension("WEBGL_depth_texture")) ? (this.depthTexture = new W(t, {
      width: e,
      height: i,
      wrapS: o,
      wrapT: l,
      minFilter: this.gl.NEAREST,
      magFilter: this.gl.NEAREST,
      flipY: !1,
      format: this.gl.DEPTH_COMPONENT,
      internalFormat: t.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT24 : this.gl.DEPTH_COMPONENT,
      type: this.gl.UNSIGNED_INT,
      generateMipmaps: !1
    }), this.depthTexture.update(), this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0)) : (n && !a && (this.depthBuffer = this.gl.createRenderbuffer(), this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer), this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, e, i), this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer)), a && !n && (this.stencilBuffer = this.gl.createRenderbuffer(), this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer), this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, e, i), this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer)), n && a && (this.depthStencilBuffer = this.gl.createRenderbuffer(), this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer), this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, e, i), this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer))), this.gl.bindFramebuffer(this.target, null);
  };

  var H = /*#__PURE__*/function (_Array6) {
    _inherits(H, _Array6);

    var _super7 = _createSuper(H);

    function H() {
      var _H$hexToRGB, _H$hexToRGB2;

      var _this11;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      _classCallCheck(this, H);

      return _possibleConstructorReturn(_this11, ("string" == typeof t && (_H$hexToRGB = H.hexToRGB(t), _H$hexToRGB2 = _slicedToArray(_H$hexToRGB, 3), t = _H$hexToRGB2[0], e = _H$hexToRGB2[1], i = _H$hexToRGB2[2], _H$hexToRGB), _this11 = _super7.call(this, t, e, i), _assertThisInitialized(_this11)));
    }

    _createClass(H, [{
      key: "set",
      value: function set(t, e, i) {
        var _H$hexToRGB3, _H$hexToRGB4;

        return "string" == typeof t && (_H$hexToRGB3 = H.hexToRGB(t), _H$hexToRGB4 = _slicedToArray(_H$hexToRGB3, 3), t = _H$hexToRGB4[0], e = _H$hexToRGB4[1], i = _H$hexToRGB4[2], _H$hexToRGB3), t.length ? this.copy(t) : (this[0] = t, this[1] = e, this[2] = i, this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return this[0] = t[0], this[1] = t[1], this[2] = t[2], this;
      }
    }, {
      key: "r",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t;
      }
    }, {
      key: "g",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t;
      }
    }, {
      key: "b",
      get: function get() {
        return this[2];
      },
      set: function set(t) {
        this[2] = t;
      }
    }], [{
      key: "hexToRGB",
      value: function hexToRGB(t) {
        4 === t.length && (t = t[0] + t[1] + t[1] + t[2] + t[2] + t[3] + t[3]);
        var e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);
        return e || console.warn("Unable to convert hex string ".concat(t, " to rgb values")), [parseInt(e[1], 16) / 255, parseInt(e[2], 16) / 255, parseInt(e[3], 16) / 255];
      }
    }]);

    return H;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  function Z(t, e, i) {
    return t[0] = e[0] + i[0], t[1] = e[1] + i[1], t;
  }

  function $(t, e, i) {
    return t[0] = e[0] - i[0], t[1] = e[1] - i[1], t;
  }

  function Q(t, e, i) {
    return t[0] = e[0] * i, t[1] = e[1] * i, t;
  }

  function K(t) {
    var e = t[0],
        i = t[1];
    return Math.sqrt(e * e + i * i);
  }

  var J = /*#__PURE__*/function (_Array7) {
    _inherits(J, _Array7);

    var _super8 = _createSuper(J);

    function J() {
      var _this12;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;

      _classCallCheck(this, J);

      return _possibleConstructorReturn(_this12, (_this12 = _super8.call(this, t, e), _assertThisInitialized(_this12)));
    }

    _createClass(J, [{
      key: "set",
      value: function set(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
        return t.length ? this.copy(t) : (function (t, e, i) {
          t[0] = e, t[1] = i;
        }(this, t, e), this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        var e, i;
        return i = t, (e = this)[0] = i[0], e[1] = i[1], this;
      }
    }, {
      key: "add",
      value: function add(t, e) {
        return e ? Z(this, t, e) : Z(this, this, t), this;
      }
    }, {
      key: "sub",
      value: function sub(t, e) {
        return e ? $(this, t, e) : $(this, this, t), this;
      }
    }, {
      key: "multiply",
      value: function multiply(t) {
        var e, i, r;
        return t.length ? (i = this, r = t, (e = this)[0] = i[0] * r[0], e[1] = i[1] * r[1]) : Q(this, this, t), this;
      }
    }, {
      key: "divide",
      value: function divide(t) {
        var e, i, r;
        return t.length ? (i = this, r = t, (e = this)[0] = i[0] / r[0], e[1] = i[1] / r[1]) : Q(this, this, 1 / t), this;
      }
    }, {
      key: "inverse",
      value: function inverse() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        var e, i;
        return i = t, (e = this)[0] = 1 / i[0], e[1] = 1 / i[1], this;
      }
    }, {
      key: "len",
      value: function len() {
        return K(this);
      }
    }, {
      key: "distance",
      value: function distance(t) {
        return t ? (e = this, r = (i = t)[0] - e[0], s = i[1] - e[1], Math.sqrt(r * r + s * s)) : K(this);
        var e, i, r, s;
      }
    }, {
      key: "squaredLen",
      value: function squaredLen() {
        return this.squaredDistance();
      }
    }, {
      key: "squaredDistance",
      value: function squaredDistance(t) {
        return t ? (e = this, r = (i = t)[0] - e[0], s = i[1] - e[1], r * r + s * s) : function (t) {
          var e = t[0],
              i = t[1];
          return e * e + i * i;
        }(this);
        var e, i, r, s;
      }
    }, {
      key: "negate",
      value: function negate() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
        var e, i;
        return i = t, (e = this)[0] = -i[0], e[1] = -i[1], this;
      }
    }, {
      key: "cross",
      value: function cross(t, e) {
        return r = e, (i = t)[0] * r[1] - i[1] * r[0];
        var i, r;
      }
    }, {
      key: "scale",
      value: function scale(t) {
        return Q(this, this, t), this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var t, e, i, r, s;
        return t = this, i = (e = this)[0], r = e[1], (s = i * i + r * r) > 0 && (s = 1 / Math.sqrt(s)), t[0] = e[0] * s, t[1] = e[1] * s, this;
      }
    }, {
      key: "dot",
      value: function dot(t) {
        return i = t, (e = this)[0] * i[0] + e[1] * i[1];
        var e, i;
      }
    }, {
      key: "equals",
      value: function equals(t) {
        return i = t, (e = this)[0] === i[0] && e[1] === i[1];
        var e, i;
      }
    }, {
      key: "applyMatrix3",
      value: function applyMatrix3(t) {
        var e, i, r, s, n;
        return e = this, r = t, s = (i = this)[0], n = i[1], e[0] = r[0] * s + r[3] * n + r[6], e[1] = r[1] * s + r[4] * n + r[7], this;
      }
    }, {
      key: "applyMatrix4",
      value: function applyMatrix4(t) {
        return function (t, e, i) {
          var r = e[0],
              s = e[1];
          t[0] = i[0] * r + i[4] * s + i[12], t[1] = i[1] * r + i[5] * s + i[13];
        }(this, this, t), this;
      }
    }, {
      key: "lerp",
      value: function lerp(t, e) {
        !function (t, e, i, r) {
          var s = e[0],
              n = e[1];
          t[0] = s + r * (i[0] - s), t[1] = n + r * (i[1] - n);
        }(this, this, t, e);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new J(this[0], this[1]);
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this[0] = t[e], this[1] = t[e + 1], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this[0], t[e + 1] = this[1], t;
      }
    }, {
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t;
      }
    }]);

    return J;
  }( /*#__PURE__*/_wrapNativeSuper(Array));

  var tt = /*#__PURE__*/function (_g) {
    _inherits(tt, _g);

    var _super9 = _createSuper(tt);

    function tt(t) {
      var _this13;

      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref10$width = _ref10.width,
          e = _ref10$width === void 0 ? 1 : _ref10$width,
          _ref10$height = _ref10.height,
          i = _ref10$height === void 0 ? 1 : _ref10$height,
          _ref10$widthSegments = _ref10.widthSegments,
          r = _ref10$widthSegments === void 0 ? 1 : _ref10$widthSegments,
          _ref10$heightSegments = _ref10.heightSegments,
          s = _ref10$heightSegments === void 0 ? 1 : _ref10$heightSegments,
          _ref10$attributes = _ref10.attributes,
          n = _ref10$attributes === void 0 ? {} : _ref10$attributes;

      _classCallCheck(this, tt);

      var a = r,
          h = s,
          o = (a + 1) * (h + 1),
          l = a * h * 6,
          u = new Float32Array(3 * o),
          c = new Float32Array(3 * o),
          d = new Float32Array(2 * o),
          g = o > 65536 ? new Uint32Array(l) : new Uint16Array(l);
      tt.buildPlane(u, c, d, g, e, i, 0, a, h), Object.assign(n, {
        position: {
          size: 3,
          data: u
        },
        normal: {
          size: 3,
          data: c
        },
        uv: {
          size: 2,
          data: d
        },
        index: {
          data: g
        }
      }), _this13 = _super9.call(this, t, n);
      return _this13;
    }

    _createClass(tt, null, [{
      key: "buildPlane",
      value: function buildPlane(t, e, i, r, s, n, a, h, o) {
        var l = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
        var u = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
        var c = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 2;
        var d = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 1;
        var g = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : -1;
        var p = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
        var m = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 0;
        var f = p,
            x = s / h,
            w = n / o;

        for (var _b = 0; _b <= o; _b++) {
          var _M = _b * w - n / 2;

          for (var _n3 = 0; _n3 <= h; _n3++, p++) {
            var _w = _n3 * x - s / 2;

            if (t[3 * p + l] = _w * d, t[3 * p + u] = _M * g, t[3 * p + c] = a / 2, e[3 * p + l] = 0, e[3 * p + u] = 0, e[3 * p + c] = a >= 0 ? 1 : -1, i[2 * p] = _n3 / h, i[2 * p + 1] = 1 - _b / o, _b === o || _n3 === h) continue;

            var _v = f + _n3 + _b * (h + 1),
                _A = f + _n3 + (_b + 1) * (h + 1),
                _E = f + _n3 + (_b + 1) * (h + 1) + 1,
                _y = f + _n3 + _b * (h + 1) + 1;

            r[6 * m] = _v, r[6 * m + 1] = _A, r[6 * m + 2] = _y, r[6 * m + 3] = _A, r[6 * m + 4] = _E, r[6 * m + 5] = _y, m++;
          }
        }
      }
    }]);

    return tt;
  }(g);

  var et = {
    NONE: -1,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2,
    DOLLY_PAN: 3
  },
      it = new l(),
      rt = new J(),
      st = new J();
  var nt = new l(),
      at = new l(),
      ht = new l(),
      ot = new P();
  var lt = "\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n",
      ut = "\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n",
      ct = new l(),
      dt = new N(),
      gt = new l(),
      pt = new l(),
      mt = new N(),
      ft = new l();

  var xt = /*#__PURE__*/function () {
    function xt(_ref11) {
      var t = _ref11.objects,
          e = _ref11.data;

      _classCallCheck(this, xt);

      this.objects = t, this.data = e, this.elapsed = 0, this.weight = 1, this.duration = e.frames.length - 1;
    }

    _createClass(xt, [{
      key: "update",
      value: function update() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var e = arguments.length > 1 ? arguments[1] : undefined;
        var i = e ? 1 : this.weight / t,
            r = this.elapsed % this.duration,
            s = Math.floor(r),
            n = r - s,
            a = this.data.frames[s],
            h = this.data.frames[(s + 1) % this.duration];
        this.objects.forEach(function (t, e) {
          ct.fromArray(a.position, 3 * e), dt.fromArray(a.quaternion, 4 * e), gt.fromArray(a.scale, 3 * e), pt.fromArray(h.position, 3 * e), mt.fromArray(h.quaternion, 4 * e), ft.fromArray(h.scale, 3 * e), ct.lerp(pt, n), dt.slerp(mt, n), gt.lerp(ft, n), t.position.lerp(ct, i), t.quaternion.slerp(dt, i), t.scale.lerp(gt, i);
        });
      }
    }]);

    return xt;
  }();

  var wt = new P();
  var bt = "\nprecision highp float;\nprecision highp int;\n\nattribute vec3 position;\nattribute vec3 normal;\n\nuniform mat3 normalMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec3 vNormal;\n\nvoid main() {\n    vNormal = normalize(normalMatrix * normal);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n",
      Mt = "\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vNormal;\n\nvoid main() {\n    gl_FragColor.rgb = normalize(vNormal);\n    gl_FragColor.a = 1.0;\n}\n";
  var vt = "\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n",
      At = "\n    precision highp float;\n\n    uniform sampler2D tMap;\n\n    uniform float uFalloff;\n    uniform float uAlpha;\n    uniform float uDissipation;\n\n    uniform float uAspect;\n    uniform vec2 uMouse;\n    uniform vec2 uVelocity;\n\n    varying vec2 vUv;\n\n    void main() {\n\n      vec2 cursor = vUv - uMouse;\n\n        vec4 color = texture2D(tMap, vUv) * uDissipation;\n\n        cursor.x *= uAspect;\n\n        vec3 stamp = vec3(uVelocity * vec2(1, -1), 1.0 - pow(1.0 - min(1.0, length(uVelocity)), 3.0));\n        float falloff = smoothstep(uFalloff, 0.0, length(cursor)) * uAlpha;\n\n        color.rgb = mix(color.rgb, stamp, vec3(falloff));\n\n        gl_FragColor = color;\n    }\n";
  var Et = "\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n",
      yt = "\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n";
  return t.Animation = xt, t.Box = /*#__PURE__*/function (_g2) {
    _inherits(_class, _g2);

    var _super10 = _createSuper(_class);

    function _class(t) {
      var _this14;

      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref12$width = _ref12.width,
          e = _ref12$width === void 0 ? 1 : _ref12$width,
          _ref12$height = _ref12.height,
          i = _ref12$height === void 0 ? 1 : _ref12$height,
          _ref12$depth = _ref12.depth,
          r = _ref12$depth === void 0 ? 1 : _ref12$depth,
          _ref12$widthSegments = _ref12.widthSegments,
          s = _ref12$widthSegments === void 0 ? 1 : _ref12$widthSegments,
          _ref12$heightSegments = _ref12.heightSegments,
          n = _ref12$heightSegments === void 0 ? 1 : _ref12$heightSegments,
          _ref12$depthSegments = _ref12.depthSegments,
          a = _ref12$depthSegments === void 0 ? 1 : _ref12$depthSegments,
          _ref12$attributes = _ref12.attributes,
          h = _ref12$attributes === void 0 ? {} : _ref12$attributes;

      _classCallCheck(this, _class);

      var o = s,
          l = n,
          u = a,
          c = (o + 1) * (l + 1) * 2 + (o + 1) * (u + 1) * 2 + (l + 1) * (u + 1) * 2,
          d = 6 * (o * l * 2 + o * u * 2 + l * u * 2),
          g = new Float32Array(3 * c),
          p = new Float32Array(3 * c),
          m = new Float32Array(2 * c),
          f = c > 65536 ? new Uint32Array(d) : new Uint16Array(d);
      var x = 0,
          w = 0;
      tt.buildPlane(g, p, m, f, r, i, e, u, l, 2, 1, 0, -1, -1, x, w), tt.buildPlane(g, p, m, f, r, i, -e, u, l, 2, 1, 0, 1, -1, x += (u + 1) * (l + 1), w += u * l), tt.buildPlane(g, p, m, f, e, r, i, u, l, 0, 2, 1, 1, 1, x += (u + 1) * (l + 1), w += u * l), tt.buildPlane(g, p, m, f, e, r, -i, u, l, 0, 2, 1, 1, -1, x += (o + 1) * (u + 1), w += o * u), tt.buildPlane(g, p, m, f, e, i, -r, o, l, 0, 1, 2, -1, -1, x += (o + 1) * (u + 1), w += o * u), tt.buildPlane(g, p, m, f, e, i, r, o, l, 0, 1, 2, 1, -1, x += (o + 1) * (l + 1), w += o * l), Object.assign(h, {
        position: {
          size: 3,
          data: g
        },
        normal: {
          size: 3,
          data: p
        },
        uv: {
          size: 2,
          data: m
        },
        index: {
          data: f
        }
      }), _this14 = _super10.call(this, t, h);
      return _this14;
    }

    return _class;
  }(g), t.Camera = /*#__PURE__*/function (_C2) {
    _inherits(_class2, _C2);

    var _super11 = _createSuper(_class2);

    function _class2(t) {
      var _this15;

      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref13$near = _ref13.near,
          e = _ref13$near === void 0 ? .1 : _ref13$near,
          _ref13$far = _ref13.far,
          i = _ref13$far === void 0 ? 100 : _ref13$far,
          _ref13$fov = _ref13.fov,
          r = _ref13$fov === void 0 ? 45 : _ref13$fov,
          _ref13$aspect = _ref13.aspect,
          s = _ref13$aspect === void 0 ? 1 : _ref13$aspect,
          n = _ref13.left,
          a = _ref13.right,
          h = _ref13.bottom,
          o = _ref13.top;

      _classCallCheck(this, _class2);

      _this15 = _super11.call(this, t), _this15.near = e, _this15.far = i, _this15.fov = r, _this15.aspect = s, _this15.projectionMatrix = new P(), _this15.viewMatrix = new P(), _this15.projectionViewMatrix = new P(), n || a ? _this15.orthographic({
        left: n,
        right: a,
        bottom: h,
        top: o
      }) : _this15.perspective();
      return _this15;
    }

    _createClass(_class2, [{
      key: "perspective",
      value: function perspective() {
        var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref14$near = _ref14.near,
            t = _ref14$near === void 0 ? this.near : _ref14$near,
            _ref14$far = _ref14.far,
            e = _ref14$far === void 0 ? this.far : _ref14$far,
            _ref14$fov = _ref14.fov,
            i = _ref14$fov === void 0 ? this.fov : _ref14$fov,
            _ref14$aspect = _ref14.aspect,
            r = _ref14$aspect === void 0 ? this.aspect : _ref14$aspect;

        return this.projectionMatrix.fromPerspective({
          fov: i * (Math.PI / 180),
          aspect: r,
          near: t,
          far: e
        }), this.type = "perspective", this;
      }
    }, {
      key: "orthographic",
      value: function orthographic() {
        var _ref15 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref15$near = _ref15.near,
            t = _ref15$near === void 0 ? this.near : _ref15$near,
            _ref15$far = _ref15.far,
            e = _ref15$far === void 0 ? this.far : _ref15$far,
            _ref15$left = _ref15.left,
            i = _ref15$left === void 0 ? -1 : _ref15$left,
            _ref15$right = _ref15.right,
            r = _ref15$right === void 0 ? 1 : _ref15$right,
            _ref15$bottom = _ref15.bottom,
            s = _ref15$bottom === void 0 ? -1 : _ref15$bottom,
            _ref15$top = _ref15.top,
            n = _ref15$top === void 0 ? 1 : _ref15$top;

        return this.projectionMatrix.fromOrthogonal({
          left: i,
          right: r,
          bottom: s,
          top: n,
          near: t,
          far: e
        }), this.type = "orthographic", this;
      }
    }, {
      key: "updateMatrixWorld",
      value: function updateMatrixWorld() {
        return _get(_getPrototypeOf(_class2.prototype), "updateMatrixWorld", this).call(this), this.viewMatrix.inverse(this.worldMatrix), this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix), this;
      }
    }, {
      key: "lookAt",
      value: function lookAt(t) {
        return _get(_getPrototypeOf(_class2.prototype), "lookAt", this).call(this, t, !0), this;
      }
    }, {
      key: "project",
      value: function project(t) {
        return t.applyMatrix4(this.viewMatrix), t.applyMatrix4(this.projectionMatrix), this;
      }
    }, {
      key: "unproject",
      value: function unproject(t) {
        return t.applyMatrix4(D.inverse(this.projectionMatrix)), t.applyMatrix4(this.worldMatrix), this;
      }
    }, {
      key: "updateFrustum",
      value: function updateFrustum() {
        this.frustum || (this.frustum = [new l(), new l(), new l(), new l(), new l(), new l()]);
        var t = this.projectionViewMatrix;
        this.frustum[0].set(t[3] - t[0], t[7] - t[4], t[11] - t[8]).constant = t[15] - t[12], this.frustum[1].set(t[3] + t[0], t[7] + t[4], t[11] + t[8]).constant = t[15] + t[12], this.frustum[2].set(t[3] + t[1], t[7] + t[5], t[11] + t[9]).constant = t[15] + t[13], this.frustum[3].set(t[3] - t[1], t[7] - t[5], t[11] - t[9]).constant = t[15] - t[13], this.frustum[4].set(t[3] - t[2], t[7] - t[6], t[11] - t[10]).constant = t[15] - t[14], this.frustum[5].set(t[3] + t[2], t[7] + t[6], t[11] + t[10]).constant = t[15] + t[14];

        for (var _t4 = 0; _t4 < 6; _t4++) {
          var _e5 = 1 / this.frustum[_t4].distance();

          this.frustum[_t4].multiply(_e5), this.frustum[_t4].constant *= _e5;
        }
      }
    }, {
      key: "frustumIntersectsMesh",
      value: function frustumIntersectsMesh(t) {
        if (!t.geometry.attributes.position) return !0;
        t.geometry.bounds && t.geometry.bounds.radius !== 1 / 0 || t.geometry.computeBoundingSphere();
        var e = U;
        e.copy(t.geometry.bounds.center), e.applyMatrix4(t.worldMatrix);
        var i = t.geometry.bounds.radius * t.worldMatrix.getMaxScaleOnAxis();
        return this.frustumIntersectsSphere(e, i);
      }
    }, {
      key: "frustumIntersectsSphere",
      value: function frustumIntersectsSphere(t, e) {
        var i = z;

        for (var _r10 = 0; _r10 < 6; _r10++) {
          var _s4 = this.frustum[_r10];
          if (i.copy(_s4).dot(t) + _s4.constant < -e) return !1;
        }

        return !0;
      }
    }]);

    return _class2;
  }(C), t.Color = H, t.Cylinder = /*#__PURE__*/function (_g3) {
    _inherits(_class3, _g3);

    var _super12 = _createSuper(_class3);

    function _class3(t) {
      var _this16;

      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref16$radius = _ref16.radius,
          e = _ref16$radius === void 0 ? .5 : _ref16$radius,
          _ref16$height = _ref16.height,
          i = _ref16$height === void 0 ? 1 : _ref16$height,
          _ref16$radialSegments = _ref16.radialSegments,
          r = _ref16$radialSegments === void 0 ? 16 : _ref16$radialSegments,
          _ref16$heightSegments = _ref16.heightSegments,
          s = _ref16$heightSegments === void 0 ? 1 : _ref16$heightSegments,
          _ref16$attributes = _ref16.attributes,
          n = _ref16$attributes === void 0 ? {} : _ref16$attributes;

      _classCallCheck(this, _class3);

      var a = r,
          h = s,
          o = (r + 1) * (s + 1) + 2,
          u = r * (2 + 2 * s) * 3,
          c = new Float32Array(3 * o),
          d = new Float32Array(3 * o),
          g = new Float32Array(2 * o),
          p = o > 65536 ? new Uint32Array(u) : new Uint16Array(u);
      var m,
          f,
          x,
          w = 0,
          b = new l();
      m = 0, f = -.5 * i, x = 0, c[3 * w + 0] = m, c[3 * w + 1] = f, c[3 * w + 2] = x, b.set(m, f, x).normalize(), d[3 * w] = b.x, d[3 * w + 1] = b.y, d[3 * w + 2] = b.z, g[2 * w] = 0, g[2 * w + 1] = 1;
      var M = w;
      m = 0, f = .5 * i, x = 0, c[3 * ++w + 0] = m, c[3 * w + 1] = f, c[3 * w + 2] = x, b.set(m, f, x).normalize(), d[3 * w] = b.x, d[3 * w + 1] = b.y, d[3 * w + 2] = b.z, g[2 * w] = 0, g[2 * w + 1] = 0;
      var v = w;
      w++;

      for (var A = 0; A < a + 1; A++) {
        var _t5 = A / a;

        for (var E = 0; E < h + 1; E++) {
          var _r11 = E / h;

          m = Math.cos(_t5 * Math.PI * 2) * e, f = (_r11 - .5) * i, x = Math.sin(_t5 * Math.PI * 2) * e, c[3 * w + 0] = m, c[3 * w + 1] = f, c[3 * w + 2] = x, b.set(m, f, x).normalize(), d[3 * w] = b.x, d[3 * w + 1] = b.y, d[3 * w + 2] = b.z, g[2 * w] = _t5, g[2 * w + 1] = 1 - _r11, w++;
        }
      }

      var y = 0,
          F = h + 1;

      for (A = 0; A < a; A++) {
        var _t6 = A + 1;

        for (p[3 * y + 0] = M, p[3 * y + 1] = 2 + A * F, p[3 * y + 2] = 2 + _t6 * F, y++, E = 0; E < h; E++) {
          p[3 * y + 0] = 2 + A * F + (E + 0), p[3 * y + 1] = 2 + A * F + (E + 1), p[3 * y + 2] = 2 + _t6 * F + (E + 0), p[3 * ++y + 0] = 2 + _t6 * F + (E + 0), p[3 * y + 1] = 2 + A * F + (E + 1), p[3 * y + 2] = 2 + _t6 * F + (E + 1), y++;
        }

        p[3 * y + 0] = 2 + _t6 * F + h, p[3 * y + 1] = 2 + A * F + h, p[3 * y + 2] = v, y++;
      }

      Object.assign(n, {
        position: {
          size: 3,
          data: c
        },
        normal: {
          size: 3,
          data: d
        },
        uv: {
          size: 2,
          data: g
        },
        index: {
          data: p
        }
      }), _this16 = _super12.call(this, t, n);
      return _this16;
    }

    return _class3;
  }(g), t.Euler = B, t.Flowmap = /*#__PURE__*/function () {
    function _class4(t) {
      var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref17$size = _ref17.size,
          e = _ref17$size === void 0 ? 512 : _ref17$size,
          _ref17$falloff = _ref17.falloff,
          i = _ref17$falloff === void 0 ? .3 : _ref17$falloff,
          _ref17$alpha = _ref17.alpha,
          r = _ref17$alpha === void 0 ? 1 : _ref17$alpha,
          _ref17$dissipation = _ref17.dissipation,
          s = _ref17$dissipation === void 0 ? .96 : _ref17$dissipation;

      _classCallCheck(this, _class4);

      var n = this;
      this.gl = t, this.uniform = {
        value: null
      }, this.mask = {
        read: null,
        write: null,
        swap: function swap() {
          var t = n.mask.read;
          n.mask.read = n.mask.write, n.mask.write = t, n.uniform.value = n.mask.read.texture;
        }
      }, function () {
        var i = t.renderer.extensions["OES_texture_".concat(t.renderer.isWebgl2 ? "" : "half_", "float_linear")];
        var r = {
          width: e,
          height: e,
          type: t.renderer.isWebgl2 ? t.HALF_FLOAT : t.renderer.extensions.OES_texture_half_float ? t.renderer.extensions.OES_texture_half_float.HALF_FLOAT_OES : t.UNSIGNED_BYTE,
          format: t.RGBA,
          internalFormat: t.renderer.isWebgl2 ? t.RGBA16F : t.RGBA,
          minFilter: i ? t.LINEAR : t.NEAREST,
          depth: !1
        };
        n.mask.read = new j(t, r), n.mask.write = new j(t, r), n.mask.swap();
      }(), this.aspect = 1, this.mouse = new J(), this.velocity = new J(), this.mesh = new Y(t, {
        geometry: new g(t, {
          position: {
            size: 2,
            data: new Float32Array([-1, -1, 3, -1, -1, 3])
          },
          uv: {
            size: 2,
            data: new Float32Array([0, 0, 2, 0, 0, 2])
          }
        }),
        program: new f(t, {
          vertex: vt,
          fragment: At,
          uniforms: {
            tMap: n.uniform,
            uFalloff: {
              value: .5 * i
            },
            uAlpha: {
              value: r
            },
            uDissipation: {
              value: s
            },
            uAspect: {
              value: 1
            },
            uMouse: {
              value: n.mouse
            },
            uVelocity: {
              value: n.velocity
            }
          },
          depthTest: !1
        })
      });
    }

    _createClass(_class4, [{
      key: "update",
      value: function update() {
        this.mesh.program.uniforms.uAspect.value = this.aspect, this.gl.renderer.render({
          scene: this.mesh,
          target: this.mask.write,
          clear: !1
        }), this.mask.swap();
      }
    }]);

    return _class4;
  }(), t.GPGPU = /*#__PURE__*/function () {
    function _class5(t, _ref18) {
      var _this17 = this;

      var _ref18$data = _ref18.data,
          e = _ref18$data === void 0 ? new Float32Array(16) : _ref18$data,
          _ref18$geometry = _ref18.geometry,
          i = _ref18$geometry === void 0 ? new g(t, {
        position: {
          size: 2,
          data: new Float32Array([-1, -1, 3, -1, -1, 3])
        },
        uv: {
          size: 2,
          data: new Float32Array([0, 0, 2, 0, 0, 2])
        }
      }) : _ref18$geometry;

      _classCallCheck(this, _class5);

      this.gl = t;
      var r = e;
      this.passes = [], this.geometry = i, this.dataLength = r.length / 4, this.size = Math.pow(2, Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength))) / Math.LN2)), this.coords = new Float32Array(2 * this.dataLength);

      for (var _t7 = 0; _t7 < this.dataLength; _t7++) {
        var _e6 = _t7 % this.size / this.size,
            _i7 = Math.floor(_t7 / this.size) / this.size;

        this.coords.set([_e6, _i7], 2 * _t7);
      }

      var s = function () {
        if (r.length === _this17.size * _this17.size * 4) return r;
        {
          var _t8 = new Float32Array(_this17.size * _this17.size * 4);

          return _t8.set(r), _t8;
        }
      }();

      this.uniform = {
        value: new W(t, {
          image: s,
          target: t.TEXTURE_2D,
          type: t.FLOAT,
          format: t.RGBA,
          internalFormat: t.renderer.isWebgl2 ? t.RGBA32F : t.RGBA,
          wrapS: t.CLAMP_TO_EDGE,
          wrapT: t.CLAMP_TO_EDGE,
          generateMipmaps: !1,
          minFilter: t.NEAREST,
          magFilter: t.NEAREST,
          width: this.size,
          flipY: !1
        })
      };
      var n = {
        width: this.size,
        height: this.size,
        type: t.renderer.isWebgl2 ? t.HALF_FLOAT : t.renderer.extensions.OES_texture_half_float ? t.renderer.extensions.OES_texture_half_float.HALF_FLOAT_OES : t.UNSIGNED_BYTE,
        format: t.RGBA,
        internalFormat: t.renderer.isWebgl2 ? t.RGBA16F : t.RGBA,
        minFilter: t.NEAREST,
        depth: !1,
        unpackAlignment: 1
      };
      this.fbo = {
        read: new j(t, n),
        write: new j(t, n),
        swap: function swap() {
          var t = _this17.fbo.read;
          _this17.fbo.read = _this17.fbo.write, _this17.fbo.write = t, _this17.uniform.value = _this17.fbo.read.texture;
        }
      };
    }

    _createClass(_class5, [{
      key: "addPass",
      value: function addPass() {
        var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref19$vertex = _ref19.vertex,
            t = _ref19$vertex === void 0 ? Et : _ref19$vertex,
            _ref19$fragment = _ref19.fragment,
            e = _ref19$fragment === void 0 ? yt : _ref19$fragment,
            _ref19$uniforms = _ref19.uniforms,
            i = _ref19$uniforms === void 0 ? {} : _ref19$uniforms,
            _ref19$textureUniform = _ref19.textureUniform,
            r = _ref19$textureUniform === void 0 ? "tMap" : _ref19$textureUniform,
            _ref19$enabled = _ref19.enabled,
            s = _ref19$enabled === void 0 ? !0 : _ref19$enabled;

        i[r] = this.uniform;
        var n = new f(this.gl, {
          vertex: t,
          fragment: e,
          uniforms: i
        }),
            a = {
          mesh: new Y(this.gl, {
            geometry: this.geometry,
            program: n
          }),
          program: n,
          uniforms: i,
          enabled: s,
          textureUniform: r
        };
        return this.passes.push(a), a;
      }
    }, {
      key: "render",
      value: function render() {
        var _this18 = this;

        this.passes.filter(function (t) {
          return t.enabled;
        }).forEach(function (t, e) {
          _this18.gl.renderer.render({
            scene: t.mesh,
            target: _this18.fbo.write,
            clear: !1
          }), _this18.fbo.swap();
        });
      }
    }]);

    return _class5;
  }(), t.Geometry = g, t.Mat3 = q, t.Mat4 = P, t.Mesh = Y, t.NormalProgram = function (t) {
    return new f(t, {
      vertex: bt,
      fragment: Mt
    });
  }, t.Orbit = function (t) {
    var _this19 = this;

    var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref20$element = _ref20.element,
        e = _ref20$element === void 0 ? document : _ref20$element,
        _ref20$enabled = _ref20.enabled,
        i = _ref20$enabled === void 0 ? !0 : _ref20$enabled,
        _ref20$target = _ref20.target,
        r = _ref20$target === void 0 ? new l() : _ref20$target,
        _ref20$ease = _ref20.ease,
        s = _ref20$ease === void 0 ? .25 : _ref20$ease,
        _ref20$inertia = _ref20.inertia,
        n = _ref20$inertia === void 0 ? .85 : _ref20$inertia,
        _ref20$enableRotate = _ref20.enableRotate,
        a = _ref20$enableRotate === void 0 ? !0 : _ref20$enableRotate,
        _ref20$rotateSpeed = _ref20.rotateSpeed,
        h = _ref20$rotateSpeed === void 0 ? .1 : _ref20$rotateSpeed,
        _ref20$enableZoom = _ref20.enableZoom,
        o = _ref20$enableZoom === void 0 ? !0 : _ref20$enableZoom,
        _ref20$zoomSpeed = _ref20.zoomSpeed,
        u = _ref20$zoomSpeed === void 0 ? 1 : _ref20$zoomSpeed,
        _ref20$enablePan = _ref20.enablePan,
        c = _ref20$enablePan === void 0 ? !0 : _ref20$enablePan,
        _ref20$panSpeed = _ref20.panSpeed,
        d = _ref20$panSpeed === void 0 ? .1 : _ref20$panSpeed,
        _ref20$minPolarAngle = _ref20.minPolarAngle,
        g = _ref20$minPolarAngle === void 0 ? 0 : _ref20$minPolarAngle,
        _ref20$maxPolarAngle = _ref20.maxPolarAngle,
        p = _ref20$maxPolarAngle === void 0 ? Math.PI : _ref20$maxPolarAngle,
        _ref20$minAzimuthAngl = _ref20.minAzimuthAngle,
        m = _ref20$minAzimuthAngl === void 0 ? -1 / 0 : _ref20$minAzimuthAngl,
        _ref20$maxAzimuthAngl = _ref20.maxAzimuthAngle,
        f = _ref20$maxAzimuthAngl === void 0 ? 1 / 0 : _ref20$maxAzimuthAngl,
        _ref20$minDistance = _ref20.minDistance,
        x = _ref20$minDistance === void 0 ? 0 : _ref20$minDistance,
        _ref20$maxDistance = _ref20.maxDistance,
        w = _ref20$maxDistance === void 0 ? 1 / 0 : _ref20$maxDistance;

    this.enabled = i, this.target = r, s = s || 1, n = n || 1, this.minDistance = x, this.maxDistance = w;
    var b = {
      radius: 1,
      phi: 0,
      theta: 0
    },
        M = {
      radius: 1,
      phi: 0,
      theta: 0
    },
        v = {
      radius: 1,
      phi: 0,
      theta: 0
    },
        A = new l(),
        E = new l();
    E.copy(t.position).sub(this.target), v.radius = M.radius = E.distance(), v.theta = M.theta = Math.atan2(E.x, E.z), v.phi = M.phi = Math.acos(Math.min(Math.max(E.y / M.radius, -1), 1)), this.update = function () {
      M.radius *= b.radius, M.theta += b.theta, M.phi += b.phi, M.theta = Math.max(m, Math.min(f, M.theta)), M.phi = Math.max(g, Math.min(p, M.phi)), M.radius = Math.max(_this19.minDistance, Math.min(_this19.maxDistance, M.radius)), v.phi += (M.phi - v.phi) * s, v.theta += (M.theta - v.theta) * s, v.radius += (M.radius - v.radius) * s, _this19.target.add(A);
      var e = v.radius * Math.sin(Math.max(1e-6, v.phi));
      E.x = e * Math.sin(v.theta), E.y = v.radius * Math.cos(v.phi), E.z = e * Math.cos(v.theta), t.position.copy(_this19.target).add(E), t.lookAt(_this19.target), b.theta *= n, b.phi *= n, A.multiply(n), b.radius = 1;
    };
    var y = new J(),
        F = new J(),
        T = new J();
    var _ = et.NONE;

    function R() {
      return Math.pow(.95, u);
    }

    this.mouseButtons = {
      ORBIT: 0,
      ZOOM: 1,
      PAN: 2
    };

    var S = function S(i, r) {
      var s = e === document ? document.body : e;
      it.copy(t.position).sub(_this19.target);
      var n = it.distance();
      (function (t, e) {
        it.set(e[0], e[1], e[2]), it.multiply(-t), A.add(it);
      })(2 * i * (n *= Math.tan((t.fov || 45) / 2 * Math.PI / 180)) / s.clientHeight, t.matrix), function (t, e) {
        it.set(e[4], e[5], e[6]), it.multiply(t), A.add(it);
      }(2 * r * n / s.clientHeight, t.matrix);
    };

    function N(t) {
      b.radius /= t;
    }

    function L(t, i) {
      rt.set(t, i), st.sub(rt, y).multiply(h);
      var r = e === document ? document.body : e;
      b.theta -= 2 * Math.PI * st.x / r.clientHeight, b.phi -= 2 * Math.PI * st.y / r.clientHeight, y.copy(rt);
    }

    function P(t, e) {
      rt.set(t, e), st.sub(rt, F).multiply(d), S(st.x, st.y), F.copy(rt);
    }

    var O = function O(t) {
      if (_this19.enabled) {
        switch (t.button) {
          case _this19.mouseButtons.ORBIT:
            if (!1 === a) return;
            y.set(t.clientX, t.clientY), _ = et.ROTATE;
            break;

          case _this19.mouseButtons.ZOOM:
            if (!1 === o) return;
            T.set(t.clientX, t.clientY), _ = et.DOLLY;
            break;

          case _this19.mouseButtons.PAN:
            if (!1 === c) return;
            F.set(t.clientX, t.clientY), _ = et.PAN;
        }

        _ !== et.NONE && (window.addEventListener("mousemove", B, !1), window.addEventListener("mouseup", C, !1));
      }
    },
        B = function B(t) {
      if (_this19.enabled) switch (_) {
        case et.ROTATE:
          if (!1 === a) return;
          L(t.clientX, t.clientY);
          break;

        case et.DOLLY:
          if (!1 === o) return;
          !function (t) {
            rt.set(t.clientX, t.clientY), st.sub(rt, T), st.y > 0 ? N(R()) : st.y < 0 && N(1 / R()), T.copy(rt);
          }(t);
          break;

        case et.PAN:
          if (!1 === c) return;
          P(t.clientX, t.clientY);
      }
    },
        C = function C() {
      _this19.enabled && (document.removeEventListener("mousemove", B, !1), document.removeEventListener("mouseup", C, !1), _ = et.NONE);
    },
        D = function D(t) {
      _this19.enabled && o && (_ === et.NONE || _ === et.ROTATE) && (t.stopPropagation(), t.deltaY < 0 ? N(1 / R()) : t.deltaY > 0 && N(R()));
    },
        U = function U(t) {
      if (_this19.enabled) switch (t.preventDefault(), t.touches.length) {
        case 1:
          if (!1 === a) return;
          y.set(t.touches[0].pageX, t.touches[0].pageY), _ = et.ROTATE;
          break;

        case 2:
          if (!1 === o && !1 === c) return;
          !function (t) {
            if (o) {
              var _e7 = t.touches[0].pageX - t.touches[1].pageX,
                  _i8 = t.touches[0].pageY - t.touches[1].pageY,
                  _r12 = Math.sqrt(_e7 * _e7 + _i8 * _i8);

              T.set(0, _r12);
            }

            if (c) {
              var _e8 = .5 * (t.touches[0].pageX + t.touches[1].pageX),
                  _i9 = .5 * (t.touches[0].pageY + t.touches[1].pageY);

              F.set(_e8, _i9);
            }
          }(t), _ = et.DOLLY_PAN;
          break;

        default:
          _ = et.NONE;
      }
    },
        z = function z(t) {
      if (_this19.enabled) switch (t.preventDefault(), t.stopPropagation(), t.touches.length) {
        case 1:
          if (!1 === a) return;
          L(t.touches[0].pageX, t.touches[0].pageY);
          break;

        case 2:
          if (!1 === o && !1 === c) return;
          !function (t) {
            if (o) {
              var _e9 = t.touches[0].pageX - t.touches[1].pageX,
                  _i10 = t.touches[0].pageY - t.touches[1].pageY,
                  _r13 = Math.sqrt(_e9 * _e9 + _i10 * _i10);

              rt.set(0, _r13), st.set(0, Math.pow(rt.y / T.y, u)), N(st.y), T.copy(rt);
            }

            c && P(.5 * (t.touches[0].pageX + t.touches[1].pageX), .5 * (t.touches[0].pageY + t.touches[1].pageY));
          }(t);
          break;

        default:
          _ = et.NONE;
      }
    },
        I = function I() {
      _this19.enabled && (_ = et.NONE);
    },
        q = function q(t) {
      _this19.enabled && t.preventDefault();
    };

    this.remove = function () {
      e.removeEventListener("contextmenu", q, !1), e.removeEventListener("mousedown", O, !1), window.removeEventListener("wheel", D, !1), e.removeEventListener("touchstart", U, !1), e.removeEventListener("touchend", I, !1), e.removeEventListener("touchmove", z, !1), window.removeEventListener("mousemove", B, !1), window.removeEventListener("mouseup", C, !1);
    }, e.addEventListener("contextmenu", q, !1), e.addEventListener("mousedown", O, !1), window.addEventListener("wheel", D, !1), e.addEventListener("touchstart", U, {
      passive: !1
    }), e.addEventListener("touchend", I, !1), e.addEventListener("touchmove", z, {
      passive: !1
    });
  }, t.Plane = tt, t.Post = /*#__PURE__*/function () {
    function _class6(t) {
      var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          e = _ref21.width,
          i = _ref21.height,
          r = _ref21.dpr,
          _ref21$wrapS = _ref21.wrapS,
          s = _ref21$wrapS === void 0 ? t.CLAMP_TO_EDGE : _ref21$wrapS,
          _ref21$wrapT = _ref21.wrapT,
          n = _ref21$wrapT === void 0 ? t.CLAMP_TO_EDGE : _ref21$wrapT,
          _ref21$minFilter = _ref21.minFilter,
          a = _ref21$minFilter === void 0 ? t.LINEAR : _ref21$minFilter,
          _ref21$magFilter = _ref21.magFilter,
          h = _ref21$magFilter === void 0 ? t.LINEAR : _ref21$magFilter,
          _ref21$geometry = _ref21.geometry,
          o = _ref21$geometry === void 0 ? new g(t, {
        position: {
          size: 2,
          data: new Float32Array([-1, -1, 3, -1, -1, 3])
        },
        uv: {
          size: 2,
          data: new Float32Array([0, 0, 2, 0, 0, 2])
        }
      }) : _ref21$geometry;

      _classCallCheck(this, _class6);

      this.gl = t, this.options = {
        wrapS: s,
        wrapT: n,
        minFilter: a,
        magFilter: h
      }, this.passes = [], this.geometry = o;
      var l = this.fbo = {
        read: null,
        write: null,
        swap: function swap() {
          var t = l.read;
          l.read = l.write, l.write = t;
        }
      };
      this.resize({
        width: e,
        height: i,
        dpr: r
      });
    }

    _createClass(_class6, [{
      key: "addPass",
      value: function addPass() {
        var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref22$vertex = _ref22.vertex,
            t = _ref22$vertex === void 0 ? lt : _ref22$vertex,
            _ref22$fragment = _ref22.fragment,
            e = _ref22$fragment === void 0 ? ut : _ref22$fragment,
            _ref22$uniforms = _ref22.uniforms,
            i = _ref22$uniforms === void 0 ? {} : _ref22$uniforms,
            _ref22$textureUniform = _ref22.textureUniform,
            r = _ref22$textureUniform === void 0 ? "tMap" : _ref22$textureUniform,
            _ref22$enabled = _ref22.enabled,
            s = _ref22$enabled === void 0 ? !0 : _ref22$enabled;

        i[r] = {
          value: this.fbo.read.texture
        };
        var n = new f(this.gl, {
          vertex: t,
          fragment: e,
          uniforms: i
        }),
            a = {
          mesh: new Y(this.gl, {
            geometry: this.geometry,
            program: n
          }),
          program: n,
          uniforms: i,
          enabled: s,
          textureUniform: r
        };
        return this.passes.push(a), a;
      }
    }, {
      key: "resize",
      value: function resize() {
        var _ref23 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            t = _ref23.width,
            e = _ref23.height,
            i = _ref23.dpr;

        i && (this.dpr = i), t && (this.width = t, this.height = e || t), i = this.dpr || this.gl.renderer.dpr, t = (this.width || this.gl.renderer.width) * i, e = (this.height || this.gl.renderer.height) * i, this.options.width = t, this.options.height = e, this.fbo.read = new j(this.gl, this.options), this.fbo.write = new j(this.gl, this.options);
      }
    }, {
      key: "render",
      value: function render(_ref24) {
        var _this20 = this;

        var t = _ref24.scene,
            e = _ref24.camera,
            _ref24$target = _ref24.target,
            i = _ref24$target === void 0 ? null : _ref24$target,
            _ref24$update = _ref24.update,
            r = _ref24$update === void 0 ? !0 : _ref24$update,
            _ref24$sort = _ref24.sort,
            s = _ref24$sort === void 0 ? !0 : _ref24$sort,
            _ref24$frustumCull = _ref24.frustumCull,
            n = _ref24$frustumCull === void 0 ? !0 : _ref24$frustumCull;
        var a = this.passes.filter(function (t) {
          return t.enabled;
        });
        this.gl.renderer.render({
          scene: t,
          camera: e,
          target: a.length ? this.fbo.write : i,
          update: r,
          sort: s,
          frustumCull: n
        }), this.fbo.swap(), a.forEach(function (t, e) {
          t.mesh.program.uniforms[t.textureUniform].value = _this20.fbo.read.texture, _this20.gl.renderer.render({
            scene: t.mesh,
            target: e === a.length - 1 ? i : _this20.fbo.write,
            clear: !1
          }), _this20.fbo.swap();
        });
      }
    }]);

    return _class6;
  }(), t.Program = f, t.Quat = N, t.Raycast = /*#__PURE__*/function () {
    function _class7(t) {
      _classCallCheck(this, _class7);

      this.gl = t, this.origin = new l(), this.direction = new l();
    }

    _createClass(_class7, [{
      key: "castMouse",
      value: function castMouse(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];
        t.worldMatrix.getTranslation(this.origin), this.direction.set(e[0], e[1], .5), t.unproject(this.direction), this.direction.sub(this.origin).normalize();
      }
    }, {
      key: "intersectBounds",
      value: function intersectBounds(t) {
        var _this21 = this;

        Array.isArray(t) || (t = [t]);
        var e = ot,
            i = nt,
            r = at,
            s = [];
        return t.forEach(function (t) {
          t.geometry.bounds || t.geometry.computeBoundingBox(), "sphere" === t.geometry.raycast && t.geometry.bounds === 1 / 0 && t.geometry.computeBoundingSphere(), e.inverse(t.worldMatrix), i.copy(_this21.origin).applyMatrix4(e), r.copy(_this21.direction).transformDirection(e);
          var n = 0;
          (n = "sphere" === t.geometry.raycast ? _this21.intersectSphere(t.geometry.bounds, i, r) : _this21.intersectBox(t.geometry.bounds, i, r)) && (t.hit || (t.hit = {
            localPoint: new l()
          }), t.hit.distance = n, t.hit.localPoint.copy(r).multiply(n).add(i), s.push(t));
        }), s.sort(function (t, e) {
          return t.hit.distance - e.hit.distance;
        }), s;
      }
    }, {
      key: "intersectSphere",
      value: function intersectSphere(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.origin;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;
        var r = ht;
        r.sub(t.center, e);
        var s = r.dot(i),
            n = r.dot(r) - s * s,
            a = t.radius * t.radius;
        if (n > a) return 0;
        var h = Math.sqrt(a - n),
            o = s - h,
            l = s + h;
        return o < 0 && l < 0 ? 0 : o < 0 ? l : o;
      }
    }, {
      key: "intersectBox",
      value: function intersectBox(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.origin;
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;
        var r, s, n, a, h, o;
        var l = 1 / i.x,
            u = 1 / i.y,
            c = 1 / i.z,
            d = t.min,
            g = t.max;
        return r = ((l >= 0 ? d.x : g.x) - e.x) * l, s = ((l >= 0 ? g.x : d.x) - e.x) * l, n = ((u >= 0 ? d.y : g.y) - e.y) * u, r > (a = ((u >= 0 ? g.y : d.y) - e.y) * u) || n > s ? 0 : (n > r && (r = n), a < s && (s = a), h = ((c >= 0 ? d.z : g.z) - e.z) * c, r > (o = ((c >= 0 ? g.z : d.z) - e.z) * c) || h > s ? 0 : (h > r && (r = h), o < s && (s = o), s < 0 ? 0 : r >= 0 ? r : s));
      }
    }]);

    return _class7;
  }(), t.RenderTarget = j, t.Renderer = /*#__PURE__*/function () {
    function _class8() {
      var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref25$canvas = _ref25.canvas,
          t = _ref25$canvas === void 0 ? document.createElement("canvas") : _ref25$canvas,
          _ref25$width = _ref25.width,
          e = _ref25$width === void 0 ? 300 : _ref25$width,
          _ref25$height = _ref25.height,
          i = _ref25$height === void 0 ? 150 : _ref25$height,
          _ref25$dpr = _ref25.dpr,
          r = _ref25$dpr === void 0 ? 1 : _ref25$dpr,
          _ref25$alpha = _ref25.alpha,
          s = _ref25$alpha === void 0 ? !1 : _ref25$alpha,
          _ref25$depth = _ref25.depth,
          n = _ref25$depth === void 0 ? !0 : _ref25$depth,
          _ref25$stencil = _ref25.stencil,
          a = _ref25$stencil === void 0 ? !1 : _ref25$stencil,
          _ref25$antialias = _ref25.antialias,
          h = _ref25$antialias === void 0 ? !1 : _ref25$antialias,
          _ref25$premultipliedA = _ref25.premultipliedAlpha,
          o = _ref25$premultipliedA === void 0 ? !1 : _ref25$premultipliedA,
          _ref25$preserveDrawin = _ref25.preserveDrawingBuffer,
          l = _ref25$preserveDrawin === void 0 ? !1 : _ref25$preserveDrawin,
          _ref25$powerPreferenc = _ref25.powerPreference,
          u = _ref25$powerPreferenc === void 0 ? "default" : _ref25$powerPreferenc,
          _ref25$autoClear = _ref25.autoClear,
          c = _ref25$autoClear === void 0 ? !0 : _ref25$autoClear,
          _ref25$webgl = _ref25.webgl,
          d = _ref25$webgl === void 0 ? 2 : _ref25$webgl;

      _classCallCheck(this, _class8);

      var g = {
        alpha: s,
        depth: n,
        stencil: a,
        antialias: h,
        premultipliedAlpha: o,
        preserveDrawingBuffer: l,
        powerPreference: u
      };
      this.dpr = r, this.alpha = s, this.color = !0, this.depth = n, this.stencil = a, this.premultipliedAlpha = o, this.autoClear = c, 2 === d && (this.gl = t.getContext("webgl2", g)), this.isWebgl2 = !!this.gl, this.gl || (this.gl = t.getContext("webgl", g) || t.getContext("experimental-webgl", g)), this.gl.renderer = this, this.setSize(e, i), this.parameters = {}, this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS), this.state = {}, this.state.blendFunc = {
        src: this.gl.ONE,
        dst: this.gl.ZERO
      }, this.state.blendEquation = {
        modeRGB: this.gl.FUNC_ADD
      }, this.state.cullFace = null, this.state.frontFace = this.gl.CCW, this.state.depthMask = !0, this.state.depthFunc = this.gl.LESS, this.state.premultiplyAlpha = !1, this.state.flipY = !1, this.state.unpackAlignment = 4, this.state.framebuffer = null, this.state.viewport = {
        width: null,
        height: null
      }, this.state.textureUnits = [], this.state.activeTextureUnit = 0, this.state.boundBuffer = null, this.state.uniformLocations = new Map(), this.extensions = {}, this.isWebgl2 ? (this.getExtension("EXT_color_buffer_float"), this.getExtension("OES_texture_float_linear")) : (this.getExtension("OES_texture_float"), this.getExtension("OES_texture_float_linear"), this.getExtension("OES_texture_half_float"), this.getExtension("OES_texture_half_float_linear"), this.getExtension("OES_element_index_uint"), this.getExtension("OES_standard_derivatives"), this.getExtension("EXT_sRGB"), this.getExtension("WEBGL_depth_texture")), this.vertexAttribDivisor = this.getExtension("ANGLE_instanced_arrays", "vertexAttribDivisor", "vertexAttribDivisorANGLE"), this.drawArraysInstanced = this.getExtension("ANGLE_instanced_arrays", "drawArraysInstanced", "drawArraysInstancedANGLE"), this.drawElementsInstanced = this.getExtension("ANGLE_instanced_arrays", "drawElementsInstanced", "drawElementsInstancedANGLE"), this.createVertexArray = this.getExtension("OES_vertex_array_object", "createVertexArray", "createVertexArrayOES"), this.bindVertexArray = this.getExtension("OES_vertex_array_object", "bindVertexArray", "bindVertexArrayOES"), this.deleteVertexArray = this.getExtension("OES_vertex_array_object", "deleteVertexArray", "deleteVertexArrayOES");
    }

    _createClass(_class8, [{
      key: "setSize",
      value: function setSize(t, e) {
        this.width = t, this.height = e, this.gl.canvas.width = t * this.dpr, this.gl.canvas.height = e * this.dpr, Object.assign(this.gl.canvas.style, {
          width: t + "px",
          height: e + "px"
        });
      }
    }, {
      key: "setViewport",
      value: function setViewport(t, e) {
        this.state.viewport.width === t && this.state.viewport.height === e || (this.state.viewport.width = t, this.state.viewport.height = e, this.gl.viewport(0, 0, t, e));
      }
    }, {
      key: "enable",
      value: function enable(t) {
        !0 !== this.state[t] && (this.gl.enable(t), this.state[t] = !0);
      }
    }, {
      key: "disable",
      value: function disable(t) {
        !1 !== this.state[t] && (this.gl.disable(t), this.state[t] = !1);
      }
    }, {
      key: "setBlendFunc",
      value: function setBlendFunc(t, e, i, r) {
        this.state.blendFunc.src === t && this.state.blendFunc.dst === e && this.state.blendFunc.srcAlpha === i && this.state.blendFunc.dstAlpha === r || (this.state.blendFunc.src = t, this.state.blendFunc.dst = e, this.state.blendFunc.srcAlpha = i, this.state.blendFunc.dstAlpha = r, void 0 !== i ? this.gl.blendFuncSeparate(t, e, i, r) : this.gl.blendFunc(t, e));
      }
    }, {
      key: "setBlendEquation",
      value: function setBlendEquation(t, e) {
        this.state.blendEquation.modeRGB === t && this.state.blendEquation.modeAlpha === e || (this.state.blendEquation.modeRGB = t, this.state.blendEquation.modeAlpha = e, void 0 !== e ? this.gl.blendEquationSeparate(t, e) : this.gl.blendEquation(t));
      }
    }, {
      key: "setCullFace",
      value: function setCullFace(t) {
        this.state.cullFace !== t && (this.state.cullFace = t, this.gl.cullFace(t));
      }
    }, {
      key: "setFrontFace",
      value: function setFrontFace(t) {
        this.state.frontFace !== t && (this.state.frontFace = t, this.gl.frontFace(t));
      }
    }, {
      key: "setDepthMask",
      value: function setDepthMask(t) {
        this.state.depthMask !== t && (this.state.depthMask = t, this.gl.depthMask(t));
      }
    }, {
      key: "setDepthFunc",
      value: function setDepthFunc(t) {
        this.state.depthFunc !== t && (this.state.depthFunc = t, this.gl.depthFunc(t));
      }
    }, {
      key: "activeTexture",
      value: function activeTexture(t) {
        this.state.activeTextureUnit !== t && (this.state.activeTextureUnit = t, this.gl.activeTexture(this.gl.TEXTURE0 + t));
      }
    }, {
      key: "bindFramebuffer",
      value: function bindFramebuffer() {
        var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref26$target = _ref26.target,
            t = _ref26$target === void 0 ? this.gl.FRAMEBUFFER : _ref26$target,
            _ref26$buffer = _ref26.buffer,
            e = _ref26$buffer === void 0 ? null : _ref26$buffer;

        this.state.framebuffer !== e && (this.state.framebuffer = e, this.gl.bindFramebuffer(t, e));
      }
    }, {
      key: "getExtension",
      value: function getExtension(t, e, i) {
        return e && this.gl[e] ? this.gl[e].bind(this.gl) : (this.extensions[t] || (this.extensions[t] = this.gl.getExtension(t)), e ? this.extensions[t][i].bind(this.extensions[t]) : this.extensions[t]);
      }
    }, {
      key: "sortOpaque",
      value: function sortOpaque(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program.id !== e.program.id ? t.program.id - e.program.id : t.zDepth !== e.zDepth ? t.zDepth - e.zDepth : e.id - t.id;
      }
    }, {
      key: "sortTransparent",
      value: function sortTransparent(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.zDepth !== e.zDepth ? e.zDepth - t.zDepth : e.id - t.id;
      }
    }, {
      key: "sortUI",
      value: function sortUI(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program.id !== e.program.id ? t.program.id - e.program.id : e.id - t.id;
      }
    }, {
      key: "getRenderList",
      value: function getRenderList(_ref27) {
        var t = _ref27.scene,
            e = _ref27.camera,
            i = _ref27.frustumCull,
            r = _ref27.sort;
        var s = [];

        if (e && i && e.updateFrustum(), t.traverse(function (t) {
          if (!t.visible) return !0;
          t.draw && (i && t.frustumCulled && e && !e.frustumIntersectsMesh(t) || s.push(t));
        }), r) {
          var _t9 = [],
              _i11 = [],
              _r14 = [];
          s.forEach(function (s) {
            s.program.transparent ? s.program.depthTest ? _i11.push(s) : _r14.push(s) : _t9.push(s), s.zDepth = 0, 0 === s.renderOrder && s.program.depthTest && e && (s.worldMatrix.getTranslation(v), v.applyMatrix4(e.projectionViewMatrix), s.zDepth = v.z);
          }), _t9.sort(this.sortOpaque), _i11.sort(this.sortTransparent), _r14.sort(this.sortUI), s = _t9.concat(_i11, _r14);
        }

        return s;
      }
    }, {
      key: "render",
      value: function render(_ref28) {
        var t = _ref28.scene,
            e = _ref28.camera,
            _ref28$target = _ref28.target,
            i = _ref28$target === void 0 ? null : _ref28$target,
            _ref28$update = _ref28.update,
            r = _ref28$update === void 0 ? !0 : _ref28$update,
            _ref28$sort = _ref28.sort,
            s = _ref28$sort === void 0 ? !0 : _ref28$sort,
            _ref28$frustumCull = _ref28.frustumCull,
            n = _ref28$frustumCull === void 0 ? !0 : _ref28$frustumCull,
            a = _ref28.clear;
        null === i ? (this.bindFramebuffer(), this.setViewport(this.width * this.dpr, this.height * this.dpr)) : (this.bindFramebuffer(i), this.setViewport(i.width, i.height)), (a || this.autoClear && !1 !== a) && (!this.depth || i && i.depth || (this.enable(this.gl.DEPTH_TEST), this.setDepthMask(!0)), this.gl.clear((this.color ? this.gl.COLOR_BUFFER_BIT : 0) | (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) | (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0))), r && t.updateMatrixWorld(), e && null === e.parent && e.updateMatrixWorld(), this.getRenderList({
          scene: t,
          camera: e,
          frustumCull: n,
          sort: s
        }).forEach(function (t) {
          t.draw({
            camera: e
          });
        });
      }
    }]);

    return _class8;
  }(), t.Skin = /*#__PURE__*/function (_Y) {
    _inherits(_class9, _Y);

    var _super13 = _createSuper(_class9);

    function _class9(t) {
      var _this22;

      var _ref29 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          e = _ref29.rig,
          i = _ref29.geometry,
          r = _ref29.program,
          _ref29$mode = _ref29.mode,
          s = _ref29$mode === void 0 ? t.TRIANGLES : _ref29$mode;

      _classCallCheck(this, _class9);

      _this22 = _super13.call(this, t, {
        geometry: i,
        program: r,
        mode: s
      }), _this22.createBones(e), _this22.createBoneTexture(), _this22.animations = [], Object.assign(_this22.program.uniforms, {
        boneTexture: {
          value: _this22.boneTexture
        },
        boneTextureSize: {
          value: _this22.boneTextureSize
        }
      });
      return _this22;
    }

    _createClass(_class9, [{
      key: "createBones",
      value: function createBones(t) {
        var _this23 = this;

        if (this.root = new C(), this.bones = [], t.bones && t.bones.length) {
          for (var _e10 = 0; _e10 < t.bones.length; _e10++) {
            var _i12 = new C();

            _i12.position.fromArray(t.bindPose.position, 3 * _e10), _i12.quaternion.fromArray(t.bindPose.quaternion, 4 * _e10), _i12.scale.fromArray(t.bindPose.scale, 3 * _e10), this.bones.push(_i12);
          }

          t.bones.forEach(function (t, e) {
            if (_this23.bones[e].name = t.name, -1 === t.parent) return _this23.bones[e].setParent(_this23.root);

            _this23.bones[e].setParent(_this23.bones[t.parent]);
          }), this.root.updateMatrixWorld(!0), this.bones.forEach(function (t) {
            t.bindInverse = _construct(P, _toConsumableArray(t.worldMatrix)).inverse();
          });
        }
      }
    }, {
      key: "createBoneTexture",
      value: function createBoneTexture() {
        if (!this.bones.length) return;
        var t = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(4 * this.bones.length)) / Math.LN2)));
        this.boneMatrices = new Float32Array(t * t * 4), this.boneTextureSize = t, this.boneTexture = new W(this.gl, {
          image: this.boneMatrices,
          generateMipmaps: !1,
          type: this.gl.FLOAT,
          internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA16F : this.gl.RGBA,
          flipY: !1,
          width: t
        });
      }
    }, {
      key: "addAnimation",
      value: function addAnimation(t) {
        var e = new xt({
          objects: this.bones,
          data: t
        });
        return this.animations.push(e), e;
      }
    }, {
      key: "update",
      value: function update() {
        var t = 0;
        this.animations.forEach(function (e) {
          return t += e.weight;
        }), this.animations.forEach(function (e, i) {
          e.update(t, 0 === i);
        });
      }
    }, {
      key: "draw",
      value: function draw() {
        var _this24 = this;

        var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            t = _ref30.camera;

        this.root.updateMatrixWorld(!0), this.bones.forEach(function (t, e) {
          wt.multiply(t.worldMatrix, t.bindInverse), _this24.boneMatrices.set(wt, 16 * e);
        }), this.boneTexture && (this.boneTexture.needsUpdate = !0), _get(_getPrototypeOf(_class9.prototype), "draw", this).call(this, {
          camera: t
        });
      }
    }]);

    return _class9;
  }(Y), t.Sphere = /*#__PURE__*/function (_g4) {
    _inherits(_class10, _g4);

    var _super14 = _createSuper(_class10);

    function _class10(t) {
      var _this25;

      var _ref31 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref31$radius = _ref31.radius,
          e = _ref31$radius === void 0 ? .5 : _ref31$radius,
          _ref31$widthSegments = _ref31.widthSegments,
          i = _ref31$widthSegments === void 0 ? 16 : _ref31$widthSegments,
          _ref31$heightSegments = _ref31.heightSegments,
          r = _ref31$heightSegments === void 0 ? Math.ceil(.5 * i) : _ref31$heightSegments,
          _ref31$phiStart = _ref31.phiStart,
          s = _ref31$phiStart === void 0 ? 0 : _ref31$phiStart,
          _ref31$phiLength = _ref31.phiLength,
          n = _ref31$phiLength === void 0 ? 2 * Math.PI : _ref31$phiLength,
          _ref31$thetaStart = _ref31.thetaStart,
          a = _ref31$thetaStart === void 0 ? 0 : _ref31$thetaStart,
          _ref31$thetaLength = _ref31.thetaLength,
          h = _ref31$thetaLength === void 0 ? Math.PI : _ref31$thetaLength,
          _ref31$attributes = _ref31.attributes,
          o = _ref31$attributes === void 0 ? {} : _ref31$attributes;

      _classCallCheck(this, _class10);

      var u = i,
          c = r,
          d = s,
          g = n,
          p = a,
          m = h,
          f = (u + 1) * (c + 1),
          x = u * c * 6,
          w = new Float32Array(3 * f),
          b = new Float32Array(3 * f),
          M = new Float32Array(2 * f),
          v = f > 65536 ? new Uint32Array(x) : new Uint16Array(x);
      var A = 0,
          E = 0,
          y = 0,
          F = p + m;
      var T = [];

      var _ = new l();

      for (var _t10 = 0; _t10 <= c; _t10++) {
        var _i13 = [],
            _r15 = _t10 / c;

        for (var _t11 = 0; _t11 <= u; _t11++, A++) {
          var _s5 = _t11 / u,
              _n4 = -e * Math.cos(d + _s5 * g) * Math.sin(p + _r15 * m),
              _a2 = e * Math.cos(p + _r15 * m),
              _h = e * Math.sin(d + _s5 * g) * Math.sin(p + _r15 * m);

          w[3 * A] = _n4, w[3 * A + 1] = _a2, w[3 * A + 2] = _h, _.set(_n4, _a2, _h).normalize(), b[3 * A] = _.x, b[3 * A + 1] = _.y, b[3 * A + 2] = _.z, M[2 * A] = _s5, M[2 * A + 1] = 1 - _r15, _i13.push(E++);
        }

        T.push(_i13);
      }

      for (var _t12 = 0; _t12 < c; _t12++) {
        for (var _e11 = 0; _e11 < u; _e11++) {
          var _i14 = T[_t12][_e11 + 1],
              _r16 = T[_t12][_e11],
              _s6 = T[_t12 + 1][_e11],
              _n5 = T[_t12 + 1][_e11 + 1];
          (0 !== _t12 || p > 0) && (v[3 * y] = _i14, v[3 * y + 1] = _r16, v[3 * y + 2] = _n5, y++), (_t12 !== c - 1 || F < Math.PI) && (v[3 * y] = _r16, v[3 * y + 1] = _s6, v[3 * y + 2] = _n5, y++);
        }
      }

      Object.assign(o, {
        position: {
          size: 3,
          data: w
        },
        normal: {
          size: 3,
          data: b
        },
        uv: {
          size: 2,
          data: M
        },
        index: {
          data: v
        }
      }), _this25 = _super14.call(this, t, o);
      return _this25;
    }

    return _class10;
  }(g), t.Text = function (_ref32) {
    var t = _ref32.font,
        e = _ref32.text,
        _ref32$width = _ref32.width,
        i = _ref32$width === void 0 ? 1 / 0 : _ref32$width,
        _ref32$align = _ref32.align,
        r = _ref32$align === void 0 ? "left" : _ref32$align,
        _ref32$size = _ref32.size,
        s = _ref32$size === void 0 ? 1 : _ref32$size,
        _ref32$letterSpacing = _ref32.letterSpacing,
        n = _ref32$letterSpacing === void 0 ? 0 : _ref32$letterSpacing,
        _ref32$lineHeight = _ref32.lineHeight,
        a = _ref32$lineHeight === void 0 ? 1.4 : _ref32$lineHeight,
        _ref32$wordSpacing = _ref32.wordSpacing,
        h = _ref32$wordSpacing === void 0 ? 0 : _ref32$wordSpacing,
        _ref32$wordBreak = _ref32.wordBreak,
        o = _ref32$wordBreak === void 0 ? !1 : _ref32$wordBreak;
    var l = this;
    var u, c, d, g, p;
    var m = /\n/,
        f = /\s/;

    function x() {
      d = t.common.lineHeight, g = t.common.base, p = s / g;
      var i = e.replace(/[ \n]/g, "").length;
      c = {
        position: new Float32Array(4 * i * 3),
        uv: new Float32Array(4 * i * 2),
        id: new Float32Array(4 * i),
        index: new Uint16Array(6 * i)
      };

      for (var _t13 = 0; _t13 < i; _t13++) {
        c.id[_t13] = _t13, c.index.set([4 * _t13, 4 * _t13 + 2, 4 * _t13 + 1, 4 * _t13 + 1, 4 * _t13 + 2, 4 * _t13 + 3], 6 * _t13);
      }

      w();
    }

    function w() {
      var d = [];
      var g = 0,
          x = 0,
          w = 0,
          M = v();

      function v() {
        var t = {
          width: 0,
          glyphs: []
        };
        return d.push(t), x = g, w = 0, t;
      }

      var A = 0;

      for (; g < e.length && A < 100;) {
        A++;
        var _t14 = e[g];

        if (!M.width && f.test(_t14)) {
          x = ++g, w = 0;
          continue;
        }

        if (m.test(_t14)) {
          g++, M = v();
          continue;
        }

        var _r17 = u[_t14];

        if (M.glyphs.length) {
          var _t15 = M.glyphs[M.glyphs.length - 1][0];

          var _e12 = b(_r17.id, _t15.id) * p;

          M.width += _e12, w += _e12;
        }

        M.glyphs.push([_r17, M.width]);
        var _a3 = 0;

        if (f.test(_t14) ? (x = g, w = 0, _a3 += h * s) : _a3 += n * s, _a3 += _r17.xadvance * p, M.width += _a3, w += _a3, M.width > i) {
          if (o && M.glyphs.length > 1) {
            M.width -= _a3, M.glyphs.pop(), M = v();
            continue;
          }

          if (!o && w !== M.width) {
            var _t16 = g - x + 1;

            M.glyphs.splice(-_t16, _t16), g = x, M.width -= w, M = v();
            continue;
          }
        }

        g++;
      }

      M.width || d.pop(), function (e) {
        var i = t.common.scaleW,
            n = t.common.scaleH;
        var h = .07 * s,
            o = 0;

        for (var _t17 = 0; _t17 < e.length; _t17++) {
          var _l = e[_t17];

          for (var _t18 = 0; _t18 < _l.glyphs.length; _t18++) {
            var _e13 = _l.glyphs[_t18][0];
            var _s7 = _l.glyphs[_t18][1];
            if ("center" === r ? _s7 -= .5 * _l.width : "right" === r && (_s7 -= _l.width), f.test(_e13["char"])) continue;
            _s7 += _e13.xoffset * p, h -= _e13.yoffset * p;

            var _a4 = _e13.width * p,
                _u = _e13.height * p;

            c.position.set([_s7, h - _u, 0, _s7, h, 0, _s7 + _a4, h - _u, 0, _s7 + _a4, h, 0], 4 * o * 3);

            var _d2 = _e13.x / i,
                _g5 = _e13.width / i,
                _m = 1 - _e13.y / n,
                _x = _e13.height / n;

            c.uv.set([_d2, _m - _x, _d2, _m, _d2 + _g5, _m - _x, _d2 + _g5, _m], 4 * o * 2), h += _e13.yoffset * p, o++;
          }

          h -= s * a;
        }

        l.buffers = c, l.numLines = e.length, l.height = l.numLines * s * a;
      }(d);
    }

    function b(e, i) {
      for (var _r18 = 0; _r18 < t.kernings.length; _r18++) {
        var _s8 = t.kernings[_r18];
        if (!(_s8.first < e || _s8.second < i)) return _s8.first > e ? 0 : _s8.first === e && _s8.second > i ? 0 : _s8.amount;
      }

      return 0;
    }

    u = {}, t.chars.forEach(function (t) {
      return u[t["char"]] = t;
    }), x(), this.resize = function (t) {
      var _t19;

      (_t19 = t, i = _t19.width, _t19), w();
    }, this.update = function (t) {
      var _t20;

      (_t20 = t, e = _t20.text, _t20), x();
    };
  }, t.Texture = W, t.Transform = C, t.Vec2 = J, t.Vec3 = l, t.Vec4 = /*#__PURE__*/function (_Array8) {
    _inherits(_class11, _Array8);

    var _super15 = _createSuper(_class11);

    function _class11() {
      var _this26;

      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t;
      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : t;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : t;

      _classCallCheck(this, _class11);

      return _possibleConstructorReturn(_this26, (_this26 = _super15.call(this, t, e, i, r), _assertThisInitialized(_this26)));
    }

    _createClass(_class11, [{
      key: "set",
      value: function set(t, e, i, r) {
        return t.length ? this.copy(t) : (E(this, t, e, i, r), this);
      }
    }, {
      key: "copy",
      value: function copy(t) {
        return A(this, t), this;
      }
    }, {
      key: "normalize",
      value: function normalize() {
        return y(this, this), this;
      }
    }, {
      key: "fromArray",
      value: function fromArray(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return this[0] = t[e], this[1] = t[e + 1], this[2] = t[e + 2], this[3] = t[e + 3], this;
      }
    }, {
      key: "toArray",
      value: function toArray() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return t[e] = this[0], t[e + 1] = this[1], t[e + 2] = this[2], t[e + 3] = this[3], t;
      }
    }, {
      key: "x",
      get: function get() {
        return this[0];
      },
      set: function set(t) {
        this[0] = t;
      }
    }, {
      key: "y",
      get: function get() {
        return this[1];
      },
      set: function set(t) {
        this[1] = t;
      }
    }, {
      key: "z",
      get: function get() {
        return this[2];
      },
      set: function set(t) {
        this[2] = t;
      }
    }, {
      key: "w",
      get: function get() {
        return this[3];
      },
      set: function set(t) {
        this[3] = t;
      }
    }]);

    return _class11;
  }( /*#__PURE__*/_wrapNativeSuper(Array)), t;
}({});

var _default = ogl;
exports["default"] = _default;

},{}],52:[function(require,module,exports){
"use strict";

(function () {
  'use strict';

  var Plot = require('../../../plot-core/src/js/plot'),
      LazyLoad = require('../../../plot-core/src/js/lazyload'),
      Modals = require('../../../plot-core/src/js/modals'),
      Carousels = require('../../../plot-core/src/js/carousels'),
      Smooth = require('../../../plot-core/src/js/plot-smooth-scroll'),
      FAQs = require('../../../plot-core/src/js/faqs'),
      Home = require('./pages/home'),
      RollerText = require('./components/roller-text'),
      RollerText = require('./components/countdown-timer'),
      Pricing = require('./pages/pricing'),
      Artists = require('./pages/artists'),
      Testimonials = require('./components/testimonials'),
      Schedule = require('./pages/schedule'),
      EffectBanner = require('./effect-banner'),
      News = require('./pages/news'),
      // Spotlights 		= require('./pages/spotlights'),
  FixedFiftyFifty = require('./components/fixed-fifty-fifty'),
      Tickers = require('./components/ticker'),
      Main;

  Main = {
    init: function init() {
      Main.initalizeSmooth();
      Plot.init();
      LazyLoad.init();
      Modals.init();
      Carousels.init();
      FAQs.init();
      RollerText.init();
      Main.fireConversionSnippetsIfOnThankYouPage();
      if (Plot.isPage('schedule')) Schedule.init();
      if (Plot.isPage('artists')) Artists.init();
      if (Plot.isPage('pricing')) Pricing.init();
      News.init();
      Main.demoAjaxButton();

      if (typeof window.HubSpotConversations != 'undefined') {
        Main.hubspot();
      } else {
        window.hsConversationsOnReady = [Main.hubspot];
      }

      if (document.querySelector('.JS--testimonials')) Testimonials.init();
    },
    initalizeSmooth: function initalizeSmooth() {
      var hasSmoothScroll = document.body.dataset.plotCustomizerSmoothScroll;
      var smoothSettings = {
        standardScroll: hasSmoothScroll != 'yes'
      };
      Smooth.init(smoothSettings);
    },
    fireConversionSnippetsIfOnThankYouPage: function fireConversionSnippetsIfOnThankYouPage() {
      var urlParams = new URLSearchParams(window.location.search);
      var trackingCode = urlParams.get('code');

      if (gtag && trackingCode) {
        console.log('ping', trackingCode);
        gtag('event', 'conversion', {
          'send_to': 'AW-619032347/' + trackingCode
        });
      }
    },
    formIsSubmitted: function formIsSubmitted() {
      var errVal = document.querySelectorAll('.input-error').length;

      if (errVal === 0) {
        gtag('event', 'conversion', {
          'send_to': 'AW-619032347/y-G1CMOputkBEJvelqcC'
        });
      } else {}
    },
    checkPopUpFormExists: function checkPopUpFormExists() {
      var form = document.querySelector('#hsPopUpForm-73ee3ecf-7f8a-42c6-9dcc-725c7c8661a2');

      if (!form) {
        setTimeout(function () {
          Main.checkPopUpFormExists();
        }, 500);
      } else {
        form.onsubmit = function () {
          console.log('converted');
          Main.formIsSubmitted();
          var img = document.createElement("img");
          img.src = "https://px.ads.linkedin.com/collect/?pid=2354756&conversionId=2706796&fmt=gif";
          document.body.appendChild(img);
        };
      }
    },
    hubspot: function hubspot() {
      Main.checkPopUpFormExists();
      window.HubSpotConversations.on('conversationStarted', function (payload) {
        if (gtag) {
          gtag('event', 'conversion', {
            'send_to': 'AW-619032347/Y9ujCPyD1dkBEJvelqcC'
          });
        }

        var img = document.createElement("img");
        img.src = "https://px.ads.linkedin.com/collect/?pid=2354756&conversionId=2722716&fmt=gif";
        document.body.appendChild(img);
      });
    },
    demoAjaxButton: function demoAjaxButton() {
      var plotDemoLoadContent = document.querySelector('.JS--plotLoadTemplatePartDemo');
      if (plotDemoLoadContent) plotDemoLoadContent.addEventListener('click', function (e) {
        // Take a look at what you can pass to this function
        // var args = {
        //              templatePart    : null,
        //              action          : 'plotLoadTemplatePart', //This is the action fired into our PlotSite PHP setup.php file
        //              data            : {}, //Any data we'd like to pass to the template part. 
        //              contentArea     : '.JS--ajaxTargetArea', //Where the new content gets inserts
        //              append          : false //If we want to append to the above area, or replace the content
        //          }
        var args = {
          templatePart: 'demos/ajax-content',
          data: {
            'foo': 'bar',
            'bangers': 'mash',
            'having': 'it'
          }
        };
        Plot.loadTemplatePart(args);
      });
    }
  };
  window.Main = Main;
})();

},{"../../../plot-core/src/js/carousels":19,"../../../plot-core/src/js/faqs":20,"../../../plot-core/src/js/lazyload":21,"../../../plot-core/src/js/modals":22,"../../../plot-core/src/js/plot":24,"../../../plot-core/src/js/plot-smooth-scroll":23,"./components/countdown-timer":45,"./components/fixed-fifty-fifty":46,"./components/roller-text":47,"./components/testimonials":48,"./components/ticker":49,"./effect-banner":50,"./pages/artists":53,"./pages/home":54,"./pages/news":55,"./pages/pricing":56,"./pages/schedule":57}],53:[function(require,module,exports){
"use strict";

(function () {
  var Plot = require('../../../../plot-core/src/js/plot'),
      Modals = require('../../../../plot-core/src/js/modals'),
      Artists; //May this object act as a guide to using Plot core functions
  //and how to set up ajax dynamic data with our new principles with ease


  Artists = {
    maxPages: 1,
    currentPage: 1,
    currentArtistType: false,
    loadMoreButton: document.querySelector('.JS--artistsLoadMore'),
    init: function init() {
      Artists.showOrHideLoadMoreButton();
      Artists.createListeners();
    },
    createListeners: function createListeners() {
      Artists.loadMoreButton.addEventListener('click', function (e) {
        var nextPage = parseInt(Artists.loadMoreButton.dataset.nextPage);
        Artists.currentPage = nextPage;
        Artists.loadArtists(true);
        Artists.loadMoreButton.dataset.nextPage = nextPage + 1;
      });
      document.addEventListener('click', function (e) {
        //Have we clicked on an artist type filter button?
        if (e.target.closest('.JS--artistTypeButton')) {
          Artists.currentArtistType = e.target.dataset.artistTypeId;
          Artists.currentPage = 1;
          Artists.loadMoreButton.dataset.nextPage = 2;
          Artists.loadArtists(false).then(function () {
            document.querySelectorAll('.JS--artistTypeButton').forEach(function (artistTypeButton) {
              artistTypeButton.classList.remove('selected');
            });
            e.target.classList.add('selected');
          });
        }
      }, false);
    },
    loadArtists: function loadArtists(append) {
      var args = {
        templatePart: 'parts/artist-listing',
        data: {
          'page': Artists.currentPage,
          'artistType': Artists.currentArtistType
        },
        append: append
      };
      return Plot.loadTemplatePart(args).then(function (html) {
        Artists.showOrHideLoadMoreButton();
        return true;
      });
    },
    showOrHideLoadMoreButton: function showOrHideLoadMoreButton() {
      //Check if max pages is 1. If it is, there's only 1 page of artists
      //so we can hide load more button
      Artists.maxPages = document.querySelector('.JS--maxPages').dataset.maxPages;
      if (Artists.maxPages > Artists.currentPage) Artists.loadMoreButton.classList.remove('hidden');else Artists.loadMoreButton.classList.add('hidden');
    }
  };
  module.exports = Artists;
})();

},{"../../../../plot-core/src/js/modals":22,"../../../../plot-core/src/js/plot":24}],54:[function(require,module,exports){
"use strict";

(function () {
  var Home;
  Home = {
    dom: {
      body: document.body,
      root: document.querySelector('html'),
      phone: document.querySelector('.mobile3D__phone'),
      homeBanner: document.querySelector('.homeBanner'),
      header: document.querySelector('#siteMainHeader')
    },
    previousTheme: 'home',
    counter: null,
    ticker: false,
    currentMousePosition: {
      X: window.innerWidth / 2,
      Y: window.innerHeight / 2
    },
    previousMousePosition: {
      X: window.innerWidth / 2,
      Y: window.innerHeight / 2
    },
    mouseMoveAnimationFrame: null,
    currentSlide: 0,
    themes: ['brockwell', 'mightyhoopla', 'africaoye', 'southfacing'],
    init: function init() {
      Home.createListeners();
      Home.startThemeCounter();
      Home.setWidthOfPhone();
    },
    createListeners: function createListeners() {
      var homeBanner = document.querySelector('.homeBanner'); // Observe the homebanner section for class changes

      var observer = new MutationObserver(Home.bannerMutation);
      observer.observe(homeBanner, {
        attributes: true
      });
      var burgerMenuTriggers = document.querySelector('.JS--menuTrigger'); // Toggle banner animation when menu opened/closed

      burgerMenuTriggers.addEventListener('click', Home.toggleThemeCounter);
      window.addEventListener('resize', Home.setWidthOfPhone);

      if (window.innerWidth < 640) {
        Home.dom.body.classList.add('smallScreen');
      } else {
        Home.mouseMoveAnimationFrame = requestAnimationFrame(Home.runMouseMove);
        Home.dom.homeBanner.addEventListener('mousemove', function (e) {
          return Home.trackCursorPosition(e);
        });
      }
    },
    setWidthOfPhone: function setWidthOfPhone() {
      Home.dom.phone.style.width = Home.dom.phone.getBoundingClientRect().height * .55 + 'px';
      Home.dom.phone.style.opacity = 1;
    },
    bannerMutation: function bannerMutation(mutationsList, observer) {
      // If the banner element is in view
      if (mutationsList[0].target.classList.contains('plotSmoothScrollFrameInView') && !Home.bannerInView) {
        Home.bannerInView = true;
        Home.startThemeCounter();
      }

      if (!mutationsList[0].target.classList.contains('plotSmoothScrollFrameInView') && Home.bannerInView) {
        Home.bannerInView = false;
        Home.stopThemeCounter();
      }
    },
    trackCursorPosition: function trackCursorPosition(e) {
      Home.currentMousePosition = {
        X: e.clientX,
        Y: e.clientY
      };
      var middlePointX = window.innerWidth / 2;
      var middlePointY = window.innerHeight / 2;
      if (Home.currentMousePosition.X - 2000 > middlePointX) Home.currentMousePosition.X = middlePointX + 2000;
      if (Home.currentMousePosition.X + 2000 < middlePointX) Home.currentMousePosition.X = middlePointX - 2000;
      if (Home.currentMousePosition.Y - 2000 > middlePointY) Home.currentMousePosition.Y = middlePointY + 2000;
      if (Home.currentMousePosition.Y + 2000 < middlePointY) Home.currentMousePosition.Y = middlePointY - 2000;

      if (Home.ticker == false) {
        Home.ticker = true;
        Home.mouseMoveAnimationFrame = requestAnimationFrame(Home.runMouseMove);
      }
    },
    startThemeCounter: function startThemeCounter() {
      Home.bannerInView = true; // Set header to default style

      if (Home.dom.header.classList.contains('defaultHeader')) Home.dom.header.classList.remove('defaultHeader');
      Home.timer(4000);
    },
    timer: function timer(time) {
      Home.counter = setTimeout(function () {
        // Update mobile screen image
        Home.dom.body.dataset.currentTheme = Home.themes[Home.currentSlide];
        Home.dom.body.dataset.previousTheme = Home.previousTheme; // Update state

        Home.previousTheme = Home.themes[Home.currentSlide];
        Home.dom.body.classList.add('slideMobileScreen');
        setTimeout(function () {
          Home.dom.body.classList.remove('slideMobileScreen');
        }, 2000); // If we reach the end of the themes, reset to first theme

        Home.currentSlide >= Home.themes.length - 1 ? Home.currentSlide = 0 : Home.currentSlide++;
        Home.timer(4000);
      }, time);
    },
    stopThemeCounter: function stopThemeCounter() {
      if (Home.counter) clearInterval(Home.counter);
    },
    removeTheme: function removeTheme() {
      if (Home.previousTheme) Home.dom.body.classList.remove(Home.previousTheme); // Set header to default style

      Home.dom.header.classList.add('defaultHeader');
    },
    toggleThemeCounter: function toggleThemeCounter() {
      // Cancel animation if menu is open
      if (Home.dom.root.classList.contains('burgerOpen')) {
        Home.stopThemeCounter();
        Home.removeTheme(); // Start animation if menu is closed and banner is in view    
      } else if (Home.bannerInView) {
        Home.startThemeCounter();
      }
    },
    runMouseMove: function runMouseMove() {
      var differenceOfPositions = {
        Y: Home.currentMousePosition.Y - Home.previousMousePosition.Y,
        X: Home.currentMousePosition.X - Home.previousMousePosition.X
      };
      Home.previousMousePosition = {
        X: Home.previousMousePosition.X + differenceOfPositions.X * 0.1,
        Y: Home.previousMousePosition.Y + differenceOfPositions.Y * 0.1
      };
      var xShift = (Home.previousMousePosition.X - window.innerWidth / 2) / (window.innerWidth / 2);
      var yShift = (window.innerHeight / 2 - Home.previousMousePosition.Y) / (window.innerHeight / 2);
      Home.dom.phone.style.transform = "rotateX(".concat(15 + yShift * 7, "deg) rotateY(").concat(xShift * 60 > 50 ? 50 : xShift * 60, "deg)");
      var multiplier = 10;
      if (Math.abs(differenceOfPositions.X + differenceOfPositions.Y) < .1) Home.ticker = false;
      if (Home.ticker == true) Home.mouseMoveAnimationFrame = requestAnimationFrame(Home.runMouseMove);
    }
  };
  module.exports = Home;
})();

},{}],55:[function(require,module,exports){
"use strict";

(function () {
  var Plot = require('../../../../plot-core/src/js/plot'),
      News; //May this object act as a guide to using Plot core functions
  //and how to set up ajax dynamic data with our new principles with ease


  News = {
    maxPages: 1,
    currentNewsCategory: 0,
    currentPage: 1,
    loadMoreButton: document.querySelector('.JS--newsLoadMore'),
    init: function init() {
      if (News.loadMoreButton) {
        News.showOrHideLoadMoreButton();
        News.createListeners();
      }
    },
    createListeners: function createListeners() {
      News.loadMoreButton.addEventListener('click', function (e) {
        var nextPage = parseInt(News.loadMoreButton.dataset.nextPage);
        News.currentPage = nextPage;
        News.loadNews(true);
        News.loadMoreButton.dataset.nextPage = nextPage + 1;
      });
    },
    loadNews: function loadNews(append) {
      var args = {
        templatePart: 'parts/news-listing',
        data: {
          'page': News.currentPage,
          'artistType': News.currentNewsCategory
        },
        append: append
      };
      return Plot.loadTemplatePart(args).then(function (html) {
        News.showOrHideLoadMoreButton();
        return true;
      });
    },
    showOrHideLoadMoreButton: function showOrHideLoadMoreButton() {
      //Check if max pages is 1. If it is, there's only 1 page of News
      //so we can hide load more button
      News.maxPages = document.querySelector('.JS--maxPages').dataset.maxPages;
      console.log(News.maxPages);
      if (News.maxPages > News.currentPage) News.loadMoreButton.classList.remove('hidden');else News.loadMoreButton.classList.add('hidden');
    }
  };
  module.exports = News;
})();

},{"../../../../plot-core/src/js/plot":24}],56:[function(require,module,exports){
"use strict";

(function () {
  var Pricing;
  Pricing = {
    dom: {
      container: document.querySelector('.JS--TogglePrice'),
      annualButton: document.querySelector('.JS--planToggle--annual'),
      monthlyButton: document.querySelector('.JS--planToggle--monthly'),
      currencySymbols: Array.from(document.querySelectorAll('.JS--currency')),
      priceAnnual: document.querySelector('.JS--price--annual'),
      priceMonthly: document.querySelector('.JS--price--monthly'),
      annualTotalPrice: document.querySelector('.JS--annualTotal')
    },
    init: function init() {
      // Update price if user is based in the US
      Pricing.checkUsersCountry(); // Update data set with 

      Pricing.dom.annualButton.addEventListener('click', Pricing.showAnnual);
      Pricing.dom.monthlyButton.addEventListener('click', Pricing.showMonthly);
    },
    showAnnual: function showAnnual() {
      if (Pricing.dom.container.dataset.plan = "annual") return;
      Pricing.dom.container.dataset.plan = "annaul";
    },
    showMonthly: function showMonthly() {
      if (Pricing.dom.container.dataset.plan = "monthly") return;
      Pricing.dom.container.dataset.plan = "monthly";
    },
    checkUsersCountry: function checkUsersCountry() {
      fetch('https://api.ipregistry.co/?key=bp1l88lcp678q96z').then(function (res) {
        return res.json();
      }).then(function (payload) {
        if (payload.location.country.code == 'US') {
          // Switch to dollar
          Pricing.dom.currencySymbols.map(function (symbol) {
            return symbol.textContent = '$';
          });
          Pricing.dom.priceMonthly.textContent = '400';
          Pricing.dom.priceAnnual.textContent = '333';
          Pricing.dom.annualTotalPrice.textContent = '$4000';
        }
      })["catch"](function (err) {
        return console.log(err);
      });
    }
  };
  module.exports = Pricing;
})();

},{}],57:[function(require,module,exports){
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var Schedule;
  Schedule = {
    dayButtons: document.querySelectorAll('.JS--scheduleDayPickerButton'),
    calendars: document.querySelectorAll('.scheduleCalendarWrap'),
    init: function init() {
      Schedule.createListeners();
      Schedule.checkToSeeIfNavArrowsNeeded();
    },
    createListeners: function createListeners() {
      var _iterator = _createForOfIteratorHelper(Schedule.dayButtons),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var dayButton = _step.value;
          dayButton.addEventListener('click', function () {
            Schedule.loadNewDate(this);
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      window.addEventListener('resize', function () {
        Schedule.checkToSeeIfNavArrowsNeeded();
      });

      var _iterator2 = _createForOfIteratorHelper(Schedule.calendars),
          _step2;

      try {
        var _loop = function _loop() {
          calendar = _step2.value;
          var rightButton = calendar.querySelector('.JS--scheduleRight'),
              leftButton = calendar.querySelector('.JS--scheduleLeft'),
              tracks = calendar.querySelector('.scheduleCalendarTracks'),
              tracksW = tracks.offsetWidth;
          rightButton.addEventListener('click', function () {
            tracks.scrollBy({
              left: tracksW / 2,
              behavior: 'smooth'
            });
          });
          leftButton.addEventListener('click', function () {
            tracks.scrollBy({
              left: -tracksW / 2,
              behavior: 'smooth'
            });
          });
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var calendar;

          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    loadNewDate: function loadNewDate(elem) {
      var _iterator3 = _createForOfIteratorHelper(Schedule.dayButtons),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var dB = _step3.value;
          dB.classList.remove('selected');
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      elem.classList.add('selected');
      var day = elem.dataset.scheduleDay;

      var _iterator4 = _createForOfIteratorHelper(Schedule.calendars),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var calendar = _step4.value;
          if (calendar.dataset.scheduleDay == day) calendar.classList.remove('hidden');else calendar.classList.add('hidden');
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      Schedule.checkToSeeIfNavArrowsNeeded();
    },
    checkToSeeIfNavArrowsNeeded: function checkToSeeIfNavArrowsNeeded() {
      var _iterator5 = _createForOfIteratorHelper(Schedule.calendars),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var calendar = _step5.value;

          if (!calendar.classList.contains('hidden')) {
            var tracks = calendar.querySelector('.scheduleCalendarTracks');

            if (tracks.scrollWidth > calendar.scrollWidth) {
              calendar.querySelector('.JS--scheduleLeft').classList.remove('hidden');
              calendar.querySelector('.JS--scheduleRight').classList.remove('hidden');
            } else {
              calendar.querySelector('.JS--scheduleLeft').classList.add('hidden');
              calendar.querySelector('.JS--scheduleRight').classList.add('hidden');
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  };
  module.exports = Schedule;
})();

},{}]},{},[52])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2JvZHktc2Nyb2xsLWxvY2svbGliL2JvZHlTY3JvbGxMb2NrLm1pbi5qcyIsIi4uL3Bsb3QtY29yZS9ub2RlX21vZHVsZXMvZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yLmpzIiwiLi4vcGxvdC1jb3JlL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2Zpenp5LXVpLXV0aWxzL3V0aWxzLmpzIiwiLi4vcGxvdC1jb3JlL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9hZGQtcmVtb3ZlLWNlbGwuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2FuaW1hdGUuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2NlbGwuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2RyYWcuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2ZsaWNraXR5LmpzIiwiLi4vcGxvdC1jb3JlL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9pbmRleC5qcyIsIi4uL3Bsb3QtY29yZS9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvbGF6eWxvYWQuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3BhZ2UtZG90cy5qcyIsIi4uL3Bsb3QtY29yZS9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvcGxheWVyLmpzIiwiLi4vcGxvdC1jb3JlL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9wcmV2LW5leHQtYnV0dG9uLmpzIiwiLi4vcGxvdC1jb3JlL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9zbGlkZS5qcyIsIi4uL3Bsb3QtY29yZS9ub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanMiLCIuLi9wbG90LWNvcmUvbm9kZV9tb2R1bGVzL3VuaWRyYWdnZXIvdW5pZHJhZ2dlci5qcyIsIi4uL3Bsb3QtY29yZS9ub2RlX21vZHVsZXMvdW5pcG9pbnRlci91bmlwb2ludGVyLmpzIiwiLi4vcGxvdC1jb3JlL3NyYy9qcy9jYXJvdXNlbHMuanMiLCIuLi9wbG90LWNvcmUvc3JjL2pzL2ZhcXMuanMiLCIuLi9wbG90LWNvcmUvc3JjL2pzL2xhenlsb2FkLmpzIiwiLi4vcGxvdC1jb3JlL3NyYy9qcy9tb2RhbHMuanMiLCIuLi9wbG90LWNvcmUvc3JjL2pzL3Bsb3Qtc21vb3RoLXNjcm9sbC5qcyIsIi4uL3Bsb3QtY29yZS9zcmMvanMvcGxvdC5qcyIsIi4uL3Bsb3QtY29yZS9zcmMvanMvc3luY3Njcm9sbC5qcyIsIm5vZGVfbW9kdWxlcy9nc2FwL2Rpc3QvU2Nyb2xsVHJpZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9nc2FwL2Rpc3QvZ3NhcC5qcyIsIm5vZGVfbW9kdWxlcy91bmlkcmFnZ2VyL3VuaWRyYWdnZXIuanMiLCJzcmMvanMvY29tcG9uZW50cy9jb3VudGRvd24tdGltZXIuanMiLCJzcmMvanMvY29tcG9uZW50cy9maXhlZC1maWZ0eS1maWZ0eS5qcyIsInNyYy9qcy9jb21wb25lbnRzL3JvbGxlci10ZXh0LmpzIiwic3JjL2pzL2NvbXBvbmVudHMvdGVzdGltb25pYWxzLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvdGlja2VyLmpzIiwic3JjL2pzL2VmZmVjdC1iYW5uZXIuanMiLCJzcmMvanMvbGlicy9vZ2wuanMiLCJzcmMvanMvbWFpbi5qcyIsInNyYy9qcy9wYWdlcy9hcnRpc3RzLmpzIiwic3JjL2pzL3BhZ2VzL2hvbWUuanMiLCJzcmMvanMvcGFnZXMvbmV3cy5qcyIsInNyYy9qcy9wYWdlcy9wcmljaW5nLmpzIiwic3JjL2pzL3BhZ2VzL3NjaGVkdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6WUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2o2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL01BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ptR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdDhLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUFYLEVBQWUsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUExQixFQUE4QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQXpDLEVBQTZDLENBQXBEO0FBQXNEOztBQUFBLFdBQVMsQ0FBVCxDQUFXLENBQVgsRUFBYSxDQUFiLEVBQWUsQ0FBZixFQUFpQjtBQUFDLFdBQU8sQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUFYLEVBQWUsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUExQixFQUE4QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQXpDLEVBQTZDLENBQXBEO0FBQXNEOztBQUFBLFdBQVMsQ0FBVCxDQUFXLENBQVgsRUFBYSxDQUFiLEVBQWUsQ0FBZixFQUFpQjtBQUFDLFdBQU8sQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFWLEVBQVksQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUF0QixFQUF3QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQWxDLEVBQW9DLENBQTNDO0FBQTZDOztBQUFBLFdBQVMsQ0FBVCxDQUFXLENBQVgsRUFBYSxDQUFiLEVBQWU7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFQO0FBQUEsUUFBVyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBZDtBQUFBLFFBQWtCLENB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QUEsY0FBbUUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFELENBQXRFO0FBQUEsY0FBMEUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFELENBQTdFO0FBQUEsY0FBaUYsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFELENBQXBGO0FBQXdGLFVBQUEsQ0FBQyxLQUFHLENBQUosS0FBUSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBTixFQUFVLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUFoQixFQUFvQixDQUFDLENBQUMsRUFBRCxDQUFELEdBQU0sQ0FBQyxDQUFDLEVBQUQsQ0FBM0IsRUFBZ0MsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxFQUFELENBQXZDLEVBQTRDLENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUFuRCxFQUF3RCxDQUFDLENBQUMsRUFBRCxDQUFELEdBQU0sQ0FBQyxDQUFDLEVBQUQsQ0FBL0QsRUFBb0UsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxFQUFELENBQTNFLEVBQWdGLENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUEvRixHQUFxRyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBaEgsRUFBa0gsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsR0FBQyxDQUFGLEdBQUksQ0FBQyxHQUFDLENBQTdILEVBQStILENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLEdBQUMsQ0FBRixHQUFJLENBQUMsR0FBQyxDQUExSSxFQUE0SSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBdkosRUFBeUosQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsR0FBQyxDQUFGLEdBQUksQ0FBQyxHQUFDLENBQXBLLEVB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QUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBekIsRUFBMkIsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBOUMsRUFBZ0QsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBbkUsRUFBcUUsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBeEYsRUFBMEYsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBN0csRUFBK0csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBbEksRUFBb0ksQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBdkosRUFBeUosQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBNUssRUFBOEssQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFLLENBQUMsQ0FBQyxHQUFDLENBQUYsR0FBSSxDQUFDLEdBQUMsQ0FBTixHQUFRLENBQUMsR0FBQyxDQUFYLElBQWMsQ0FBak0sRUFBbU0sQ0FBQyxDQUFDLENBQUQsQ0FB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Q0FBcEMsRUFBd0MsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxDQUFELENBQS9DLEVBQW9ELFFBQXBELEdBQTZELENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUF0TixFQUEyTixLQUFLLE9BQUwsQ0FBYSxDQUFiLEVBQWdCLEdBQWhCLENBQW9CLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUExQixFQUE4QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBcEMsRUFBd0MsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxDQUFELENBQS9DLEVBQW9ELFFBQXBELEdBQTZELENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUEvUixFQUFvUyxLQUFLLE9BQUwsQ0FBYSxDQUFiLEVBQWdCLEdBQWhCLENBQW9CLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUExQixFQUE4QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBcEMsRUFBd0MsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxFQUFELENBQS9DLEVBQXFELFFBQXJELEdBQThELENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUF6VyxFQUE4VyxLQUFLLE9BQUwsQ0FBYSxDQUFiLEVBQWdCLEdBQWhCLENBQW9CLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBSyxDQUFDLENBQUMsQ0FBRCxDQUExQixFQUE4QixDQUFDLENBQUMsQ0FBRCxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUQsQ0FBcEMsRUFBd0MsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFNLENBQUMsQ0FBQyxFQUFELENBQS9DLEVBQXFELFFBQXJELEdBQThELENBQUMsQ0FBQyxFQUFELENBQUQsR0FBTSxDQUFDLENBQUMsRUFBRCxDQUFuYjs7QUFB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dEMsY0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFULENBQW1CLFFBQW5CLENBQTRCLFFBQTVCLENBQUosRUFBMkM7QUFFeEMsZ0JBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLHlCQUF2QixDQUFmOztBQUVBLGdCQUFHLE1BQU0sQ0FBQyxXQUFQLEdBQXFCLFFBQVEsQ0FBQyxXQUFqQyxFQUE4QztBQUMzQyxjQUFBLFFBQVEsQ0FBQyxhQUFULENBQXVCLG1CQUF2QixFQUE0QyxTQUE1QyxDQUFzRCxNQUF0RCxDQUE2RCxRQUE3RDtBQUNBLGNBQUEsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsb0JBQXZCLEVBQTZDLFNBQTdDLENBQXVELE1BQXZELENBQThELFFBQTlEO0FBQ0YsYUFIRCxNQUdPO0FBQ0osY0FBQSxRQUFRLENBQUMsYUFBVCxDQUF1QixtQkFBdkIsRUFBNEMsU0FBNUMsQ0FBc0QsR0FBdEQsQ0FBMEQsUUFBMUQ7QUFDQSxjQUFBLFFBQVEsQ0FBQyxhQUFULENBQXVCLG9CQUF2QixFQUE2QyxTQUE3QyxDQUF1RCxHQUF2RCxDQUEyRCxRQUEzRDtBQUNGO0FBRUg7QUFFRjtBQWxCaUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQW9CbkM7QUFoR00sR0FBWDtBQW9HQSxFQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFFBQWpCO0FBRUgsQ0ExR0EsR0FBRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIiFmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW1wiZXhwb3J0c1wiXSx0KTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKXQoZXhwb3J0cyk7ZWxzZXt2YXIgbz17fTt0KG8pLGUuYm9keVNjcm9sbExvY2s9b319KHRoaXMsZnVuY3Rpb24oZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaShlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxvPUFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKylvW3RdPWVbdF07cmV0dXJuIG99cmV0dXJuIEFycmF5LmZyb20oZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGw9ITE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl7dmFyIGU9e2dldCBwYXNzaXZlKCl7bD0hMH19O3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFBhc3NpdmVcIixudWxsLGUpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFBhc3NpdmVcIixudWxsLGUpfWZ1bmN0aW9uIGQodCl7cmV0dXJuIHUuc29tZShmdW5jdGlvbihlKXtyZXR1cm4hKCFlLm9wdGlvbnMuYWxsb3dUb3VjaE1vdmV8fCFlLm9wdGlvbnMuYWxsb3dUb3VjaE1vdmUodCkpfSl9ZnVuY3Rpb24gYyhlKXt2YXIgdD1lfHx3aW5kb3cuZXZlbnQ7cmV0dXJuISFkKHQudGFyZ2V0KXx8KDE8dC50b3VjaGVzLmxlbmd0aHx8KHQucHJldmVudERlZmF1bHQmJnQucHJldmVudERlZmF1bHQoKSwhMSkpfWZ1bmN0aW9uIG8oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dm9pZCAwIT09bSYmKGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PW0sbT12b2lkIDApLHZvaWQgMCE9PWYmJihkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PWYsZj12b2lkIDApfSl9dmFyIGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lm5hdmlnYXRvciYmd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSYmKC9pUChhZHxob25lfG9kKS8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKXx8XCJNYWNJbnRlbFwiPT09d2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSYmMTx3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzKSx1PVtdLHM9ITEsdj0tMSxmPXZvaWQgMCxtPXZvaWQgMDtleHBvcnRzLmRpc2FibGVCb2R5U2Nyb2xsPWZ1bmN0aW9uKHIsZSl7aWYoYSl7aWYoIXIpcmV0dXJuIHZvaWQgY29uc29sZS5lcnJvcihcImRpc2FibGVCb2R5U2Nyb2xsIHVuc3VjY2Vzc2Z1bCAtIHRhcmdldEVsZW1lbnQgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNhbGxpbmcgZGlzYWJsZUJvZHlTY3JvbGwgb24gSU9TIGRldmljZXMuXCIpO2lmKHImJiF1LnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGUudGFyZ2V0RWxlbWVudD09PXJ9KSl7dmFyIHQ9e3RhcmdldEVsZW1lbnQ6cixvcHRpb25zOmV8fHt9fTt1PVtdLmNvbmNhdChpKHUpLFt0XSksci5vbnRvdWNoc3RhcnQ9ZnVuY3Rpb24oZSl7MT09PWUudGFyZ2V0VG91Y2hlcy5sZW5ndGgmJih2PWUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZKX0sci5vbnRvdWNobW92ZT1mdW5jdGlvbihlKXt2YXIgdCxvLG4saTsxPT09ZS50YXJnZXRUb3VjaGVzLmxlbmd0aCYmKG89cixpPSh0PWUpLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WS12LGQodC50YXJnZXQpfHwobyYmMD09PW8uc2Nyb2xsVG9wJiYwPGl8fChuPW8pJiZuLnNjcm9sbEhlaWdodC1uLnNjcm9sbFRvcDw9bi5jbGllbnRIZWlnaHQmJmk8MD9jKHQpOnQuc3RvcFByb3BhZ2F0aW9uKCkpKX0sc3x8KGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixjLGw/e3Bhc3NpdmU6ITF9OnZvaWQgMCkscz0hMCl9fWVsc2V7bj1lLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZih2b2lkIDA9PT1tKXt2YXIgZT0hIW4mJiEwPT09bi5yZXNlcnZlU2Nyb2xsQmFyR2FwLHQ9d2luZG93LmlubmVyV2lkdGgtZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO2UmJjA8dCYmKG09ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9dCtcInB4XCIpfXZvaWQgMD09PWYmJihmPWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3csZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiKX0pO3ZhciBvPXt0YXJnZXRFbGVtZW50OnIsb3B0aW9uczplfHx7fX07dT1bXS5jb25jYXQoaSh1KSxbb10pfXZhciBufSxleHBvcnRzLmNsZWFyQWxsQm9keVNjcm9sbExvY2tzPWZ1bmN0aW9uKCl7YT8odS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UudGFyZ2V0RWxlbWVudC5vbnRvdWNoc3RhcnQ9bnVsbCxlLnRhcmdldEVsZW1lbnQub250b3VjaG1vdmU9bnVsbH0pLHMmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsYyxsP3twYXNzaXZlOiExfTp2b2lkIDApLHM9ITEpLHU9W10sdj0tMSk6KG8oKSx1PVtdKX0sZXhwb3J0cy5lbmFibGVCb2R5U2Nyb2xsPWZ1bmN0aW9uKHQpe2lmKGEpe2lmKCF0KXJldHVybiB2b2lkIGNvbnNvbGUuZXJyb3IoXCJlbmFibGVCb2R5U2Nyb2xsIHVuc3VjY2Vzc2Z1bCAtIHRhcmdldEVsZW1lbnQgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNhbGxpbmcgZW5hYmxlQm9keVNjcm9sbCBvbiBJT1MgZGV2aWNlcy5cIik7dC5vbnRvdWNoc3RhcnQ9bnVsbCx0Lm9udG91Y2htb3ZlPW51bGwsdT11LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS50YXJnZXRFbGVtZW50IT09dH0pLHMmJjA9PT11Lmxlbmd0aCYmKGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixjLGw/e3Bhc3NpdmU6ITF9OnZvaWQgMCkscz0hMSl9ZWxzZSh1PXUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRhcmdldEVsZW1lbnQhPT10fSkpLmxlbmd0aHx8bygpfX0pO1xuIiwiLyoqXG4gKiBtYXRjaGVzU2VsZWN0b3IgdjIuMC4yXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgRWxlbVByb3RvID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuICAgIC8vIGNoZWNrIGZvciB0aGUgc3RhbmRhcmQgbWV0aG9kIG5hbWUgZmlyc3RcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXNTZWxlY3Rvcic7XG4gICAgfVxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IFsgJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbycgXTtcblxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcbiAgICAgIGlmICggRWxlbVByb3RvWyBtZXRob2QgXSApIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIGVsZW1bIG1hdGNoZXNNZXRob2QgXSggc2VsZWN0b3IgKTtcbiAgfTtcblxufSkpO1xuIiwiLyoqXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBldmVudHMgaGFzaFxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG4gIC8vIG9uY2Ugc3R1ZmZcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xuXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXG4gICAgdmFyIGlzT25jZSA9IG9uY2VMaXN0ZW5lcnMgJiYgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICBpZiAoIGlzT25jZSApIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgLy8gcmVtb3ZlIGJlZm9yZSB0cmlnZ2VyIHRvIHByZXZlbnQgcmVjdXJzaW9uXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXG4gICAgICBkZWxldGUgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICB9XG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0pKTtcbiIsIi8qKlxuICogRml6enkgVUkgdXRpbHMgdjIuMC43XG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIG1ha2VBcnJheSAtLS0tLSAvL1xuXG52YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XG4gIGlmICggb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIGlmICggaXNBcnJheUxpa2UgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIHJldHVybiBhcnJheVNsaWNlLmNhbGwoIG9iaiApO1xuICB9XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufTtcblxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xuXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICB2YXIgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgYXJ5LnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFF1ZXJ5RWxlbWVudCAtLS0tLSAvL1xuXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcbnV0aWxzLmdldFF1ZXJ5RWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cbiAgcmV0dXJuIGVsZW07XG59O1xuXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xuXG4vLyBlbmFibGUgLm9udHlwZSB0byB0cmlnZ2VyIGZyb20gLmFkZEV2ZW50TGlzdGVuZXIoIGVsZW0sICd0eXBlJyApXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cblxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGZmRWxlbXMgPSBbXTtcblxuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcbiAgICBpZiAoICEoIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhZGQgZWxlbSBpZiBubyBzZWxlY3RvclxuICAgIGlmICggIXNlbGVjdG9yICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXG4gICAgLy8gZmlsdGVyXG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICB9XG4gICAgLy8gZmluZCBjaGlsZHJlblxuICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xuICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGNoaWxkRWxlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbaV0gKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmZkVsZW1zO1xufTtcblxuLy8gLS0tLS0gZGVib3VuY2VNZXRob2QgLS0tLS0gLy9cblxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XG4gIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMDA7XG4gIC8vIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xuICB2YXIgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xuXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgbWV0aG9kLmFwcGx5KCBfdGhpcywgYXJncyApO1xuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIH0sIHRocmVzaG9sZCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gZG9jUmVhZHkgLS0tLS0gLy9cblxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG4gIHZhciByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgaWYgKCByZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgcmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnICkge1xuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxuICAgIHNldFRpbWVvdXQoIGNhbGxiYWNrICk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xuXG4vLyBodHRwOi8vamFtZXNyb2JlcnRzLm5hbWUvYmxvZy8yMDEwLzAyLzIyL3N0cmluZy1mdW5jdGlvbnMtZm9yLWphdmFzY3JpcHQtdHJpbS10by1jYW1lbC1jYXNlLXRvLWRhc2hlZC1hbmQtdG8tdW5kZXJzY29yZS9cbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKC4pKFtBLVpdKS9nLCBmdW5jdGlvbiggbWF0Y2gsICQxLCAkMiApIHtcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcbiAgfSkudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG4vKipcbiAqIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3NcbiAqIGh0bWxJbml0KCBXaWRnZXQsICd3aWRnZXROYW1lJyApXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb25zXG4gKi9cbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XG4gIHV0aWxzLmRvY1JlYWR5KCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XG4gICAgdmFyIGRhdGFBdHRyRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnWycgKyBkYXRhQXR0ciArICddJyApO1xuICAgIHZhciBqc0Rhc2hFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtJyArIGRhc2hlZE5hbWVzcGFjZSApO1xuICAgIHZhciBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZGF0YUF0dHJFbGVtcyApXG4gICAgICAuY29uY2F0KCB1dGlscy5tYWtlQXJyYXkoIGpzRGFzaEVsZW1zICkgKTtcbiAgICB2YXIgZGF0YU9wdGlvbnNBdHRyID0gZGF0YUF0dHIgKyAnLW9wdGlvbnMnO1xuICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuXG4gICAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApIHx8XG4gICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhT3B0aW9uc0F0dHIgKTtcbiAgICAgIHZhciBvcHRpb25zO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9ucyA9IGF0dHIgJiYgSlNPTi5wYXJzZSggYXR0ciApO1xuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXG4gICAgICAgIGlmICggY29uc29sZSApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcGFyc2luZyAnICsgZGF0YUF0dHIgKyAnIG9uICcgKyBlbGVtLmNsYXNzTmFtZSArXG4gICAgICAgICAgJzogJyArIGVycm9yICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XG4gICAgICAvLyBtYWtlIGF2YWlsYWJsZSB2aWEgJCgpLmRhdGEoJ25hbWVzcGFjZScpXG4gICAgICBpZiAoIGpRdWVyeSApIHtcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9KTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0pKTtcbiIsIi8vIGFkZCwgcmVtb3ZlIGNlbGxcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBhcHBlbmQgY2VsbHMgdG8gYSBkb2N1bWVudCBmcmFnbWVudFxuZnVuY3Rpb24gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKSB7XG4gIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNlbGwuZWxlbWVudCApO1xuICB9KTtcbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGQvcmVtb3ZlIGNlbGwgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxuLyoqXG4gKiBJbnNlcnQsIHByZXBlbmQsIG9yIGFwcGVuZCBjZWxsc1xuICogQHBhcmFtIHtFbGVtZW50LCBBcnJheSwgTm9kZUxpc3R9IGVsZW1zXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4XG4gKi9cbnByb3RvLmluc2VydCA9IGZ1bmN0aW9uKCBlbGVtcywgaW5kZXggKSB7XG4gIHZhciBjZWxscyA9IHRoaXMuX21ha2VDZWxscyggZWxlbXMgKTtcbiAgaWYgKCAhY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyBkZWZhdWx0IHRvIGFwcGVuZFxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyBsZW4gOiBpbmRleDtcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcbiAgdmFyIGZyYWdtZW50ID0gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKTtcbiAgLy8gYXBwZW5kIHRvIHNsaWRlclxuICB2YXIgaXNBcHBlbmQgPSBpbmRleCA9PSBsZW47XG4gIGlmICggaXNBcHBlbmQgKSB7XG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc2VydENlbGxFbGVtZW50ID0gdGhpcy5jZWxsc1sgaW5kZXggXS5lbGVtZW50O1xuICAgIHRoaXMuc2xpZGVyLmluc2VydEJlZm9yZSggZnJhZ21lbnQsIGluc2VydENlbGxFbGVtZW50ICk7XG4gIH1cbiAgLy8gYWRkIHRvIHRoaXMuY2VsbHNcbiAgaWYgKCBpbmRleCA9PT0gMCApIHtcbiAgICAvLyBwcmVwZW5kLCBhZGQgdG8gc3RhcnRcbiAgICB0aGlzLmNlbGxzID0gY2VsbHMuY29uY2F0KCB0aGlzLmNlbGxzICk7XG4gIH0gZWxzZSBpZiAoIGlzQXBwZW5kICkge1xuICAgIC8vIGFwcGVuZCwgYWRkIHRvIGVuZFxuICAgIHRoaXMuY2VsbHMgPSB0aGlzLmNlbGxzLmNvbmNhdCggY2VsbHMgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbnNlcnQgaW4gdGhpcy5jZWxsc1xuICAgIHZhciBlbmRDZWxscyA9IHRoaXMuY2VsbHMuc3BsaWNlKCBpbmRleCwgbGVuIC0gaW5kZXggKTtcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICkuY29uY2F0KCBlbmRDZWxscyApO1xuICB9XG5cbiAgdGhpcy5fc2l6ZUNlbGxzKCBjZWxscyApO1xuICB0aGlzLmNlbGxDaGFuZ2UoIGluZGV4LCB0cnVlICk7XG59O1xuXG5wcm90by5hcHBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgdGhpcy5jZWxscy5sZW5ndGggKTtcbn07XG5cbnByb3RvLnByZXBlbmQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHRoaXMuaW5zZXJ0KCBlbGVtcywgMCApO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgY2VsbHNcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xuICovXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBjZWxscyA9IHRoaXMuZ2V0Q2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1pbkNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgLy8gcmVtb3ZlIGNlbGxzIGZyb20gY29sbGVjdGlvbiAmIERPTVxuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLnJlbW92ZSgpO1xuICAgIHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIG1pbkNlbGxJbmRleCA9IE1hdGgubWluKCBpbmRleCwgbWluQ2VsbEluZGV4ICk7XG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5jZWxscywgY2VsbCApO1xuICB9LCB0aGlzICk7XG5cbiAgdGhpcy5jZWxsQ2hhbmdlKCBtaW5DZWxsSW5kZXgsIHRydWUgKTtcbn07XG5cbi8qKlxuICogbG9naWMgdG8gYmUgcnVuIGFmdGVyIGEgY2VsbCdzIHNpemUgY2hhbmdlc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtIC0gY2VsbCdzIGVsZW1lbnRcbiAqL1xucHJvdG8uY2VsbFNpemVDaGFuZ2UgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCAhY2VsbCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY2VsbC5nZXRTaXplKCk7XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKi9cbnByb3RvLmNlbGxDaGFuZ2UgPSBmdW5jdGlvbiggY2hhbmdlZENlbGxJbmRleCwgaXNQb3NpdGlvbmluZ1NsaWRlciApIHtcbiAgdmFyIHByZXZTZWxlY3RlZEVsZW0gPSB0aGlzLnNlbGVjdGVkRWxlbWVudDtcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xuICB0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZEluZGV4XG4gIC8vIHRyeSB0byBtYWludGFpbiBwb3NpdGlvbiAmIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBlbGVtZW50XG4gIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBwcmV2U2VsZWN0ZWRFbGVtICk7XG4gIGlmICggY2VsbCApIHtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIH1cbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gTWF0aC5taW4oIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEsIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnY2VsbENoYW5nZScsIFsgY2hhbmdlZENlbGxJbmRleCBdICk7XG4gIC8vIHBvc2l0aW9uIHNsaWRlclxuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIC8vIGRvIG5vdCBwb3NpdGlvbiBzbGlkZXIgYWZ0ZXIgbGF6eSBsb2FkXG4gIGlmICggaXNQb3NpdGlvbmluZ1NsaWRlciApIHtcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG4iLCIvLyBhbmltYXRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIHV0aWxzICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gYW5pbWF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgcHJvdG8gPSB7fTtcblxucHJvdG8uc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xuICB0aGlzLnJlc3RpbmdGcmFtZXMgPSAwO1xuICB0aGlzLmFuaW1hdGUoKTtcbn07XG5cbnByb3RvLmFuaW1hdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5hcHBseURyYWdGb3JjZSgpO1xuICB0aGlzLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uKCk7XG5cbiAgdmFyIHByZXZpb3VzWCA9IHRoaXMueDtcblxuICB0aGlzLmludGVncmF0ZVBoeXNpY3MoKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xuICB0aGlzLnNldHRsZSggcHJldmlvdXNYICk7XG4gIC8vIGFuaW1hdGUgbmV4dCBmcmFtZVxuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGZ1bmN0aW9uIGFuaW1hdGVGcmFtZSgpIHtcbiAgICAgIF90aGlzLmFuaW1hdGUoKTtcbiAgICB9KTtcbiAgfVxufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgdGhpcy5jZWxscy5sZW5ndGggPiAxICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgICB4ID0geCAtIHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIHggPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAteCA6IHg7XG4gIHZhciB0cmFuc2xhdGVYID0gdGhpcy5nZXRQb3NpdGlvblZhbHVlKCB4ICk7XG4gIC8vIHVzZSAzRCB0cmFuZm9ybXMgZm9yIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBvbiBpT1NcbiAgLy8gYnV0IHVzZSAyRCB3aGVuIHNldHRsZWQsIGZvciBiZXR0ZXIgZm9udC1yZW5kZXJpbmdcbiAgdGhpcy5zbGlkZXIuc3R5bGUudHJhbnNmb3JtID0gaXMzZCA/XG4gICAgJ3RyYW5zbGF0ZTNkKCcgKyB0cmFuc2xhdGVYICsgJywwLDApJyA6ICd0cmFuc2xhdGVYKCcgKyB0cmFuc2xhdGVYICsgJyknO1xufTtcblxucHJvdG8uZGlzcGF0Y2hTY3JvbGxFdmVudCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlyc3RTbGlkZSA9IHRoaXMuc2xpZGVzWzBdO1xuICBpZiAoICFmaXJzdFNsaWRlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcG9zaXRpb25YID0gLXRoaXMueCAtIGZpcnN0U2xpZGUudGFyZ2V0O1xuICB2YXIgcHJvZ3Jlc3MgPSBwb3NpdGlvblggLyB0aGlzLnNsaWRlc1dpZHRoO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzY3JvbGwnLCBudWxsLCBbIHByb2dyZXNzLCBwb3NpdGlvblggXSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnggPSAtdGhpcy5zZWxlY3RlZFNsaWRlLnRhcmdldDtcbiAgdGhpcy52ZWxvY2l0eSA9IDA7IC8vIHN0b3Agd29iYmxlXG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbn07XG5cbnByb3RvLmdldFBvc2l0aW9uVmFsdWUgPSBmdW5jdGlvbiggcG9zaXRpb24gKSB7XG4gIGlmICggdGhpcy5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiApIHtcbiAgICAvLyBwZXJjZW50IHBvc2l0aW9uLCByb3VuZCB0byAyIGRpZ2l0cywgbGlrZSAxMi4zNCVcbiAgICByZXR1cm4gKCBNYXRoLnJvdW5kKCAoIHBvc2l0aW9uIC8gdGhpcy5zaXplLmlubmVyV2lkdGggKSAqIDEwMDAwICkgKiAwLjAxICkrICclJztcbiAgfSBlbHNlIHtcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBwb3NpdGlvbiApICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uc2V0dGxlID0gZnVuY3Rpb24oIHByZXZpb3VzWCApIHtcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcbiAgaWYgKCAhdGhpcy5pc1BvaW50ZXJEb3duICYmIE1hdGgucm91bmQoIHRoaXMueCAqIDEwMCApID09IE1hdGgucm91bmQoIHByZXZpb3VzWCAqIDEwMCApICkge1xuICAgIHRoaXMucmVzdGluZ0ZyYW1lcysrO1xuICB9XG4gIC8vIHN0b3AgYW5pbWF0aW5nIGlmIHJlc3RpbmcgZm9yIDMgb3IgbW9yZSBmcmFtZXNcbiAgaWYgKCB0aGlzLnJlc3RpbmdGcmFtZXMgPiAyICkge1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG4gICAgLy8gcmVuZGVyIHBvc2l0aW9uIHdpdGggdHJhbnNsYXRlWCB3aGVuIHNldHRsZWRcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2V0dGxlJywgbnVsbCwgWyB0aGlzLnNlbGVjdGVkSW5kZXggXSApO1xuICB9XG59O1xuXG5wcm90by5zaGlmdFdyYXBDZWxscyA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyBzaGlmdCBiZWZvcmUgY2VsbHNcbiAgdmFyIGJlZm9yZUdhcCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB4O1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMsIGJlZm9yZUdhcCwgLTEgKTtcbiAgLy8gc2hpZnQgYWZ0ZXIgY2VsbHNcbiAgdmFyIGFmdGVyR2FwID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSAoIHggKyB0aGlzLnNsaWRlYWJsZVdpZHRoICsgdGhpcy5jdXJzb3JQb3NpdGlvbiApO1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscywgYWZ0ZXJHYXAsIDEgKTtcbn07XG5cbnByb3RvLl9zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzLCBnYXAsIHNoaWZ0ICkge1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgY2VsbHMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSBjZWxsc1tpXTtcbiAgICB2YXIgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICBjZWxsLndyYXBTaGlmdCggY2VsbFNoaWZ0ICk7XG4gICAgZ2FwIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG59O1xuXG5wcm90by5fdW5zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKCB2YXIgaT0wOyBpIDwgY2VsbHMubGVuZ3RoOyBpKysgKSB7XG4gICAgY2VsbHNbaV0ud3JhcFNoaWZ0KCAwICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHBoeXNpY3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uaW50ZWdyYXRlUGh5c2ljcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnggKz0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy52ZWxvY2l0eSAqPSB0aGlzLmdldEZyaWN0aW9uRmFjdG9yKCk7XG59O1xuXG5wcm90by5hcHBseUZvcmNlID0gZnVuY3Rpb24oIGZvcmNlICkge1xuICB0aGlzLnZlbG9jaXR5ICs9IGZvcmNlO1xufTtcblxucHJvdG8uZ2V0RnJpY3Rpb25GYWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDEgLSB0aGlzLm9wdGlvbnNbIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID8gJ2ZyZWVTY3JvbGxGcmljdGlvbicgOiAnZnJpY3Rpb24nIF07XG59O1xuXG5wcm90by5nZXRSZXN0aW5nUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgLy8gbXkgdGhhbmtzIHRvIFN0ZXZlbiBXaXR0ZW5zLCB3aG8gc2ltcGxpZmllZCB0aGlzIG1hdGggZ3JlYXRseVxuICByZXR1cm4gdGhpcy54ICsgdGhpcy52ZWxvY2l0eSAvICggMSAtIHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKSApO1xufTtcblxucHJvdG8uYXBwbHlEcmFnRm9yY2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSB8fCAhdGhpcy5pc1BvaW50ZXJEb3duICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBjaGFuZ2UgdGhlIHBvc2l0aW9uIHRvIGRyYWcgcG9zaXRpb24gYnkgYXBwbHlpbmcgZm9yY2VcbiAgdmFyIGRyYWdWZWxvY2l0eSA9IHRoaXMuZHJhZ1ggLSB0aGlzLng7XG4gIHZhciBkcmFnRm9yY2UgPSBkcmFnVmVsb2NpdHkgLSB0aGlzLnZlbG9jaXR5O1xuICB0aGlzLmFwcGx5Rm9yY2UoIGRyYWdGb3JjZSApO1xufTtcblxucHJvdG8uYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGF0dHJhY3QgaWYgcG9pbnRlciBkb3duIG9yIG5vIHNsaWRlc1xuICB2YXIgZHJhZ0Rvd24gPSB0aGlzLmlzRHJhZ2dhYmxlICYmIHRoaXMuaXNQb2ludGVyRG93bjtcbiAgaWYgKCBkcmFnRG93biB8fCB0aGlzLmlzRnJlZVNjcm9sbGluZyB8fCAhdGhpcy5zbGlkZXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZGlzdGFuY2UgPSB0aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0ICogLTEgLSB0aGlzLng7XG4gIHZhciBmb3JjZSA9IGRpc3RhbmNlICogdGhpcy5vcHRpb25zLnNlbGVjdGVkQXR0cmFjdGlvbjtcbiAgdGhpcy5hcHBseUZvcmNlKCBmb3JjZSApO1xufTtcblxucmV0dXJuIHByb3RvO1xuXG59KSk7XG4iLCIvLyBGbGlja2l0eS5DZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2dldC1zaXplL2dldC1zaXplJ1xuICAgIF0sIGZ1bmN0aW9uKCBnZXRTaXplICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgZ2V0U2l6ZSApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LkNlbGwgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LmdldFNpemVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBnZXRTaXplICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIENlbGwoIGVsZW0sIHBhcmVudCApIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbTtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgdGhpcy5jcmVhdGUoKTtcbn1cblxudmFyIHByb3RvID0gQ2VsbC5wcm90b3R5cGU7XG5cbnByb3RvLmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCAnYXJpYS1oaWRkZW4nLCAndHJ1ZScgKTtcbiAgdGhpcy54ID0gMDtcbiAgdGhpcy5zaGlmdCA9IDA7XG59O1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlc2V0IHN0eWxlXG4gIHRoaXMudW5zZWxlY3QoKTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHZhciBzaWRlID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyBzaWRlIF0gPSAnJztcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnVwZGF0ZVRhcmdldCgpO1xuICB0aGlzLnJlbmRlclBvc2l0aW9uKCB4ICk7XG59O1xuXG4vLyBzZXREZWZhdWx0VGFyZ2V0IHYxIG1ldGhvZCwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHJlbW92ZSBpbiB2M1xucHJvdG8udXBkYXRlVGFyZ2V0ID0gcHJvdG8uc2V0RGVmYXVsdFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWFyZ2luUHJvcGVydHkgPSB0aGlzLnBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JyA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5zaXplWyBtYXJnaW5Qcm9wZXJ0eSBdICtcbiAgICB0aGlzLnNpemUud2lkdGggKiB0aGlzLnBhcmVudC5jZWxsQWxpZ247XG59O1xuXG5wcm90by5yZW5kZXJQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICB2YXIgc2lkZSA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGU7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgc2lkZSBdID0gdGhpcy5wYXJlbnQuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xufTtcblxucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8udW5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGZhY3RvciAtIDAsIDEsIG9yIC0xXG4qKi9cbnByb3RvLndyYXBTaGlmdCA9IGZ1bmN0aW9uKCBzaGlmdCApIHtcbiAgdGhpcy5zaGlmdCA9IHNoaWZ0O1xuICB0aGlzLnJlbmRlclBvc2l0aW9uKCB0aGlzLnggKyB0aGlzLnBhcmVudC5zbGlkZWFibGVXaWR0aCAqIHNoaWZ0ICk7XG59O1xuXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxucmV0dXJuIENlbGw7XG5cbn0pKTtcbiIsIi8vIGRyYWdcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pZHJhZ2dlci91bmlkcmFnZ2VyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscydcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICByZXF1aXJlKCd1bmlkcmFnZ2VyJyksXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICB3aW5kb3cuVW5pZHJhZ2dlcixcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gZGVmYXVsdHMgLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59KTtcblxuLy8gLS0tLS0gY3JlYXRlIC0tLS0tIC8vXG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZURyYWcnKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZyBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xudXRpbHMuZXh0ZW5kKCBwcm90bywgVW5pZHJhZ2dlci5wcm90b3R5cGUgKTtcbnByb3RvLl90b3VjaEFjdGlvblZhbHVlID0gJ3Bhbi15JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1RvdWNoID0gJ2NyZWF0ZVRvdWNoJyBpbiBkb2N1bWVudDtcbnZhciBpc1RvdWNobW92ZVNjcm9sbENhbmNlbGVkID0gZmFsc2U7XG5cbnByb3RvLl9jcmVhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMub25BY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5fdWlDaGFuZ2VEcmFnICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5vbkRlYWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVEcmFnZ2FibGUgKTtcbiAgLy8gVE9ETyB1cGRhdGVEcmFnZ2FibGUgb24gcmVzaXplPyBpZiBncm91cENlbGxzICYgc2xpZGVzIGNoYW5nZVxuICAvLyBIQUNLIC0gYWRkIHNlZW1pbmdseSBpbm5vY3VvdXMgaGFuZGxlciB0byBmaXggaU9TIDEwIHNjcm9sbCBiZWhhdmlvclxuICAvLyAjNDU3LCBSdWJhWGEvU29ydGFibGUjOTczXG4gIGlmICggaXNUb3VjaCAmJiAhaXNUb3VjaG1vdmVTY3JvbGxDYW5jZWxlZCApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIGZ1bmN0aW9uKCkge30pO1xuICAgIGlzVG91Y2htb3ZlU2Nyb2xsQ2FuY2VsZWQgPSB0cnVlO1xuICB9XG59O1xuXG5wcm90by5vbkFjdGl2YXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhhbmRsZXMgPSBbIHRoaXMudmlld3BvcnQgXTtcbiAgdGhpcy5iaW5kSGFuZGxlcygpO1xuICB0aGlzLnVwZGF0ZURyYWdnYWJsZSgpO1xufTtcblxucHJvdG8ub25EZWFjdGl2YXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVuYmluZEhhbmRsZXMoKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnYWJsZScpO1xufTtcblxucHJvdG8udXBkYXRlRHJhZ2dhYmxlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRpc2FibGUgZHJhZ2dpbmcgaWYgbGVzcyB0aGFuIDIgc2xpZGVzLiAjMjc4XG4gIGlmICggdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9PSAnPjEnICkge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAxO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlO1xuICB9XG4gIGlmICggdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZHJhZ2dhYmxlJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnYWJsZScpO1xuICB9XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxucHJvdG8uYmluZERyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9IHRydWU7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by51bmJpbmREcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgdGhpcy51cGRhdGVEcmFnZ2FibGUoKTtcbn07XG5cbnByb3RvLl91aUNoYW5nZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNGcmVlU2Nyb2xsaW5nO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcG9pbnRlciBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgdGhpcy5fcG9pbnRlckRvd25EZWZhdWx0KCBldmVudCwgcG9pbnRlciApO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaXNPa2F5ID0gdGhpcy5va2F5UG9pbnRlckRvd24oIGV2ZW50ICk7XG4gIGlmICggIWlzT2theSApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9wb2ludGVyRG93blByZXZlbnREZWZhdWx0KCBldmVudCApO1xuICB0aGlzLnBvaW50ZXJEb3duRm9jdXMoIGV2ZW50ICk7XG4gIC8vIGJsdXJcbiAgaWYgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZWxlbWVudCApIHtcbiAgICAvLyBkbyBub3QgYmx1ciBpZiBhbHJlYWR5IGZvY3VzZWRcbiAgICB0aGlzLnBvaW50ZXJEb3duQmx1cigpO1xuICB9XG5cbiAgLy8gc3RvcCBpZiBpdCB3YXMgbW92aW5nXG4gIHRoaXMuZHJhZ1ggPSB0aGlzLng7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NMaXN0LmFkZCgnaXMtcG9pbnRlci1kb3duJyk7XG4gIC8vIHRyYWNrIHNjcm9sbGluZ1xuICB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG5cbiAgdGhpcy5fcG9pbnRlckRvd25EZWZhdWx0KCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gZGVmYXVsdCBwb2ludGVyRG93biBsb2dpYywgdXNlZCBmb3Igc3RhdGljQ2xpY2tcbnByb3RvLl9wb2ludGVyRG93bkRlZmF1bHQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIHRyYWNrIHN0YXJ0IGV2ZW50IHBvc2l0aW9uXG4gIC8vIFNhZmFyaSA5IG92ZXJyaWRlcyBwYWdlWCBhbmQgcGFnZVkuIFRoZXNlIHZhbHVlcyBuZWVkcyB0byBiZSBjb3BpZWQuICM3NzlcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ZXIgPSB7XG4gICAgcGFnZVg6IHBvaW50ZXIucGFnZVgsXG4gICAgcGFnZVk6IHBvaW50ZXIucGFnZVksXG4gIH07XG4gIC8vIGJpbmQgbW92ZSBhbmQgZW5kIGV2ZW50c1xuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdwb2ludGVyRG93bicsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xufTtcblxudmFyIGZvY3VzTm9kZXMgPSB7XG4gIElOUFVUOiB0cnVlLFxuICBURVhUQVJFQTogdHJ1ZSxcbiAgU0VMRUNUOiB0cnVlLFxufTtcblxucHJvdG8ucG9pbnRlckRvd25Gb2N1cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzRm9jdXNOb2RlID0gZm9jdXNOb2Rlc1sgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIF07XG4gIGlmICggIWlzRm9jdXNOb2RlICkge1xuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxufTtcblxucHJvdG8uX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBpc1RvdWNoU3RhcnQgPSBldmVudC50eXBlID09ICd0b3VjaHN0YXJ0JztcbiAgdmFyIGlzVG91Y2hQb2ludGVyID0gZXZlbnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJztcbiAgdmFyIGlzRm9jdXNOb2RlID0gZm9jdXNOb2Rlc1sgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lIF07XG4gIGlmICggIWlzVG91Y2hTdGFydCAmJiAhaXNUb3VjaFBvaW50ZXIgJiYgIWlzRm9jdXNOb2RlICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIG1vdmUgLS0tLS0gLy9cblxucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IHRoaXMub3B0aW9ucy5kcmFnVGhyZXNob2xkO1xufTtcblxuLy8gLS0tLS0gdXAgLS0tLS0gLy9cblxucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBkZWxldGUgdGhpcy5pc1RvdWNoU2Nyb2xsaW5nO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXBvaW50ZXItZG93bicpO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdwb2ludGVyVXAnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICBkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWdnaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmRyYWdTdGFydCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiA9IHRoaXMueDtcbiAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ1N0YXJ0JywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG5wcm90by5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdmFyIG1vdmVWZWN0b3IgPSB0aGlzLl9kcmFnUG9pbnRlck1vdmUoIGV2ZW50LCBwb2ludGVyICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJNb3ZlJywgZXZlbnQsIFsgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIHRoaXMuX2RyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxucHJvdG8uZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgdGhpcy5wcmV2aW91c0RyYWdYID0gdGhpcy5kcmFnWDtcbiAgLy8gcmV2ZXJzZSBpZiByaWdodC10by1sZWZ0XG4gIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAtMSA6IDE7XG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgLy8gd3JhcCBhcm91bmQgbW92ZS4gIzU4OVxuICAgIG1vdmVWZWN0b3IueCA9IG1vdmVWZWN0b3IueCAlIHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH1cbiAgdmFyIGRyYWdYID0gdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiArIG1vdmVWZWN0b3IueCAqIGRpcmVjdGlvbjtcblxuICBpZiAoICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiB0aGlzLnNsaWRlcy5sZW5ndGggKSB7XG4gICAgLy8gc2xvdyBkcmFnXG4gICAgdmFyIG9yaWdpbkJvdW5kID0gTWF0aC5tYXgoIC10aGlzLnNsaWRlc1swXS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICAgIHZhciBlbmRCb3VuZCA9IE1hdGgubWluKCAtdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYIDwgZW5kQm91bmQgPyAoIGRyYWdYICsgZW5kQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICB9XG5cbiAgdGhpcy5kcmFnWCA9IGRyYWdYO1xuXG4gIHRoaXMuZHJhZ01vdmVUaW1lID0gbmV3IERhdGUoKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ01vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICB9XG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXG4gIHZhciBpbmRleCA9IHRoaXMuZHJhZ0VuZFJlc3RpbmdTZWxlY3QoKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyBpZiBmcmVlLXNjcm9sbCAmIG5vdCB3cmFwIGFyb3VuZFxuICAgIC8vIGRvIG5vdCBmcmVlLXNjcm9sbCBpZiBnb2luZyBvdXRzaWRlIG9mIGJvdW5kaW5nIHNsaWRlc1xuICAgIC8vIHNvIGJvdW5kaW5nIHNsaWRlcyBjYW4gYXR0cmFjdCBzbGlkZXIsIGFuZCBrZWVwIGl0IGluIGJvdW5kc1xuICAgIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSAtcmVzdGluZ1ggPiB0aGlzLnNsaWRlc1swXS50YXJnZXQgJiZcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0O1xuICB9IGVsc2UgaWYgKCAhdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgJiYgaW5kZXggPT0gdGhpcy5zZWxlY3RlZEluZGV4ICkge1xuICAgIC8vIGJvb3N0IHNlbGVjdGlvbiBpZiBzZWxlY3RlZCBpbmRleCBoYXMgbm90IGNoYW5nZWRcbiAgICBpbmRleCArPSB0aGlzLmRyYWdFbmRCb29zdFNlbGVjdCgpO1xuICB9XG4gIGRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7XG4gIC8vIGFwcGx5IHNlbGVjdGlvblxuICAvLyBUT0RPIHJlZmFjdG9yIHRoaXMsIHNlbGVjdGluZyBoZXJlIGZlZWxzIHdlaXJkXG4gIC8vIEhBQ0ssIHNldCBmbGFnIHNvIGRyYWdnaW5nIHN0YXlzIGluIGNvcnJlY3QgZGlyZWN0aW9uXG4gIHRoaXMuaXNEcmFnU2VsZWN0ID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQ7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdFbmQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmRSZXN0aW5nU2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gIC8vIGhvdyBmYXIgYXdheSBmcm9tIHNlbGVjdGVkIHNsaWRlXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgdGhpcy5zZWxlY3RlZEluZGV4ICkgKTtcbiAgLy8gZ2V0IGNsb3NldCByZXN0aW5nIGdvaW5nIHVwIGFuZCBnb2luZyBkb3duXG4gIHZhciBwb3NpdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAxICk7XG4gIHZhciBuZWdhdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAtMSApO1xuICAvLyB1c2UgY2xvc2VyIHJlc3RpbmcgZm9yIHdyYXAtYXJvdW5kXG4gIHZhciBpbmRleCA9IHBvc2l0aXZlUmVzdGluZy5kaXN0YW5jZSA8IG5lZ2F0aXZlUmVzdGluZy5kaXN0YW5jZSA/XG4gICAgcG9zaXRpdmVSZXN0aW5nLmluZGV4IDogbmVnYXRpdmVSZXN0aW5nLmluZGV4O1xuICByZXR1cm4gaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgdmFyIGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/XG4gICAgLy8gaWYgY29udGFpbiwga2VlcCBnb2luZyBpZiBkaXN0YW5jZSBpcyBlcXVhbCB0byBtaW5EaXN0YW5jZVxuICAgIGZ1bmN0aW9uKCBkLCBtZCApIHsgcmV0dXJuIGQgPD0gbWQ7IH0gOiBmdW5jdGlvbiggZCwgbWQgKSB7IHJldHVybiBkIDwgbWQ7IH07XG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIGluZGV4ICk7XG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGlzdGFuY2U6IG1pbkRpc3RhbmNlLFxuICAgIC8vIHNlbGVjdGVkIHdhcyBwcmV2aW91cyBpbmRleFxuICAgIGluZGV4OiBpbmRleCAtIGluY3JlbWVudFxuICB9O1xufTtcblxuLyoqXG4gKiBtZWFzdXJlIGRpc3RhbmNlIGJldHdlZW4geCBhbmQgYSBzbGlkZSB0YXJnZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gc2xpZGUgaW5kZXhcbiAqL1xucHJvdG8uZ2V0U2xpZGVEaXN0YW5jZSA9IGZ1bmN0aW9uKCB4LCBpbmRleCApIHtcbiAgdmFyIGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgLy8gd3JhcCBhcm91bmQgaWYgYXQgbGVhc3QgMiBzbGlkZXNcbiAgdmFyIGlzV3JhcEFyb3VuZCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIHZhciBzbGlkZUluZGV4ID0gaXNXcmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpbmRleCwgbGVuICkgOiBpbmRleDtcbiAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgaWYgKCAhc2xpZGUgKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gYWRkIGRpc3RhbmNlIGZvciB3cmFwLWFyb3VuZCBzbGlkZXNcbiAgdmFyIHdyYXAgPSBpc1dyYXBBcm91bmQgPyB0aGlzLnNsaWRlYWJsZVdpZHRoICogTWF0aC5mbG9vciggaW5kZXggLyBsZW4gKSA6IDA7XG4gIHJldHVybiB4IC0gKCBzbGlkZS50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5wcm90by5kcmFnRW5kQm9vc3RTZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXG4gIGlmICggdGhpcy5wcmV2aW91c0RyYWdYID09PSB1bmRlZmluZWQgfHwgIXRoaXMuZHJhZ01vdmVUaW1lIHx8XG4gICAgLy8gb3IgaWYgZHJhZyB3YXMgaGVsZCBmb3IgMTAwIG1zXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHN0YXRpY0NsaWNrIC0tLS0tIC8vXG5cbnByb3RvLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBnZXQgY2xpY2tlZENlbGwsIGlmIGNlbGwgd2FzIGNsaWNrZWRcbiAgdmFyIGNsaWNrZWRDZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBldmVudC50YXJnZXQgKTtcbiAgdmFyIGNlbGxFbGVtID0gY2xpY2tlZENlbGwgJiYgY2xpY2tlZENlbGwuZWxlbWVudDtcbiAgdmFyIGNlbGxJbmRleCA9IGNsaWNrZWRDZWxsICYmIHRoaXMuY2VsbHMuaW5kZXhPZiggY2xpY2tlZENlbGwgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc3RhdGljQ2xpY2snLCBldmVudCwgWyBwb2ludGVyLCBjZWxsRWxlbSwgY2VsbEluZGV4IF0gKTtcbn07XG5cbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xuXG5wcm90by5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgdmFyIHNjcm9sbE1vdmVYID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC54IC0gc2Nyb2xsLng7XG4gIHZhciBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xuICAvLyBjYW5jZWwgY2xpY2svdGFwIGlmIHNjcm9sbCBpcyB0b28gbXVjaFxuICBpZiAoIE1hdGguYWJzKCBzY3JvbGxNb3ZlWCApID4gMyB8fCBNYXRoLmFicyggc2Nyb2xsTW92ZVkgKSA+IDMgKSB7XG4gICAgdGhpcy5fcG9pbnRlckRvbmUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG4iLCIvLyBGbGlja2l0eSBtYWluXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICcuL2NlbGwnLFxuICAgICAgJy4vc2xpZGUnLFxuICAgICAgJy4vYW5pbWF0ZSdcbiAgICBdLCBmdW5jdGlvbiggRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgIHJlcXVpcmUoJy4vc2xpZGUnKSxcbiAgICAgIHJlcXVpcmUoJy4vYW5pbWF0ZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHZhciBfRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHk7XG5cbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgIF9GbGlja2l0eS5DZWxsLFxuICAgICAgX0ZsaWNraXR5LlNsaWRlLFxuICAgICAgX0ZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsXG4gIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXJzXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcbnZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG5mdW5jdGlvbiBtb3ZlRWxlbWVudHMoIGVsZW1zLCB0b0VsZW0gKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB3aGlsZSAoIGVsZW1zLmxlbmd0aCApIHtcbiAgICB0b0VsZW0uYXBwZW5kQ2hpbGQoIGVsZW1zLnNoaWZ0KCkgKTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbnZhciBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xudmFyIGluc3RhbmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciBGbGlja2l0eTogJyArICggcXVlcnlFbGVtZW50IHx8IGVsZW1lbnQgKSApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xuICAvLyBkbyBub3QgaW5pdGlhbGl6ZSB0d2ljZSBvbiBzYW1lIGVsZW1lbnRcbiAgaWYgKCB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEICkge1xuICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1sgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCBdO1xuICAgIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB1dGlscy5leHRlbmQoIHt9LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzICk7XG4gIHRoaXMub3B0aW9uKCBvcHRpb25zICk7XG5cbiAgLy8ga2ljayB0aGluZ3Mgb2ZmXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG5GbGlja2l0eS5kZWZhdWx0cyA9IHtcbiAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgLy8gYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICBjZWxsQWxpZ246ICdjZW50ZXInLFxuICAvLyBjZWxsU2VsZWN0b3I6IHVuZGVmaW5lZCxcbiAgLy8gY29udGFpbjogZmFsc2UsXG4gIGZyZWVTY3JvbGxGcmljdGlvbjogMC4wNzUsIC8vIGZyaWN0aW9uIHdoZW4gZnJlZS1zY3JvbGxpbmdcbiAgZnJpY3Rpb246IDAuMjgsIC8vIGZyaWN0aW9uIHdoZW4gc2VsZWN0aW5nXG4gIG5hbWVzcGFjZUpRdWVyeUV2ZW50czogdHJ1ZSxcbiAgLy8gaW5pdGlhbEluZGV4OiAwLFxuICBwZXJjZW50UG9zaXRpb246IHRydWUsXG4gIHJlc2l6ZTogdHJ1ZSxcbiAgc2VsZWN0ZWRBdHRyYWN0aW9uOiAwLjAyNSxcbiAgc2V0R2FsbGVyeVNpemU6IHRydWVcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMgPSBbXTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgdmFyIGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLm9yaWdpblNpZGUgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAvLyBjcmVhdGUgdmlld3BvcnQgJiBzbGlkZXJcbiAgdGhpcy52aWV3cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTmFtZSA9ICdmbGlja2l0eS12aWV3cG9ydCc7XG4gIHRoaXMuX2NyZWF0ZVNsaWRlcigpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLnJlc2l6ZSB8fCB0aGlzLm9wdGlvbnMud2F0Y2hDU1MgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIH1cblxuICAvLyBhZGQgbGlzdGVuZXJzIGZyb20gb24gb3B0aW9uXG4gIGZvciAoIHZhciBldmVudE5hbWUgaW4gdGhpcy5vcHRpb25zLm9uICkge1xuICAgIHZhciBsaXN0ZW5lciA9IHRoaXMub3B0aW9ucy5vblsgZXZlbnROYW1lIF07XG4gICAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICB9XG5cbiAgRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCk7XG4gIH0sIHRoaXMgKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy53YXRjaENTUyApIHtcbiAgICB0aGlzLndhdGNoQ1NTKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbn07XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKi9cbnByb3RvLm9wdGlvbiA9IGZ1bmN0aW9uKCBvcHRzICkge1xuICB1dGlscy5leHRlbmQoIHRoaXMub3B0aW9ucywgb3B0cyApO1xufTtcblxucHJvdG8uYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLmlzQWN0aXZlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZsaWNraXR5LWVuYWJsZWQnKTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgKSB7XG4gICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZsaWNraXR5LXJ0bCcpO1xuICB9XG5cbiAgdGhpcy5nZXRTaXplKCk7XG4gIC8vIG1vdmUgaW5pdGlhbCBjZWxsIGVsZW1lbnRzIHNvIHRoZXkgY2FuIGJlIGxvYWRlZCBhcyBjZWxsc1xuICB2YXIgY2VsbEVsZW1zID0gdGhpcy5fZmlsdGVyRmluZENlbGxFbGVtZW50cyggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XG4gIG1vdmVFbGVtZW50cyggY2VsbEVsZW1zLCB0aGlzLnNsaWRlciApO1xuICB0aGlzLnZpZXdwb3J0LmFwcGVuZENoaWxkKCB0aGlzLnNsaWRlciApO1xuICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMudmlld3BvcnQgKTtcbiAgLy8gZ2V0IGNlbGxzIGZyb20gY2hpbGRyZW5cbiAgdGhpcy5yZWxvYWRDZWxscygpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgLy8gYWxsb3cgZWxlbWVudCB0byBmb2N1c2FibGVcbiAgICB0aGlzLmVsZW1lbnQudGFiSW5kZXggPSAwO1xuICAgIC8vIGxpc3RlbiBmb3Iga2V5IHByZXNzZXNcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzICk7XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCgnYWN0aXZhdGUnKTtcbiAgdGhpcy5zZWxlY3RJbml0aWFsSW5kZXgoKTtcbiAgLy8gZmxhZyBmb3IgaW5pdGlhbCBhY3RpdmF0aW9uLCBmb3IgdXNpbmcgaW5pdGlhbEluZGV4XG4gIHRoaXMuaXNJbml0QWN0aXZhdGVkID0gdHJ1ZTtcbiAgLy8gcmVhZHkgZXZlbnQuICM0OTNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCdyZWFkeScpO1xufTtcblxuLy8gc2xpZGVyIHBvc2l0aW9ucyB0aGUgY2VsbHNcbnByb3RvLl9jcmVhdGVTbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2xpZGVyIGVsZW1lbnQgZG9lcyBhbGwgdGhlIHBvc2l0aW9uaW5nXG4gIHZhciBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2xpZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1zbGlkZXInO1xuICBzbGlkZXIuc3R5bGVbIHRoaXMub3JpZ2luU2lkZSBdID0gMDtcbiAgdGhpcy5zbGlkZXIgPSBzbGlkZXI7XG59O1xuXG5wcm90by5fZmlsdGVyRmluZENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgcmV0dXJuIHV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyggZWxlbXMsIHRoaXMub3B0aW9ucy5jZWxsU2VsZWN0b3IgKTtcbn07XG5cbi8vIGdvZXMgdGhyb3VnaCBhbGwgY2hpbGRyZW5cbnByb3RvLnJlbG9hZENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICB0aGlzLmNlbGxzID0gdGhpcy5fbWFrZUNlbGxzKCB0aGlzLnNsaWRlci5jaGlsZHJlbiApO1xuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fZ2V0V3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xufTtcblxuLyoqXG4gKiB0dXJuIGVsZW1lbnRzIGludG8gRmxpY2tpdHkuQ2VsbHNcbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgSFRNTEVsZW1lbnR9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgRmxpY2tpdHkgQ2VsbHNcbiAqL1xucHJvdG8uX21ha2VDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIGVsZW1zICk7XG5cbiAgLy8gY3JlYXRlIG5ldyBGbGlja2l0eSBmb3IgY29sbGVjdGlvblxuICB2YXIgY2VsbHMgPSBjZWxsRWxlbXMubWFwKCBmdW5jdGlvbiggY2VsbEVsZW0gKSB7XG4gICAgcmV0dXJuIG5ldyBDZWxsKCBjZWxsRWxlbSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxucHJvdG8uZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxucHJvdG8uZ2V0TGFzdFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNsaWRlc1sgdGhpcy5zbGlkZXMubGVuZ3RoIC0gMSBdO1xufTtcblxuLy8gcG9zaXRpb25zIGFsbCBjZWxsc1xucHJvdG8ucG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBzaXplIGFsbCBjZWxsc1xuICB0aGlzLl9zaXplQ2VsbHMoIHRoaXMuY2VsbHMgKTtcbiAgLy8gcG9zaXRpb24gYWxsIGNlbGxzXG4gIHRoaXMuX3Bvc2l0aW9uQ2VsbHMoIDAgKTtcbn07XG5cbi8qKlxuICogcG9zaXRpb24gY2VydGFpbiBjZWxsc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIHdoaWNoIGNlbGwgdG8gc3RhcnQgd2l0aFxuICovXG5wcm90by5fcG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAvLyBhbHNvIG1lYXN1cmUgbWF4Q2VsbEhlaWdodFxuICAvLyBzdGFydCAwIGlmIHBvc2l0aW9uaW5nIGFsbCBjZWxsc1xuICB0aGlzLm1heENlbGxIZWlnaHQgPSBpbmRleCA/IHRoaXMubWF4Q2VsbEhlaWdodCB8fCAwIDogMDtcbiAgdmFyIGNlbGxYID0gMDtcbiAgLy8gZ2V0IGNlbGxYXG4gIGlmICggaW5kZXggPiAwICkge1xuICAgIHZhciBzdGFydENlbGwgPSB0aGlzLmNlbGxzWyBpbmRleCAtIDEgXTtcbiAgICBjZWxsWCA9IHN0YXJ0Q2VsbC54ICsgc3RhcnRDZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIGZvciAoIHZhciBpPWluZGV4OyBpIDwgbGVuOyBpKysgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzW2ldO1xuICAgIGNlbGwuc2V0UG9zaXRpb24oIGNlbGxYICk7XG4gICAgY2VsbFggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gICAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5tYXhDZWxsSGVpZ2h0ICk7XG4gIH1cbiAgLy8ga2VlcCB0cmFjayBvZiBjZWxsWCBmb3Igd3JhcC1hcm91bmRcbiAgdGhpcy5zbGlkZWFibGVXaWR0aCA9IGNlbGxYO1xuICAvLyBzbGlkZXNcbiAgdGhpcy51cGRhdGVTbGlkZXMoKTtcbiAgLy8gY29udGFpbiBzbGlkZXMgdGFyZ2V0XG4gIHRoaXMuX2NvbnRhaW5TbGlkZXMoKTtcbiAgLy8gdXBkYXRlIHNsaWRlc1dpZHRoXG4gIHRoaXMuc2xpZGVzV2lkdGggPSBsZW4gPyB0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldCAtIHRoaXMuc2xpZGVzWzBdLnRhcmdldCA6IDA7XG59O1xuXG4vKipcbiAqIGNlbGwuZ2V0U2l6ZSgpIG9uIG11bHRpcGxlIGNlbGxzXG4gKiBAcGFyYW0ge0FycmF5fSBjZWxsc1xuICovXG5wcm90by5fc2l6ZUNlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLmdldFNpemUoKTtcbiAgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udXBkYXRlU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2xpZGVzID0gW107XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzbGlkZSA9IG5ldyBTbGlkZSggdGhpcyApO1xuICB0aGlzLnNsaWRlcy5wdXNoKCBzbGlkZSApO1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5vcmlnaW5TaWRlID09ICdsZWZ0JztcbiAgdmFyIG5leHRNYXJnaW4gPSBpc09yaWdpbkxlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuXG4gIHZhciBjYW5DZWxsRml0ID0gdGhpcy5fZ2V0Q2FuQ2VsbEZpdCgpO1xuXG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwsIGkgKSB7XG4gICAgLy8ganVzdCBhZGQgY2VsbCBpZiBmaXJzdCBjZWxsIGluIHNsaWRlXG4gICAgaWYgKCAhc2xpZGUuY2VsbHMubGVuZ3RoICkge1xuICAgICAgc2xpZGUuYWRkQ2VsbCggY2VsbCApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzbGlkZVdpZHRoID0gKCBzbGlkZS5vdXRlcldpZHRoIC0gc2xpZGUuZmlyc3RNYXJnaW4gKSArXG4gICAgICAoIGNlbGwuc2l6ZS5vdXRlcldpZHRoIC0gY2VsbC5zaXplWyBuZXh0TWFyZ2luIF0gKTtcblxuICAgIGlmICggY2FuQ2VsbEZpdC5jYWxsKCB0aGlzLCBpLCBzbGlkZVdpZHRoICkgKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvZXNuJ3QgZml0LCBuZXcgc2xpZGVcbiAgICAgIHNsaWRlLnVwZGF0ZVRhcmdldCgpO1xuXG4gICAgICBzbGlkZSA9IG5ldyBTbGlkZSggdGhpcyApO1xuICAgICAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbiAgLy8gbGFzdCBzbGlkZVxuICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcbiAgLy8gdXBkYXRlIC5zZWxlY3RlZFNsaWRlXG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xufTtcblxucHJvdG8uX2dldENhbkNlbGxGaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdyb3VwQ2VsbHMgPSB0aGlzLm9wdGlvbnMuZ3JvdXBDZWxscztcbiAgaWYgKCAhZ3JvdXBDZWxscyApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gZ3JvdXAgYnkgbnVtYmVyLiAzIC0+IFswLDEsMl0sIFszLDQsNV0sIC4uLlxuICAgIHZhciBudW1iZXIgPSBwYXJzZUludCggZ3JvdXBDZWxscywgMTAgKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oIGkgKSB7XG4gICAgICByZXR1cm4gKCBpICUgbnVtYmVyICkgIT09IDA7XG4gICAgfTtcbiAgfVxuICAvLyBkZWZhdWx0LCBncm91cCBieSB3aWR0aCBvZiBzbGlkZVxuICAvLyBwYXJzZSAnNzUlXG4gIHZhciBwZXJjZW50TWF0Y2ggPSB0eXBlb2YgZ3JvdXBDZWxscyA9PSAnc3RyaW5nJyAmJlxuICAgIGdyb3VwQ2VsbHMubWF0Y2goL14oXFxkKyklJC8pO1xuICB2YXIgcGVyY2VudCA9IHBlcmNlbnRNYXRjaCA/IHBhcnNlSW50KCBwZXJjZW50TWF0Y2hbMV0sIDEwICkgLyAxMDAgOiAxO1xuICByZXR1cm4gZnVuY3Rpb24oIGksIHNsaWRlV2lkdGggKSB7XG4gICAgcmV0dXJuIHNsaWRlV2lkdGggPD0gKCB0aGlzLnNpemUuaW5uZXJXaWR0aCArIDEgKSAqIHBlcmNlbnQ7XG4gIH07XG59O1xuXG4vLyBhbGlhcyBfaW5pdCBmb3IgalF1ZXJ5IHBsdWdpbiAuZmxpY2tpdHkoKVxucHJvdG8uX2luaXQgPVxucHJvdG8ucmVwb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG4gIHRoaXMuc2V0Q2VsbEFsaWduKCk7XG4gIHRoaXMuY3Vyc29yUG9zaXRpb24gPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xufTtcblxudmFyIGNlbGxBbGlnblNob3J0aGFuZHMgPSB7XG4gIC8vIGNlbGwgYWxpZ24sIHRoZW4gYmFzZWQgb24gb3JpZ2luIHNpZGVcbiAgY2VudGVyOiB7XG4gICAgbGVmdDogMC41LFxuICAgIHJpZ2h0OiAwLjVcbiAgfSxcbiAgbGVmdDoge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDFcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICByaWdodDogMCxcbiAgICBsZWZ0OiAxXG4gIH1cbn07XG5cbnByb3RvLnNldENlbGxBbGlnbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2hvcnRoYW5kID0gY2VsbEFsaWduU2hvcnRoYW5kc1sgdGhpcy5vcHRpb25zLmNlbGxBbGlnbiBdO1xuICB0aGlzLmNlbGxBbGlnbiA9IHNob3J0aGFuZCA/IHNob3J0aGFuZFsgdGhpcy5vcmlnaW5TaWRlIF0gOiB0aGlzLm9wdGlvbnMuY2VsbEFsaWduO1xufTtcblxucHJvdG8uc2V0R2FsbGVyeVNpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMuc2V0R2FsbGVyeVNpemUgKSB7XG4gICAgdmFyIGhlaWdodCA9IHRoaXMub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCAmJiB0aGlzLnNlbGVjdGVkU2xpZGUgP1xuICAgICAgdGhpcy5zZWxlY3RlZFNsaWRlLmhlaWdodCA6IHRoaXMubWF4Q2VsbEhlaWdodDtcbiAgICB0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gIH1cbn07XG5cbnByb3RvLl9nZXRXcmFwU2hpZnRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBvbmx5IGZvciB3cmFwLWFyb3VuZFxuICBpZiAoICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdW5zaGlmdCBwcmV2aW91cyBjZWxsc1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscyApO1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzICk7XG4gIC8vIGdldCBiZWZvcmUgY2VsbHNcbiAgLy8gaW5pdGlhbCBnYXBcbiAgdmFyIGdhcFggPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICB2YXIgY2VsbEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggZ2FwWCwgY2VsbEluZGV4LCAtMSApO1xuICAvLyBnZXQgYWZ0ZXIgY2VsbHNcbiAgLy8gZW5kaW5nIGdhcCBiZXR3ZWVuIGxhc3QgY2VsbCBhbmQgZW5kIG9mIGdhbGxlcnkgdmlld3BvcnRcbiAgZ2FwWCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgLy8gc3RhcnQgY2xvbmluZyBhdCBmaXJzdCBjZWxsLCB3b3JraW5nIGZvcndhcmRzXG4gIHRoaXMuYWZ0ZXJTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGdhcFgsIDAsIDEgKTtcbn07XG5cbnByb3RvLl9nZXRHYXBDZWxscyA9IGZ1bmN0aW9uKCBnYXBYLCBjZWxsSW5kZXgsIGluY3JlbWVudCApIHtcbiAgLy8ga2VlcCBhZGRpbmcgY2VsbHMgdW50aWwgdGhlIGNvdmVyIHRoZSBpbml0aWFsIGdhcFxuICB2YXIgY2VsbHMgPSBbXTtcbiAgd2hpbGUgKCBnYXBYID4gMCApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbIGNlbGxJbmRleCBdO1xuICAgIGlmICggIWNlbGwgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIGNlbGxJbmRleCArPSBpbmNyZW1lbnQ7XG4gICAgZ2FwWCAtPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vLyAtLS0tLSBjb250YWluIC0tLS0tIC8vXG5cbi8vIGNvbnRhaW4gY2VsbCB0YXJnZXRzIHNvIG5vIGV4Y2VzcyBzbGlkaW5nXG5wcm90by5fY29udGFpblNsaWRlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuY29udGFpbiB8fCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCB8fCAhdGhpcy5jZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpc1JpZ2h0VG9MZWZ0ID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0O1xuICB2YXIgYmVnaW5NYXJnaW4gPSBpc1JpZ2h0VG9MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdmFyIGVuZE1hcmdpbiA9IGlzUmlnaHRUb0xlZnQgPyAnbWFyZ2luTGVmdCcgOiAnbWFyZ2luUmlnaHQnO1xuICB2YXIgY29udGVudFdpZHRoID0gdGhpcy5zbGlkZWFibGVXaWR0aCAtIHRoaXMuZ2V0TGFzdENlbGwoKS5zaXplWyBlbmRNYXJnaW4gXTtcbiAgLy8gY29udGVudCBpcyBsZXNzIHRoYW4gZ2FsbGVyeSBzaXplXG4gIHZhciBpc0NvbnRlbnRTbWFsbGVyID0gY29udGVudFdpZHRoIDwgdGhpcy5zaXplLmlubmVyV2lkdGg7XG4gIC8vIGJvdW5kc1xuICB2YXIgYmVnaW5Cb3VuZCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB0aGlzLmNlbGxzWzBdLnNpemVbIGJlZ2luTWFyZ2luIF07XG4gIHZhciBlbmRCb3VuZCA9IGNvbnRlbnRXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoICogKCAxIC0gdGhpcy5jZWxsQWxpZ24gKTtcbiAgLy8gY29udGFpbiBlYWNoIGNlbGwgdGFyZ2V0XG4gIHRoaXMuc2xpZGVzLmZvckVhY2goIGZ1bmN0aW9uKCBzbGlkZSApIHtcbiAgICBpZiAoIGlzQ29udGVudFNtYWxsZXIgKSB7XG4gICAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XG4gICAgICBzbGlkZS50YXJnZXQgPSBjb250ZW50V2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29udGFpbiB0byBib3VuZHNcbiAgICAgIHNsaWRlLnRhcmdldCA9IE1hdGgubWF4KCBzbGlkZS50YXJnZXQsIGJlZ2luQm91bmQgKTtcbiAgICAgIHNsaWRlLnRhcmdldCA9IE1hdGgubWluKCBzbGlkZS50YXJnZXQsIGVuZEJvdW5kICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuLyoqXG4gKiBlbWl0cyBldmVudHMgdmlhIGV2ZW50RW1pdHRlciBhbmQgalF1ZXJ5IGV2ZW50c1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBuYW1lIG9mIGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIG9yaWdpbmFsIGV2ZW50XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gZXh0cmEgYXJndW1lbnRzXG4gKi9cbnByb3RvLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiggdHlwZSwgZXZlbnQsIGFyZ3MgKSB7XG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgJiYgdGhpcy4kZWxlbWVudCApIHtcbiAgICAvLyBkZWZhdWx0IHRyaWdnZXIgd2l0aCB0eXBlIGlmIG5vIGV2ZW50XG4gICAgdHlwZSArPSB0aGlzLm9wdGlvbnMubmFtZXNwYWNlSlF1ZXJ5RXZlbnRzID8gJy5mbGlja2l0eScgOiAnJztcbiAgICB2YXIgJGV2ZW50ID0gdHlwZTtcbiAgICBpZiAoIGV2ZW50ICkge1xuICAgICAgLy8gY3JlYXRlIGpRdWVyeSBldmVudFxuICAgICAgdmFyIGpRRXZlbnQgPSBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2VsZWN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxuICogQHBhcmFtIHtCb29sZWFufSBpc1dyYXAgLSB3aWxsIHdyYXAtYXJvdW5kIHRvIGxhc3QvZmlyc3QgaWYgYXQgdGhlIGVuZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSB3aWxsIGltbWVkaWF0ZWx5IHNldCBwb3NpdGlvbiBhdCBzZWxlY3RlZCBjZWxsXG4gKi9cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgaXNXcmFwICkge1xuICAgIGluZGV4ID0gdXRpbHMubW9kdWxvKCBpbmRleCwgdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBpbnZhbGlkIGluZGV4XG4gIGlmICggIXRoaXMuc2xpZGVzWyBpbmRleCBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPSBwcmV2SW5kZXggKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnY2hhbmdlJywgbnVsbCwgWyBpbmRleCBdICk7XG4gIH1cbiAgLy8gb2xkIHYxIGV2ZW50IG5hbWUsIHJlbW92ZSBpbiB2M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2NlbGxTZWxlY3QnKTtcbn07XG5cbi8vIHdyYXBzIHBvc2l0aW9uIGZvciB3cmFwQXJvdW5kLCB0byBtb3ZlIHRvIGNsb3Nlc3Qgc2xpZGUuICMxMTNcbnByb3RvLl93cmFwU2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICB2YXIgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICB2YXIgaXNXcmFwcGluZyA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGlmICggIWlzV3JhcHBpbmcgKSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIHZhciB3cmFwSW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKTtcbiAgLy8gZ28gdG8gc2hvcnRlc3RcbiAgdmFyIGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuICB2YXIgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGlmICggIXRoaXMuaXNEcmFnU2VsZWN0ICYmIGJhY2tXcmFwRGVsdGEgPCBkZWx0YSApIHtcbiAgICBpbmRleCArPSBsZW47XG4gIH0gZWxzZSBpZiAoICF0aGlzLmlzRHJhZ1NlbGVjdCAmJiBmb3Jld2FyZFdyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgIGluZGV4IC09IGxlbjtcbiAgfVxuICAvLyB3cmFwIHBvc2l0aW9uIHNvIHNsaWRlciBpcyB3aXRoaW4gbm9ybWFsIGFyZWFcbiAgaWYgKCBpbmRleCA8IDAgKSB7XG4gICAgdGhpcy54IC09IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH0gZWxzZSBpZiAoIGluZGV4ID49IGxlbiApIHtcbiAgICB0aGlzLnggKz0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgc2xpZGVcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gdXBkYXRlIG5ldyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnNlbGVjdGVkU2xpZGUgPSBzbGlkZTtcbiAgc2xpZGUuc2VsZWN0KCk7XG4gIHRoaXMuc2VsZWN0ZWRDZWxscyA9IHNsaWRlLmNlbGxzO1xuICB0aGlzLnNlbGVjdGVkRWxlbWVudHMgPSBzbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcbiAgLy8gSEFDSzogc2VsZWN0ZWRDZWxsICYgc2VsZWN0ZWRFbGVtZW50IGlzIGZpcnN0IGNlbGwgaW4gc2xpZGUsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIC8vIFJlbW92ZSBpbiB2Mz9cbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB7XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLnVuc2VsZWN0KCk7XG4gIH1cbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50IG9yIE51bWJlcn0gZWxlbVxuICovXG5wcm90by5zZWxlY3RDZWxsID0gZnVuY3Rpb24oIHZhbHVlLCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgLy8gZ2V0IGNlbGxcbiAgdmFyIGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggdmFsdWUgKTtcbiAgaWYgKCAhY2VsbCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgaXNXcmFwLCBpc0luc3RhbnQgKTtcbn07XG5cbnByb3RvLmdldENlbGxTbGlkZUluZGV4ID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIC8vIGdldCBpbmRleCBvZiBzbGlkZXMgdGhhdCBoYXMgY2VsbFxuICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbaV07XG4gICAgdmFyIGluZGV4ID0gc2xpZGUuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldCBjZWxscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBGbGlja2l0eS5DZWxsLCBnaXZlbiBhbiBFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1cbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSBpdGVtXG4gKi9cbnByb3RvLmdldENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgdGhpcy5jZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgaWYgKCBjZWxsLmVsZW1lbnQgPT0gZWxlbSApIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBGbGlja2l0eS5DZWxscywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7RWxlbWVudCwgQXJyYXksIE5vZGVMaXN0fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBjZWxscyAtIEZsaWNraXR5LkNlbGxzXG4gKi9cbnByb3RvLmdldENlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGNlbGxzID0gW107XG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIH1cbiAgfSwgdGhpcyApO1xuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vKipcbiAqIGdldCBjZWxsIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxFbGVtc1xuICovXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbC5lbGVtZW50O1xuICB9KTtcbn07XG5cbi8qKlxuICogZ2V0IHBhcmVudCBjZWxsIGZyb20gYW4gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7RmxpY2tpdC5DZWxsfSBjZWxsXG4gKi9cbnByb3RvLmdldFBhcmVudENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gZmlyc3QgY2hlY2sgaWYgZWxlbSBpcyBjZWxsXG4gIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gIGlmICggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICAvLyB0cnkgdG8gZ2V0IHBhcmVudCBjZWxsIGVsZW1cbiAgZWxlbSA9IHV0aWxzLmdldFBhcmVudCggZWxlbSwgJy5mbGlja2l0eS1zbGlkZXIgPiAqJyApO1xuICByZXR1cm4gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG59O1xuXG4vKipcbiAqIGdldCBjZWxscyBhZGphY2VudCB0byBhIHNsaWRlXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGFkakNvdW50IC0gbnVtYmVyIG9mIGFkamFjZW50IHNsaWRlc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHNsaWRlIHRvIHN0YXJ0XG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gYXJyYXkgb2YgRmxpY2tpdHkuQ2VsbHNcbiAqL1xucHJvdG8uZ2V0QWRqYWNlbnRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggYWRqQ291bnQsIGluZGV4ICkge1xuICBpZiAoICFhZGpDb3VudCApIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFNsaWRlLmdldENlbGxFbGVtZW50cygpO1xuICB9XG4gIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuc2VsZWN0ZWRJbmRleCA6IGluZGV4O1xuXG4gIHZhciBsZW4gPSB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gIGlmICggMSArICggYWRqQ291bnQgKiAyICkgPj0gbGVuICkge1xuICAgIHJldHVybiB0aGlzLmdldENlbGxFbGVtZW50cygpO1xuICB9XG5cbiAgdmFyIGNlbGxFbGVtcyA9IFtdO1xuICBmb3IgKCB2YXIgaSA9IGluZGV4IC0gYWRqQ291bnQ7IGkgPD0gaW5kZXggKyBhZGpDb3VudCA7IGkrKyApIHtcbiAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XG4gICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgICBpZiAoIHNsaWRlICkge1xuICAgICAgY2VsbEVsZW1zID0gY2VsbEVsZW1zLmNvbmNhdCggc2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxFbGVtcztcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50LCBTZWxlY3RvciBTdHJpbmcsIG9yIE51bWJlcn0gc2VsZWN0b3JcbiAqL1xucHJvdG8ucXVlcnlDZWxsID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PSAnbnVtYmVyJyApIHtcbiAgICAvLyB1c2UgbnVtYmVyIGFzIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuY2VsbHNbIHNlbGVjdG9yIF07XG4gIH1cbiAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycgKSB7XG4gICAgLy8gZG8gbm90IHNlbGVjdCBpbnZhbGlkIHNlbGVjdG9ycyBmcm9tIGhhc2g6ICMxMjMsICMvLiAjNzkxXG4gICAgaWYgKCBzZWxlY3Rvci5tYXRjaCgvXlsjXFwuXT9bXFxkXFwvXS8pICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB1c2Ugc3RyaW5nIGFzIHNlbGVjdG9yLCBnZXQgZWxlbWVudFxuICAgIHNlbGVjdG9yID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yICk7XG4gIH1cbiAgLy8gZ2V0IGNlbGwgZnJvbSBlbGVtZW50XG4gIHJldHVybiB0aGlzLmdldENlbGwoIHNlbGVjdG9yICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBldmVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udWlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbWl0RXZlbnQoJ3VpQ2hhbmdlJyk7XG59O1xuXG4vLyBrZWVwIGZvY3VzIG9uIGVsZW1lbnQgd2hlbiBjaGlsZCBVSSBlbGVtZW50cyBhcmUgY2xpY2tlZFxucHJvdG8uY2hpbGRVSVBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBIQUNLIGlPUyBkb2VzIG5vdCBhbGxvdyB0b3VjaCBldmVudHMgdG8gYnViYmxlIHVwPyFcbiAgaWYgKCBldmVudC50eXBlICE9ICd0b3VjaHN0YXJ0JyApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIHRoaXMuZm9jdXMoKTtcbn07XG5cbi8vIC0tLS0tIHJlc2l6ZSAtLS0tLSAvL1xuXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndhdGNoQ1NTKCk7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xuXG5wcm90by5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5nZXRTaXplKCk7XG4gIC8vIHdyYXAgdmFsdWVzXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgdGhpcy54ID0gdXRpbHMubW9kdWxvKCB0aGlzLngsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgfVxuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fZ2V0V3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB0aGlzLmVtaXRFdmVudCgncmVzaXplJyk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBpbmRleCBmb3IgZ3JvdXAgc2xpZGVzLCBpbnN0YW50XG4gIC8vIFRPRE86IHBvc2l0aW9uIGNhbiBiZSBsb3N0IGJldHdlZW4gZ3JvdXBzIG9mIHZhcmlvdXMgbnVtYmVyc1xuICB2YXIgc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzICYmIHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbiAgdGhpcy5zZWxlY3RDZWxsKCBzZWxlY3RlZEVsZW1lbnQsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xucHJvdG8ud2F0Y2hDU1MgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdhdGNoT3B0aW9uID0gdGhpcy5vcHRpb25zLndhdGNoQ1NTO1xuICBpZiAoICF3YXRjaE9wdGlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYWZ0ZXJDb250ZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50LCAnOmFmdGVyJyApLmNvbnRlbnQ7XG4gIC8vIGFjdGl2YXRlIGlmIDphZnRlciB7IGNvbnRlbnQ6ICdmbGlja2l0eScgfVxuICBpZiAoIGFmdGVyQ29udGVudC5pbmRleE9mKCdmbGlja2l0eScpICE9IC0xICkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0ga2V5ZG93biAtLS0tLSAvL1xuXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXG5wcm90by5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIG9ubHkgd29yayBpZiBlbGVtZW50IGlzIGluIGZvY3VzXG4gIHZhciBpc05vdEZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50O1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fGlzTm90Rm9jdXNlZCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IEZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnNbIGV2ZW50LmtleUNvZGUgXTtcbiAgaWYgKCBoYW5kbGVyICkge1xuICAgIGhhbmRsZXIuY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG5GbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzID0ge1xuICAvLyBsZWZ0IGFycm93XG4gIDM3OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXNbIGxlZnRNZXRob2QgXSgpO1xuICB9LFxuICAvLyByaWdodCBhcnJvd1xuICAzOTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJpZ2h0TWV0aG9kID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ3ByZXZpb3VzJyA6ICduZXh0JztcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpc1sgcmlnaHRNZXRob2QgXSgpO1xuICB9LFxufTtcblxuLy8gLS0tLS0gZm9jdXMgLS0tLS0gLy9cblxucHJvdG8uZm9jdXMgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ETyByZW1vdmUgc2Nyb2xsVG8gb25jZSBmb2N1cyBvcHRpb25zIGdldHMgbW9yZSBzdXBwb3J0XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MRWxlbWVudC9mb2N1cyNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgdmFyIHByZXZTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICB0aGlzLmVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAvLyBoYWNrIHRvIGZpeCBzY3JvbGwganVtcCBhZnRlciBmb2N1cywgIzc2XG4gIGlmICggd2luZG93LnBhZ2VZT2Zmc2V0ICE9IHByZXZTY3JvbGxZICkge1xuICAgIHdpbmRvdy5zY3JvbGxUbyggd2luZG93LnBhZ2VYT2Zmc2V0LCBwcmV2U2Nyb2xsWSApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxucHJvdG8uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktcnRsJyk7XG4gIHRoaXMudW5zZWxlY3RTZWxlY3RlZFNsaWRlKCk7XG4gIC8vIGRlc3Ryb3kgY2VsbHNcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLmRlc3Ryb3koKTtcbiAgfSk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBtb3ZlIGNoaWxkIGVsZW1lbnRzIGJhY2sgaW50byBlbGVtZW50XG4gIG1vdmVFbGVtZW50cyggdGhpcy5zbGlkZXIuY2hpbGRyZW4sIHRoaXMuZWxlbWVudCApO1xuICBpZiAoIHRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ICkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYkluZGV4Jyk7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcyApO1xuICB9XG4gIC8vIHNldCBmbGFnc1xuICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gIHRoaXMuZW1pdEV2ZW50KCdkZWFjdGl2YXRlJyk7XG59O1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgdGhpcy5hbGxPZmYoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ2Rlc3Ryb3knKTtcbiAgaWYgKCBqUXVlcnkgJiYgdGhpcy4kZWxlbWVudCApIHtcbiAgICBqUXVlcnkucmVtb3ZlRGF0YSggdGhpcy5lbGVtZW50LCAnZmxpY2tpdHknICk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQ7XG4gIGRlbGV0ZSBpbnN0YW5jZXNbIHRoaXMuZ3VpZCBdO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggcHJvdG8sIGFuaW1hdGVQcm90b3R5cGUgKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZXh0cmFzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5IGluc3RhbmNlIGZyb20gZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7RmxpY2tpdHl9XG4gKi9cbkZsaWNraXR5LmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xuICB2YXIgaWQgPSBlbGVtICYmIGVsZW0uZmxpY2tpdHlHVUlEO1xuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xufTtcblxudXRpbHMuaHRtbEluaXQoIEZsaWNraXR5LCAnZmxpY2tpdHknICk7XG5cbmlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xuICBqUXVlcnkuYnJpZGdldCggJ2ZsaWNraXR5JywgRmxpY2tpdHkgKTtcbn1cblxuLy8gc2V0IGludGVybmFsIGpRdWVyeSwgZm9yIFdlYnBhY2sgKyBqUXVlcnkgdjMsICM0NzhcbkZsaWNraXR5LnNldEpRdWVyeSA9IGZ1bmN0aW9uKCBqcSApIHtcbiAgalF1ZXJ5ID0ganE7XG59O1xuXG5GbGlja2l0eS5DZWxsID0gQ2VsbDtcbkZsaWNraXR5LlNsaWRlID0gU2xpZGU7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSkpO1xuIiwiLyohXG4gKiBGbGlja2l0eSB2Mi4yLjFcbiAqIFRvdWNoLCByZXNwb25zaXZlLCBmbGlja2FibGUgY2Fyb3VzZWxzXG4gKlxuICogTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxuICogb3IgRmxpY2tpdHkgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxuICpcbiAqIGh0dHBzOi8vZmxpY2tpdHkubWV0YWZpenp5LmNvXG4gKiBDb3B5cmlnaHQgMjAxNS0yMDE5IE1ldGFmaXp6eVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnLi9kcmFnJyxcbiAgICAgICcuL3ByZXYtbmV4dC1idXR0b24nLFxuICAgICAgJy4vcGFnZS1kb3RzJyxcbiAgICAgICcuL3BsYXllcicsXG4gICAgICAnLi9hZGQtcmVtb3ZlLWNlbGwnLFxuICAgICAgJy4vbGF6eWxvYWQnXG4gICAgXSwgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnLi9kcmFnJyksXG4gICAgICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKSxcbiAgICAgIHJlcXVpcmUoJy4vcGFnZS1kb3RzJyksXG4gICAgICByZXF1aXJlKCcuL3BsYXllcicpLFxuICAgICAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKSxcbiAgICAgIHJlcXVpcmUoJy4vbGF6eWxvYWQnKVxuICAgICk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UqL1xuICByZXR1cm4gRmxpY2tpdHk7XG59KTtcbiIsIi8vIGxhenlsb2FkXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XG4ndXNlIHN0cmljdCc7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZUxhenlsb2FkJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVMYXp5bG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy5sYXp5TG9hZCApO1xufTtcblxucHJvdG8ubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhenlMb2FkID0gdGhpcy5vcHRpb25zLmxhenlMb2FkO1xuICBpZiAoICFsYXp5TG9hZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IGFkamFjZW50IGNlbGxzLCB1c2UgbGF6eUxvYWQgb3B0aW9uIGZvciBhZGphY2VudCBjb3VudFxuICB2YXIgYWRqQ291bnQgPSB0eXBlb2YgbGF6eUxvYWQgPT0gJ251bWJlcicgPyBsYXp5TG9hZCA6IDA7XG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApO1xuICAvLyBnZXQgbGF6eSBpbWFnZXMgaW4gdGhvc2UgY2VsbHNcbiAgdmFyIGxhenlJbWFnZXMgPSBbXTtcbiAgY2VsbEVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsRWxlbSApIHtcbiAgICB2YXIgbGF6eUNlbGxJbWFnZXMgPSBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKTtcbiAgICBsYXp5SW1hZ2VzID0gbGF6eUltYWdlcy5jb25jYXQoIGxhenlDZWxsSW1hZ2VzICk7XG4gIH0pO1xuICAvLyBsb2FkIGxhenkgaW1hZ2VzXG4gIGxhenlJbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGltZyApIHtcbiAgICBuZXcgTGF6eUxvYWRlciggaW1nLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbmZ1bmN0aW9uIGdldENlbGxMYXp5SW1hZ2VzKCBjZWxsRWxlbSApIHtcbiAgLy8gY2hlY2sgaWYgY2VsbCBlbGVtZW50IGlzIGxhenkgaW1hZ2VcbiAgaWYgKCBjZWxsRWxlbS5ub2RlTmFtZSA9PSAnSU1HJyApIHtcbiAgICB2YXIgbGF6eWxvYWRBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkJyk7XG4gICAgdmFyIHNyY0F0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjJyk7XG4gICAgdmFyIHNyY3NldEF0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0Jyk7XG4gICAgaWYgKCBsYXp5bG9hZEF0dHIgfHwgc3JjQXR0ciB8fCBzcmNzZXRBdHRyICkge1xuICAgICAgcmV0dXJuIFsgY2VsbEVsZW0gXTtcbiAgICB9XG4gIH1cbiAgLy8gc2VsZWN0IGxhenkgaW1hZ2VzIGluIGNlbGxcbiAgdmFyIGxhenlTZWxlY3RvciA9ICdpbWdbZGF0YS1mbGlja2l0eS1sYXp5bG9hZF0sICcgK1xuICAgICdpbWdbZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNdLCBpbWdbZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXRdJztcbiAgdmFyIGltZ3MgPSBjZWxsRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBsYXp5U2VsZWN0b3IgKTtcbiAgcmV0dXJuIHV0aWxzLm1ha2VBcnJheSggaW1ncyApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMYXp5TG9hZGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY2xhc3MgdG8gaGFuZGxlIGxvYWRpbmcgaW1hZ2VzXG4gKi9cbmZ1bmN0aW9uIExhenlMb2FkZXIoIGltZywgZmxpY2tpdHkgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xuICB0aGlzLmZsaWNraXR5ID0gZmxpY2tpdHk7XG4gIHRoaXMubG9hZCgpO1xufVxuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGdldCBzcmMgJiBzcmNzZXRcbiAgdmFyIHNyYyA9IHRoaXMuaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpIHx8XG4gICAgdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyYycpO1xuICB2YXIgc3Jjc2V0ID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldCcpO1xuICAvLyBzZXQgc3JjICYgc2Vyc2V0XG4gIHRoaXMuaW1nLnNyYyA9IHNyYztcbiAgaWYgKCBzcmNzZXQgKSB7XG4gICAgdGhpcy5pbWcuc2V0QXR0cmlidXRlKCAnc3Jjc2V0Jywgc3Jjc2V0ICk7XG4gIH1cbiAgLy8gcmVtb3ZlIGF0dHJcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkJyk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmMnKTtcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldCcpO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenlsb2FkZWQnICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenllcnJvcicgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oIGV2ZW50LCBjbGFzc05hbWUgKSB7XG4gIC8vIHVuYmluZCBldmVudHNcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcblxuICB2YXIgY2VsbCA9IHRoaXMuZmxpY2tpdHkuZ2V0UGFyZW50Q2VsbCggdGhpcy5pbWcgKTtcbiAgdmFyIGNlbGxFbGVtID0gY2VsbCAmJiBjZWxsLmVsZW1lbnQ7XG4gIHRoaXMuZmxpY2tpdHkuY2VsbFNpemVDaGFuZ2UoIGNlbGxFbGVtICk7XG5cbiAgdGhpcy5pbWcuY2xhc3NMaXN0LmFkZCggY2xhc3NOYW1lICk7XG4gIHRoaXMuZmxpY2tpdHkuZGlzcGF0Y2hFdmVudCggJ2xhenlMb2FkJywgZXZlbnQsIGNlbGxFbGVtICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuTGF6eUxvYWRlciA9IExhenlMb2FkZXI7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSkpO1xuIiwiLy8gcGFnZSBkb3RzXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgndW5pcG9pbnRlcicpLFxuICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgd2luZG93LlVuaXBvaW50ZXIsXG4gICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQYWdlRG90cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFBhZ2VEb3RzKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUGFnZURvdHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuUGFnZURvdHMucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gY3JlYXRlIGhvbGRlciBlbGVtZW50XG4gIHRoaXMuaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb2wnKTtcbiAgdGhpcy5ob2xkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90cyc7XG4gIC8vIGNyZWF0ZSBkb3RzLCBhcnJheSBvZiBlbGVtZW50c1xuICB0aGlzLmRvdHMgPSBbXTtcbiAgLy8gZXZlbnRzXG4gIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCggdGhpcyApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCggdGhpcy5wYXJlbnQgKSApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2V0RG90cygpO1xuICB0aGlzLmhvbGRlci5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrICk7XG4gIHRoaXMuYmluZFN0YXJ0RXZlbnQoIHRoaXMuaG9sZGVyICk7XG4gIC8vIGFkZCB0byBET01cbiAgdGhpcy5wYXJlbnQuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy5ob2xkZXIgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaG9sZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2sgKTtcbiAgdGhpcy51bmJpbmRTdGFydEV2ZW50KCB0aGlzLmhvbGRlciApO1xuICAvLyByZW1vdmUgZnJvbSBET01cbiAgdGhpcy5wYXJlbnQuZWxlbWVudC5yZW1vdmVDaGlsZCggdGhpcy5ob2xkZXIgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5zZXREb3RzID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBkaWZmZXJlbmNlIGJldHdlZW4gbnVtYmVyIG9mIHNsaWRlcyBhbmQgbnVtYmVyIG9mIGRvdHNcbiAgdmFyIGRlbHRhID0gdGhpcy5wYXJlbnQuc2xpZGVzLmxlbmd0aCAtIHRoaXMuZG90cy5sZW5ndGg7XG4gIGlmICggZGVsdGEgPiAwICkge1xuICAgIHRoaXMuYWRkRG90cyggZGVsdGEgKTtcbiAgfSBlbHNlIGlmICggZGVsdGEgPCAwICkge1xuICAgIHRoaXMucmVtb3ZlRG90cyggLWRlbHRhICk7XG4gIH1cbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5hZGREb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHZhciBuZXdEb3RzID0gW107XG4gIHZhciBsZW5ndGggPSB0aGlzLmRvdHMubGVuZ3RoO1xuICB2YXIgbWF4ID0gbGVuZ3RoICsgY291bnQ7XG5cbiAgZm9yICggdmFyIGkgPSBsZW5ndGg7IGkgPCBtYXg7IGkrKyApIHtcbiAgICB2YXIgZG90ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBkb3QuY2xhc3NOYW1lID0gJ2RvdCc7XG4gICAgZG90LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCAnUGFnZSBkb3QgJyArICggaSArIDEgKSApO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb3QgKTtcbiAgICBuZXdEb3RzLnB1c2goIGRvdCApO1xuICB9XG5cbiAgdGhpcy5ob2xkZXIuYXBwZW5kQ2hpbGQoIGZyYWdtZW50ICk7XG4gIHRoaXMuZG90cyA9IHRoaXMuZG90cy5jb25jYXQoIG5ld0RvdHMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5yZW1vdmVEb3RzID0gZnVuY3Rpb24oIGNvdW50ICkge1xuICAvLyByZW1vdmUgZnJvbSB0aGlzLmRvdHMgY29sbGVjdGlvblxuICB2YXIgcmVtb3ZlRG90cyA9IHRoaXMuZG90cy5zcGxpY2UoIHRoaXMuZG90cy5sZW5ndGggLSBjb3VudCwgY291bnQgKTtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHJlbW92ZURvdHMuZm9yRWFjaCggZnVuY3Rpb24oIGRvdCApIHtcbiAgICB0aGlzLmhvbGRlci5yZW1vdmVDaGlsZCggZG90ICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS51cGRhdGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgc2VsZWN0ZWQgY2xhc3Mgb24gcHJldmlvdXNcbiAgaWYgKCB0aGlzLnNlbGVjdGVkRG90ICkge1xuICAgIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lID0gJ2RvdCc7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcpO1xuICB9XG4gIC8vIGRvbid0IHByb2NlZWQgaWYgbm8gZG90c1xuICBpZiAoICF0aGlzLmRvdHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnNlbGVjdGVkRG90ID0gdGhpcy5kb3RzWyB0aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4IF07XG4gIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NOYW1lID0gJ2RvdCBpcy1zZWxlY3RlZCc7XG4gIHRoaXMuc2VsZWN0ZWREb3Quc2V0QXR0cmlidXRlKCAnYXJpYS1jdXJyZW50JywgJ3N0ZXAnICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUub25UYXAgPSAvLyBvbGQgbWV0aG9kIG5hbWUsIGJhY2t3YXJkcy1jb21wYXRpYmxlXG5QYWdlRG90cy5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgLy8gb25seSBjYXJlIGFib3V0IGRvdCBjbGlja3NcbiAgaWYgKCB0YXJnZXQubm9kZU5hbWUgIT0gJ0xJJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnBhcmVudC51aUNoYW5nZSgpO1xuICB2YXIgaW5kZXggPSB0aGlzLmRvdHMuaW5kZXhPZiggdGFyZ2V0ICk7XG4gIHRoaXMucGFyZW50LnNlbGVjdCggaW5kZXggKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB0aGlzLmFsbE9mZigpO1xufTtcblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYWdlRG90czogdHJ1ZVxufSk7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBhZ2VEb3RzJyk7XG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYWdlRG90cyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wYWdlRG90cyA9IG5ldyBQYWdlRG90cyggdGhpcyApO1xuICAvLyBldmVudHNcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2NlbGxDaGFuZ2UnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdyZXNpemUnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUGFnZURvdHMgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5hY3RpdmF0ZSgpO1xufTtcblxucHJvdG8udXBkYXRlU2VsZWN0ZWRQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnVwZGF0ZVNlbGVjdGVkKCk7XG59O1xuXG5wcm90by51cGRhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmRlYWN0aXZhdGUoKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0pKTtcbiIsIi8vIHBsYXllciAmIGF1dG9QbGF5XG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgICAgJy4vZmxpY2tpdHknXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciwgdXRpbHMsIEZsaWNraXR5ICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIEV2RW1pdHRlciwgdXRpbHMsIEZsaWNraXR5ICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXG4gICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQbGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGxheWVyKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLnN0YXRlID0gJ3N0b3BwZWQnO1xuICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBldmVudCBoYW5kbGVyXG4gIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy52aXNpYmlsaXR5Q2hhbmdlLmJpbmQoIHRoaXMgKTtcbiAgdGhpcy5vblZpc2liaWxpdHlQbGF5ID0gdGhpcy52aXNpYmlsaXR5UGxheS5iaW5kKCB0aGlzICk7XG59XG5cblBsYXllci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbi8vIHN0YXJ0IHBsYXlcblBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BsYXlpbmcnICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBkbyBub3QgcGxheSBpZiBwYWdlIGlzIGhpZGRlbiwgc3RhcnQgcGxheWluZyB3aGVuIHBhZ2UgaXMgdmlzaWJsZVxuICB2YXIgaXNQYWdlSGlkZGVuID0gZG9jdW1lbnQuaGlkZGVuO1xuICBpZiAoIGlzUGFnZUhpZGRlbiApIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGUgPSAncGxheWluZyc7XG4gIC8vIGxpc3RlbiB0byB2aXNpYmlsaXR5IGNoYW5nZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlICk7XG4gIC8vIHN0YXJ0IHRpY2tpbmdcbiAgdGhpcy50aWNrKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IHRpY2sgaWYgbm90IHBsYXlpbmdcbiAgaWYgKCB0aGlzLnN0YXRlICE9ICdwbGF5aW5nJyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGltZSA9IHRoaXMucGFyZW50Lm9wdGlvbnMuYXV0b1BsYXk7XG4gIC8vIGRlZmF1bHQgdG8gMyBzZWNvbmRzXG4gIHRpbWUgPSB0eXBlb2YgdGltZSA9PSAnbnVtYmVyJyA/IHRpbWUgOiAzMDAwO1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICAvLyBIQUNLOiByZXNldCB0aWNrcyBpZiBzdG9wcGVkIGFuZCBzdGFydGVkIHdpdGhpbiBpbnRlcnZhbFxuICB0aGlzLmNsZWFyKCk7XG4gIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLnBhcmVudC5uZXh0KCB0cnVlICk7XG4gICAgX3RoaXMudGljaygpO1xuICB9LCB0aW1lICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgdGhpcy5jbGVhcigpO1xuICAvLyByZW1vdmUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICBjbGVhclRpbWVvdXQoIHRoaXMudGltZW91dCApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BsYXlpbmcnICkge1xuICAgIHRoaXMuc3RhdGUgPSAncGF1c2VkJztcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cbn07XG5cblBsYXllci5wcm90b3R5cGUudW5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZS1zdGFydCBwbGF5IGlmIHBhdXNlZFxuICBpZiAoIHRoaXMuc3RhdGUgPT0gJ3BhdXNlZCcgKSB7XG4gICAgdGhpcy5wbGF5KCk7XG4gIH1cbn07XG5cbi8vIHBhdXNlIGlmIHBhZ2UgdmlzaWJpbGl0eSBpcyBoaWRkZW4sIHVucGF1c2UgaWYgdmlzaWJsZVxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIHRoaXNbIGlzUGFnZUhpZGRlbiA/ICdwYXVzZScgOiAndW5wYXVzZScgXSgpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5UGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXkoKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGF1c2VBdXRvUGxheU9uSG92ZXI6IHRydWVcbn0pO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQbGF5ZXInKTtcbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllciA9IG5ldyBQbGF5ZXIoIHRoaXMgKTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGxheWVyICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQbGF5ZXIgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5hdXRvUGxheSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wbGF5ZXIucGxheSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyBQbGF5ZXIgQVBJLCBkb24ndCBoYXRlIHRoZSAuLi4gdGhhbmtzIEkga25vdyB3aGVyZSB0aGUgZG9vciBpc1xuXG5wcm90by5wbGF5UGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbn07XG5cbnByb3RvLnN0b3BQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xufTtcblxucHJvdG8ucGF1c2VQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbn07XG5cbnByb3RvLnVucGF1c2VQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIudW5wYXVzZSgpO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5zdG9wKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2VlbnRlcicsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tIG1vdXNlZW50ZXIvbGVhdmUgLS0tLS0gLy9cblxuLy8gcGF1c2UgYXV0by1wbGF5IG9uIGhvdmVyXG5wcm90by5vbm1vdXNlZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhdXNlQXV0b1BsYXlPbkhvdmVyICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyByZXN1bWUgYXV0by1wbGF5IG9uIGhvdmVyIG9mZlxucHJvdG8ub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG4iLCIvLyBwcmV2L25leHQgYnV0dG9uc1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJ1xuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ3VuaXBvaW50ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5Vbmlwb2ludGVyLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBkaXJlY3Rpb24sIHBhcmVudCApIHtcbiAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcHJvcGVydGllc1xuICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNQcmV2aW91cyA9IHRoaXMuZGlyZWN0aW9uID09IC0xO1xuICB2YXIgbGVmdERpcmVjdGlvbiA9IHRoaXMucGFyZW50Lm9wdGlvbnMucmlnaHRUb0xlZnQgPyAxIDogLTE7XG4gIHRoaXMuaXNMZWZ0ID0gdGhpcy5kaXJlY3Rpb24gPT0gbGVmdERpcmVjdGlvbjtcblxuICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBlbGVtZW50LmNsYXNzTmFtZSA9ICdmbGlja2l0eS1idXR0b24gZmxpY2tpdHktcHJldi1uZXh0LWJ1dHRvbic7XG4gIGVsZW1lbnQuY2xhc3NOYW1lICs9IHRoaXMuaXNQcmV2aW91cyA/ICcgcHJldmlvdXMnIDogJyBuZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA4MzYwNzYvMTgyMTgzXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gIC8vIGluaXQgYXMgZGlzYWJsZWRcbiAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JyApO1xuXG4gIC8vIGNyZWF0ZSBhcnJvd1xuICB2YXIgc3ZnID0gdGhpcy5jcmVhdGVTVkcoKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZCggc3ZnICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLnBhcmVudC5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlLmJpbmQoIHRoaXMgKSApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCggdGhpcy5wYXJlbnQgKSApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYmluZFN0YXJ0RXZlbnQoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcyApO1xuICAvLyBhZGQgdG8gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjbGljayBldmVudHNcbiAgdGhpcy51bmJpbmRTdGFydEV2ZW50KCB0aGlzLmVsZW1lbnQgKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5jcmVhdGVTVkcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAnc3ZnJyk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdmbGlja2l0eS1idXR0b24taWNvbicgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ3ZpZXdCb3gnLCAnMCAwIDEwMCAxMDAnICk7XG4gIHZhciBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdwYXRoJyk7XG4gIHZhciBwYXRoTW92ZW1lbnRzID0gZ2V0QXJyb3dNb3ZlbWVudHMoIHRoaXMucGFyZW50Lm9wdGlvbnMuYXJyb3dTaGFwZSApO1xuICBwYXRoLnNldEF0dHJpYnV0ZSggJ2QnLCBwYXRoTW92ZW1lbnRzICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnYXJyb3cnICk7XG4gIC8vIHJvdGF0ZSBhcnJvd1xuICBpZiAoICF0aGlzLmlzTGVmdCApIHtcbiAgICBwYXRoLnNldEF0dHJpYnV0ZSggJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMTAwLCAxMDApIHJvdGF0ZSgxODApICcgKTtcbiAgfVxuICBzdmcuYXBwZW5kQ2hpbGQoIHBhdGggKTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcbmZ1bmN0aW9uIGdldEFycm93TW92ZW1lbnRzKCBzaGFwZSApIHtcbiAgLy8gdXNlIHNoYXBlIGFzIG1vdmVtZW50IGlmIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gc2hhcGU7XG4gIH1cbiAgLy8gY3JlYXRlIG1vdmVtZW50IHN0cmluZ1xuICByZXR1cm4gJ00gJyArIHNoYXBlLngwICsgJyw1MCcgK1xuICAgICcgTCAnICsgc2hhcGUueDEgKyAnLCcgKyAoIHNoYXBlLnkxICsgNTAgKSArXG4gICAgJyBMICcgKyBzaGFwZS54MiArICcsJyArICggc2hhcGUueTIgKyA1MCApICtcbiAgICAnIEwgJyArIHNoYXBlLngzICsgJyw1MCAnICtcbiAgICAnIEwgJyArIHNoYXBlLngyICsgJywnICsgKCA1MCAtIHNoYXBlLnkyICkgK1xuICAgICcgTCAnICsgc2hhcGUueDEgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTEgKSArXG4gICAgJyBaJztcbn1cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNFbmFibGVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnBhcmVudC51aUNoYW5nZSgpO1xuICB2YXIgbWV0aG9kID0gdGhpcy5pc1ByZXZpb3VzID8gJ3ByZXZpb3VzJyA6ICduZXh0JztcbiAgdGhpcy5wYXJlbnRbIG1ldGhvZCBdKCk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNFbmFibGVkICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGluZGV4IG9mIGZpcnN0IG9yIGxhc3Qgc2xpZGUsIGlmIHByZXZpb3VzIG9yIG5leHRcbiAgdmFyIHNsaWRlcyA9IHRoaXMucGFyZW50LnNsaWRlcztcbiAgLy8gZW5hYmxlIGlzIHdyYXBBcm91bmQgYW5kIGF0IGxlYXN0IDIgc2xpZGVzXG4gIGlmICggdGhpcy5wYXJlbnQub3B0aW9ucy53cmFwQXJvdW5kICYmIHNsaWRlcy5sZW5ndGggPiAxICkge1xuICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBzbGlkZXMubGVuZ3RoID8gc2xpZGVzLmxlbmd0aCAtIDEgOiAwO1xuICB2YXIgYm91bmRJbmRleCA9IHRoaXMuaXNQcmV2aW91cyA/IDAgOiBsYXN0SW5kZXg7XG4gIHZhciBtZXRob2QgPSB0aGlzLnBhcmVudC5zZWxlY3RlZEluZGV4ID09IGJvdW5kSW5kZXggPyAnZGlzYWJsZScgOiAnZW5hYmxlJztcbiAgdGhpc1sgbWV0aG9kIF0oKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZGVhY3RpdmF0ZSgpO1xuICB0aGlzLmFsbE9mZigpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcHJldk5leHRCdXR0b25zOiB0cnVlLFxuICBhcnJvd1NoYXBlOiB7XG4gICAgeDA6IDEwLFxuICAgIHgxOiA2MCwgeTE6IDUwLFxuICAgIHgyOiA3MCwgeTI6IDQwLFxuICAgIHgzOiAzMFxuICB9XG59KTtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlUHJldk5leHRCdXR0b25zJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnByZXZOZXh0QnV0dG9ucyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oIC0xLCB0aGlzICk7XG4gIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggMSwgdGhpcyApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJldkJ1dHRvbi5hY3RpdmF0ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uYWN0aXZhdGUoKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmRlYWN0aXZhdGUoKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmRlYWN0aXZhdGUoKTtcbiAgdGhpcy5vZmYoICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuUHJldk5leHRCdXR0b24gPSBQcmV2TmV4dEJ1dHRvbjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG4iLCIvLyBzbGlkZVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5TbGlkZSA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFNsaWRlKCBwYXJlbnQgKSB7XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmlzT3JpZ2luTGVmdCA9IHBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JztcbiAgdGhpcy5jZWxscyA9IFtdO1xuICB0aGlzLm91dGVyV2lkdGggPSAwO1xuICB0aGlzLmhlaWdodCA9IDA7XG59XG5cbnZhciBwcm90byA9IFNsaWRlLnByb3RvdHlwZTtcblxucHJvdG8uYWRkQ2VsbCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICB0aGlzLmNlbGxzLnB1c2goIGNlbGwgKTtcbiAgdGhpcy5vdXRlcldpZHRoICs9IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB0aGlzLmhlaWdodCA9IE1hdGgubWF4KCBjZWxsLnNpemUub3V0ZXJIZWlnaHQsIHRoaXMuaGVpZ2h0ICk7XG4gIC8vIGZpcnN0IGNlbGwgc3R1ZmZcbiAgaWYgKCB0aGlzLmNlbGxzLmxlbmd0aCA9PSAxICkge1xuICAgIHRoaXMueCA9IGNlbGwueDsgLy8geCBjb21lcyBmcm9tIGZpcnN0IGNlbGxcbiAgICB2YXIgYmVnaW5NYXJnaW4gPSB0aGlzLmlzT3JpZ2luTGVmdCA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gICAgdGhpcy5maXJzdE1hcmdpbiA9IGNlbGwuc2l6ZVsgYmVnaW5NYXJnaW4gXTtcbiAgfVxufTtcblxucHJvdG8udXBkYXRlVGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbmRNYXJnaW4gPSB0aGlzLmlzT3JpZ2luTGVmdCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XG4gIHZhciBsYXN0Q2VsbCA9IHRoaXMuZ2V0TGFzdENlbGwoKTtcbiAgdmFyIGxhc3RNYXJnaW4gPSBsYXN0Q2VsbCA/IGxhc3RDZWxsLnNpemVbIGVuZE1hcmdpbiBdIDogMDtcbiAgdmFyIHNsaWRlV2lkdGggPSB0aGlzLm91dGVyV2lkdGggLSAoIHRoaXMuZmlyc3RNYXJnaW4gKyBsYXN0TWFyZ2luICk7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5maXJzdE1hcmdpbiArIHNsaWRlV2lkdGggKiB0aGlzLnBhcmVudC5jZWxsQWxpZ247XG59O1xuXG5wcm90by5nZXRMYXN0Q2VsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxsc1sgdGhpcy5jZWxscy5sZW5ndGggLSAxIF07XG59O1xuXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLnNlbGVjdCgpO1xuICB9KTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC51bnNlbGVjdCgpO1xuICB9KTtcbn07XG5cbnByb3RvLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxscy5tYXAoIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIHJldHVybiBjZWxsLmVsZW1lbnQ7XG4gIH0pO1xufTtcblxucmV0dXJuIFNsaWRlO1xuXG59KSk7XG4iLCIvKiFcbiAqIGdldFNpemUgdjIuMC4zXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLyogZ2xvYmFscyBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cFxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXG4gKiBkbyBvbiBmaXJzdCBnZXRTaXplKCkgcmF0aGVyIHRoYW4gb24gcGFnZSBsb2FkIGZvciBGaXJlZm94IGJ1Z1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJveCBzaXppbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvKipcbiAgICogQ2hyb21lICYgU2FmYXJpIG1lYXN1cmUgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXG4gICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZGl2ICk7XG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xuICBnZXRTaXplLmlzQm94U2l6ZU91dGVyID0gaXNCb3hTaXplT3V0ZXI7XG5cbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0pO1xuIiwiLyohXG4gKiBVbmlkcmFnZ2VyIHYyLjMuMVxuICogRHJhZ2dhYmxlIGJhc2UgY2xhc3NcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInXG4gICAgXSwgZnVuY3Rpb24oIFVuaXBvaW50ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LlVuaWRyYWdnZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LlVuaXBvaW50ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFVuaWRyYWdnZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gVW5pZHJhZ2dlcigpIHt9XG5cbi8vIGluaGVyaXQgVW5pcG9pbnRlciAmIEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pZHJhZ2dlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBVbmlwb2ludGVyLnByb3RvdHlwZSApO1xuXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXG5cbnByb3RvLmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkXG4gKi9cbnByb3RvLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBpc0FkZCApIHtcbiAgLy8gbXVuZ2UgaXNBZGQsIGRlZmF1bHQgdG8gdHJ1ZVxuICBpc0FkZCA9IGlzQWRkID09PSB1bmRlZmluZWQgPyB0cnVlIDogaXNBZGQ7XG4gIC8vIGJpbmQgZWFjaCBoYW5kbGVcbiAgdmFyIGJpbmRNZXRob2QgPSBpc0FkZCA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgdmFyIHRvdWNoQWN0aW9uID0gaXNBZGQgPyB0aGlzLl90b3VjaEFjdGlvblZhbHVlIDogJyc7XG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmhhbmRsZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuaGFuZGxlc1tpXTtcbiAgICB0aGlzLl9iaW5kU3RhcnRFdmVudCggaGFuZGxlLCBpc0FkZCApO1xuICAgIGhhbmRsZVsgYmluZE1ldGhvZCBdKCAnY2xpY2snLCB0aGlzICk7XG4gICAgLy8gdG91Y2gtYWN0aW9uOiBub25lIHRvIG92ZXJyaWRlIGJyb3dzZXIgdG91Y2ggZ2VzdHVyZXMuIG1ldGFmaXp6eS9mbGlja2l0eSM1NDBcbiAgICBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gICAgICBoYW5kbGUuc3R5bGUudG91Y2hBY3Rpb24gPSB0b3VjaEFjdGlvbjtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHByb3RvdHlwZSBzbyBpdCBjYW4gYmUgb3ZlcndyaXRlYWJsZSBieSBGbGlja2l0eVxucHJvdG8uX3RvdWNoQWN0aW9uVmFsdWUgPSAnbm9uZSc7XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cbi8qKlxuICogcG9pbnRlciBzdGFydFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBpc09rYXkgPSB0aGlzLm9rYXlQb2ludGVyRG93biggZXZlbnQgKTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB0cmFjayBzdGFydCBldmVudCBwb3NpdGlvblxuICAvLyBTYWZhcmkgOSBvdmVycmlkZXMgcGFnZVggYW5kIHBhZ2VZLiBUaGVzZSB2YWx1ZXMgbmVlZHMgdG8gYmUgY29waWVkLiBmbGlja2l0eSM4NDJcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ZXIgPSB7XG4gICAgcGFnZVg6IHBvaW50ZXIucGFnZVgsXG4gICAgcGFnZVk6IHBvaW50ZXIucGFnZVksXG4gIH07XG5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgdGhpcy5wb2ludGVyRG93bkJsdXIoKTtcbiAgLy8gYmluZCBtb3ZlIGFuZCBlbmQgZXZlbnRzXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIG5vZGVzIHRoYXQgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGN1cnNvck5vZGVzID0ge1xuICBURVhUQVJFQTogdHJ1ZSxcbiAgSU5QVVQ6IHRydWUsXG4gIFNFTEVDVDogdHJ1ZSxcbiAgT1BUSU9OOiB0cnVlLFxufTtcblxuLy8gaW5wdXQgdHlwZXMgdGhhdCBkbyBub3QgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGNsaWNrVHlwZXMgPSB7XG4gIHJhZGlvOiB0cnVlLFxuICBjaGVja2JveDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICBzdWJtaXQ6IHRydWUsXG4gIGltYWdlOiB0cnVlLFxuICBmaWxlOiB0cnVlLFxufTtcblxuLy8gZGlzbWlzcyBpbnB1dHMgd2l0aCB0ZXh0IGZpZWxkcy4gZmxpY2tpdHkjNDAzLCBmbGlja2l0eSM0MDRcbnByb3RvLm9rYXlQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzQ3Vyc29yTm9kZSA9IGN1cnNvck5vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgdmFyIGlzQ2xpY2tUeXBlID0gY2xpY2tUeXBlc1sgZXZlbnQudGFyZ2V0LnR5cGUgXTtcbiAgdmFyIGlzT2theSA9ICFpc0N1cnNvck5vZGUgfHwgaXNDbGlja1R5cGU7XG4gIGlmICggIWlzT2theSApIHtcbiAgICB0aGlzLl9wb2ludGVyUmVzZXQoKTtcbiAgfVxuICByZXR1cm4gaXNPa2F5O1xufTtcblxuLy8ga2x1ZGdlIHRvIGJsdXIgcHJldmlvdXNseSBmb2N1c2VkIGlucHV0XG5wcm90by5wb2ludGVyRG93bkJsdXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAvLyBkbyBub3QgYmx1ciBib2R5IGZvciBJRTEwLCBtZXRhZml6enkvZmxpY2tpdHkjMTE3XG4gIHZhciBjYW5CbHVyID0gZm9jdXNlZCAmJiBmb2N1c2VkLmJsdXIgJiYgZm9jdXNlZCAhPSBkb2N1bWVudC5ib2R5O1xuICBpZiAoIGNhbkJsdXIgKSB7XG4gICAgZm9jdXNlZC5ibHVyKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIG1vdmUgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBkcmFnIG1vdmVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xuICB0aGlzLl9kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbi8vIGJhc2UgcG9pbnRlciBtb3ZlIGxvZ2ljXG5wcm90by5fZHJhZ1BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWSAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZXG4gIH07XG4gIC8vIHN0YXJ0IGRyYWcgaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLmhhc0RyYWdTdGFydGVkKCBtb3ZlVmVjdG9yICkgKSB7XG4gICAgdGhpcy5fZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xuICB9XG4gIHJldHVybiBtb3ZlVmVjdG9yO1xufTtcblxuLy8gY29uZGl0aW9uIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IDMgfHwgTWF0aC5hYnMoIG1vdmVWZWN0b3IueSApID4gMztcbn07XG5cbi8vIC0tLS0tIGVuZCBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyVXAnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLl9kcmFnUG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoIHRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICB0aGlzLl9kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBvaW50ZXIgZGlkbid0IG1vdmUgZW5vdWdoIGZvciBkcmFnIHRvIHN0YXJ0XG4gICAgdGhpcy5fc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZHJhZ1N0YXJ0XG5wcm90by5fZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAvLyBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7XG4gIHRoaXMuZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdTdGFydCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gZHJhZ01vdmVcbnByb3RvLl9kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgLy8gZG8gbm90IGRyYWcgaWYgbm90IGRyYWdnaW5nIHlldFxuICBpZiAoICF0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbnByb3RvLmRyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG59O1xuXG4vLyBkcmFnRW5kXG5wcm90by5fZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAvLyByZS1lbmFibGUgY2xpY2tpbmcgYXN5bmNcbiAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzO1xuICB9LmJpbmQoIHRoaXMgKSApO1xuXG4gIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ0VuZCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gb25jbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xucHJvdG8ub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSBzdGF0aWNDbGljayAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5wcm90by5fc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGlnbm9yZSBlbXVsYXRlZCBtb3VzZSB1cCBjbGlja3NcbiAgaWYgKCB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICYmIGV2ZW50LnR5cGUgPT0gJ21vdXNldXAnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG5cbiAgLy8gc2V0IGZsYWcgZm9yIGVtdWxhdGVkIGNsaWNrcyAzMDBtcyBhZnRlciB0b3VjaGVuZFxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ21vdXNldXAnICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIC8vIHJlc2V0IGZsYWcgYWZ0ZXIgMzAwbXNcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0uYmluZCggdGhpcyApLCA0MDAgKTtcbiAgfVxufTtcblxucHJvdG8uc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIHV0aWxzIC0tLS0tIC8vXG5cblVuaWRyYWdnZXIuZ2V0UG9pbnRlclBvaW50ID0gVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQ7XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gVW5pZHJhZ2dlcjtcblxufSkpO1xuIiwiLyohXG4gKiBVbmlwb2ludGVyIHYyLjMuMFxuICogYmFzZSBjbGFzcyBmb3IgZG9pbmcgb25lIHRoaW5nIHdpdGggcG9pbnRlciBldmVudFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWwgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Vbmlwb2ludGVyID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIFVuaXBvaW50ZXIoKSB7fVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pcG9pbnRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbnByb3RvLmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkIC0gcmVtb3ZlIGlmIGZhbHNleVxuICovXG5wcm90by5fYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgaXNBZGQgKSB7XG4gIC8vIG11bmdlIGlzQWRkLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNBZGQgPSBpc0FkZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzQWRkO1xuICB2YXIgYmluZE1ldGhvZCA9IGlzQWRkID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXG4gIC8vIGRlZmF1bHQgdG8gbW91c2UgZXZlbnRzXG4gIHZhciBzdGFydEV2ZW50ID0gJ21vdXNlZG93bic7XG4gIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIHtcbiAgICAvLyBQb2ludGVyIEV2ZW50c1xuICAgIHN0YXJ0RXZlbnQgPSAncG9pbnRlcmRvd24nO1xuICB9IGVsc2UgaWYgKCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgKSB7XG4gICAgLy8gVG91Y2ggRXZlbnRzLiBpT1MgU2FmYXJpXG4gICAgc3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0JztcbiAgfVxuICBlbGVtWyBiaW5kTWV0aG9kIF0oIHN0YXJ0RXZlbnQsIHRoaXMgKTtcbn07XG5cbi8vIHRyaWdnZXIgaGFuZGxlciBtZXRob2RzIGZvciBldmVudHNcbnByb3RvLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIHJldHVybnMgdGhlIHRvdWNoIHRoYXQgd2UncmUga2VlcGluZyB0cmFjayBvZlxucHJvdG8uZ2V0VG91Y2ggPSBmdW5jdGlvbiggdG91Y2hlcyApIHtcbiAgZm9yICggdmFyIGk9MDsgaSA8IHRvdWNoZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIHRvdWNoID0gdG91Y2hlc1tpXTtcbiAgICBpZiAoIHRvdWNoLmlkZW50aWZpZXIgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICAgIHJldHVybiB0b3VjaDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cbnByb3RvLm9ubW91c2Vkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBkaXNtaXNzIGNsaWNrcyBmcm9tIHJpZ2h0IG9yIG1pZGRsZSBidXR0b25zXG4gIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gIGlmICggYnV0dG9uICYmICggYnV0dG9uICE9PSAwICYmIGJ1dHRvbiAhPT0gMSApICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcmRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbi8qKlxuICogcG9pbnRlciBzdGFydFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8uX3BvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBkaXNtaXNzIHJpZ2h0IGNsaWNrIGFuZCBvdGhlciBwb2ludGVyc1xuICAvLyBidXR0b24gPSAwIGlzIG9rYXksIDEtNCBub3RcbiAgaWYgKCBldmVudC5idXR0b24gfHwgdGhpcy5pc1BvaW50ZXJEb3duICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IHRydWU7XG4gIC8vIHNhdmUgcG9pbnRlciBpZGVudGlmaWVyIHRvIG1hdGNoIHVwIHRvdWNoIGV2ZW50c1xuICB0aGlzLnBvaW50ZXJJZGVudGlmaWVyID0gcG9pbnRlci5wb2ludGVySWQgIT09IHVuZGVmaW5lZCA/XG4gICAgLy8gcG9pbnRlcklkIGZvciBwb2ludGVyIGV2ZW50cywgdG91Y2guaW5kZW50aWZpZXIgZm9yIHRvdWNoIGV2ZW50c1xuICAgIHBvaW50ZXIucG9pbnRlcklkIDogcG9pbnRlci5pZGVudGlmaWVyO1xuXG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5wcm90by5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyggZXZlbnQgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyRG93bicsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gaGFzaCBvZiBldmVudHMgdG8gYmUgYm91bmQgYWZ0ZXIgc3RhcnQgZXZlbnRcbnZhciBwb3N0U3RhcnRFdmVudHMgPSB7XG4gIG1vdXNlZG93bjogWyAnbW91c2Vtb3ZlJywgJ21vdXNldXAnIF0sXG4gIHRvdWNoc3RhcnQ6IFsgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCcgXSxcbiAgcG9pbnRlcmRvd246IFsgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCcsICdwb2ludGVyY2FuY2VsJyBdLFxufTtcblxucHJvdG8uX2JpbmRQb3N0U3RhcnRFdmVudHMgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggIWV2ZW50ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXQgcHJvcGVyIGV2ZW50cyB0byBtYXRjaCBzdGFydCBldmVudFxuICB2YXIgZXZlbnRzID0gcG9zdFN0YXJ0RXZlbnRzWyBldmVudC50eXBlIF07XG4gIC8vIGJpbmQgZXZlbnRzIHRvIG5vZGVcbiAgZXZlbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBldmVudE5hbWUgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG4gIC8vIHNhdmUgdGhlc2UgYXJndW1lbnRzXG4gIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyA9IGV2ZW50cztcbn07XG5cbnByb3RvLl91bmJpbmRQb3N0U3RhcnRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgZm9yIF9ib3VuZEV2ZW50cywgaW4gY2FzZSBkcmFnRW5kIHRyaWdnZXJlZCB0d2ljZSAob2xkIElFOCBidWcpXG4gIGlmICggIXRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBldmVudE5hbWUgKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG5cbiAgZGVsZXRlIHRoaXMuX2JvdW5kUG9pbnRlckV2ZW50cztcbn07XG5cbi8vIC0tLS0tIG1vdmUgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZW1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJNb3ZlKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9ucG9pbnRlcm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNobW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyTW92ZSggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciBtb3ZlXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICogQHByaXZhdGVcbiAqL1xucHJvdG8uX3BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLnBvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5wcm90by5wb2ludGVyTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gZW5kIGV2ZW50IC0tLS0tIC8vXG5cblxucHJvdG8ub25tb3VzZXVwID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVydXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgdGhpcy5fcG9pbnRlclVwKCBldmVudCwgZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8ub250b3VjaGVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCB0b3VjaCApO1xuICB9XG59O1xuXG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKiBAcHJpdmF0ZVxuICovXG5wcm90by5fcG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB0aGlzLnBvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbi8vIHB1YmxpY1xucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJVcCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gcG9pbnRlciBkb25lIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXJlZCBvbiBwb2ludGVyIHVwICYgcG9pbnRlciBjYW5jZWxcbnByb3RvLl9wb2ludGVyRG9uZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9wb2ludGVyUmVzZXQoKTtcbiAgdGhpcy5fdW5iaW5kUG9zdFN0YXJ0RXZlbnRzKCk7XG4gIHRoaXMucG9pbnRlckRvbmUoKTtcbn07XG5cbnByb3RvLl9wb2ludGVyUmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVzZXQgcHJvcGVydGllc1xuICB0aGlzLmlzUG9pbnRlckRvd24gPSBmYWxzZTtcbiAgZGVsZXRlIHRoaXMucG9pbnRlcklkZW50aWZpZXI7XG59O1xuXG5wcm90by5wb2ludGVyRG9uZSA9IG5vb3A7XG5cbi8vIC0tLS0tIHBvaW50ZXIgY2FuY2VsIC0tLS0tIC8vXG5cbnByb3RvLm9ucG9pbnRlcmNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8ub250b3VjaGNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIHRvdWNoID0gdGhpcy5nZXRUb3VjaCggZXZlbnQuY2hhbmdlZFRvdWNoZXMgKTtcbiAgaWYgKCB0b3VjaCApIHtcbiAgICB0aGlzLl9wb2ludGVyQ2FuY2VsKCBldmVudCwgdG91Y2ggKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwb2ludGVyIGNhbmNlbFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9wb2ludGVyQ2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB0aGlzLnBvaW50ZXJDYW5jZWwoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBwdWJsaWNcbnByb3RvLnBvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckNhbmNlbCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbi8vIHV0aWxpdHkgZnVuY3Rpb24gZm9yIGdldHRpbmcgeC95IGNvb3JkcyBmcm9tIGV2ZW50XG5Vbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludCA9IGZ1bmN0aW9uKCBwb2ludGVyICkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWVxuICB9O1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBVbmlwb2ludGVyO1xuXG59KSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIEZsaWNraXR5ICAgICAgICA9IHJlcXVpcmUoJ2ZsaWNraXR5JyksXG4gICAgQ2Fyb3VzZWxzXG5cbiAgICBDYXJvdXNlbHMgPSB7XG5cbiAgICAgICAgaW5pdDogKCkgPT4ge1xuXG4gICAgICAgICAgICBDYXJvdXNlbHMuaW5pdGlhbGlzZUNhcm91c2VsKClcblxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRpYWxpc2VDYXJvdXNlbCAgOiAoKSA9PiB7XG5cbiAgICAgICAgICAgIHZhciBjYXJvdXNlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuSlMtLWNhcm91c2VsJylcblxuICAgICAgICAgICAgY2Fyb3VzZWxzLmZvckVhY2goY2Fyb3VzZWwgPT4ge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFsaWduICAgOiAnY2VudGVyJywgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBBcm91bmQgIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9QbGF5ICAgIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZXNMb2FkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlRG90cyAgICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzbGlkZXMgPSBjYXJvdXNlbC5xdWVyeVNlbGVjdG9yQWxsKCcuSlMtLWNhcm91c2VsX19zbGlkZVdyYXAnKVxuXG4gICAgICAgICAgICAgICAgaWYoY2Fyb3VzZWwuZGF0YXNldC5wbG90Q2Fyb3VzZWxUeXBlID09ICdpbWFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWxpZ24gICA6ICdjZW50ZXInLCAgXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXp5TG9hZCA6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwQXJvdW5kICA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlRG90cyA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihzbGlkZXMubGVuZ3RoID4gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmbGt0eSA9IG5ldyBGbGlja2l0eShjYXJvdXNlbCwgc2V0dGluZ3MpXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcblxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2Fyb3VzZWxzXG5cbn0oKSlcbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgRkFRc1xuXG4gICAgRkFRcyA9IHtcbiAgICAgICAgc2VjdGlvbnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYXFzJyksXG5cbiAgICAgICAgaW5pdDogKCkgPT4ge1xuXG4gICAgICAgICAgICBpZighRkFRcy5zZWN0aW9ucylcbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgRkFRcy5zZWN0aW9ucy5mb3JFYWNoKHNlY3Rpb24gPT4gRkFRcy5pbml0aWFsaXNlTGlzdGVuZXJzKHNlY3Rpb24pKVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdGlhbGlzZUxpc3RlbmVyczogKHNlY3Rpb24pID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGZhcXMgPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYXEnKVxuXG4gICAgICAgICAgICBmYXFzLmZvckVhY2goZmFxID0+IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcXVlc3Rpb24gPSBmYXEucXVlcnlTZWxlY3RvcignLmZhcV9fcXVlc3Rpb24nKVxuICAgICAgICAgICAgICAgIGxldCBhbnN3ZXIgICA9IGZhcS5xdWVyeVNlbGVjdG9yKCcuZmFxX19hbnN3ZXInKVxuXG4gICAgICAgICAgICAgICAgcXVlc3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgZmFxLmNsYXNzTGlzdC50b2dnbGUoJ2ZhcS0tb3BlbicpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoZmFxLmNsYXNzTGlzdC5jb250YWlucygnZmFxLS1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlci5zdHlsZS5tYXhIZWlnaHQgPSBhbnN3ZXIuc2Nyb2xsSGVpZ2h0ICsgJ3B4J1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyLnN0eWxlLm1heEhlaWdodCA9IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cblxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gRkFRc1xuXG59KCkpXG4iLCIvLyBMYXp5TG9hZCBmb3IgUGxvdCBieSBKb24gTWlsbHMsIE1hdHR5IEdsZW4gJiBNaWNoYWVsIFdhdHNvblxuXG4vLyBUaGlzIG1vZHVsZSBsb2FkcyBpbiBpbWFnZXMgYXN5bmNyb25vdXNseS4gSXQgd2lsbCBsb29rIGZvciB0aGUgY2xhc3Ncbi8vIFwiSlMtLWxhenlMb2FkXCIgYW5kIHRoZW4gbG9vayBmb3IgYSBkYXRhLXNyYyBvbiBpbWFnZSBvciB2aWRlbyB0YWdzLiBcbi8vIEl0IHdpbGwgdGhlbiByZXBsYWNlIHRoZSBzcmMgb2YgdGhhdCBlbGVtZW50IHdpdGggdGhlIGltYWdlIGxpbmtlZCBvblxuLy8gdGhlIGRhdGEgYXR0cmlidXRlLlxuXG4vLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYW4gaW1hZ2Ugb3IgYSB2aWRlby0gaXQgd2lsbCBhc3NpZ24gdGhlIGRhdGEtc3JjXG4vLyBhcyBhIGJhY2tncm91bmQgaW1hZ2UuIFxuXG4vLyBJZiB0aGUgc2NyZWVuIHNpemUgaXMgbGVzcyB0aGFuIHRoZSBkZWZpbmVkIG1vYmlsZUJyZWFrcG9pbnQsIHdlIGxvYWRcbi8vIHRoZSBzcmMgZnJvbSBkYXRhLXNtYWxsLXNyYyBpbnN0ZWFkLiBcblxuLy8gQ3JlYXRpb24gb2YgdGhlc2UgdmlkZW8gYW5kIGltYWdlIG9iamVjdHMgY2FuIGJlIG1hZGUgdXNpbmcgdGhlIFBIUFxuLy8gaGVscGVyIGluIGxpYi9oZWxwZXJzLnBocCBwbG90TGF6eUxvYWQoKVxuXG4vLyBJZiB3ZSBuZWVkIHRvIHN0aXB1bGF0ZSB0aGUgaGVpZ2h0IG9mIGFuIGltYWdlIGJlZm9yZSBpdCBsb2FkcywgdG8gYXZvaWRcbi8vIGFueSBqdW1waW5lc3MsIHdlIGNhbiBwYXNzIHRocm91Z2ggYSByYXRpbyAody9oKSBvZiB0aGUgaW1hZ2Ugc28gaXQnc1xuLy8gc2V0IGJlZm9yZSB0aGUgaW1hZ2UgbG9hZHMuXG5cbi8vIFdlIGFsc28gaGFuZGxlIGF1dG9wbGF5aW5nIHZpZGVvcywgaWYgdGhlIHZpZGVvIGhhcyBhbiBhdXRvcGxheSBhdHRyaWJ1dGUuXG4vLyBJdCB3aWxsIHBhdXNlIGFuZCBwbGF5IHZpZGVvcyBhcHByb3ByaWF0ZWx5IGRlcGVuZGluZyBvbiBpZiB0aGV5J3JlIGluXG4vLyB2aWV3IG9yIG5vdC5cblxuKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgTGF6eUxvYWRcblxuICAgIExhenlMb2FkID0ge1xuICAgICAgICBtb2JpbGVCcmVha3BvaW50IDogNjQwLFxuICAgICAgICBpbWFnZXMgOiAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLkpTLS1sYXp5TG9hZCcpLFxuICAgICAgICBjb25maWcgOiB7XG4gICAgICAgICAgICByb290TWFyZ2luOiAnMHB4JyxcbiAgICAgICAgICAgIHRocmVzaG9sZDogMC4wMVxuICAgICAgICB9LFxuICAgICAgICBvYnNlcnZlciA6IG51bGwsXG4gICAgICAgIGluaXQgOiBmdW5jdGlvbigpeyBcblxuICAgICAgICAgICAgTGF6eUxvYWQub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoTGF6eUxvYWQuaGFuZGxlSW1hZ2VMb2FkLCBMYXp5TG9hZC5jb25maWcpXG5cbiAgICAgICAgICAgIExhenlMb2FkLmxvYWRJbWFnZXMoKVxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZEltYWdlcyA6ICgpID0+IHsgXG5cbiAgICAgICAgICAgIExhenlMb2FkLmltYWdlcy5mb3JFYWNoKCBpbWFnZSA9PiB7ICBcblxuICAgICAgICAgICAgICAgIExhenlMb2FkLm9ic2VydmVyLm9ic2VydmUoaW1hZ2UpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEVsZW1lbnRzIDogZWxlbWVudHMgPT4ge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudHMuZm9yRWFjaCggaW1hZ2UgPT4geyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgTGF6eUxvYWQub2JzZXJ2ZXIub2JzZXJ2ZShpbWFnZSlcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlSW1hZ2VMb2FkIDogZW50cmllcyA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCggZW50cnkgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZW50cnkudGFyZ2V0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2FkZWQnKSAmJiAhZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRpbmcnKSkgeyBcblxuICAgICAgICAgICAgICAgICAgICBpZighZW50cnkuaXNJbnRlcnNlY3RpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG9hZGluZycpXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nICYmIGVsZW1lbnQudGFnTmFtZVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzcmMgPSBlbGVtZW50LmRhdGFzZXQuc3JjXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoTGF6eUxvYWQuaXNTbWFsbFNjcmVlbigpICYmIGVsZW1lbnQuZGF0YXNldC5zbWFsbFNyYykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBlbGVtZW50LmRhdGFzZXQuc21hbGxTcmNcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZih0YWcgPT0gXCJWSURFT1wiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKExhenlMb2FkLmlzU21hbGxTY3JlZW4oKSAmJiBlbGVtZW50LmRhdGFzZXQuc21hbGxTcmMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3JjID0gZWxlbWVudC5kYXRhc2V0LnNtYWxsU3JjXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zcmMgPSBlbGVtZW50LmRhdGFzZXQuc3JjXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnBsYXkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTGF6eUxvYWQuZ2V0SW1hZ2Uoc3JjLCBlbGVtZW50KS50aGVuKCBkYXRhID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YWcgPSBlbGVtZW50LnRhZ05hbWVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRhZyA9PSBcIklNR1wiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lbGVtZW50LnNyYyA9IGRhdGEuc3JjXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCcgKyBkYXRhLnNyYyArICcpJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRpbmcnKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCggZXJyb3JlZFNyYyA9PntcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yZWRTcmMsICdpbWFnZSBub3QgZm91bmQnKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC50YWdOYW1lID09IFwiVklERU9cIikgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpKSBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlbnRyeS5pc0ludGVyc2VjdGluZyAmJiBlbGVtZW50LnBhdXNlZCA9PSBmYWxzZSkgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXVzZSgpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wbGF5KClcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRJbWFnZTogKHNyYywgZWxlbWVudCkgPT4ge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXG4gICAgICAgICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpXG5cbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWcub25lcnJvciA9ICgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IHNyY1xuICAgICAgICAgICAgfSlcblxuICAgICAgICB9LFxuXG4gICAgICAgIGlzU21hbGxTY3JlZW4gOiAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDwgTGF6eUxvYWQubW9iaWxlQnJlYWtwb2ludClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBMYXp5TG9hZFxuXG59KSgpXG5cbiIsIi8vIE1vZGFscyBmb3IgUGxvdCBieSBNaWNoYWVsIFdhdHNvblxuLy8gQSBzaW1wbGUgbW9kYWxzIHNvbHV0aW9uIHRoYXQgbG9va3MgZm9yIHRoZSBjbGFzcyBcIkpTLS1wbG90TW9kYWxCdXR0b25cIlxuLy8gQW5kIHdoZW4gY2xpY2tlZCwgcmVhZHMgdGhlIHZhbHVlIHNldCBvbiBkYXRhLXBsb3QtbW9kYWwuIGl0IHRoZW4gbG9va3Ncbi8vIGZvciBhbiBIVE1MIGVsZW1lbnQgY2FsbGVkIFwiLkpTLS1wbG90TW9kYWxDb250ZW50c1wiIHdpdGggYSBjb3JyZXNwb25kaW5nIHZhbHVlLlxuXG4vLyBGb3IgZXhhbXBsZSwgPGEgY2xhc3M9XCJKUy0tcGxvdE1vZGFsQnV0dG9uXCIgZGF0YS1wbG90LW1vZGFsPVwiMVwiPkNsaWNrIG1lPC9hPlxuLy8gV2lsbCBmaW5kIHRoZSBmb2xsb3dpbmcgZWxlbWVudDpcbi8vIDxkaXYgY2xhc3M9XCJKUy0tcGxvdE1vZGFsQ29udGVudHNcIj5JIGFtIHNvbWUgbW9kYWwgY29udGVudCE8L2Rpdj5cbi8vIEFuZCB3aWxsIHRha2UgdGhlIGlubmVySFRNTCB0byBwdXQgaW5zaWRlIGEgbW9kYWwgb24gdGhlIHNjcmVlbi5cblxuLy8gR2FsbGVyaWVzIGNhbiBiZSBjcmVhdGVkIGJ5IGNvbm5lY3RpbmcgbXVsdGlwbGUgUGxvdCBNb2RhbCBCdXR0b25zXG4vLyBieSBnaXZpbmcgdGhlbSBhIGRhdGEtcGxvdC1tb2RhbC1ncm91cCBvcHRpb24uXG4vLyBUaGV5IHdpbGwgdGhlbiBoYXZlIHdvcmtpbmcgbGVmdCBhbmQgcmlnaHQgYXJyb3dzIHRvIG5hdmlnYXRlIHRocm91Z2hcbi8vIENvbnRlbnRzIGluIGEgbG9vcC5cblxuKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBMYXp5TG9hZCAgICAgICAgID0gcmVxdWlyZSgnLi9sYXp5bG9hZCcpLCAgXG4gICAgICAgIFBsb3QgICAgICAgICAgICAgPSByZXF1aXJlKCcuL3Bsb3QnKSxcbiAgICAgICAgQm9keVNjcm9sbExvY2sgICA9IHJlcXVpcmUoJ2JvZHktc2Nyb2xsLWxvY2snKSxcbiAgICAgICAgTW9kYWxzXG5cbiAgICBNb2RhbHMgPSB7XG4gICAgICAgIGN1cnJlbnRHcm91cEl0ZW0gICAgOiAwLFxuICAgICAgICBncm91cExpbmtzICAgICAgICAgIDogW10sICBcbiAgICAgICAgY3VycmVudE1vZGFsSWQgICAgICA6IG51bGwsXG4gICAgICAgIGlzT3BlbiAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgaXNMb2FkaW5nICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICBjb250cm9sc1RpbWVyICAgICAgIDogZmFsc2UsXG4gICAgICAgIG1vZGFsQ29udGVudCAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLXBsb3RNb2RhbFJlcGxhY2VDb250ZW50cycpLFxuICAgICAgICBtb2RhbEdyb3VwQ29udHJvbHMgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TW9kYWxDb250cm9scycpLFxuICAgICAgICBtb2RhbEdyb3VwTmV4dCAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TW9kYWxDb250cm9sc19fbmV4dCcpLFxuICAgICAgICBtb2RhbEdyb3VwQmFjayAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TW9kYWxDb250cm9sc19fYmFjaycpLFxuICAgICAgICBwbG90TW9kYWwgICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TW9kYWwnKSxcblxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgTW9kYWxzLmNyZWF0ZUxpc3RlbmVycygpXG4gICAgICAgICAgICBNb2RhbHMuY2hlY2tGb3JNb2RhbE5vdGlmaWNhdGlvbigpXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNsb3NlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5KUy0tY2xvc2VQbG90TW9kYWwnKVxuXG4gICAgICAgICAgICBmb3IodmFyIGNsb3NlQnV0dG9uIG9mIGNsb3NlQnV0dG9ucykge1xuICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgTW9kYWxzLmNsb3NlUGxvdE1vZGFsKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBNb2RhbHMucGxvdE1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgIGlmKE1vZGFscy5jdXJyZW50TW9kYWxJZCAmJiAhUGxvdC5pc1RvdWNoRGV2aWNlKCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZihNb2RhbHMuY29udHJvbHNUaW1lcilcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChNb2RhbHMuY29udHJvbHNUaW1lcilcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKE1vZGFscy5wbG90TW9kYWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRlQ29udHJvbHMnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vZGFscy5wbG90TW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZUNvbnRyb2xzJylcblxuICAgICAgICAgICAgICAgICAgICBNb2RhbHMuY29udHJvbHNUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIE1vZGFscy5wbG90TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZUNvbnRyb2xzJylcblxuICAgICAgICAgICAgICAgICAgICB9LDIyMDApXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2l0ZVdyYXAnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIGlmKGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLXBsb3QtbW9kYWxdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy5vcGVuUGxvdE1vZGFsKGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLXBsb3QtbW9kYWxdJykpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZihNb2RhbHMubW9kYWxHcm91cEJhY2spIHtcblxuICAgICAgICAgICAgICAgIE1vZGFscy5tb2RhbEdyb3VwQmFjay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsTW9kYWxzLnRyaWdnZXJCYWNrR3JvdXBJdGVtKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihNb2RhbHMubW9kYWxHcm91cE5leHQpIHtcblxuICAgICAgICAgICAgICAgIE1vZGFscy5tb2RhbEdyb3VwTmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsTW9kYWxzLnRyaWdnZXJOZXh0R3JvdXBJdGVtKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcblxuICAgICAgICAgICAgICAgIGlmKGUud2hpY2ggPT0gMzkgJiYgTW9kYWxzLmdyb3VwTGlua3MubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy50cmlnZ2VyTmV4dEdyb3VwSXRlbSgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoZS53aGljaCA9PSAzNyAmJiBNb2RhbHMuZ3JvdXBMaW5rcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgTW9kYWxzLnRyaWdnZXJCYWNrR3JvdXBJdGVtKClcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihNb2RhbHMuaXNPcGVuICYmIGUud2hpY2g9PTI3KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgTW9kYWxzLmNsb3NlUGxvdE1vZGFsKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cblxuICAgICAgICBjaGVja0Zvck1vZGFsTm90aWZpY2F0aW9uIDogKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25UcmlnZ2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1mYWtlQnV0dG9uRm9yTW9kYWxOb3RpZmljYXRpb25zJylcblxuICAgICAgICAgICAgaWYobm90aWZpY2F0aW9uVHJpZ2dlcikge1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3Bsb3RIYXNOb3RpZmljYXRpb25GaXJlZCcpICE9PSBcIjFcIikgeyBcblxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdwbG90SGFzTm90aWZpY2F0aW9uRmlyZWQnLCAnMScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIE1vZGFscy5vcGVuUGxvdE1vZGFsKG5vdGlmaWNhdGlvblRyaWdnZXIpXG5cbiAgICAgICAgICAgICAgICAgICAgfSxub3RpZmljYXRpb25UcmlnZ2VyLmRhdGFzZXQucGxvdE5vdGlmaWNhdGlvbldhaXQqMTAwMClcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpZ2dlckJhY2tHcm91cEl0ZW0gOiAoKSA9PiB7XG5cbiAgICAgICAgICAgIE1vZGFscy5jdXJyZW50R3JvdXBJdGVtLS1cblxuICAgICAgICAgICAgaWYoTW9kYWxzLmN1cnJlbnRHcm91cEl0ZW0gPCAwKSB7XG5cbiAgICAgICAgICAgICAgICBNb2RhbHMuY3VycmVudEdyb3VwSXRlbSA9IE1vZGFscy5ncm91cExpbmtzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTW9kYWxzLm9wZW5QbG90TW9kYWwoTW9kYWxzLmdyb3VwTGlua3NbTW9kYWxzLmN1cnJlbnRHcm91cEl0ZW1dKVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpZ2dlck5leHRHcm91cEl0ZW0gOiAoKSA9PiB7XG5cbiAgICAgICAgICAgIE1vZGFscy5jdXJyZW50R3JvdXBJdGVtKytcblxuICAgICAgICAgICAgaWYoTW9kYWxzLmN1cnJlbnRHcm91cEl0ZW0gPT0gTW9kYWxzLmdyb3VwTGlua3MubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgICAgICBNb2RhbHMuY3VycmVudEdyb3VwSXRlbSA9IDBcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBNb2RhbHMub3BlblBsb3RNb2RhbChNb2RhbHMuZ3JvdXBMaW5rc1tNb2RhbHMuY3VycmVudEdyb3VwSXRlbV0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICBvcGVuUGxvdE1vZGFsOiAoZWxlbWVudCkgPT4ge1xuXG4gICAgICAgICAgICBpZihNb2RhbHMuaXNMb2FkaW5nID09IHRydWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlICAgICAgICAgICAgOiAnaW5saW5lJywgLy8gKGlubGluZXxhamF4KSBpZiB0aGUgY29udGVudCBpcyBhbHJlYWR5IGluIHRoZSBkb20gb3Igbm90XG4gICAgICAgICAgICAgICAgZ3JvdXBJZCAgICAgICAgIDogJycsIC8vVGhlIG9wdGlvbmFsIElEIG9mIHRoZSBncm91cCBvZiBtb2RhbHMgdXNlZCBmb3IgZ2FsbGVyeSB2aWV3c1xuICAgICAgICAgICAgICAgIGNvbnRlbnRzSWQgICAgICA6ICcnLCAvL1RoZSBJRCB0aGF0IHJlZmVyZW5jZXMgd2hlcmUsIG9uIHRoZSBwYWdlLCB0aGUgY29udGVudCB0byB1c2UgbGl2ZXNcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVBhcnQgICAgOiAnJywgLy9UaGUgdGVtcGxhdGUgcGFydCB0byBsb2FkLCBpZiBBSkFYXG4gICAgICAgICAgICAgICAgYWpheERhdGEgICAgICAgIDoge30sIC8vRGF0YSB0byBzZW5kIHZpYSBBSkFYXG4gICAgICAgICAgICAgICAgbW9kYWxDbGFzcyAgICAgIDogJycgLy9BIGN1c3RvbSBjbGFzcyB0byBhZGQgdG8gb3VyIG1vZGFsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE1vZGFscy5pc0xvYWRpbmcgPSB0cnVlXG5cbiAgICAgICAgICAgIGlmKGVsZW1lbnQuZGF0YXNldC5wbG90TW9kYWxUeXBlID09ICdhamF4Jykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnR5cGUgPSAnYWpheCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0dGluZ3MuY29udGVudHNJZCAgICAgPSBlbGVtZW50LmRhdGFzZXQucGxvdE1vZGFsQ29udGVudHNcbiAgICAgICAgICAgIHNldHRpbmdzLmdyb3VwSWQgICAgICAgID0gZWxlbWVudC5kYXRhc2V0LnBsb3RNb2RhbEdyb3VwXG4gICAgICAgICAgICBzZXR0aW5ncy50ZW1wbGF0ZVBhcnQgICA9IGVsZW1lbnQuZGF0YXNldC5wbG90TW9kYWxUZW1wbGF0ZVBhcnRcbiAgICAgICAgICAgIHNldHRpbmdzLm1vZGFsQ2xhc3MgICAgID0gZWxlbWVudC5kYXRhc2V0LnBsb3RNb2RhbENsYXNzXG5cbiAgICAgICAgICAgIGlmKCFzZXR0aW5ncy5jb250ZW50c0lkICYmIHNldHRpbmdzLnR5cGUgPT0gJ2lubGluZScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5saW5lIE1vZGFscyBuZWVkIGEgcGxvdC1tb2RhbC1jb250ZW50cyB2YXJpYWJsZSBhZGRlZCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHNldHRpbmdzLnR5cGUgPT0gJ2FqYXgnICYmICFzZXR0aW5ncy50ZW1wbGF0ZVBhcnQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWpheCBtb2RhbHMgbmVlZCBhIHBsb3QtbW9kYWwtdGVtcGxhdGUtcGFydCB2YXJpYWJsZSBhZGRlZCcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcGFydCBvZiBhIGdyb3VwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKE1vZGFscy5ncm91cExpbmtzLmxlbmd0aCA9PSAwICYmIHNldHRpbmdzLmdyb3VwSWQpXG4gICAgICAgICAgICAgICBNb2RhbHMuaW5pdGlhbGlzZUdyb3VwKGVsZW1lbnQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKCFzZXR0aW5ncy5ncm91cElkKVxuICAgICAgICAgICAgICAgIE1vZGFscy5tb2RhbEdyb3VwQ29udHJvbHMuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcblxuICAgICAgICAgICAgaWYoc2V0dGluZ3MubW9kYWxDbGFzcykge1xuICAgICAgICAgICAgICAgIE1vZGFscy5wbG90TW9kYWwuY2xhc3NMaXN0LmFkZChzZXR0aW5ncy5tb2RhbENsYXNzKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihzZXR0aW5ncy50eXBlID09ICdpbmxpbmUnKSB7XG5cbiAgICAgICAgICAgICAgICBNb2RhbHMuY3VycmVudE1vZGFsSWQgPSBzZXR0aW5ncy5jb250ZW50c0lkXG5cbiAgICAgICAgICAgICAgICAvL0ZpbmQgY29udGVudCB0byBpbnNlcnQgaW4gb3VyIG1vZGFsXG4gICAgICAgICAgICAgICAgdmFyIHBsb3RNb2RhbENvbnRlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TW9kYWxDb250ZW50c1tkYXRhLXBsb3QtbW9kYWwtY29udGVudHM9XCInICsgTW9kYWxzLmN1cnJlbnRNb2RhbElkICsgJ1wiXScpXG5cbiAgICAgICAgICAgICAgICBpZighcGxvdE1vZGFsQ29udGVudHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICAgICAgICAgICAgcGxvdE1vZGFsQ29udGVudHMgPSBwbG90TW9kYWxDb250ZW50cy5pbm5lckhUTUw7XG5cbiAgICAgICAgICAgICAgICBNb2RhbHMucHV0Q29udGVudHNJbnRvTW9kYWwocGxvdE1vZGFsQ29udGVudHMpXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9BSkFYIGxvYWRpbmcgY29udGVudFxuICAgICAgICAgICAgICAgIHZhciBhamF4RGF0YSA9IHt9XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3Bsb3RNb2RhbExvYWRpbmdBamF4JylcblxuICAgICAgICAgICAgICAgIGZvcihjb25zdCBrZXkgaW4gZWxlbWVudC5kYXRhc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleS5zdWJzdHJpbmcoMCwxMykgPT0gJ3Bsb3RNb2RhbERhdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4RGF0YVtrZXkuY2hhckF0KDEzKS50b0xvd2VyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxNCldID0gZWxlbWVudC5kYXRhc2V0W2tleV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuT3JXcml0ZSAgIDogJ3JldHVybicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUGFydCAgICA6IHNldHRpbmdzLnRlbXBsYXRlUGFydCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSAgICAgICAgICAgIDogYWpheERhdGFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUGxvdC5sb2FkVGVtcGxhdGVQYXJ0KGFyZ3MpLnRoZW4oaHRtbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy5wdXRDb250ZW50c0ludG9Nb2RhbChodG1sKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBwdXRDb250ZW50c0ludG9Nb2RhbCA6IGNvbnRlbnRzID0+ICB7XG5cblxuICAgICAgICAgICAgTW9kYWxzLm1vZGFsQ29udGVudC5zdHlsZS5taW5IZWlnaHQgPSBNb2RhbHMubW9kYWxDb250ZW50LmNsaWVudEhlaWdodCArICdweCdcbiAgICAgICAgICAgIE1vZGFscy5tb2RhbENvbnRlbnQuaW5uZXJIVE1MID0gY29udGVudHNcblxuICAgICAgICAgICAgQm9keVNjcm9sbExvY2suZGlzYWJsZUJvZHlTY3JvbGwoTW9kYWxzLnBsb3RNb2RhbClcblxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdwbG90TW9kYWxJblZpZXcnKVxuXG4gICAgICAgICAgICBjb25zdCBuZXdJbWFnZXMgPSBNb2RhbHMubW9kYWxDb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpXG5cbiAgICAgICAgICAgIExhenlMb2FkLmFkZEVsZW1lbnRzKG5ld0ltYWdlcykudGhlbigoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy5tb2RhbENvbnRlbnQuc3R5bGUubWluSGVpZ2h0ID0gMFxuXG4gICAgICAgICAgICAgICAgfSw1MClcblxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc3QgbmV3VmlkZW9zID0gTW9kYWxzLm1vZGFsQ29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCd2aWRlbycpXG5cblxuXG4gICAgICAgICAgICBuZXdWaWRlb3MuZm9yRWFjaCh2aWRlbyA9PntcblxuICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBuZXcgTWVkaWFFbGVtZW50UGxheWVyKHZpZGVvLC8qIE9wdGlvbnMgKi8pO1xuICAgICAgICAgICAgICAgIHBsYXllci5wbGF5KCk7XG5cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIE1vZGFscy5pc09wZW4gPSB0cnVlXG4gICAgICAgICAgICBNb2RhbHMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncGxvdE1vZGFsTG9hZGluZ0FqYXgnKVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdGlhbGlzZUdyb3VwIDogKGVsZW1lbnQpID0+IHtcblxuICAgICAgICAgICAgTW9kYWxzLmdyb3VwTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wbG90LW1vZGFsLWdyb3VwPVwiJytlbGVtZW50LmRhdGFzZXQucGxvdE1vZGFsR3JvdXArJ1wiXScpXG5cbiAgICAgICAgICAgIHZhciBpID0gMFxuXG4gICAgICAgICAgICBmb3IodmFyIGdyb3VwTGluayBvZiBNb2RhbHMuZ3JvdXBMaW5rcykge1xuXG4gICAgICAgICAgICAgICAgaWYoZWxlbWVudCA9PSBncm91cExpbmspXG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy5jdXJyZW50R3JvdXBJdGVtID0gaTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpKytcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihNb2RhbHMuY3VycmVudE1vZGFsSWQgJiYgIVBsb3QuaXNUb3VjaERldmljZSgpKVxuXG4gICAgICAgICAgICAgICAgTW9kYWxzLmNvbnRyb2xzVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIE1vZGFscy5wbG90TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZUNvbnRyb2xzJylcblxuICAgICAgICAgICAgICAgIH0sMzAwMClcblxuICAgICAgICAgICAgTW9kYWxzLm1vZGFsR3JvdXBDb250cm9scy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2VQbG90TW9kYWw6ICgpID0+IHtcbiAgICBcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncGxvdE1vZGFsSW5WaWV3JylcblxuICAgICAgICAgICAgTW9kYWxzLmN1cnJlbnRNb2RhbElkID0gbnVsbFxuXG4gICAgICAgICAgICBNb2RhbHMucGxvdE1vZGFsLmNsYXNzTGlzdCA9ICdKUy0tcGxvdE1vZGFsIHBsb3RNb2RhbCdcblxuICAgICAgICAgICAgTW9kYWxzLmdyb3VwTGlua3MgPSBbXVxuXG4gICAgICAgICAgICBNb2RhbHMuY3VycmVudEdyb3VwSXRlbSA9IDBcblxuICAgICAgICAgICAgTW9kYWxzLm1vZGFsQ29udGVudC5pbm5lckhUTUwgPSAnJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBCb2R5U2Nyb2xsTG9jay5lbmFibGVCb2R5U2Nyb2xsKE1vZGFscy5wbG90TW9kYWwpXG5cbiAgICAgICAgICAgIE1vZGFscy5pc09wZW4gPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IE1vZGFsc1xuXG59KCkpXG4iLCIoZnVuY3Rpb24gKCkge1xuXG4gIHZhciBTbW9vdGg7XG5cbiAgU21vb3RoID0ge1xuXG4gICAgdHJhY2tlZEVsZW1lbnRzT2JzZXJ2ZXIgOiBudWxsLFxuICAgIHN0YW5kYXJkU2Nyb2xsRnJhbWVzT2JzZXJ2ZXIgOiBudWxsLFxuXG4gICAgbWFpblNjcm9sbEFuaW1hdGlvbkZyYW1lIDogbnVsbCxcblxuICAgIGN1cnJlbnRQb3NpdGlvbiA6IDAsXG5cbiAgICBtdXRhdGlvbk9ic2VydmVyRGVib3VuY2UgOiBudWxsLFxuXG4gICAgb25TY3JvbGxDYWxsYmFja1Rocm90dGxlciA6IG51bGwsXG5cbiAgICBlYXNlIDogMC4wNyxcblxuICAgIGxhc3RQb3NpdGlvbiA6IDAsXG5cbiAgICBvblNjcm9sbCA6IG51bGwsXG5cbiAgICBzdGFuZGFyZFNjcm9sbCA6IGZhbHNlLFxuXG4gICAgc2Nyb2xsRWxlbWVudHMgOiBbXSxcblxuICAgIHRvcEJhckhlaWdodCA6IDAsXG5cbiAgICBzY3JvbGxGcmFtZXMgOiBbXSxcblxuICAgIHRpY2tpbmcgOiBmYWxzZSxcblxuICAgIGRvbSA6IHtcbiAgICAgICAgICAgIHNjcm9sbFdpbmRvdyAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBsb3Qtc21vb3RoLXNjcm9sbF0nKSxcbiAgICAgICAgICAgIHNjcm9sbEZyYW1lcyAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBsb3Qtc21vb3RoLXNjcm9sbC1mcmFtZV0nKSxcbiAgICAgICAgICAgIHNjcm9sbEVsZW1lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBsb3Qtc21vb3RoLXNjcm9sbC1lbGVtZW50XScpLFxuICAgICAgICAgICAgdG9wQmFyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcGxvdC1zbW9vdGgtc2Nyb2xsLXRvcGJhcicpXG4gICAgICAgICAgfSxcblxuICAgIHdpbmRvd0hlaWdodCA6IHdpbmRvdy5pbm5lckhlaWdodCwgXG5cbiAgICB3aW5kb3dXaWR0aCA6IHdpbmRvdy5pbm5lcldpZHRoLFxuXG4gICAgaW5pdDogc2V0dGluZ3MgPT4ge1xuXG4gICAgICAvL292ZXJyaWRlIGFueSBkZWZhdWx0IHNldHRpbmdzIHdpdGggcGFzc2VkIHBhcmFtZXRlcnNcbiAgICAgIFNtb290aC5zZXRTZXR0aW5ncyhzZXR0aW5ncylcblxuICAgICAgaWYoIVNtb290aC5zdGFuZGFyZFNjcm9sbCkge1xuXG4gICAgICAgIC8vU2V0IG91ciBjdXJyZW50IGFuZCBsYXN0IHBvc2l0aW9ucyBcbiAgICAgICAgLy90byB0aGUgY3VycmVudCBzY3JvbGwgWSBwb3NpdGlvbiwgaW4gY2FzZVxuICAgICAgICAvL3dlIGFyZSBzY3JvbGxlZCBkb3duIHRoZSBwYWdlIG9uIGxvYWRcbiAgICAgICAgU21vb3RoLmN1cnJlbnRQb3NpdGlvbiAgICA9IHdpbmRvdy5zY3JvbGxZXG4gICAgICAgIFNtb290aC5sYXN0UG9zaXRpb24gICAgICAgPSB3aW5kb3cuc2Nyb2xsWVxuXG4gICAgICAgIC8vUHV0IGZpeGVkIG9udG8gdGhlIHdob2xlIHNpdGUgcmVhZHkgdG8gXG4gICAgICAgIC8vaW50ZXJjZXB0IHNjcm9sbGluZ1xuICAgICAgICBTbW9vdGguc2V0U3R5bGVzKClcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgU21vb3RoLnJlZnJlc2gsIHsgcGFzc2l2ZTogdHJ1ZSB9KVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgU21vb3RoLnNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlIH0pXG5cbiAgICAgICAgLy9SZWFkIHRocm91Z2ggZWFjaCBzY3JvbGwgZnJhbWUgYW5kIHNldCBkYXRhXG4gICAgICAgIC8vaW50byBhIHNpbmdsZSBhcnJheSBmb3IgcHJvY2Vzc2luZyBsYXRlclxuICAgICAgICAvL3tcbiAgICAgICAgLy8gICAgICBlbGVtZW50ICAgICAgICAgICA6IGVsZW1lbnQsICAgICAgKHRoZSBkb20gZWxlbWVudClcbiAgICAgICAgLy8gICAgICB0b3AgICAgICAgICAgICAgICA6IDEwMCwgICAgICAgICAgKHRoZSBvZmZzZXQgdG9wIHZhbHVlIHdpdGhvdXQgdHJhbnNmb3JtcywgaW4gcGl4ZWxzKVxuICAgICAgICAvLyAgICAgIGhlaWdodCAgICAgICAgICAgIDogMzAwLCAgICAgICAgICAodGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudCB3aXRob3V0IHRyYW5zZm9ybXMsIGluIHBpeGVscylcbiAgICAgICAgLy8gICAgICBib3R0b20gICAgICAgICAgICA6IDQwMCwgICAgICAgICAgKHRoZSBvZmZzZXQgYm90dG9tIHBvc2l0aW9uIHZhbHVlIHdpdGhvdXQgdHJhbnNmb3JtcywgaW4gcGl4ZWxzKVxuICAgICAgICAvLyAgICAgIHN0aWNreSAgICAgICAgICAgIDogZmFsc2UsICAgICAgICAoaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGJlaGF2ZSBsaWtlIENTUyBzdGlja3kgb3Igbm90KVxuICAgICAgICAvLyAgICAgIHBhcmVudEJvdHRvbSAgICAgIDogZmFsc2UgfHwgNTAwICAoaWYgdGhlIGVsZW1lbnQgaXMgc3RpY2t5LCByZXR1cm4gdGhlIGJvdHRvbSBwb3NpdGlvbiBvZiBpdHMgcGFyZW50IGluIHBpeGVscyAod2hlbiBpdCBzaG91bGQgdW5zdGljaykpXG4gICAgICAgIC8vICB9XG4gICAgICAgIFNtb290aC5zZXRTY3JvbGxGcmFtZURhdGEoKVxuXG4gICAgICB9XG5cbiAgICAgIC8vSWYgYW55IHNjcm9sbCBlbGVtZW50cyBleGlzdCwgd2UgY2FuIGFkZCB0aGVtIGFuZCBtb25pdG9yIHRoZW1cbiAgICAgIGlmKFNtb290aC5kb20uc2Nyb2xsRWxlbWVudHMpIHtcbiAgICAgICAgLy9SZWFkIHRocm91Z2ggZWFjaCBzY3JvbGwgZWxlbWVudCBhbmQgc2V0IGRhdGFcbiAgICAgICAgLy9pbnRvIGEgc2luZ2xlIGFycmF5IGZvciBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgIC8ve1xuICAgICAgICAvLyAgICAgIGVsZW1lbnQgICAgICAgICA6IGVsZW1lbnQsICAgICAgICAgICh0aGUgZG9tIGVsZW1lbnQpXG4gICAgICAgIC8vICAgICAgdG9wICAgICAgICAgICAgIDogMTAwLCAgICAgICAgICAgICAgKHRoZSBvZmZzZXQgdG9wIHZhbHVlIHdpdGhvdXQgdHJhbnNmb3JtcywgaW4gcGl4ZWxzKVxuICAgICAgICAvLyAgICAgIGhlaWdodCAgICAgICAgICA6IDMwMCwgICAgICAgICAgICAgICh0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IHdpdGhvdXQgdHJhbnNmb3JtcywgaW4gcGl4ZWxzKVxuICAgICAgICAvLyAgICAgIGJvdHRvbSAgICAgICAgICA6IDQwMCwgICAgICAgICAgICAgICh0aGUgb2Zmc2V0IGJvdHRvbSBwb3NpdGlvbiB2YWx1ZSB3aXRob3V0IHRyYW5zZm9ybXMsIGluIHBpeGVscylcbiAgICAgICAgLy8gICAgICBpc1Zpc2libGUgICAgICAgOiBmYWxzZSwgICAgICAgICAgICAoaWYgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IGluIHRoZSB3aW5kb3cgZnJhbWUgb3Igbm90KVxuICAgICAgICAvLyAgICAgIGluaXRpYWxPZmZzZXQgICA6IC4yLCAgICAgICAgICAgICAgIChob3cgZmFyIGF3YXkgdGhpcyBlbGVtZW50IGlzIGZyb20gdGhlIGluaXRpYWwgY2VudGVyIG9mIHRoZSBzY3JlZW4pXG4gICAgICAgIC8vICAgICAgY3VycmVudFBvc2l0aW9uIDogMCAgICAgICAgICAgICAgICAgKGhvdyBmYXIgdXAgdGhlIHZpZXdwb3J0IHRoaXMgZWxlbWVudCBjdXJyZW50bHkgaXMgKGJldHdlZW4gLTEgYW5kIDEpKVxuICAgICAgICAvLyAgICAgIGNhbGxiYWNrICAgICAgICA6ICdmdW5jdGlvbi5uYW1lJyAgICh0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uIHlvdSBjYW4gY2FsbCB3aGVuIHRoaXMgbW92ZXMgd2l0aGluIHZpZXcpXG4gICAgICAgIC8vIH1cbiAgICAgICAgU21vb3RoLnRyYWNrZWRFbGVtZW50c09ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFNtb290aC50cmFja1Zpc2libGVFbGVtZW50cywge3Jvb3RNYXJnaW46ICcyMDBweCcsdGhyZXNob2xkOiAwLjAxfSlcbiAgICAgICAgU21vb3RoLnNldFNjcm9sbEVsZW1lbnREYXRhKClcbiAgICAgIH1cblxuICAgICAgLy9TZXQgdXAgYSBtdXRhdGlvbiBvYnNlcnZlciB0byBsaXN0ZW4gb3V0IGZvciBjaGFuZ2VzIGluIGhlaWdodCxcbiAgICAgIC8vdG8gYWRqdXN0IG91ciBoZWlnaHQgb2YgZG9jdW1lbnQgYWNjb3JkaW5nbHlcbiAgICAgIFNtb290aC5pbml0TXV0YXRpb25PYnNlcnZlcigpXG5cbiAgICAgIC8vSWYgdGhlcmUncyBhIGZpeGVkIHRvcGJhciBvbiB0aGlzIHNpdGUsIHdlIGNhbiBzZXQgdGhlIGhlaWdodFxuICAgICAgLy9oZXJlLCBpbiBvcmRlciB0byBvZmZzZXQgYW55IHN0aWNreSBwb3NpdGlvbnMuIFxuICAgICAgU21vb3RoLnNldFRvcEJhckhlaWdodCgpXG5cbiAgICAgIC8vSWYgaXQncyBub3Qgc3RhbmRhcmQgc2Nyb2xsLCBzZXQgb3VyIGluaXRpYWwgc2Nyb2xsIGZyYW1lIHBvc2l0aW9uc1xuICAgICAgaWYoIVNtb290aC5zdGFuZGFyZFNjcm9sbCkge1xuICAgICAgICBTbW9vdGguc2V0UG9zaXRpb25PZkZyYW1lcygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgU21vb3RoLnN0YW5kYXJkU2Nyb2xsRnJhbWVzT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoU21vb3RoLnRyYWNrU3RhbmRhcmRTY3JvbGxGcmFtZXMsIHtyb290TWFyZ2luOiAnMHB4Jyx0aHJlc2hvbGQ6IDAuMDF9KVxuICAgICAgICAgZm9yKGxldCBmcmFtZSBvZiBTbW9vdGguZG9tLnNjcm9sbEZyYW1lcykge1xuICAgICAgICAgICAgU21vb3RoLnN0YW5kYXJkU2Nyb2xsRnJhbWVzT2JzZXJ2ZXIub2JzZXJ2ZShmcmFtZSlcbiAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy9TZXQgb3VyIHBvc2l0aW9uIG9mIGFueSBzY3JvbGwgZWxlbWVudHNcbiAgICAgIFNtb290aC5wb3NpdGlvblNjcm9sbEVsZW1lbnRzKClcblxuICAgIH0sXG5cbiAgICBzZXRTZXR0aW5ncyA6IHNldHRpbmdzID0+IHtcblxuICAgICAgaWYoIXNldHRpbmdzKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgICBpZih0eXBlb2Yoc2V0dGluZ3Mub25TY3JvbGwpID09ICdmdW5jdGlvbicpXG4gICAgICAgIFNtb290aC5vblNjcm9sbCA9IHNldHRpbmdzLm9uU2Nyb2xsXG4gICAgICBcbiAgICAgIGlmKHNldHRpbmdzLnN0YW5kYXJkU2Nyb2xsID09IHRydWUpXG4gICAgICAgIFNtb290aC5zdGFuZGFyZFNjcm9sbCA9IHRydWVcblxuICAgICAgaWYoc2V0dGluZ3MuZWFzZSkgXG4gICAgICAgIFNtb290aC5lYXNlID0gc2V0dGluZ3MuZWFzZVxuICAgICAgXG4gICAgfSxcblxuICAgIHJldHJpZ2dlcldpbmRvd1NpemVPbk11dGF0ZSA6IChtdXRhdGlvbnNMaXN0LCBvYnNlcnZlcikgPT4geyBcblxuICAgICAgaWYoIVNtb290aC5tdXRhdGlvbk9ic2VydmVyRGVib3VuY2UpIHtcblxuICAgICAgICBTbW9vdGgubXV0YXRpb25PYnNlcnZlckRlYm91bmNlID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlXG5cbiAgICAgICAgICAgIFNtb290aC5zY3JvbGxGcmFtZXMuZm9yRWFjaChmcmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoZnJhbWUuaGVpZ2h0ICE9IGZyYW1lLmVsZW1lbnQuY2xpZW50SGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmKGNoYW5nZWQgPT0gdHJ1ZSkgXG4gICAgICAgICAgICAgIFNtb290aC5yZWZyZXNoKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KFNtb290aC5tdXRhdGlvbk9ic2VydmVyRGVib3VuY2UpXG4gICAgICAgICAgICBTbW9vdGgubXV0YXRpb25PYnNlcnZlckRlYm91bmNlID0gbnVsbFxuXG4gICAgICAgIH0sMjAwKVxuXG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgaW5pdE11dGF0aW9uT2JzZXJ2ZXIgOiAoKSA9PiB7XG5cbiAgICAgIGZvcih2YXIgc2Nyb2xsRnJhbWUgb2YgU21vb3RoLmRvbS5zY3JvbGxGcmFtZXMpIHtcblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKFNtb290aC5yZXRyaWdnZXJXaW5kb3dTaXplT25NdXRhdGUpXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoc2Nyb2xsRnJhbWUsIHtcbiAgICAgICAgICBjaGlsZExpc3QgICA6IHRydWUsXG4gICAgICAgICAgYXR0cmlidXRlcyAgOiB0cnVlLFxuICAgICAgICAgIHN1YnRyZWUgICAgIDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgfSxcblxuICAgIGRlc3Ryb3kgOiAoKSA9PiB7XG5cbiAgICAgIFNtb290aC5zY3JvbGxFbGVtZW50cy5mb3JFYWNoKGVudHJ5ID0+e1xuICAgICAgICBlbnRyeS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKVxuICAgICAgfSlcblxuICAgICAgU21vb3RoLnNjcm9sbEZyYW1lcy5mb3JFYWNoKGVudHJ5ID0+e1xuICAgICAgICBlbnRyeS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKVxuICAgICAgfSlcblxuICAgICAgU21vb3RoLnRyYWNrZWRFbGVtZW50c09ic2VydmVyID0gbnVsbFxuICAgICAgU21vb3RoLm1haW5TY3JvbGxBbmltYXRpb25GcmFtZSA9IG51bGxcbiAgICAgIFNtb290aC5jdXJyZW50UG9zaXRpb24gPSAwXG4gICAgICBTbW9vdGgubXV0YXRpb25PYnNlcnZlckRlYm91bmNlID0gbnVsbFxuICAgICAgU21vb3RoLm9uU2Nyb2xsQ2FsbGJhY2tUaHJvdHRsZXIgPSBudWxsXG4gICAgICBTbW9vdGguZWFzZSA9IDAuMDdcbiAgICAgIFNtb290aC5sYXN0UG9zaXRpb24gPSAwXG4gICAgICBTbW9vdGgub25TY3JvbGwgPSBudWxsXG4gICAgICBTbW9vdGguc3RhbmRhcmRTY3JvbGwgPSBmYWxzZVxuICAgICAgU21vb3RoLnNjcm9sbEVsZW1lbnRzID0gW11cbiAgICAgIFNtb290aC50b3BCYXJIZWlnaHQgPSAwXG4gICAgICBTbW9vdGguc2Nyb2xsRnJhbWVzID0gW11cbiAgICAgIFNtb290aC50aWNraW5nID0gZmFsc2VcbiAgICAgIFNtb290aC5kb20uc2Nyb2xsV2luZG93LnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKVxuXG4gICAgfSxcblxuICAgIGFkZEVsZW1lbnRzIDogKGVsZW1lbnRzKSA9PiB7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goIGVsZW1lbnQgPT4geyAgICAgICBcbiAgICAgICAgICAgICAgICBTbW9vdGgudHJhY2tlZEVsZW1lbnRzT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgcmVzb2x2ZSgpXG5cbiAgICAgIH0pXG5cbiAgICB9LFxuXG4gICAgc2Nyb2xsVG8gOiAoZWxlbWVudCkgPT4ge1xuICAgICAgXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCxTbW9vdGguZXhhY3RQb3NpdGlvbk9mRWxlbWVudChlbGVtZW50KSAtIDEwMClcblxuICAgICAgaWYoU21vb3RoLnN0YW5kYXJkU2Nyb2xsICE9IGZhbHNlKSB7XG4gICAgICAgIFNtb290aC50aWNraW5nID0gdHJ1ZVxuICAgICAgICBTbW9vdGgubWFpblNjcm9sbEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKFNtb290aC5ydW4pXG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldFNjcm9sbEVsZW1lbnREYXRhIDogKCkgPT4ge1xuXG4gICAgICBTbW9vdGguZG9tLnNjcm9sbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcGxvdC1zbW9vdGgtc2Nyb2xsLWVsZW1lbnRdJylcbiAgICAgIFNtb290aC5hZGRFbGVtZW50cyhTbW9vdGguZG9tLnNjcm9sbEVsZW1lbnRzKSBcblxuICAgICAgaWYoIVNtb290aC5kb20uc2Nyb2xsRWxlbWVudHMpXG4gICAgICAgIHJldHVybiBmYWxzZVxuXG4gICAgICBTbW9vdGguc2Nyb2xsRWxlbWVudHMgPSBbXVxuICAgIFxuICAgICAgU21vb3RoLmRvbS5zY3JvbGxFbGVtZW50cy5mb3JFYWNoKCAoZWxlbWVudCxpKSA9PiB7XG5cbiAgICAgICAgY29uc3QgZWxlbWVudFRvcCA9IFNtb290aC5leGFjdFBvc2l0aW9uT2ZFbGVtZW50KGVsZW1lbnQpXG5cbiAgICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrICA9IGZhbHNlLFxuICAgICAgICAgICAgZnJvbVZhbHVlID0gLTEsXG4gICAgICAgICAgICB0b1ZhbHVlICAgPSAxXG5cbiAgICAgICAgLy9JcyBhbnl0aGluZyBzZXQgb24gdGhpcyBlbGVtZW50IGFzIGEgY2FsbGJhY2s/XG4gICAgICAgIGlmKGVsZW1lbnQuZGF0YXNldC5wbG90U21vb3RoU2Nyb2xsRWxlbWVudCkge1xuXG4gICAgICAgICAgbGV0IGMgPSBlbGVtZW50LmRhdGFzZXQucGxvdFNtb290aFNjcm9sbEVsZW1lbnRcblxuICAgICAgICAgIC8vRmlyc3QgdXAgLSBoYXZlIHZhbHVlcyBiZWVuIHBhc3NlZCB0byB0aGlzIGNhbGxiYWNrIGluIHRoaXMgZm9ybTogY2FsbGJhY2soMiw1KVxuICAgICAgICAgIGxldCB2YWx1ZXMgPSBjLnN1YnN0cmluZyggYy5pbmRleE9mKCAnKCcgKSArIDEsIGMuaW5kZXhPZiggJyknICkgKVxuICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpXG5cbiAgICAgICAgICAvL1ZhbGlkIGlmIHdlIGhhdmUgMiwgYW5kIGZyb20gaXMgbGVzcyB0aGF0IHRvIHZhbHVlXG4gICAgICAgICAgaWYodmFsdWVzLmxlbmd0aCA9PSAyICYmIHZhbHVlc1swXSA8IHZhbHVlc1sxXSkge1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gTnVtYmVyKHZhbHVlc1swXSlcbiAgICAgICAgICAgIHRvVmFsdWUgPSBOdW1iZXIodmFsdWVzWzFdKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBwb3RlbnRpYWxGdW5jdGlvbiA9IHdpbmRvd1tjXVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBwb3RlbnRpYWxGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrID0gcG90ZW50aWFsRnVuY3Rpb24ucmVwbGFjZSgvXFxzKlxcKC4qP1xcKVxccyovZywgJycpXG5cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrU3BsaXQgPSBjLnJlcGxhY2UoL1xccypcXCguKj9cXClcXHMqL2csICcnKS5zcGxpdCgnLicpXG5cbiAgICAgICAgICAgIGlmKGNhbGxiYWNrU3BsaXQubGVuZ3RoID09IDIpIHtcblxuICAgICAgICAgICAgICBwb3RlbnRpYWxGdW5jdGlvbiA9IHdpbmRvd1tjYWxsYmFja1NwbGl0WzBdXVtjYWxsYmFja1NwbGl0WzFdXVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcG90ZW50aWFsRnVuY3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcG90ZW50aWFsRnVuY3Rpb25cbiAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW5pdGlhbE9mZnNldCA9IDBcblxuICAgICAgICBpZihlbGVtZW50VG9wIDwgU21vb3RoLndpbmRvd0hlaWdodClcbiAgICAgICAgICBpbml0aWFsT2Zmc2V0ID0gKGVsZW1lbnRUb3AgKyBoZWlnaHQpIC8gKFNtb290aC53aW5kb3dIZWlnaHQgKyBoZWlnaHQpICogKHRvVmFsdWUgLSBmcm9tVmFsdWUpICsgZnJvbVZhbHVlXG5cblxuICAgICAgICBcbiAgICAgICAgU21vb3RoLnNjcm9sbEVsZW1lbnRzW2ldID0ge1xuICAgICAgICAgICAgZWxlbWVudCAgICAgICAgIDogZWxlbWVudCxcbiAgICAgICAgICAgIHRvcCAgICAgICAgICAgICA6IGVsZW1lbnRUb3AsXG4gICAgICAgICAgICBoZWlnaHQgICAgICAgICAgOiBoZWlnaHQsXG4gICAgICAgICAgICBib3R0b20gICAgICAgICAgOiBlbGVtZW50VG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICBpc1Zpc2libGUgICAgICAgOiBlbGVtZW50VG9wIDwgU21vb3RoLmN1cnJlbnRQb3NpdGlvbiArIFNtb290aC53aW5kb3dIZWlnaHQgJiYgZWxlbWVudFRvcCArIGhlaWdodCA+IFNtb290aC5jdXJyZW50UG9zaXRpb24sXG4gICAgICAgICAgICBpbml0aWFsT2Zmc2V0ICAgOiBpbml0aWFsT2Zmc2V0LFxuICAgICAgICAgICAgY2FsbGJhY2sgICAgICAgIDogY2FsbGJhY2ssXG4gICAgICAgICAgICBmcm9tVmFsdWUgICAgICAgOiBmcm9tVmFsdWUsXG4gICAgICAgICAgICB0b1ZhbHVlICAgICAgICAgOiB0b1ZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uIDogMFxuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5kYXRhc2V0LnBsb3RTbW9vdGhTY3JvbGxFbGVtZW50SWQgPSBpXG5cbiAgICAgIH0pXG5cblxuICAgIH0sXG5cbiAgICBzZXRUb3BCYXJIZWlnaHQgOiAoKSA9PiB7XG5cbiAgICAgIGlmKFNtb290aC5kb20udG9wQmFyKVxuICAgICAgICBTbW9vdGgudG9wQmFySGVpZ2h0ID0gU21vb3RoLmRvbS50b3BCYXIuY2xpZW50SGVpZ2h0XG5cbiAgICB9LFxuXG4gICAgc2V0U2Nyb2xsRnJhbWVEYXRhIDogKCkgPT4ge1xuXG4gICAgICBTbW9vdGguZG9tLnNjcm9sbEZyYW1lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBsb3Qtc21vb3RoLXNjcm9sbC1mcmFtZV0nKVxuXG4gICAgICBTbW9vdGguc2Nyb2xsRnJhbWVzID0gW11cbiAgICAgIHZhciBuZXdIZWlnaHQgPSAwXG5cbiAgICAgIFNtb290aC5kb20uc2Nyb2xsRnJhbWVzLmZvckVhY2goIGVsZW1lbnQgPT4ge1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnRUb3AgPSBTbW9vdGguZXhhY3RQb3NpdGlvbk9mRWxlbWVudChlbGVtZW50KVxuXG4gICAgICAgIFNtb290aC5zY3JvbGxGcmFtZXMucHVzaCh7XG4gICAgICAgICAgICBlbGVtZW50ICAgICAgICAgICA6IGVsZW1lbnQsXG4gICAgICAgICAgICB0b3AgICAgICAgICAgICAgICA6IGVsZW1lbnRUb3AsXG4gICAgICAgICAgICBoZWlnaHQgICAgICAgICAgICA6IGVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgYm90dG9tICAgICAgICAgICAgOiBlbGVtZW50VG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICBzdGlja3kgICAgICAgICAgICA6IHR5cGVvZihlbGVtZW50LmRhdGFzZXQucGxvdFNtb290aFNjcm9sbFN0aWNreSkgIT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogZmFsc2UsIFxuICAgICAgICAgICAgcGFyZW50Qm90dG9tICAgICAgOiBlbGVtZW50LnBhcmVudEVsZW1lbnQgPyBTbW9vdGguZXhhY3RQb3NpdGlvbk9mRWxlbWVudChlbGVtZW50LnBhcmVudEVsZW1lbnQpICsgZWxlbWVudC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCA6IGZhbHNlXG4gICAgICAgIH0pXG5cbiAgICAgIH0pXG5cbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuaGVpZ2h0ID0gYCR7U21vb3RoLmRvbS5zY3JvbGxXaW5kb3cuc2Nyb2xsSGVpZ2h0fXB4YFxuXG4gICAgfSxcblxuICAgIHRyYWNrVmlzaWJsZUVsZW1lbnRzIDogKGVudHJpZXMpID0+IHtcbiAgICAgICBcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKCBlbnRyeSA9PiB7XG5cbiAgICAgICAgICBpZihlbnRyeS5pc0ludGVyc2VjdGluZyAmJiBlbnRyeSkge1xuICAgICAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3Bsb3RTbW9vdGhTY3JvbGxJblZpZXcnLCdwbG90U21vb3RoU2Nyb2xsU2Vlbk9uY2UnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwbG90U21vb3RoU2Nyb2xsSW5WaWV3JylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZihTbW9vdGguc2Nyb2xsRWxlbWVudHNbZW50cnkudGFyZ2V0LmRhdGFzZXQucGxvdFNtb290aFNjcm9sbEVsZW1lbnRJZF0pXG4gICAgICAgICAgICBTbW9vdGguc2Nyb2xsRWxlbWVudHNbZW50cnkudGFyZ2V0LmRhdGFzZXQucGxvdFNtb290aFNjcm9sbEVsZW1lbnRJZF0uaXNWaXNpYmxlID0gZW50cnkuaXNJbnRlcnNlY3RpbmdcblxuXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIHRyYWNrU3RhbmRhcmRTY3JvbGxGcmFtZXMgOiAoZW50cmllcykgPT4ge1xuICAgICAgIFxuICAgICAgICBlbnRyaWVzLmZvckVhY2goIGVudHJ5ID0+IHtcblxuICAgICAgICAgIGlmKGVudHJ5LmlzSW50ZXJzZWN0aW5nICYmIGVudHJ5KSB7XG4gICAgICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZCgncGxvdFNtb290aFNjcm9sbEZyYW1lSW5WaWV3JywncGxvdFNtb290aFNjcm9sbEZyYW1lU2Vlbk9uY2UnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwbG90U21vb3RoU2Nyb2xsRnJhbWVJblZpZXcnKVxuICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICByZWZyZXNoIDogKCkgPT4ge1xuICAgICAgaWYoU21vb3RoLnN0YW5kYXJkU2Nyb2xsKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgXG4gICAgICBTbW9vdGgud2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICBTbW9vdGgud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgU21vb3RoLnNldFNjcm9sbEVsZW1lbnREYXRhKClcbiAgICAgIFNtb290aC5zZXRTY3JvbGxGcmFtZURhdGEoKVxuICAgICAgU21vb3RoLnNldFRvcEJhckhlaWdodCgpXG4gICAgICBTbW9vdGguc2Nyb2xsKClcbiAgICB9LFxuXG4gICAgcnVuIDogKCkgPT4ge1xuXG4gICAgICBTbW9vdGgubGFzdFBvc2l0aW9uID0gU21vb3RoLmxlcnAoU21vb3RoLmxhc3RQb3NpdGlvbiwgU21vb3RoLmN1cnJlbnRQb3NpdGlvbiwgU21vb3RoLmVhc2UpXG5cbiAgICAgIGlmIChTbW9vdGgubGFzdFBvc2l0aW9uIDwgLjEpXG4gICAgICAgIFNtb290aC5sYXN0UG9zaXRpb24gPSAwXG4gICAgIFxuICAgICAgbGV0IGRpZmYgPSBTbW9vdGguY3VycmVudFBvc2l0aW9uIC0gU21vb3RoLmxhc3RQb3NpdGlvblxuXG4gICAgICBpZihNYXRoLmFicyhkaWZmKSA8IDAuNSkge1xuICAgICAgICBTbW9vdGgudGlja2luZyA9IGZhbHNlXG4gICAgICAgIGRpZmYgPSAwXG4gICAgICB9XG5cbiAgICAgIHZhciB2ZWxvY2l0eSA9IGRpZmYgLyBTbW9vdGgud2luZG93V2lkdGhcblxuICAgICAgU21vb3RoLnNldFBvc2l0aW9uT2ZGcmFtZXMoKVxuXG4gICAgICBTbW9vdGguZmlyZU9uU2Nyb2xsRXZlbnQodmVsb2NpdHkpXG5cbiAgICAgIFNtb290aC5wb3NpdGlvblNjcm9sbEVsZW1lbnRzKClcblxuICAgICAgaWYoU21vb3RoLnRpY2tpbmcgPT0gdHJ1ZSlcbiAgICAgICAgU21vb3RoLm1haW5TY3JvbGxBbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShTbW9vdGgucnVuKVxuICAgICAgXG5cbiAgICB9LFxuXG4gICAgcG9zaXRpb25TY3JvbGxFbGVtZW50cyA6ICgpID0+IHtcblxuICAgICAgU21vb3RoLnNjcm9sbEVsZW1lbnRzLmZvckVhY2goZW50cnkgPT4ge1xuXG4gICAgICAgICAgaWYoZW50cnkuaXNWaXNpYmxlID09IHRydWUgJiYgZW50cnkuY2FsbGJhY2spIHtcblxuICAgICAgICAgICAgY29uc3QgY3VycmVudFBvc2l0aW9uID0gKGVudHJ5LnRvcCAtIFNtb290aC5sYXN0UG9zaXRpb24gKyBlbnRyeS5oZWlnaHQpIC8gKFNtb290aC53aW5kb3dIZWlnaHQgKyBlbnRyeS5oZWlnaHQpICogKGVudHJ5LnRvVmFsdWUgLSBlbnRyeS5mcm9tVmFsdWUpICsgZW50cnkuZnJvbVZhbHVlIC0gZW50cnkuaW5pdGlhbE9mZnNldFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihlbnRyeS5jdXJyZW50UG9zaXRpb24gIT0gY3VycmVudFBvc2l0aW9uKSB7XG5cbiAgICAgICAgICAgICAgZW50cnkuY3VycmVudFBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uXG5cbiAgICAgICAgICAgICAgZW50cnkuY2FsbGJhY2soZW50cnkuZWxlbWVudCxjdXJyZW50UG9zaXRpb24pXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH1cbiAgICAgICAgXG5cbiAgICAgICAgfSlcblxuICAgIH0sXG5cbiAgICBmaXJlT25TY3JvbGxFdmVudCA6ICh2ZWxvY2l0eSkgPT4ge1xuXG4gICAgICBpZih0eXBlb2YoU21vb3RoLm9uU2Nyb2xsKSA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICBcbiAgICAgICAgaWYoU21vb3RoLm9uU2Nyb2xsQ2FsbGJhY2tUaHJvdHRsZXIgPT09IG51bGwpIHtcblxuICAgICAgICAgIFNtb290aC5vblNjcm9sbENhbGxiYWNrVGhyb3R0bGVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICBTbW9vdGgub25TY3JvbGwoU21vb3RoLmRvbS5zY3JvbGxGcmFtZXMsdmVsb2NpdHkpXG4gICAgICAgICAgICBTbW9vdGgub25TY3JvbGxDYWxsYmFja1Rocm90dGxlciA9IG51bGxcblxuICAgICAgICAgIH0sNTApXG5cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHNldFBvc2l0aW9uT2ZGcmFtZXMgOiAoKSA9PiB7XG5cbiAgICAgIGZvcih2YXIgc2Nyb2xsRnJhbWUgb2YgU21vb3RoLnNjcm9sbEZyYW1lcykge1xuXG4gICAgICAgICAgdmFyIHdpbmRvd1Njcm9sbFBvc2l0aW9uID0gU21vb3RoLmxhc3RQb3NpdGlvblxuXG4gICAgICAgICAgaWYoc2Nyb2xsRnJhbWUuc3RpY2t5ICYmIHNjcm9sbEZyYW1lLnBhcmVudEJvdHRvbSkge1xuICAgICAgICAgICAgd2luZG93U2Nyb2xsUG9zaXRpb24gPSBTbW9vdGguY2FsY1Bvc2l0aW9uT2ZTdGlja3lFbGVtZW50KHNjcm9sbEZyYW1lLCB3aW5kb3dTY3JvbGxQb3NpdGlvbilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZih3aW5kb3dTY3JvbGxQb3NpdGlvbiA+IHNjcm9sbEZyYW1lLmJvdHRvbSB8fCB3aW5kb3dTY3JvbGxQb3NpdGlvbiArIFNtb290aC53aW5kb3dIZWlnaHQgPCBzY3JvbGxGcmFtZS50b3ApIHtcbiAgICAgICAgICAgIHNjcm9sbEZyYW1lLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncGxvdFNtb290aFNjcm9sbEZyYW1lSW5WaWV3JylcbiAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY3JvbGxGcmFtZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Bsb3RTbW9vdGhTY3JvbGxGcmFtZUluVmlldycsJ3Bsb3RTbW9vdGhTY3JvbGxGcmFtZVNlZW5PbmNlJylcbiAgICAgICAgICAgIHNjcm9sbEZyYW1lLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsIC0ke3dpbmRvd1Njcm9sbFBvc2l0aW9ufXB4LCAwKWBcbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHNjcm9sbCA6ICgpID0+IHtcbiAgICAgIFNtb290aC5jdXJyZW50UG9zaXRpb24gPSB3aW5kb3cuc2Nyb2xsWVxuICAgICAgaWYoU21vb3RoLnRpY2tpbmcgPT0gZmFsc2UpIHtcbiAgICAgICAgU21vb3RoLnRpY2tpbmcgPSB0cnVlXG4gICAgICAgIFNtb290aC5tYWluU2Nyb2xsQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoU21vb3RoLnJ1bikgXG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldFN0eWxlcyA6ICgpID0+IHtcblxuICAgICAgT2JqZWN0LmFzc2lnbihTbW9vdGguZG9tLnNjcm9sbFdpbmRvdy5zdHlsZSx7XG4gICAgICAgIHBvc2l0aW9uICA6ICdmaXhlZCcsXG4gICAgICAgIHRvcCAgICAgICA6IDAsXG4gICAgICAgIGxlZnQgICAgICA6IDAsXG4gICAgICAgIGhlaWdodCAgICA6ICcxMDAlJyxcbiAgICAgICAgd2lkdGggICAgIDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdyAgOiAnaGlkZGVuJ1xuICAgICAgfSlcblxuICAgIH0sXG5cbiAgICBjYWxjUG9zaXRpb25PZlN0aWNreUVsZW1lbnQgOiAoZW50cnksIHBvc2l0aW9uKSA9PiB7XG5cbiAgICAgIC8vSWYgdGhlIGl0ZW0gaXMgYmVsb3cgdGhlIGJvdHRvbSBvZiBpdCdzIHBhcmVudFxuICAgICAgaWYocG9zaXRpb24gKyBTbW9vdGgudG9wQmFySGVpZ2h0ID49IGVudHJ5LnBhcmVudEJvdHRvbSlcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uXG4gICAgICBcblxuICAgICAgaWYoZW50cnkucGFyZW50Qm90dG9tIC0gcG9zaXRpb24gLSBTbW9vdGgudG9wQmFySGVpZ2h0IDw9IGVudHJ5LmhlaWdodCkge1xuICAgICAgICByZXR1cm4gZW50cnkudG9wIC0gZW50cnkucGFyZW50Qm90dG9tICsgcG9zaXRpb24gKyBlbnRyeS5oZWlnaHRcbiAgICAgIH1cblxuICAgICAgaWYocG9zaXRpb24gKyBTbW9vdGgudG9wQmFySGVpZ2h0ID4gZW50cnkudG9wKSBcbiAgICAgICAgcmV0dXJuIGVudHJ5LnRvcCAtIFNtb290aC50b3BCYXJIZWlnaHQgICBcblxuXG4gICAgICByZXR1cm4gcG9zaXRpb25cblxuICAgIH0sXG5cbiAgICBsZXJwOiAoYSxiLG4pID0+ICB7XG5cbiAgICAgICAgcmV0dXJuICgxIC0gbikgKiBhICsgbiAqIGJcblxuICAgIH0sXG5cbiAgICBleGFjdFBvc2l0aW9uT2ZFbGVtZW50IDogKGVsZW1lbnQpID0+IHtcbiAgICAgIHZhciBlbCA9IGVsZW1lbnQsXG4gICAgICBvZmZzZXRUb3AgID0gMDtcblxuICAgICAgZG97XG4gICAgICAgICAgb2Zmc2V0VG9wICArPSBlbC5vZmZzZXRUb3A7XG5cbiAgICAgICAgICBlbCA9IGVsLm9mZnNldFBhcmVudDtcbiAgICAgIH0gd2hpbGUoIGVsICk7XG5cbiAgICAgIHJldHVybiBvZmZzZXRUb3BcblxuICAgIH1cblxuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBTbW9vdGhcblxufSgpKSIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgQm9keVNjcm9sbExvY2sgICA9IHJlcXVpcmUoJ2JvZHktc2Nyb2xsLWxvY2snKSxcbiAgICAgICAgTGF6eUxvYWQgICAgICAgICA9IHJlcXVpcmUoJy4vbGF6eWxvYWQnKSxcbiAgICAgICAgU3luY1Njcm9sbCAgICAgICA9IHJlcXVpcmUoJy4vc3luY3Njcm9sbCcpLCBcbiAgICAgICAgUGxvdFxuXG4gICAgUGxvdCA9IHtcblxuICAgICAgICBpbml0OiAoKSA9PiB7XG5cbiAgICAgICAgICAgIFBsb3QuY3JlYXRlTGlzdGVuZXJzKClcbiAgICAgICAgICAgIFN5bmNTY3JvbGwuaW5pdCgpIFxuICAgICAgICAgICAgUGxvdC5hbmltYXRlQmFubmVyTm90aWZpY2F0aW9ucygpIFxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlTGlzdGVuZXJzOiAoKSA9PiB7XG5cbiAgICAgICAgICAgXHRjb25zdCBidXJnZXJNZW51VHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuSlMtLW1lbnVUcmlnZ2VyJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoYnVyZ2VyTWVudVRyaWdnZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGJ1cmdlck1lbnVUcmlnZ2VyIG9mIGJ1cmdlck1lbnVUcmlnZ2Vycykge1xuICAgICAgICAgICAgICAgICAgICBidXJnZXJNZW51VHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsUGxvdC50b2dnbGVCdXJnZXIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzaWRlU3dpcGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsb3RTaWRlU3dpcGVzJylcblxuICAgICAgICAgICAgaWYoc2lkZVN3aXBlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgUGxvdC5zaWRlU3dpcGVzKHNpZGVTd2lwZXMpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBhbmltYXRlQmFubmVyTm90aWZpY2F0aW9ucyA6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJhbm5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tYmFubmVyTm90aWZpY2F0aW9uJylcblxuICAgICAgICAgICAgaWYoYmFubmVyKVxuICAgICAgICAgICAgICAgIGlmKGJhbm5lci5kYXRhc2V0LmFuaW1hdGlvblR5cGUgPT0gJ2Fsd2F5cycpIHtcbiAgICAgICAgICAgICAgICAgICAgUGxvdC5idWlsZEJhbm5lclJlcGVhdGluZ1RleHQoYmFubmVyKVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbG90LmJ1aWxkQmFubmVyUmVwZWF0aW5nVGV4dChiYW5uZXIpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgUGxvdC5jaGVja1RvU2VlSWZXZU5lZWRUb0FuaW1hdGlvbkJhbm5lcihiYW5uZXIpXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsb3QuY2hlY2tUb1NlZUlmV2VOZWVkVG9BbmltYXRpb25CYW5uZXIoYmFubmVyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja1RvU2VlSWZXZU5lZWRUb0FuaW1hdGlvbkJhbm5lciA6IGJhbm5lciA9PiB7XG5cbiAgICAgICAgICAgIGJhbm5lci5pbm5lckhUTUwgPSBgPGRpdj4ke2Jhbm5lci5kYXRhc2V0Lm1lc3NhZ2V9PC9kaXY+YFxuICAgICAgICAgICAgY29uc3QgZGl2MSA9IGJhbm5lci5xdWVyeVNlbGVjdG9yKCdkaXY6bnRoLW9mLXR5cGUoMSknKVxuICAgICAgICAgICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihkaXYxLnNjcm9sbFdpZHRoID4gd2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgICAgICBiYW5uZXIuY2xhc3NMaXN0LmFkZCgnd2l0aEFuaW1hdGlvbicpXG4gICAgICAgICAgICAgICAgUGxvdC5idWlsZEJhbm5lclJlcGVhdGluZ1RleHQoYmFubmVyKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgYmFubmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3dpdGhBbmltYXRpb24nKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgYnVpbGRCYW5uZXJSZXBlYXRpbmdUZXh0IDogYmFubmVyID0+IHtcblxuICAgICAgICAgICAgYmFubmVyLmlubmVySFRNTCA9IGA8ZGl2PiR7YmFubmVyLmRhdGFzZXQubWVzc2FnZX08L2Rpdj48ZGl2PiR7YmFubmVyLmRhdGFzZXQubWVzc2FnZX08L2Rpdj5gXG4gICAgICAgICAgICBjb25zdCBkaXYxID0gYmFubmVyLnF1ZXJ5U2VsZWN0b3IoJ2RpdjpudGgtb2YtdHlwZSgxKScpXG4gICAgICAgICAgICBjb25zdCBkaXYyID0gYmFubmVyLnF1ZXJ5U2VsZWN0b3IoJ2RpdjpudGgtb2YtdHlwZSgyKScpXG4gICAgICAgICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG5cbiAgICAgICAgICAgIGRpdjEuc3R5bGUuYW5pbWF0aW9uRHVyYXRpb249KHdpbmRvd1dpZHRoLzIwKStcInNcIlxuICAgICAgICAgICAgZGl2Mi5zdHlsZS5hbmltYXRpb25EdXJhdGlvbj0od2luZG93V2lkdGgvMjApK1wic1wiXG5cbiAgICAgICAgICAgIHZhciBpICA9IDBcblxuICAgICAgICAgICAgd2hpbGUoZGl2MS5zY3JvbGxXaWR0aCA8IHdpbmRvd1dpZHRoICYmIGkgPCAxMDApIHtcbiAgICAgICAgICAgICAgICBkaXYxLmlubmVySFRNTCA9IGRpdjEuaW5uZXJIVE1MICsgYCAke2Jhbm5lci5kYXRhc2V0Lm1lc3NhZ2V9YFxuICAgICAgICAgICAgICAgIGRpdjIuaW5uZXJIVE1MID0gZGl2Mi5pbm5lckhUTUwgKyBgICR7YmFubmVyLmRhdGFzZXQubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2lkZVN3aXBlcyA6IChzaWRlU3dpcGVzKSA9PiB7XG5cbiAgICAgICAgICAgIGZvcih2YXIgc2lkZVN3aXBlIG9mIHNpZGVTd2lwZXMpIHtcblxuICAgICAgICAgICAgICAgICBpZihwYXJzZUludChzaWRlU3dpcGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpICsgMSA8IHBhcnNlSW50KHNpZGVTd2lwZS5zY3JvbGxXaWR0aCkpIHtcblxuXG4gICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlQnVyZ2VyIDogKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBidXJnZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1idXJnZXJNZW51JylcblxuICAgICAgICAgICAgaWYoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2J1cmdlck9wZW4nKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdidXJnZXJPcGVuJylcbiAgICAgICAgICAgICAgICBCb2R5U2Nyb2xsTG9jay5kaXNhYmxlQm9keVNjcm9sbChidXJnZXJNZW51KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYnVyZ2VyT3BlbicpXG4gICAgICAgICAgICAgICAgQm9keVNjcm9sbExvY2suZW5hYmxlQm9keVNjcm9sbChidXJnZXJNZW51KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNQYWdlIDogc2x1ZyA9PiB7XG5cbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucygncGFnZS0nK3NsdWcpXG5cbiAgICAgICAgfSxcblxuICAgICAgICBmaXhWaCA6ICgpID0+IHtcblxuICAgICAgICAgICAgLy8gRmlyc3Qgd2UgZ2V0IHRoZSB2aWV3cG9ydCBoZWlnaHQgYW5kIHdlIG11bHRpcGxlIGl0IGJ5IDElIHRvIGdldCBhIHZhbHVlIGZvciBhIHZoIHVuaXRcbiAgICAgICAgICAgIGxldCB2aCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIDAuMDFcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YClcblxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNUb3VjaERldmljZTogKCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgcHJlZml4ZXMgPSAnIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtICcuc3BsaXQoJyAnKVxuICAgICAgICAgICAgdmFyIG1xID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2gpIHtcbiAgICAgICAgICAgIFx0ZG9jdW1lbnQuYm9keS5hZGRDbGFzcygnaXNUb3VjaERldmljZScpICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBbJygnLCBwcmVmaXhlcy5qb2luKCd0b3VjaC1lbmFibGVkKSwoJyksICdwbG90JywgJyknXS5qb2luKCcnKVxuICAgICAgICAgICAgcmV0dXJuIG1xKHF1ZXJ5KVxuICAgICAgICB9LFxuXG4gICAgICAgIGFyZVdlQXRUaGVUb3AgOiBzY3JvbGxUb3AgPT4ge1xuXG4gICAgICAgICAgICBpZihzY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdzY3JvbGxlZCcpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnc2Nyb2xsZWQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRUZW1wbGF0ZVBhcnQgOiAoYXJncykgPT4geyBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlUGFydCAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgYWN0aW9uICAgICAgICAgIDogJ3Bsb3RMb2FkVGVtcGxhdGVQYXJ0JywgLy9UaGlzIGlzIHRoZSBhY3Rpb24gZmlyZWQgaW50byBvdXIgUGxvdFNpdGUgUEhQIHNldHVwLnBocCBmaWxlXG4gICAgICAgICAgICAgICAgZGF0YSAgICAgICAgICAgIDoge30sXG4gICAgICAgICAgICAgICAgcmV0dXJuT3JXcml0ZSAgIDogJ3dyaXRlJywgLy8od3JpdGV8cmV0dXJuKSBlaXRoZXIgYWRkcyBjb250ZW50IHRvIGNvbnRlbnRBcmVhLCBvciByZXR1cm5zIG5ldyBIVE1MIGluIHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgY29udGVudEFyZWEgICAgIDogJy5KUy0tYWpheFRhcmdldEFyZWEnLCBcbiAgICAgICAgICAgICAgICBhcHBlbmQgICAgICAgICAgOiBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgYXJncylcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICB0cnkgeyBcbiAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5yZXR1cm5PcldyaXRlID09ICd3cml0ZScpXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50QXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2V0dGluZ3MuY29udGVudEFyZWEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb250ZW50QXJlYSBuZWVkcyB0byBiZSBhIHZhbGlkIHNlbGVjdG9yIScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGNvbnRlbnRBcmVhID09IG51bGwgJiYgc2V0dGluZ3MucmV0dXJuT3JXcml0ZSA9PSAnd3JpdGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkblxcJ3QgZmluZCBzZWxlY3RvciBmb3IgY29udGVudEFyZWEgb24gcGFnZS4nKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihzZXR0aW5ncy50ZW1wbGF0ZVBhcnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZG5cXCd0IGZpbmQgdGVtcGxhdGUgcGFydC4gTWFrZSBzdXJlIHlvdSBzZXQgb25lIGFzIHRlbXBsYXRlUGFydCwgZm9yIGV4YW1wbGUgcGFydHMvYWpheC1jb250ZW50JylcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodHlwZW9mKHNldHRpbmdzLmFwcGVuZCkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1ZhbHVlIHBhc3NlZCB0byBhcHBlbmQgd2FzIG5vdCBhIGJvb2xlYW4uJylcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoc2V0dGluZ3MucmV0dXJuT3JXcml0ZSA9PSAnd3JpdGUnKVxuICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLmNsYXNzTGlzdC5hZGQoJ3Bsb3RMb2FkaW5nJylcblxuICAgICAgICAgICAgc2V0dGluZ3MuZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBkYXRhICAgICAgICAgICAgOiBzZXR0aW5ncy5kYXRhLFxuICAgICAgICAgICAgICAgIGFjdGlvbiAgICAgICAgICA6IHNldHRpbmdzLmFjdGlvbixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVBhcnQgICAgOiBzZXR0aW5ncy50ZW1wbGF0ZVBhcnRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHF1ZXJ5U3RyaW5nID0gUGxvdC50b1F1ZXJ5U3RyaW5nKHNldHRpbmdzLmRhdGEpXG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGZldGNoKGF1LCB7XG5cbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogcXVlcnlTdHJpbmcsXG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidcblxuICAgICAgICAgICAgfSkudGhlbihkYXRhID0+IHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmpzb24oKVxuXG4gICAgICAgICAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5yZXR1cm5PcldyaXRlID09ICd3cml0ZScpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLmNsYXNzTGlzdC5yZW1vdmUoJ3Bsb3RMb2FkaW5nJylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQuc3VjY2Vzcykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLnJldHVybk9yV3JpdGUgIT09ICd3cml0ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Lmh0bWxcblxuICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5hcHBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgcmVzdWx0Lmh0bWwpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEFyZWEuaW5uZXJIVE1MID0gcmVzdWx0Lmh0bWxcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRBcmVhLnF1ZXJ5U2VsZWN0b3JBbGwoJy5KUy0tbGF6eUxvYWQnKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExhenlMb2FkLm9ic2VydmVyLm9ic2VydmUoZWwpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuaHRtbFxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PntcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLGVycm9yKVxuXG4gICAgICAgICAgICB9KVxuXG5cblxuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGVGb3JtYXQgOiAoZGF0ZSxmb3JtYXQpID0+IHtcblxuICAgICAgICAgICAgaWYoZm9ybWF0ID09ICdkUyBNJylcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgKyBQbG90LmdldE9yZGluYWwoZGF0ZS5nZXREYXRlKCkpICsgJyAnICsgUGxvdC5nZXRNb250aChkYXRlKVxuXG4gICAgICAgICAgICBpZihmb3JtYXQgPT0gJ00gZFMnKVxuICAgICAgICAgICAgICAgIHJldHVybiBQbG90LmdldE1vbnRoKGRhdGUpICsgJyAnICsgZGF0ZS5nZXREYXRlKCkgKyBQbG90LmdldE9yZGluYWwoZGF0ZS5nZXREYXRlKCkpIFxuXG4gICAgICAgICAgICBpZihmb3JtYXQgPT0gJ2QvbS95JylcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgKyAnLycgKyAoZGF0ZS5nZXRNb250aCgpICsgMSkgKyAnLycgKyBkYXRlLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKS5zdWJzdHIoLTIpXG5cbiAgICAgICAgICAgIGlmKGZvcm1hdCA9PSAnbS9kL3knKVxuICAgICAgICAgICAgICAgIHJldHVybiAoZGF0ZS5nZXRNb250aCgpICsgMSkgKyAnLycgKyBkYXRlLmdldERhdGUoKSArICcvJyArIGRhdGUuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpLnN1YnN0cigtMilcblxuICAgICAgICAgICAgcmV0dXJuIFBsb3QuZ2V0RGF5T2ZXZWVrKGRhdGUpXG4gICAgICAgICB9LFxuXG4gICAgICAgIGdldERheU9mV2VlayA6IGRhdGUgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBkYXlzID0gW1xuICAgICAgICAgICAgICAgICdTdW5kYXknLFxuICAgICAgICAgICAgICAgICdNb25kYXknLFxuICAgICAgICAgICAgICAgICdUdWVzZGF5JyxcbiAgICAgICAgICAgICAgICAnV2VkbmVzZGF5JyxcbiAgICAgICAgICAgICAgICAnVGh1cnNkYXknLFxuICAgICAgICAgICAgICAgICdGcmlkYXknLFxuICAgICAgICAgICAgICAgICdTYXR1cmRheSdcbiAgICAgICAgICAgIF1cblxuICAgICAgICAgICAgcmV0dXJuIGRheXNbZGF0ZS5nZXREYXkoKV1cblxuICAgICAgICB9LFxuXG4gICAgICAgIGdldE9yZGluYWwgOiBudW1iZXIgPT4ge1xuXG4gICAgICAgICAgICAgIGlmIChudW1iZXIgPiAzICYmIG51bWJlciA8IDIxKSByZXR1cm4gJ3RoJztcbiAgICAgICAgICAgICAgc3dpdGNoIChudW1iZXIgJSAxMCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTogIHJldHVybiBcInN0XCI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOiAgcmV0dXJuIFwibmRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDM6ICByZXR1cm4gXCJyZFwiO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBcInRoXCI7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG5cbiAgICAgICAgZ2V0TW9udGggOiBkYXRlID0+IHtcblxuICAgICAgICAgICAgY29uc3QgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLFxuICAgICAgICAgICAgICBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9udGhOYW1lc1tkYXRlLmdldE1vbnRoKCldXG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9RdWVyeVN0cmluZyA6IChvYmosIHByZWZpeCkgPT4ge1xuICAgICAgICAgICAgdmFyIHN0ciA9IFtdLCBrLCB2O1xuICAgICAgICAgICAgZm9yKHZhciBwIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KHApKSB7Y29udGludWU7fSAvLyBza2lwIHRoaW5ncyBmcm9tIHRoZSBwcm90b3R5cGVcbiAgICAgICAgICAgICAgICBpZiAofnAuaW5kZXhPZignWycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIHAuc3Vic3RyaW5nKDAsIHAuaW5kZXhPZignWycpKSArIFwiXVwiICsgcC5zdWJzdHJpbmcocC5pbmRleE9mKCdbJykpIDogcDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBrID0gcHJlZml4ID8gcHJlZml4ICsgXCJbXCIgKyBwICsgXCJdXCIgOiBwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2ID0gb2JqW3BdO1xuICAgICAgICAgICAgICAgIHN0ci5wdXNoKHR5cGVvZiB2ID09IFwib2JqZWN0XCIgP1xuICAgICAgICAgICAgICAgICAgUGxvdC50b1F1ZXJ5U3RyaW5nKHYsIGspIDpcbiAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHIuam9pbihcIiZcIik7XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBQbG90XG5cbn0oKSlcbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgXG4gICAgU3luY3Njcm9sbFxuXG4gICAgU3luY3Njcm9sbCA9IHtcblxuICAgICAgICBpbml0OiAoKSA9PiB7XG5cbiAgICAgICAgICAgIHZhciBXaWR0aCAgICAgICAgICAgPSAnV2lkdGgnLFxuICAgICAgICAgICAgSGVpZ2h0ICAgICAgICAgICAgICA9ICdIZWlnaHQnLFxuICAgICAgICAgICAgVG9wICAgICAgICAgICAgICAgICA9ICdUb3AnLFxuICAgICAgICAgICAgTGVmdCAgICAgICAgICAgICAgICA9ICdMZWZ0JyxcbiAgICAgICAgICAgIHNjcm9sbCAgICAgICAgICAgICAgPSAnc2Nyb2xsJyxcbiAgICAgICAgICAgIGNsaWVudCAgICAgICAgICAgICAgPSAnY2xpZW50JyxcbiAgICAgICAgICAgIEV2ZW50TGlzdGVuZXIgICAgICAgPSAnRXZlbnRMaXN0ZW5lcicsXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyICAgID0gJ2FkZCcgKyBFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgbGVuZ3RoICAgICAgICAgICAgICA9ICdsZW5ndGgnLFxuICAgICAgICAgICAgTWF0aF9yb3VuZCAgICAgICAgICA9IE1hdGgucm91bmQsXG4gICAgICAgICAgICBuYW1lcyAgICAgICAgICAgICAgID0ge30sXG4gICAgICAgICAgICByZXNldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3luYycrc2Nyb2xsKVxuXG4gICAgICAgICAgICAgICAgLy8gY2xlYXJpbmcgZXhpc3RpbmcgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgdmFyIGksIGosIGVsLCBmb3VuZCwgbmFtZVxuICAgICAgICAgICAgICAgIGZvciAobmFtZSBpbiBuYW1lcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuYW1lc1tuYW1lXVtsZW5ndGhdOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc1tuYW1lXVtpXVsncmVtb3ZlJytFdmVudExpc3RlbmVyXShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsLCBuYW1lc1tuYW1lXVtpXS5zeW4sIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXR0aW5nLXVwIHRoZSBuZXcgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1zW2xlbmd0aF07KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gaiA9IDBcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBlbGVtc1tpKytdXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5hbWUgYXR0cmlidXRlIGlzIG5vdCBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbCA9IGVsW3Njcm9sbCsnZXInXXx8ZWwgIC8vIG5lZWRlZCBmb3IgaW50ZW5jZVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaGluZyBmb3IgZXhpc3RpbmcgZW50cnkgaW4gYXJyYXkgb2YgbmFtZXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaGluZyBmb3IgdGhlIGVsZW1lbnQgaW4gdGhhdCBlbnRyeVxuICAgICAgICAgICAgICAgICAgICBmb3IgKDtqIDwgKG5hbWVzW25hbWVdID0gbmFtZXNbbmFtZV18fFtdKVtsZW5ndGhdOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgfD0gbmFtZXNbbmFtZV1baisrXSA9PSBlbFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNbbmFtZV0ucHVzaChlbClcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGVsLmVYID0gZWwuZVkgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbihlbCwgbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxbYWRkRXZlbnRMaXN0ZW5lcl0oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN5biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBuYW1lc1tuYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxYID0gZWxbc2Nyb2xsK0xlZnRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxZID0gZWxbc2Nyb2xsK1RvcF1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeFJhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsWCAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZWxbc2Nyb2xsK1dpZHRoXSAtIGVsW2NsaWVudCtXaWR0aF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5UmF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxZIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlbFtzY3JvbGwrSGVpZ2h0XSAtIGVsW2NsaWVudCtIZWlnaHRdKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVYID0gc2Nyb2xsWCAhPSBlbC5lWFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlWSA9IHNjcm9sbFkgIT0gZWwuZVlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJFbCwgaSA9IDBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5lWCA9IHNjcm9sbFhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuZVkgPSBzY3JvbGxZXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7aSA8IGVsZW1zW2xlbmd0aF07KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckVsID0gZWxlbXNbaSsrXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyRWwgIT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlWCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoX3JvdW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJFbFtzY3JvbGwrTGVmdF0gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNjcm9sbFggPSBvdGhlckVsLmVYID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoX3JvdW5kKHhSYXRlICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG90aGVyRWxbc2Nyb2xsK1dpZHRoXSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckVsW2NsaWVudCtXaWR0aF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyRWxbc2Nyb2xsK0xlZnRdID0gc2Nyb2xsWFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlWSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoX3JvdW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJFbFtzY3JvbGwrVG9wXSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2Nyb2xsWSA9IG90aGVyRWwuZVkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGhfcm91bmQoeVJhdGUgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3RoZXJFbFtzY3JvbGwrSGVpZ2h0XSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckVsW2NsaWVudCtIZWlnaHRdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckVsW3Njcm9sbCtUb3BdID0gc2Nyb2xsWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgfSkoZWwsIG5hbWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgICAgIHJlc2V0KClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93W2FkZEV2ZW50TGlzdGVuZXJdKFwibG9hZFwiLCByZXNldCwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gU3luY3Njcm9sbFxuXG59KCkpXG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwud2luZG93ID0gZ2xvYmFsLndpbmRvdyB8fCB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIC8qIVxuICAgKiBPYnNlcnZlciAzLjEyLjJcbiAgICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gICAqXG4gICAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjMsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gICAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICAgKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAgKi9cbiAgdmFyIGdzYXAsXG4gICAgICBfY29yZUluaXR0ZWQsXG4gICAgICBfY2xhbXAsXG4gICAgICBfd2luLFxuICAgICAgX2RvYyxcbiAgICAgIF9kb2NFbCxcbiAgICAgIF9ib2R5LFxuICAgICAgX2lzVG91Y2gsXG4gICAgICBfcG9pbnRlclR5cGUsXG4gICAgICBTY3JvbGxUcmlnZ2VyLFxuICAgICAgX3Jvb3QsXG4gICAgICBfbm9ybWFsaXplcixcbiAgICAgIF9ldmVudFR5cGVzLFxuICAgICAgX2NvbnRleHQsXG4gICAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICAgIHJldHVybiBnc2FwIHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xuICB9LFxuICAgICAgX3N0YXJ0dXAgPSAxLFxuICAgICAgX29ic2VydmVycyA9IFtdLFxuICAgICAgX3Njcm9sbGVycyA9IFtdLFxuICAgICAgX3Byb3hpZXMgPSBbXSxcbiAgICAgIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfYnJpZGdlID0gZnVuY3Rpb24gX2JyaWRnZShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgICAgIF9pbnRlZ3JhdGUgPSBmdW5jdGlvbiBfaW50ZWdyYXRlKCkge1xuICAgIHZhciBjb3JlID0gU2Nyb2xsVHJpZ2dlci5jb3JlLFxuICAgICAgICBkYXRhID0gY29yZS5icmlkZ2UgfHwge30sXG4gICAgICAgIHNjcm9sbGVycyA9IGNvcmUuX3Njcm9sbGVycyxcbiAgICAgICAgcHJveGllcyA9IGNvcmUuX3Byb3hpZXM7XG4gICAgc2Nyb2xsZXJzLnB1c2guYXBwbHkoc2Nyb2xsZXJzLCBfc2Nyb2xsZXJzKTtcbiAgICBwcm94aWVzLnB1c2guYXBwbHkocHJveGllcywgX3Byb3hpZXMpO1xuICAgIF9zY3JvbGxlcnMgPSBzY3JvbGxlcnM7XG4gICAgX3Byb3hpZXMgPSBwcm94aWVzO1xuXG4gICAgX2JyaWRnZSA9IGZ1bmN0aW9uIF9icmlkZ2UobmFtZSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBkYXRhW25hbWVdKHZhbHVlKTtcbiAgICB9O1xuICB9LFxuICAgICAgX2dldFByb3h5UHJvcCA9IGZ1bmN0aW9uIF9nZXRQcm94eVByb3AoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgJiYgX3Byb3hpZXNbX3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSArIDFdW3Byb3BlcnR5XTtcbiAgfSxcbiAgICAgIF9pc1ZpZXdwb3J0ID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZWwpIHtcbiAgICByZXR1cm4gISF+X3Jvb3QuaW5kZXhPZihlbCk7XG4gIH0sXG4gICAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYywgbm9uUGFzc2l2ZSwgY2FwdHVyZSkge1xuICAgIHJldHVybiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywge1xuICAgICAgcGFzc2l2ZTogIW5vblBhc3NpdmUsXG4gICAgICBjYXB0dXJlOiAhIWNhcHR1cmVcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xuICB9LFxuICAgICAgX3Njcm9sbExlZnQgPSBcInNjcm9sbExlZnRcIixcbiAgICAgIF9zY3JvbGxUb3AgPSBcInNjcm9sbFRvcFwiLFxuICAgICAgX29uU2Nyb2xsID0gZnVuY3Rpb24gX29uU2Nyb2xsKCkge1xuICAgIHJldHVybiBfbm9ybWFsaXplciAmJiBfbm9ybWFsaXplci5pc1ByZXNzZWQgfHwgX3Njcm9sbGVycy5jYWNoZSsrO1xuICB9LFxuICAgICAgX3Njcm9sbENhY2hlRnVuYyA9IGZ1bmN0aW9uIF9zY3JvbGxDYWNoZUZ1bmMoZiwgZG9Ob3RDYWNoZSkge1xuICAgIHZhciBjYWNoaW5nRnVuYyA9IGZ1bmN0aW9uIGNhY2hpbmdGdW5jKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgX3N0YXJ0dXAgJiYgKF93aW4uaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIpO1xuICAgICAgICB2YXIgaXNOb3JtYWxpemluZyA9IF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlzUHJlc3NlZDtcbiAgICAgICAgdmFsdWUgPSBjYWNoaW5nRnVuYy52ID0gTWF0aC5yb3VuZCh2YWx1ZSkgfHwgKF9ub3JtYWxpemVyICYmIF9ub3JtYWxpemVyLmlPUyA/IDEgOiAwKTtcbiAgICAgICAgZih2YWx1ZSk7XG4gICAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgICBpc05vcm1hbGl6aW5nICYmIF9icmlkZ2UoXCJzc1wiLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGRvTm90Q2FjaGUgfHwgX3Njcm9sbGVycy5jYWNoZSAhPT0gY2FjaGluZ0Z1bmMuY2FjaGVJRCB8fCBfYnJpZGdlKFwicmVmXCIpKSB7XG4gICAgICAgIGNhY2hpbmdGdW5jLmNhY2hlSUQgPSBfc2Nyb2xsZXJzLmNhY2hlO1xuICAgICAgICBjYWNoaW5nRnVuYy52ID0gZigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FjaGluZ0Z1bmMudiArIGNhY2hpbmdGdW5jLm9mZnNldDtcbiAgICB9O1xuXG4gICAgY2FjaGluZ0Z1bmMub2Zmc2V0ID0gMDtcbiAgICByZXR1cm4gZiAmJiBjYWNoaW5nRnVuYztcbiAgfSxcbiAgICAgIF9ob3Jpem9udGFsID0ge1xuICAgIHM6IF9zY3JvbGxMZWZ0LFxuICAgIHA6IFwibGVmdFwiLFxuICAgIHAyOiBcIkxlZnRcIixcbiAgICBvczogXCJyaWdodFwiLFxuICAgIG9zMjogXCJSaWdodFwiLFxuICAgIGQ6IFwid2lkdGhcIixcbiAgICBkMjogXCJXaWR0aFwiLFxuICAgIGE6IFwieFwiLFxuICAgIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKHZhbHVlLCBfdmVydGljYWwuc2MoKSkgOiBfd2luLnBhZ2VYT2Zmc2V0IHx8IF9kb2NbX3Njcm9sbExlZnRdIHx8IF9kb2NFbFtfc2Nyb2xsTGVmdF0gfHwgX2JvZHlbX3Njcm9sbExlZnRdIHx8IDA7XG4gICAgfSlcbiAgfSxcbiAgICAgIF92ZXJ0aWNhbCA9IHtcbiAgICBzOiBfc2Nyb2xsVG9wLFxuICAgIHA6IFwidG9wXCIsXG4gICAgcDI6IFwiVG9wXCIsXG4gICAgb3M6IFwiYm90dG9tXCIsXG4gICAgb3MyOiBcIkJvdHRvbVwiLFxuICAgIGQ6IFwiaGVpZ2h0XCIsXG4gICAgZDI6IFwiSGVpZ2h0XCIsXG4gICAgYTogXCJ5XCIsXG4gICAgb3A6IF9ob3Jpem9udGFsLFxuICAgIHNjOiBfc2Nyb2xsQ2FjaGVGdW5jKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKF9ob3Jpem9udGFsLnNjKCksIHZhbHVlKSA6IF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsVG9wXSB8fCBfZG9jRWxbX3Njcm9sbFRvcF0gfHwgX2JvZHlbX3Njcm9sbFRvcF0gfHwgMDtcbiAgICB9KVxuICB9LFxuICAgICAgX2dldFRhcmdldCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXQodCwgc2VsZikge1xuICAgIHJldHVybiAoc2VsZiAmJiBzZWxmLl9jdHggJiYgc2VsZi5fY3R4LnNlbGVjdG9yIHx8IGdzYXAudXRpbHMudG9BcnJheSkodClbMF0gfHwgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmIGdzYXAuY29uZmlnKCkubnVsbFRhcmdldFdhcm4gIT09IGZhbHNlID8gY29uc29sZS53YXJuKFwiRWxlbWVudCBub3QgZm91bmQ6XCIsIHQpIDogbnVsbCk7XG4gIH0sXG4gICAgICBfZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxGdW5jKGVsZW1lbnQsIF9yZWYpIHtcbiAgICB2YXIgcyA9IF9yZWYucyxcbiAgICAgICAgc2MgPSBfcmVmLnNjO1xuICAgIF9pc1ZpZXdwb3J0KGVsZW1lbnQpICYmIChlbGVtZW50ID0gX2RvYy5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCk7XG5cbiAgICB2YXIgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZihlbGVtZW50KSxcbiAgICAgICAgb2Zmc2V0ID0gc2MgPT09IF92ZXJ0aWNhbC5zYyA/IDEgOiAyO1xuXG4gICAgIX5pICYmIChpID0gX3Njcm9sbGVycy5wdXNoKGVsZW1lbnQpIC0gMSk7XG4gICAgX3Njcm9sbGVyc1tpICsgb2Zmc2V0XSB8fCBfYWRkTGlzdGVuZXIoZWxlbWVudCwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcbiAgICB2YXIgcHJldiA9IF9zY3JvbGxlcnNbaSArIG9mZnNldF0sXG4gICAgICAgIGZ1bmMgPSBwcmV2IHx8IChfc2Nyb2xsZXJzW2kgKyBvZmZzZXRdID0gX3Njcm9sbENhY2hlRnVuYyhfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpLCB0cnVlKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBzYyA6IF9zY3JvbGxDYWNoZUZ1bmMoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGVsZW1lbnRbc10gPSB2YWx1ZSA6IGVsZW1lbnRbc107XG4gICAgfSkpKTtcbiAgICBmdW5jLnRhcmdldCA9IGVsZW1lbnQ7XG4gICAgcHJldiB8fCAoZnVuYy5zbW9vdGggPSBnc2FwLmdldFByb3BlcnR5KGVsZW1lbnQsIFwic2Nyb2xsQmVoYXZpb3JcIikgPT09IFwic21vb3RoXCIpO1xuICAgIHJldHVybiBmdW5jO1xuICB9LFxuICAgICAgX2dldFZlbG9jaXR5UHJvcCA9IGZ1bmN0aW9uIF9nZXRWZWxvY2l0eVByb3AodmFsdWUsIG1pblRpbWVSZWZyZXNoLCB1c2VEZWx0YSkge1xuICAgIHZhciB2MSA9IHZhbHVlLFxuICAgICAgICB2MiA9IHZhbHVlLFxuICAgICAgICB0MSA9IF9nZXRUaW1lKCksXG4gICAgICAgIHQyID0gdDEsXG4gICAgICAgIG1pbiA9IG1pblRpbWVSZWZyZXNoIHx8IDUwLFxuICAgICAgICBkcm9wVG9aZXJvVGltZSA9IE1hdGgubWF4KDUwMCwgbWluICogMyksXG4gICAgICAgIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2YWx1ZSwgZm9yY2UpIHtcbiAgICAgIHZhciB0ID0gX2dldFRpbWUoKTtcblxuICAgICAgaWYgKGZvcmNlIHx8IHQgLSB0MSA+IG1pbikge1xuICAgICAgICB2MiA9IHYxO1xuICAgICAgICB2MSA9IHZhbHVlO1xuICAgICAgICB0MiA9IHQxO1xuICAgICAgICB0MSA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHVzZURlbHRhKSB7XG4gICAgICAgIHYxICs9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdjEgPSB2MiArICh2YWx1ZSAtIHYyKSAvICh0IC0gdDIpICogKHQxIC0gdDIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB2MiA9IHYxID0gdXNlRGVsdGEgPyAwIDogdjE7XG4gICAgICB0MiA9IHQxID0gMDtcbiAgICB9LFxuICAgICAgICBnZXRWZWxvY2l0eSA9IGZ1bmN0aW9uIGdldFZlbG9jaXR5KGxhdGVzdFZhbHVlKSB7XG4gICAgICB2YXIgdE9sZCA9IHQyLFxuICAgICAgICAgIHZPbGQgPSB2MixcbiAgICAgICAgICB0ID0gX2dldFRpbWUoKTtcblxuICAgICAgKGxhdGVzdFZhbHVlIHx8IGxhdGVzdFZhbHVlID09PSAwKSAmJiBsYXRlc3RWYWx1ZSAhPT0gdjEgJiYgdXBkYXRlKGxhdGVzdFZhbHVlKTtcbiAgICAgIHJldHVybiB0MSA9PT0gdDIgfHwgdCAtIHQyID4gZHJvcFRvWmVyb1RpbWUgPyAwIDogKHYxICsgKHVzZURlbHRhID8gdk9sZCA6IC12T2xkKSkgLyAoKHVzZURlbHRhID8gdCA6IHQxKSAtIHRPbGQpICogMTAwMDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgICAgcmVzZXQ6IHJlc2V0LFxuICAgICAgZ2V0VmVsb2NpdHk6IGdldFZlbG9jaXR5XG4gICAgfTtcbiAgfSxcbiAgICAgIF9nZXRFdmVudCA9IGZ1bmN0aW9uIF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCkge1xuICAgIHByZXZlbnREZWZhdWx0ICYmICFlLl9nc2FwQWxsb3cgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG4gIH0sXG4gICAgICBfZ2V0QWJzb2x1dGVNYXggPSBmdW5jdGlvbiBfZ2V0QWJzb2x1dGVNYXgoYSkge1xuICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBhKSxcbiAgICAgICAgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgYSk7XG4gICAgcmV0dXJuIE1hdGguYWJzKG1heCkgPj0gTWF0aC5hYnMobWluKSA/IG1heCA6IG1pbjtcbiAgfSxcbiAgICAgIF9zZXRTY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3NldFNjcm9sbFRyaWdnZXIoKSB7XG4gICAgU2Nyb2xsVHJpZ2dlciA9IGdzYXAuY29yZS5nbG9iYWxzKCkuU2Nyb2xsVHJpZ2dlcjtcbiAgICBTY3JvbGxUcmlnZ2VyICYmIFNjcm9sbFRyaWdnZXIuY29yZSAmJiBfaW50ZWdyYXRlKCk7XG4gIH0sXG4gICAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoY29yZSkge1xuICAgIGdzYXAgPSBjb3JlIHx8IF9nZXRHU0FQKCk7XG5cbiAgICBpZiAoZ3NhcCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgICAgX3dpbiA9IHdpbmRvdztcbiAgICAgIF9kb2MgPSBkb2N1bWVudDtcbiAgICAgIF9kb2NFbCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgX2JvZHkgPSBfZG9jLmJvZHk7XG4gICAgICBfcm9vdCA9IFtfd2luLCBfZG9jLCBfZG9jRWwsIF9ib2R5XTtcbiAgICAgIF9jbGFtcCA9IGdzYXAudXRpbHMuY2xhbXA7XG5cbiAgICAgIF9jb250ZXh0ID0gZ3NhcC5jb3JlLmNvbnRleHQgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAgIF9wb2ludGVyVHlwZSA9IFwib25wb2ludGVyZW50ZXJcIiBpbiBfYm9keSA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiO1xuICAgICAgX2lzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoID0gX3dpbi5tYXRjaE1lZGlhICYmIF93aW4ubWF0Y2hNZWRpYShcIihob3Zlcjogbm9uZSksIChwb2ludGVyOiBjb2Fyc2UpXCIpLm1hdGNoZXMgPyAxIDogXCJvbnRvdWNoc3RhcnRcIiBpbiBfd2luIHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwID8gMiA6IDA7XG4gICAgICBfZXZlbnRUeXBlcyA9IE9ic2VydmVyLmV2ZW50VHlwZXMgPSAoXCJvbnRvdWNoc3RhcnRcIiBpbiBfZG9jRWwgPyBcInRvdWNoc3RhcnQsdG91Y2htb3ZlLHRvdWNoY2FuY2VsLHRvdWNoZW5kXCIgOiAhKFwib25wb2ludGVyZG93blwiIGluIF9kb2NFbCkgPyBcIm1vdXNlZG93bixtb3VzZW1vdmUsbW91c2V1cCxtb3VzZXVwXCIgOiBcInBvaW50ZXJkb3duLHBvaW50ZXJtb3ZlLHBvaW50ZXJjYW5jZWwscG9pbnRlcnVwXCIpLnNwbGl0KFwiLFwiKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3N0YXJ0dXAgPSAwO1xuICAgICAgfSwgNTAwKTtcblxuICAgICAgX3NldFNjcm9sbFRyaWdnZXIoKTtcblxuICAgICAgX2NvcmVJbml0dGVkID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvcmVJbml0dGVkO1xuICB9O1xuXG4gIF9ob3Jpem9udGFsLm9wID0gX3ZlcnRpY2FsO1xuICBfc2Nyb2xsZXJzLmNhY2hlID0gMDtcbiAgdmFyIE9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9ic2VydmVyKHZhcnMpIHtcbiAgICAgIHRoaXMuaW5pdCh2YXJzKTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gT2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KHZhcnMpIHtcbiAgICAgIF9jb3JlSW5pdHRlZCB8fCBfaW5pdENvcmUoZ3NhcCkgfHwgY29uc29sZS53YXJuKFwiUGxlYXNlIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpXCIpO1xuICAgICAgU2Nyb2xsVHJpZ2dlciB8fCBfc2V0U2Nyb2xsVHJpZ2dlcigpO1xuICAgICAgdmFyIHRvbGVyYW5jZSA9IHZhcnMudG9sZXJhbmNlLFxuICAgICAgICAgIGRyYWdNaW5pbXVtID0gdmFycy5kcmFnTWluaW11bSxcbiAgICAgICAgICB0eXBlID0gdmFycy50eXBlLFxuICAgICAgICAgIHRhcmdldCA9IHZhcnMudGFyZ2V0LFxuICAgICAgICAgIGxpbmVIZWlnaHQgPSB2YXJzLmxpbmVIZWlnaHQsXG4gICAgICAgICAgZGVib3VuY2UgPSB2YXJzLmRlYm91bmNlLFxuICAgICAgICAgIHByZXZlbnREZWZhdWx0ID0gdmFycy5wcmV2ZW50RGVmYXVsdCxcbiAgICAgICAgICBvblN0b3AgPSB2YXJzLm9uU3RvcCxcbiAgICAgICAgICBvblN0b3BEZWxheSA9IHZhcnMub25TdG9wRGVsYXksXG4gICAgICAgICAgaWdub3JlID0gdmFycy5pZ25vcmUsXG4gICAgICAgICAgd2hlZWxTcGVlZCA9IHZhcnMud2hlZWxTcGVlZCxcbiAgICAgICAgICBldmVudCA9IHZhcnMuZXZlbnQsXG4gICAgICAgICAgb25EcmFnU3RhcnQgPSB2YXJzLm9uRHJhZ1N0YXJ0LFxuICAgICAgICAgIG9uRHJhZ0VuZCA9IHZhcnMub25EcmFnRW5kLFxuICAgICAgICAgIG9uRHJhZyA9IHZhcnMub25EcmFnLFxuICAgICAgICAgIG9uUHJlc3MgPSB2YXJzLm9uUHJlc3MsXG4gICAgICAgICAgb25SZWxlYXNlID0gdmFycy5vblJlbGVhc2UsXG4gICAgICAgICAgb25SaWdodCA9IHZhcnMub25SaWdodCxcbiAgICAgICAgICBvbkxlZnQgPSB2YXJzLm9uTGVmdCxcbiAgICAgICAgICBvblVwID0gdmFycy5vblVwLFxuICAgICAgICAgIG9uRG93biA9IHZhcnMub25Eb3duLFxuICAgICAgICAgIG9uQ2hhbmdlWCA9IHZhcnMub25DaGFuZ2VYLFxuICAgICAgICAgIG9uQ2hhbmdlWSA9IHZhcnMub25DaGFuZ2VZLFxuICAgICAgICAgIG9uQ2hhbmdlID0gdmFycy5vbkNoYW5nZSxcbiAgICAgICAgICBvblRvZ2dsZVggPSB2YXJzLm9uVG9nZ2xlWCxcbiAgICAgICAgICBvblRvZ2dsZVkgPSB2YXJzLm9uVG9nZ2xlWSxcbiAgICAgICAgICBvbkhvdmVyID0gdmFycy5vbkhvdmVyLFxuICAgICAgICAgIG9uSG92ZXJFbmQgPSB2YXJzLm9uSG92ZXJFbmQsXG4gICAgICAgICAgb25Nb3ZlID0gdmFycy5vbk1vdmUsXG4gICAgICAgICAgaWdub3JlQ2hlY2sgPSB2YXJzLmlnbm9yZUNoZWNrLFxuICAgICAgICAgIGlzTm9ybWFsaXplciA9IHZhcnMuaXNOb3JtYWxpemVyLFxuICAgICAgICAgIG9uR2VzdHVyZVN0YXJ0ID0gdmFycy5vbkdlc3R1cmVTdGFydCxcbiAgICAgICAgICBvbkdlc3R1cmVFbmQgPSB2YXJzLm9uR2VzdHVyZUVuZCxcbiAgICAgICAgICBvbldoZWVsID0gdmFycy5vbldoZWVsLFxuICAgICAgICAgIG9uRW5hYmxlID0gdmFycy5vbkVuYWJsZSxcbiAgICAgICAgICBvbkRpc2FibGUgPSB2YXJzLm9uRGlzYWJsZSxcbiAgICAgICAgICBvbkNsaWNrID0gdmFycy5vbkNsaWNrLFxuICAgICAgICAgIHNjcm9sbFNwZWVkID0gdmFycy5zY3JvbGxTcGVlZCxcbiAgICAgICAgICBjYXB0dXJlID0gdmFycy5jYXB0dXJlLFxuICAgICAgICAgIGFsbG93Q2xpY2tzID0gdmFycy5hbGxvd0NsaWNrcyxcbiAgICAgICAgICBsb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMsXG4gICAgICAgICAgb25Mb2NrQXhpcyA9IHZhcnMub25Mb2NrQXhpcztcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0ID0gX2dldFRhcmdldCh0YXJnZXQpIHx8IF9kb2NFbDtcbiAgICAgIHRoaXMudmFycyA9IHZhcnM7XG4gICAgICBpZ25vcmUgJiYgKGlnbm9yZSA9IGdzYXAudXRpbHMudG9BcnJheShpZ25vcmUpKTtcbiAgICAgIHRvbGVyYW5jZSA9IHRvbGVyYW5jZSB8fCAxZS05O1xuICAgICAgZHJhZ01pbmltdW0gPSBkcmFnTWluaW11bSB8fCAwO1xuICAgICAgd2hlZWxTcGVlZCA9IHdoZWVsU3BlZWQgfHwgMTtcbiAgICAgIHNjcm9sbFNwZWVkID0gc2Nyb2xsU3BlZWQgfHwgMTtcbiAgICAgIHR5cGUgPSB0eXBlIHx8IFwid2hlZWwsdG91Y2gscG9pbnRlclwiO1xuICAgICAgZGVib3VuY2UgPSBkZWJvdW5jZSAhPT0gZmFsc2U7XG4gICAgICBsaW5lSGVpZ2h0IHx8IChsaW5lSGVpZ2h0ID0gcGFyc2VGbG9hdChfd2luLmdldENvbXB1dGVkU3R5bGUoX2JvZHkpLmxpbmVIZWlnaHQpIHx8IDIyKTtcblxuICAgICAgdmFyIGlkLFxuICAgICAgICAgIG9uU3RvcERlbGF5ZWRDYWxsLFxuICAgICAgICAgIGRyYWdnZWQsXG4gICAgICAgICAgbW92ZWQsXG4gICAgICAgICAgd2hlZWxlZCxcbiAgICAgICAgICBsb2NrZWQsXG4gICAgICAgICAgYXhpcyxcbiAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICBwcmV2RGVsdGFYID0gMCxcbiAgICAgICAgICBwcmV2RGVsdGFZID0gMCxcbiAgICAgICAgICBzY3JvbGxGdW5jWCA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX2hvcml6b250YWwpLFxuICAgICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICAgIHNjcm9sbFggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgIHNjcm9sbFkgPSBzY3JvbGxGdW5jWSgpLFxuICAgICAgICAgIGxpbWl0VG9Ub3VjaCA9IH50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSAmJiAhfnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgJiYgX2V2ZW50VHlwZXNbMF0gPT09IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodGFyZ2V0KSxcbiAgICAgICAgICBvd25lckRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50IHx8IF9kb2MsXG4gICAgICAgICAgZGVsdGFYID0gWzAsIDAsIDBdLFxuICAgICAgICAgIGRlbHRhWSA9IFswLCAwLCAwXSxcbiAgICAgICAgICBvbkNsaWNrVGltZSA9IDAsXG4gICAgICAgICAgY2xpY2tDYXB0dXJlID0gZnVuY3Rpb24gY2xpY2tDYXB0dXJlKCkge1xuICAgICAgICByZXR1cm4gb25DbGlja1RpbWUgPSBfZ2V0VGltZSgpO1xuICAgICAgfSxcbiAgICAgICAgICBfaWdub3JlQ2hlY2sgPSBmdW5jdGlvbiBfaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCkge1xuICAgICAgICByZXR1cm4gKHNlbGYuZXZlbnQgPSBlKSAmJiBpZ25vcmUgJiYgfmlnbm9yZS5pbmRleE9mKGUudGFyZ2V0KSB8fCBpc1BvaW50ZXJPclRvdWNoICYmIGxpbWl0VG9Ub3VjaCAmJiBlLnBvaW50ZXJUeXBlICE9PSBcInRvdWNoXCIgfHwgaWdub3JlQ2hlY2sgJiYgaWdub3JlQ2hlY2soZSwgaXNQb2ludGVyT3JUb3VjaCk7XG4gICAgICB9LFxuICAgICAgICAgIG9uU3RvcEZ1bmMgPSBmdW5jdGlvbiBvblN0b3BGdW5jKCkge1xuICAgICAgICBzZWxmLl92eC5yZXNldCgpO1xuXG4gICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgICAgb25TdG9wICYmIG9uU3RvcChzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICB2YXIgZHggPSBzZWxmLmRlbHRhWCA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVgpLFxuICAgICAgICAgICAgZHkgPSBzZWxmLmRlbHRhWSA9IF9nZXRBYnNvbHV0ZU1heChkZWx0YVkpLFxuICAgICAgICAgICAgY2hhbmdlZFggPSBNYXRoLmFicyhkeCkgPj0gdG9sZXJhbmNlLFxuICAgICAgICAgICAgY2hhbmdlZFkgPSBNYXRoLmFicyhkeSkgPj0gdG9sZXJhbmNlO1xuXG4gICAgICAgIG9uQ2hhbmdlICYmIChjaGFuZ2VkWCB8fCBjaGFuZ2VkWSkgJiYgb25DaGFuZ2Uoc2VsZiwgZHgsIGR5LCBkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgaWYgKGNoYW5nZWRYKSB7XG4gICAgICAgICAgb25SaWdodCAmJiBzZWxmLmRlbHRhWCA+IDAgJiYgb25SaWdodChzZWxmKTtcbiAgICAgICAgICBvbkxlZnQgJiYgc2VsZi5kZWx0YVggPCAwICYmIG9uTGVmdChzZWxmKTtcbiAgICAgICAgICBvbkNoYW5nZVggJiYgb25DaGFuZ2VYKHNlbGYpO1xuICAgICAgICAgIG9uVG9nZ2xlWCAmJiBzZWxmLmRlbHRhWCA8IDAgIT09IHByZXZEZWx0YVggPCAwICYmIG9uVG9nZ2xlWChzZWxmKTtcbiAgICAgICAgICBwcmV2RGVsdGFYID0gc2VsZi5kZWx0YVg7XG4gICAgICAgICAgZGVsdGFYWzBdID0gZGVsdGFYWzFdID0gZGVsdGFYWzJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkWSkge1xuICAgICAgICAgIG9uRG93biAmJiBzZWxmLmRlbHRhWSA+IDAgJiYgb25Eb3duKHNlbGYpO1xuICAgICAgICAgIG9uVXAgJiYgc2VsZi5kZWx0YVkgPCAwICYmIG9uVXAoc2VsZik7XG4gICAgICAgICAgb25DaGFuZ2VZICYmIG9uQ2hhbmdlWShzZWxmKTtcbiAgICAgICAgICBvblRvZ2dsZVkgJiYgc2VsZi5kZWx0YVkgPCAwICE9PSBwcmV2RGVsdGFZIDwgMCAmJiBvblRvZ2dsZVkoc2VsZik7XG4gICAgICAgICAgcHJldkRlbHRhWSA9IHNlbGYuZGVsdGFZO1xuICAgICAgICAgIGRlbHRhWVswXSA9IGRlbHRhWVsxXSA9IGRlbHRhWVsyXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW92ZWQgfHwgZHJhZ2dlZCkge1xuICAgICAgICAgIG9uTW92ZSAmJiBvbk1vdmUoc2VsZik7XG5cbiAgICAgICAgICBpZiAoZHJhZ2dlZCkge1xuICAgICAgICAgICAgb25EcmFnKHNlbGYpO1xuICAgICAgICAgICAgZHJhZ2dlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vdmVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NrZWQgJiYgIShsb2NrZWQgPSBmYWxzZSkgJiYgb25Mb2NrQXhpcyAmJiBvbkxvY2tBeGlzKHNlbGYpO1xuXG4gICAgICAgIGlmICh3aGVlbGVkKSB7XG4gICAgICAgICAgb25XaGVlbChzZWxmKTtcbiAgICAgICAgICB3aGVlbGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZCA9IDA7XG4gICAgICB9LFxuICAgICAgICAgIG9uRGVsdGEgPSBmdW5jdGlvbiBvbkRlbHRhKHgsIHksIGluZGV4KSB7XG4gICAgICAgIGRlbHRhWFtpbmRleF0gKz0geDtcbiAgICAgICAgZGVsdGFZW2luZGV4XSArPSB5O1xuXG4gICAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4KTtcblxuICAgICAgICBzZWxmLl92eS51cGRhdGUoeSk7XG5cbiAgICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhID0gZnVuY3Rpb24gb25Ub3VjaE9yUG9pbnRlckRlbHRhKHgsIHkpIHtcbiAgICAgICAgaWYgKGxvY2tBeGlzICYmICFheGlzKSB7XG4gICAgICAgICAgc2VsZi5heGlzID0gYXhpcyA9IE1hdGguYWJzKHgpID4gTWF0aC5hYnMoeSkgPyBcInhcIiA6IFwieVwiO1xuICAgICAgICAgIGxvY2tlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpcyAhPT0gXCJ5XCIpIHtcbiAgICAgICAgICBkZWx0YVhbMl0gKz0geDtcblxuICAgICAgICAgIHNlbGYuX3Z4LnVwZGF0ZSh4LCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChheGlzICE9PSBcInhcIikge1xuICAgICAgICAgIGRlbHRhWVsyXSArPSB5O1xuXG4gICAgICAgICAgc2VsZi5fdnkudXBkYXRlKHksIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVib3VuY2UgPyBpZCB8fCAoaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKSkgOiB1cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uRHJhZyA9IGZ1bmN0aW9uIF9vbkRyYWcoZSkge1xuICAgICAgICBpZiAoX2lnbm9yZUNoZWNrKGUsIDEpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZSA9IF9nZXRFdmVudChlLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICAgIGR5ID0geSAtIHNlbGYueSxcbiAgICAgICAgICAgIGlzRHJhZ2dpbmcgPSBzZWxmLmlzRHJhZ2dpbmc7XG4gICAgICAgIHNlbGYueCA9IHg7XG4gICAgICAgIHNlbGYueSA9IHk7XG5cbiAgICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgTWF0aC5hYnMoc2VsZi5zdGFydFggLSB4KSA+PSBkcmFnTWluaW11bSB8fCBNYXRoLmFicyhzZWxmLnN0YXJ0WSAtIHkpID49IGRyYWdNaW5pbXVtKSB7XG4gICAgICAgICAgb25EcmFnICYmIChkcmFnZ2VkID0gdHJ1ZSk7XG4gICAgICAgICAgaXNEcmFnZ2luZyB8fCAoc2VsZi5pc0RyYWdnaW5nID0gdHJ1ZSk7XG4gICAgICAgICAgb25Ub3VjaE9yUG9pbnRlckRlbHRhKGR4LCBkeSk7XG4gICAgICAgICAgaXNEcmFnZ2luZyB8fCBvbkRyYWdTdGFydCAmJiBvbkRyYWdTdGFydChzZWxmKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICAgICBfb25QcmVzcyA9IHNlbGYub25QcmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChfaWdub3JlQ2hlY2soZSwgMSkgfHwgZSAmJiBlLmJ1dHRvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuYXhpcyA9IGF4aXMgPSBudWxsO1xuICAgICAgICBvblN0b3BEZWxheWVkQ2FsbC5wYXVzZSgpO1xuICAgICAgICBzZWxmLmlzUHJlc3NlZCA9IHRydWU7XG4gICAgICAgIGUgPSBfZ2V0RXZlbnQoZSk7XG4gICAgICAgIHByZXZEZWx0YVggPSBwcmV2RGVsdGFZID0gMDtcbiAgICAgICAgc2VsZi5zdGFydFggPSBzZWxmLnggPSBlLmNsaWVudFg7XG4gICAgICAgIHNlbGYuc3RhcnRZID0gc2VsZi55ID0gZS5jbGllbnRZO1xuXG4gICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgc2VsZi5fdnkucmVzZXQoKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoaXNOb3JtYWxpemVyID8gdGFyZ2V0IDogb3duZXJEb2MsIF9ldmVudFR5cGVzWzFdLCBfb25EcmFnLCBwcmV2ZW50RGVmYXVsdCwgdHJ1ZSk7XG5cbiAgICAgICAgc2VsZi5kZWx0YVggPSBzZWxmLmRlbHRhWSA9IDA7XG4gICAgICAgIG9uUHJlc3MgJiYgb25QcmVzcyhzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uUmVsZWFzZSA9IHNlbGYub25SZWxlYXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKF9pZ25vcmVDaGVjayhlLCAxKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuXG4gICAgICAgIHZhciBpc1RyYWNraW5nRHJhZyA9ICFpc05hTihzZWxmLnkgLSBzZWxmLnN0YXJ0WSksXG4gICAgICAgICAgICB3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyAmJiAoTWF0aC5hYnMoc2VsZi54IC0gc2VsZi5zdGFydFgpID4gMyB8fCBNYXRoLmFicyhzZWxmLnkgLSBzZWxmLnN0YXJ0WSkgPiAzKSxcbiAgICAgICAgICAgIGV2ZW50RGF0YSA9IF9nZXRFdmVudChlKTtcblxuICAgICAgICBpZiAoIXdhc0RyYWdnaW5nICYmIGlzVHJhY2tpbmdEcmFnKSB7XG4gICAgICAgICAgc2VsZi5fdngucmVzZXQoKTtcblxuICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQgJiYgYWxsb3dDbGlja3MpIHtcbiAgICAgICAgICAgIGdzYXAuZGVsYXllZENhbGwoMC4wOCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoX2dldFRpbWUoKSAtIG9uQ2xpY2tUaW1lID4gMzAwICYmICFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xpY2spIHtcbiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V2ZW50LmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgdHJ1ZSwgX3dpbiwgMSwgZXZlbnREYXRhLnNjcmVlblgsIGV2ZW50RGF0YS5zY3JlZW5ZLCBldmVudERhdGEuY2xpZW50WCwgZXZlbnREYXRhLmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIG9uRHJhZ0VuZCAmJiB3YXNEcmFnZ2luZyAmJiBvbkRyYWdFbmQoc2VsZik7XG4gICAgICAgIG9uUmVsZWFzZSAmJiBvblJlbGVhc2Uoc2VsZiwgd2FzRHJhZ2dpbmcpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiBfb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgICByZXR1cm4gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxICYmIChzZWxmLmlzR2VzdHVyaW5nID0gdHJ1ZSkgJiYgb25HZXN0dXJlU3RhcnQoZSwgc2VsZi5pc0RyYWdnaW5nKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uR2VzdHVyZUVuZCA9IGZ1bmN0aW9uIF9vbkdlc3R1cmVFbmQoKSB7XG4gICAgICAgIHJldHVybiAoc2VsZi5pc0dlc3R1cmluZyA9IGZhbHNlKSB8fCBvbkdlc3R1cmVFbmQoc2VsZik7XG4gICAgICB9LFxuICAgICAgICAgIG9uU2Nyb2xsID0gZnVuY3Rpb24gb25TY3JvbGwoZSkge1xuICAgICAgICBpZiAoX2lnbm9yZUNoZWNrKGUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHggPSBzY3JvbGxGdW5jWCgpLFxuICAgICAgICAgICAgeSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICAgIG9uRGVsdGEoKHggLSBzY3JvbGxYKSAqIHNjcm9sbFNwZWVkLCAoeSAtIHNjcm9sbFkpICogc2Nyb2xsU3BlZWQsIDEpO1xuICAgICAgICBzY3JvbGxYID0geDtcbiAgICAgICAgc2Nyb2xsWSA9IHk7XG4gICAgICAgIG9uU3RvcCAmJiBvblN0b3BEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25XaGVlbCA9IGZ1bmN0aW9uIF9vbldoZWVsKGUpIHtcbiAgICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGUgPSBfZ2V0RXZlbnQoZSwgcHJldmVudERlZmF1bHQpO1xuICAgICAgICBvbldoZWVsICYmICh3aGVlbGVkID0gdHJ1ZSk7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gKGUuZGVsdGFNb2RlID09PSAxID8gbGluZUhlaWdodCA6IGUuZGVsdGFNb2RlID09PSAyID8gX3dpbi5pbm5lckhlaWdodCA6IDEpICogd2hlZWxTcGVlZDtcbiAgICAgICAgb25EZWx0YShlLmRlbHRhWCAqIG11bHRpcGxpZXIsIGUuZGVsdGFZICogbXVsdGlwbGllciwgMCk7XG4gICAgICAgIG9uU3RvcCAmJiAhaXNOb3JtYWxpemVyICYmIG9uU3RvcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgICAgIF9vbk1vdmUgPSBmdW5jdGlvbiBfb25Nb3ZlKGUpIHtcbiAgICAgICAgaWYgKF9pZ25vcmVDaGVjayhlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB4ID0gZS5jbGllbnRYLFxuICAgICAgICAgICAgeSA9IGUuY2xpZW50WSxcbiAgICAgICAgICAgIGR4ID0geCAtIHNlbGYueCxcbiAgICAgICAgICAgIGR5ID0geSAtIHNlbGYueTtcbiAgICAgICAgc2VsZi54ID0geDtcbiAgICAgICAgc2VsZi55ID0geTtcbiAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICAoZHggfHwgZHkpICYmIG9uVG91Y2hPclBvaW50ZXJEZWx0YShkeCwgZHkpO1xuICAgICAgfSxcbiAgICAgICAgICBfb25Ib3ZlciA9IGZ1bmN0aW9uIF9vbkhvdmVyKGUpIHtcbiAgICAgICAgc2VsZi5ldmVudCA9IGU7XG4gICAgICAgIG9uSG92ZXIoc2VsZik7XG4gICAgICB9LFxuICAgICAgICAgIF9vbkhvdmVyRW5kID0gZnVuY3Rpb24gX29uSG92ZXJFbmQoZSkge1xuICAgICAgICBzZWxmLmV2ZW50ID0gZTtcbiAgICAgICAgb25Ib3ZlckVuZChzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgX29uQ2xpY2sgPSBmdW5jdGlvbiBfb25DbGljayhlKSB7XG4gICAgICAgIHJldHVybiBfaWdub3JlQ2hlY2soZSkgfHwgX2dldEV2ZW50KGUsIHByZXZlbnREZWZhdWx0KSAmJiBvbkNsaWNrKHNlbGYpO1xuICAgICAgfTtcblxuICAgICAgb25TdG9wRGVsYXllZENhbGwgPSBzZWxmLl9kYyA9IGdzYXAuZGVsYXllZENhbGwob25TdG9wRGVsYXkgfHwgMC4yNSwgb25TdG9wRnVuYykucGF1c2UoKTtcbiAgICAgIHNlbGYuZGVsdGFYID0gc2VsZi5kZWx0YVkgPSAwO1xuICAgICAgc2VsZi5fdnggPSBfZ2V0VmVsb2NpdHlQcm9wKDAsIDUwLCB0cnVlKTtcbiAgICAgIHNlbGYuX3Z5ID0gX2dldFZlbG9jaXR5UHJvcCgwLCA1MCwgdHJ1ZSk7XG4gICAgICBzZWxmLnNjcm9sbFggPSBzY3JvbGxGdW5jWDtcbiAgICAgIHNlbGYuc2Nyb2xsWSA9IHNjcm9sbEZ1bmNZO1xuICAgICAgc2VsZi5pc0RyYWdnaW5nID0gc2VsZi5pc0dlc3R1cmluZyA9IHNlbGYuaXNQcmVzc2VkID0gZmFsc2U7XG5cbiAgICAgIF9jb250ZXh0KHRoaXMpO1xuXG4gICAgICBzZWxmLmVuYWJsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghc2VsZi5pc0VuYWJsZWQpIHtcbiAgICAgICAgICBfYWRkTGlzdGVuZXIoaXNWaWV3cG9ydCA/IG93bmVyRG9jIDogdGFyZ2V0LCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgICAgdHlwZS5pbmRleE9mKFwic2Nyb2xsXCIpID49IDAgJiYgX2FkZExpc3RlbmVyKGlzVmlld3BvcnQgPyBvd25lckRvYyA6IHRhcmdldCwgXCJzY3JvbGxcIiwgb25TY3JvbGwsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcbiAgICAgICAgICB0eXBlLmluZGV4T2YoXCJ3aGVlbFwiKSA+PSAwICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIHByZXZlbnREZWZhdWx0LCBjYXB0dXJlKTtcblxuICAgICAgICAgIGlmICh0eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA+PSAwICYmIF9pc1RvdWNoIHx8IHR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPj0gMCkge1xuICAgICAgICAgICAgX2FkZExpc3RlbmVyKHRhcmdldCwgX2V2ZW50VHlwZXNbMF0sIF9vblByZXNzLCBwcmV2ZW50RGVmYXVsdCwgY2FwdHVyZSk7XG5cbiAgICAgICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgICBfYWRkTGlzdGVuZXIob3duZXJEb2MsIF9ldmVudFR5cGVzWzNdLCBfb25SZWxlYXNlKTtcblxuICAgICAgICAgICAgYWxsb3dDbGlja3MgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBjbGlja0NhcHR1cmUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIG9uQ2xpY2sgJiYgX2FkZExpc3RlbmVyKHRhcmdldCwgXCJjbGlja1wiLCBfb25DbGljayk7XG4gICAgICAgICAgICBvbkdlc3R1cmVTdGFydCAmJiBfYWRkTGlzdGVuZXIob3duZXJEb2MsIFwiZ2VzdHVyZXN0YXJ0XCIsIF9vbkdlc3R1cmVTdGFydCk7XG4gICAgICAgICAgICBvbkdlc3R1cmVFbmQgJiYgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcImdlc3R1cmVlbmRcIiwgX29uR2VzdHVyZUVuZCk7XG4gICAgICAgICAgICBvbkhvdmVyICYmIF9hZGRMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwiZW50ZXJcIiwgX29uSG92ZXIpO1xuICAgICAgICAgICAgb25Ib3ZlckVuZCAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcbiAgICAgICAgICAgIG9uTW92ZSAmJiBfYWRkTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcIm1vdmVcIiwgX29uTW92ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIGUgJiYgZS50eXBlICYmIF9vblByZXNzKGUpO1xuICAgICAgICAgIG9uRW5hYmxlICYmIG9uRW5hYmxlKHNlbGYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzZWxmLmlzRW5hYmxlZCkge1xuICAgICAgICAgIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICByZXR1cm4gbyAhPT0gc2VsZiAmJiBfaXNWaWV3cG9ydChvLnRhcmdldCk7XG4gICAgICAgICAgfSkubGVuZ3RoIHx8IF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCk7XG5cbiAgICAgICAgICBpZiAoc2VsZi5pc1ByZXNzZWQpIHtcbiAgICAgICAgICAgIHNlbGYuX3Z4LnJlc2V0KCk7XG5cbiAgICAgICAgICAgIHNlbGYuX3Z5LnJlc2V0KCk7XG5cbiAgICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc05vcm1hbGl6ZXIgPyB0YXJnZXQgOiBvd25lckRvYywgX2V2ZW50VHlwZXNbMV0sIF9vbkRyYWcsIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihpc1ZpZXdwb3J0ID8gb3duZXJEb2MgOiB0YXJnZXQsIFwic2Nyb2xsXCIsIG9uU2Nyb2xsLCBjYXB0dXJlKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIFwid2hlZWxcIiwgX29uV2hlZWwsIGNhcHR1cmUpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX2V2ZW50VHlwZXNbMF0sIF9vblByZXNzLCBjYXB0dXJlKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgX2V2ZW50VHlwZXNbMl0sIF9vblJlbGVhc2UpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBfZXZlbnRUeXBlc1szXSwgX29uUmVsZWFzZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIGNsaWNrQ2FwdHVyZSwgdHJ1ZSk7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBcImNsaWNrXCIsIF9vbkNsaWNrKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlc3RhcnRcIiwgX29uR2VzdHVyZVN0YXJ0KTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJnZXN0dXJlZW5kXCIsIF9vbkdlc3R1cmVFbmQpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRhcmdldCwgX3BvaW50ZXJUeXBlICsgXCJlbnRlclwiLCBfb25Ib3Zlcik7XG5cbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodGFyZ2V0LCBfcG9pbnRlclR5cGUgKyBcImxlYXZlXCIsIF9vbkhvdmVyRW5kKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0YXJnZXQsIF9wb2ludGVyVHlwZSArIFwibW92ZVwiLCBfb25Nb3ZlKTtcblxuICAgICAgICAgIHNlbGYuaXNFbmFibGVkID0gc2VsZi5pc1ByZXNzZWQgPSBzZWxmLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICBvbkRpc2FibGUgJiYgb25EaXNhYmxlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmtpbGwgPSBzZWxmLnJldmVydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5kaXNhYmxlKCk7XG5cbiAgICAgICAgdmFyIGkgPSBfb2JzZXJ2ZXJzLmluZGV4T2Yoc2VsZik7XG5cbiAgICAgICAgaSA+PSAwICYmIF9vYnNlcnZlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBfbm9ybWFsaXplciA9PT0gc2VsZiAmJiAoX25vcm1hbGl6ZXIgPSAwKTtcbiAgICAgIH07XG5cbiAgICAgIF9vYnNlcnZlcnMucHVzaChzZWxmKTtcblxuICAgICAgaXNOb3JtYWxpemVyICYmIF9pc1ZpZXdwb3J0KHRhcmdldCkgJiYgKF9ub3JtYWxpemVyID0gc2VsZik7XG4gICAgICBzZWxmLmVuYWJsZShldmVudCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhPYnNlcnZlciwgW3tcbiAgICAgIGtleTogXCJ2ZWxvY2l0eVhcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdnguZ2V0VmVsb2NpdHkoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidmVsb2NpdHlZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Z5LmdldFZlbG9jaXR5KCk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE9ic2VydmVyO1xuICB9KCk7XG4gIE9ic2VydmVyLnZlcnNpb24gPSBcIjMuMTIuMlwiO1xuXG4gIE9ic2VydmVyLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZlcih2YXJzKTtcbiAgfTtcblxuICBPYnNlcnZlci5yZWdpc3RlciA9IF9pbml0Q29yZTtcblxuICBPYnNlcnZlci5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9vYnNlcnZlcnMuc2xpY2UoKTtcbiAgfTtcblxuICBPYnNlcnZlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIF9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChvKSB7XG4gICAgICByZXR1cm4gby52YXJzLmlkID09PSBpZDtcbiAgICB9KVswXTtcbiAgfTtcblxuICBfZ2V0R1NBUCgpICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4oT2JzZXJ2ZXIpO1xuXG4gIC8qIVxuICAgKiBTY3JvbGxUcmlnZ2VyIDMuMTIuMlxuICAgKiBodHRwczovL2dyZWVuc29jay5jb21cbiAgICpcbiAgICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMywgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAgICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gICAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICAqL1xuXG4gIHZhciBnc2FwJDEsXG4gICAgICBfY29yZUluaXR0ZWQkMSxcbiAgICAgIF93aW4kMSxcbiAgICAgIF9kb2MkMSxcbiAgICAgIF9kb2NFbCQxLFxuICAgICAgX2JvZHkkMSxcbiAgICAgIF9yb290JDEsXG4gICAgICBfcmVzaXplRGVsYXksXG4gICAgICBfdG9BcnJheSxcbiAgICAgIF9jbGFtcCQxLFxuICAgICAgX3RpbWUyLFxuICAgICAgX3N5bmNJbnRlcnZhbCxcbiAgICAgIF9yZWZyZXNoaW5nLFxuICAgICAgX3BvaW50ZXJJc0Rvd24sXG4gICAgICBfdHJhbnNmb3JtUHJvcCxcbiAgICAgIF9pLFxuICAgICAgX3ByZXZXaWR0aCxcbiAgICAgIF9wcmV2SGVpZ2h0LFxuICAgICAgX2F1dG9SZWZyZXNoLFxuICAgICAgX3NvcnQsXG4gICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgX2lnbm9yZVJlc2l6ZSxcbiAgICAgIF9ub3JtYWxpemVyJDEsXG4gICAgICBfaWdub3JlTW9iaWxlUmVzaXplLFxuICAgICAgX2Jhc2VTY3JlZW5IZWlnaHQsXG4gICAgICBfYmFzZVNjcmVlbldpZHRoLFxuICAgICAgX2ZpeElPU0J1ZyxcbiAgICAgIF9jb250ZXh0JDEsXG4gICAgICBfc2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgICBfZGl2MTAwdmgsXG4gICAgICBfMTAwdmgsXG4gICAgICBfbGltaXRDYWxsYmFja3MsXG4gICAgICBfc3RhcnR1cCQxID0gMSxcbiAgICAgIF9nZXRUaW1lJDEgPSBEYXRlLm5vdyxcbiAgICAgIF90aW1lMSA9IF9nZXRUaW1lJDEoKSxcbiAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IDAsXG4gICAgICBfZW5hYmxlZCA9IDAsXG4gICAgICBfcGFyc2VDbGFtcCA9IGZ1bmN0aW9uIF9wYXJzZUNsYW1wKHZhbHVlLCB0eXBlLCBzZWxmKSB7XG4gICAgdmFyIGNsYW1wID0gX2lzU3RyaW5nKHZhbHVlKSAmJiAodmFsdWUuc3Vic3RyKDAsIDYpID09PSBcImNsYW1wKFwiIHx8IHZhbHVlLmluZGV4T2YoXCJtYXhcIikgPiAtMSk7XG4gICAgc2VsZltcIl9cIiArIHR5cGUgKyBcIkNsYW1wXCJdID0gY2xhbXA7XG4gICAgcmV0dXJuIGNsYW1wID8gdmFsdWUuc3Vic3RyKDYsIHZhbHVlLmxlbmd0aCAtIDcpIDogdmFsdWU7XG4gIH0sXG4gICAgICBfa2VlcENsYW1wID0gZnVuY3Rpb24gX2tlZXBDbGFtcCh2YWx1ZSwgY2xhbXApIHtcbiAgICByZXR1cm4gY2xhbXAgJiYgKCFfaXNTdHJpbmcodmFsdWUpIHx8IHZhbHVlLnN1YnN0cigwLCA2KSAhPT0gXCJjbGFtcChcIikgPyBcImNsYW1wKFwiICsgdmFsdWUgKyBcIilcIiA6IHZhbHVlO1xuICB9LFxuICAgICAgX3JhZkJ1Z0ZpeCA9IGZ1bmN0aW9uIF9yYWZCdWdGaXgoKSB7XG4gICAgcmV0dXJuIF9lbmFibGVkICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZShfcmFmQnVnRml4KTtcbiAgfSxcbiAgICAgIF9wb2ludGVyRG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfcG9pbnRlckRvd25IYW5kbGVyKCkge1xuICAgIHJldHVybiBfcG9pbnRlcklzRG93biA9IDE7XG4gIH0sXG4gICAgICBfcG9pbnRlclVwSGFuZGxlciA9IGZ1bmN0aW9uIF9wb2ludGVyVXBIYW5kbGVyKCkge1xuICAgIHJldHVybiBfcG9pbnRlcklzRG93biA9IDA7XG4gIH0sXG4gICAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2godikge1xuICAgIHJldHVybiB2O1xuICB9LFxuICAgICAgX3JvdW5kID0gZnVuY3Rpb24gX3JvdW5kKHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG4gIH0sXG4gICAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgfSxcbiAgICAgIF9nZXRHU0FQJDEgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgICByZXR1cm4gZ3NhcCQxIHx8IF93aW5kb3dFeGlzdHMoKSAmJiAoZ3NhcCQxID0gd2luZG93LmdzYXApICYmIGdzYXAkMS5yZWdpc3RlclBsdWdpbiAmJiBnc2FwJDE7XG4gIH0sXG4gICAgICBfaXNWaWV3cG9ydCQxID0gZnVuY3Rpb24gX2lzVmlld3BvcnQoZSkge1xuICAgIHJldHVybiAhIX5fcm9vdCQxLmluZGV4T2YoZSk7XG4gIH0sXG4gICAgICBfZ2V0Vmlld3BvcnREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0Vmlld3BvcnREaW1lbnNpb24oZGltZW5zaW9uUHJvcGVydHkpIHtcbiAgICByZXR1cm4gKGRpbWVuc2lvblByb3BlcnR5ID09PSBcIkhlaWdodFwiID8gXzEwMHZoIDogX3dpbiQxW1wiaW5uZXJcIiArIGRpbWVuc2lvblByb3BlcnR5XSkgfHwgX2RvY0VsJDFbXCJjbGllbnRcIiArIGRpbWVuc2lvblByb3BlcnR5XSB8fCBfYm9keSQxW1wiY2xpZW50XCIgKyBkaW1lbnNpb25Qcm9wZXJ0eV07XG4gIH0sXG4gICAgICBfZ2V0Qm91bmRzRnVuYyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHNGdW5jKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQkMShlbGVtZW50KSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIF93aW5PZmZzZXRzLndpZHRoID0gX3dpbiQxLmlubmVyV2lkdGg7XG4gICAgICBfd2luT2Zmc2V0cy5oZWlnaHQgPSBfMTAwdmg7XG4gICAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIH0pO1xuICB9LFxuICAgICAgX2dldFNpemVGdW5jID0gZnVuY3Rpb24gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBfcmVmKSB7XG4gICAgdmFyIGQgPSBfcmVmLmQsXG4gICAgICAgIGQyID0gX3JlZi5kMixcbiAgICAgICAgYSA9IF9yZWYuYTtcbiAgICByZXR1cm4gKGEgPSBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYSgpW2RdO1xuICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKGlzVmlld3BvcnQgPyBfZ2V0Vmlld3BvcnREaW1lbnNpb24oZDIpIDogc2Nyb2xsZXJbXCJjbGllbnRcIiArIGQyXSkgfHwgMDtcbiAgICB9O1xuICB9LFxuICAgICAgX2dldE9mZnNldHNGdW5jID0gZnVuY3Rpb24gX2dldE9mZnNldHNGdW5jKGVsZW1lbnQsIGlzVmlld3BvcnQpIHtcbiAgICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfd2luT2Zmc2V0cztcbiAgICB9O1xuICB9LFxuICAgICAgX21heFNjcm9sbCA9IGZ1bmN0aW9uIF9tYXhTY3JvbGwoZWxlbWVudCwgX3JlZjIpIHtcbiAgICB2YXIgcyA9IF9yZWYyLnMsXG4gICAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICAgIGQgPSBfcmVmMi5kLFxuICAgICAgICBhID0gX3JlZjIuYTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQkMShlbGVtZW50KSA/IChfZG9jRWwkMVtzXSB8fCBfYm9keSQxW3NdKSAtIF9nZXRWaWV3cG9ydERpbWVuc2lvbihkMikgOiBlbGVtZW50W3NdIC0gZWxlbWVudFtcIm9mZnNldFwiICsgZDJdKTtcbiAgfSxcbiAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2ggPSBmdW5jdGlvbiBfaXRlcmF0ZUF1dG9SZWZyZXNoKGZ1bmMsIGV2ZW50cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2F1dG9SZWZyZXNoLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAoIWV2ZW50cyB8fCB+ZXZlbnRzLmluZGV4T2YoX2F1dG9SZWZyZXNoW2kgKyAxXSkpICYmIGZ1bmMoX2F1dG9SZWZyZXNoW2ldLCBfYXV0b1JlZnJlc2hbaSArIDFdLCBfYXV0b1JlZnJlc2hbaSArIDJdKTtcbiAgICB9XG4gIH0sXG4gICAgICBfaXNTdHJpbmcgPSBmdW5jdGlvbiBfaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xuICB9LFxuICAgICAgX2lzRnVuY3Rpb24gPSBmdW5jdGlvbiBfaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbiAgfSxcbiAgICAgIF9pc051bWJlciA9IGZ1bmN0aW9uIF9pc051bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG4gIH0sXG4gICAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xuICB9LFxuICAgICAgX2VuZEFuaW1hdGlvbiA9IGZ1bmN0aW9uIF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCByZXZlcnNlZCwgcGF1c2UpIHtcbiAgICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhyZXZlcnNlZCA/IDAgOiAxKSAmJiBwYXVzZSAmJiBhbmltYXRpb24ucGF1c2UoKTtcbiAgfSxcbiAgICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhzZWxmLCBmdW5jKSB7XG4gICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMoc2VsZik7XG4gICAgICByZXN1bHQgJiYgcmVzdWx0LnRvdGFsVGltZSAmJiAoc2VsZi5jYWxsYmFja0FuaW1hdGlvbiA9IHJlc3VsdCk7XG4gICAgfVxuICB9LFxuICAgICAgX2FicyA9IE1hdGguYWJzLFxuICAgICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICAgIF90b3AgPSBcInRvcFwiLFxuICAgICAgX3JpZ2h0ID0gXCJyaWdodFwiLFxuICAgICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgICBfd2lkdGggPSBcIndpZHRoXCIsXG4gICAgICBfaGVpZ2h0ID0gXCJoZWlnaHRcIixcbiAgICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICAgIF9MZWZ0ID0gXCJMZWZ0XCIsXG4gICAgICBfVG9wID0gXCJUb3BcIixcbiAgICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgICAgX3BhZGRpbmcgPSBcInBhZGRpbmdcIixcbiAgICAgIF9tYXJnaW4gPSBcIm1hcmdpblwiLFxuICAgICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgICAgX0hlaWdodCA9IFwiSGVpZ2h0XCIsXG4gICAgICBfcHggPSBcInB4XCIsXG4gICAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gX3dpbiQxLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIH0sXG4gICAgICBfbWFrZVBvc2l0aW9uYWJsZSA9IGZ1bmN0aW9uIF9tYWtlUG9zaXRpb25hYmxlKGVsZW1lbnQpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbjtcblxuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbiAgfSxcbiAgICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICAgICAgX2dldEJvdW5kcyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHMoZWxlbWVudCwgd2l0aG91dFRyYW5zZm9ybXMpIHtcbiAgICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcCQxLnRvKGVsZW1lbnQsIHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgeFBlcmNlbnQ6IDAsXG4gICAgICB5UGVyY2VudDogMCxcbiAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgcm90YXRpb25YOiAwLFxuICAgICAgcm90YXRpb25ZOiAwLFxuICAgICAgc2NhbGU6IDEsXG4gICAgICBza2V3WDogMCxcbiAgICAgIHNrZXdZOiAwXG4gICAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICAgIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdHdlZW4gJiYgdHdlZW4ucHJvZ3Jlc3MoMCkua2lsbCgpO1xuICAgIHJldHVybiBib3VuZHM7XG4gIH0sXG4gICAgICBfZ2V0U2l6ZSA9IGZ1bmN0aW9uIF9nZXRTaXplKGVsZW1lbnQsIF9yZWYzKSB7XG4gICAgdmFyIGQyID0gX3JlZjMuZDI7XG4gICAgcmV0dXJuIGVsZW1lbnRbXCJvZmZzZXRcIiArIGQyXSB8fCBlbGVtZW50W1wiY2xpZW50XCIgKyBkMl0gfHwgMDtcbiAgfSxcbiAgICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICAgIHA7XG5cbiAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9LFxuICAgICAgX2dldENsb3Nlc3RMYWJlbCA9IGZ1bmN0aW9uIF9nZXRDbG9zZXN0TGFiZWwoYW5pbWF0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGdzYXAkMS51dGlscy5zbmFwKF9nZXRMYWJlbFJhdGlvQXJyYXkoYW5pbWF0aW9uKSwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG4gICAgICBfc25hcERpcmVjdGlvbmFsID0gZnVuY3Rpb24gX3NuYXBEaXJlY3Rpb25hbChzbmFwSW5jcmVtZW50T3JBcnJheSkge1xuICAgIHZhciBzbmFwID0gZ3NhcCQxLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgICBhID0gQXJyYXkuaXNBcnJheShzbmFwSW5jcmVtZW50T3JBcnJheSkgJiYgc25hcEluY3JlbWVudE9yQXJyYXkuc2xpY2UoMCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH0pO1xuICAgIHJldHVybiBhID8gZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuXG4gICAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgICByZXR1cm4gc25hcCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIHZhbHVlIC09IHRocmVzaG9sZDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhW2ldID49IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYVtpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYVtpIC0gMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gYS5sZW5ndGg7XG4gICAgICAgIHZhbHVlICs9IHRocmVzaG9sZDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgaWYgKGFbaV0gPD0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYVswXTtcbiAgICB9IDogZnVuY3Rpb24gKHZhbHVlLCBkaXJlY3Rpb24sIHRocmVzaG9sZCkge1xuICAgICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRocmVzaG9sZCA9IDFlLTM7XG4gICAgICB9XG5cbiAgICAgIHZhciBzbmFwcGVkID0gc25hcCh2YWx1ZSk7XG4gICAgICByZXR1cm4gIWRpcmVjdGlvbiB8fCBNYXRoLmFicyhzbmFwcGVkIC0gdmFsdWUpIDwgdGhyZXNob2xkIHx8IHNuYXBwZWQgLSB2YWx1ZSA8IDAgPT09IGRpcmVjdGlvbiA8IDAgPyBzbmFwcGVkIDogc25hcChkaXJlY3Rpb24gPCAwID8gdmFsdWUgLSBzbmFwSW5jcmVtZW50T3JBcnJheSA6IHZhbHVlICsgc25hcEluY3JlbWVudE9yQXJyYXkpO1xuICAgIH07XG4gIH0sXG4gICAgICBfZ2V0TGFiZWxBdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEF0RGlyZWN0aW9uKHRpbWVsaW5lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICAgIHJldHVybiBfc25hcERpcmVjdGlvbmFsKF9nZXRMYWJlbFJhdGlvQXJyYXkodGltZWxpbmUpKSh2YWx1ZSwgc3QuZGlyZWN0aW9uKTtcbiAgICB9O1xuICB9LFxuICAgICAgX211bHRpTGlzdGVuZXIgPSBmdW5jdGlvbiBfbXVsdGlMaXN0ZW5lcihmdW5jLCBlbGVtZW50LCB0eXBlcywgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdHlwZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiBmdW5jKGVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9hZGRMaXN0ZW5lciQxID0gZnVuY3Rpb24gX2FkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZ1bmMsIG5vblBhc3NpdmUsIGNhcHR1cmUpIHtcbiAgICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICAgIHBhc3NpdmU6ICFub25QYXNzaXZlLFxuICAgICAgY2FwdHVyZTogISFjYXB0dXJlXG4gICAgfSk7XG4gIH0sXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIkMSA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCAhIWNhcHR1cmUpO1xuICB9LFxuICAgICAgX3doZWVsTGlzdGVuZXIgPSBmdW5jdGlvbiBfd2hlZWxMaXN0ZW5lcihmdW5jLCBlbCwgc2Nyb2xsRnVuYykge1xuICAgIHNjcm9sbEZ1bmMgPSBzY3JvbGxGdW5jICYmIHNjcm9sbEZ1bmMud2hlZWxIYW5kbGVyO1xuXG4gICAgaWYgKHNjcm9sbEZ1bmMpIHtcbiAgICAgIGZ1bmMoZWwsIFwid2hlZWxcIiwgc2Nyb2xsRnVuYyk7XG4gICAgICBmdW5jKGVsLCBcInRvdWNobW92ZVwiLCBzY3JvbGxGdW5jKTtcbiAgICB9XG4gIH0sXG4gICAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gICAgc3RhcnRDb2xvcjogXCJncmVlblwiLFxuICAgIGVuZENvbG9yOiBcInJlZFwiLFxuICAgIGluZGVudDogMCxcbiAgICBmb250U2l6ZTogXCIxNnB4XCIsXG4gICAgZm9udFdlaWdodDogXCJub3JtYWxcIlxuICB9LFxuICAgICAgX2RlZmF1bHRzID0ge1xuICAgIHRvZ2dsZUFjdGlvbnM6IFwicGxheVwiLFxuICAgIGFudGljaXBhdGVQaW46IDBcbiAgfSxcbiAgICAgIF9rZXl3b3JkcyA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBjZW50ZXI6IDAuNSxcbiAgICBib3R0b206IDEsXG4gICAgcmlnaHQ6IDFcbiAgfSxcbiAgICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgICBpZiAoX2lzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFyIGVxSW5kZXggPSB2YWx1ZS5pbmRleE9mKFwiPVwiKSxcbiAgICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgICAgaWYgKH5lcUluZGV4KSB7XG4gICAgICAgIHZhbHVlLmluZGV4T2YoXCIlXCIpID4gZXFJbmRleCAmJiAocmVsYXRpdmUgKj0gc2l6ZSAvIDEwMCk7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSByZWxhdGl2ZSArICh2YWx1ZSBpbiBfa2V5d29yZHMgPyBfa2V5d29yZHNbdmFsdWVdICogc2l6ZSA6IH52YWx1ZS5pbmRleE9mKFwiJVwiKSA/IHBhcnNlRmxvYXQodmFsdWUpICogc2l6ZSAvIDEwMCA6IHBhcnNlRmxvYXQodmFsdWUpIHx8IDApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNCwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgIHZhciBzdGFydENvbG9yID0gX3JlZjQuc3RhcnRDb2xvcixcbiAgICAgICAgZW5kQ29sb3IgPSBfcmVmNC5lbmRDb2xvcixcbiAgICAgICAgZm9udFNpemUgPSBfcmVmNC5mb250U2l6ZSxcbiAgICAgICAgaW5kZW50ID0gX3JlZjQuaW5kZW50LFxuICAgICAgICBmb250V2VpZ2h0ID0gX3JlZjQuZm9udFdlaWdodDtcblxuICAgIHZhciBlID0gX2RvYyQxLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSBfaXNWaWV3cG9ydCQxKGNvbnRhaW5lcikgfHwgX2dldFByb3h5UHJvcChjb250YWluZXIsIFwicGluVHlwZVwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgICBpc1Njcm9sbGVyID0gdHlwZS5pbmRleE9mKFwic2Nyb2xsZXJcIikgIT09IC0xLFxuICAgICAgICBwYXJlbnQgPSB1c2VGaXhlZFBvc2l0aW9uID8gX2JvZHkkMSA6IGNvbnRhaW5lcixcbiAgICAgICAgaXNTdGFydCA9IHR5cGUuaW5kZXhPZihcInN0YXJ0XCIpICE9PSAtMSxcbiAgICAgICAgY29sb3IgPSBpc1N0YXJ0ID8gc3RhcnRDb2xvciA6IGVuZENvbG9yLFxuICAgICAgICBjc3MgPSBcImJvcmRlci1jb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC1zaXplOlwiICsgZm9udFNpemUgKyBcIjtjb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC13ZWlnaHQ6XCIgKyBmb250V2VpZ2h0ICsgXCI7cG9pbnRlci1ldmVudHM6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixBcmlhbDt6LWluZGV4OjEwMDA7cGFkZGluZzo0cHggOHB4O2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpzb2xpZDtcIjtcblxuICAgIGNzcyArPSBcInBvc2l0aW9uOlwiICsgKChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbikgJiYgdXNlRml4ZWRQb3NpdGlvbiA/IFwiZml4ZWQ7XCIgOiBcImFic29sdXRlO1wiKTtcbiAgICAoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24gfHwgIXVzZUZpeGVkUG9zaXRpb24pICYmIChjc3MgKz0gKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX3JpZ2h0IDogX2JvdHRvbSkgKyBcIjpcIiArIChvZmZzZXQgKyBwYXJzZUZsb2F0KGluZGVudCkpICsgXCJweDtcIik7XG4gICAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gICAgZS5faXNTdGFydCA9IGlzU3RhcnQ7XG4gICAgZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdzYXAtbWFya2VyLVwiICsgdHlwZSArIChuYW1lID8gXCIgbWFya2VyLVwiICsgbmFtZSA6IFwiXCIpKTtcbiAgICBlLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gICAgZS5pbm5lclRleHQgPSBuYW1lIHx8IG5hbWUgPT09IDAgPyB0eXBlICsgXCItXCIgKyBuYW1lIDogdHlwZTtcbiAgICBwYXJlbnQuY2hpbGRyZW5bMF0gPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGUsIHBhcmVudC5jaGlsZHJlblswXSkgOiBwYXJlbnQuYXBwZW5kQ2hpbGQoZSk7XG4gICAgZS5fb2Zmc2V0ID0gZVtcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICAgIF9wb3NpdGlvbk1hcmtlcihlLCAwLCBkaXJlY3Rpb24sIGlzU3RhcnQpO1xuXG4gICAgcmV0dXJuIGU7XG4gIH0sXG4gICAgICBfcG9zaXRpb25NYXJrZXIgPSBmdW5jdGlvbiBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBzdGFydCwgZGlyZWN0aW9uLCBmbGlwcGVkKSB7XG4gICAgdmFyIHZhcnMgPSB7XG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9LFxuICAgICAgICBzaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcIm9zMlwiIDogXCJwMlwiXSxcbiAgICAgICAgb3Bwb3NpdGVTaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcInAyXCIgOiBcIm9zMlwiXTtcbiAgICBtYXJrZXIuX2lzRmxpcHBlZCA9IGZsaXBwZWQ7XG4gICAgdmFyc1tkaXJlY3Rpb24uYSArIFwiUGVyY2VudFwiXSA9IGZsaXBwZWQgPyAtMTAwIDogMDtcbiAgICB2YXJzW2RpcmVjdGlvbi5hXSA9IGZsaXBwZWQgPyBcIjFweFwiIDogMDtcbiAgICB2YXJzW1wiYm9yZGVyXCIgKyBzaWRlICsgX1dpZHRoXSA9IDE7XG4gICAgdmFyc1tcImJvcmRlclwiICsgb3Bwb3NpdGVTaWRlICsgX1dpZHRoXSA9IDA7XG4gICAgdmFyc1tkaXJlY3Rpb24ucF0gPSBzdGFydCArIFwicHhcIjtcbiAgICBnc2FwJDEuc2V0KG1hcmtlciwgdmFycyk7XG4gIH0sXG4gICAgICBfdHJpZ2dlcnMgPSBbXSxcbiAgICAgIF9pZHMgPSB7fSxcbiAgICAgIF9yYWZJRCxcbiAgICAgIF9zeW5jID0gZnVuY3Rpb24gX3N5bmMoKSB7XG4gICAgcmV0dXJuIF9nZXRUaW1lJDEoKSAtIF9sYXN0U2Nyb2xsVGltZSA+IDM0ICYmIChfcmFmSUQgfHwgKF9yYWZJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShfdXBkYXRlQWxsKSkpO1xuICB9LFxuICAgICAgX29uU2Nyb2xsJDEgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gICAgaWYgKCFfbm9ybWFsaXplciQxIHx8ICFfbm9ybWFsaXplciQxLmlzUHJlc3NlZCB8fCBfbm9ybWFsaXplciQxLnN0YXJ0WCA+IF9ib2R5JDEuY2xpZW50V2lkdGgpIHtcbiAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcblxuICAgICAgaWYgKF9ub3JtYWxpemVyJDEpIHtcbiAgICAgICAgX3JhZklEIHx8IChfcmFmSUQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3VwZGF0ZUFsbCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3VwZGF0ZUFsbCgpO1xuICAgICAgfVxuXG4gICAgICBfbGFzdFNjcm9sbFRpbWUgfHwgX2Rpc3BhdGNoKFwic2Nyb2xsU3RhcnRcIik7XG4gICAgICBfbGFzdFNjcm9sbFRpbWUgPSBfZ2V0VGltZSQxKCk7XG4gICAgfVxuICB9LFxuICAgICAgX3NldEJhc2VEaW1lbnNpb25zID0gZnVuY3Rpb24gX3NldEJhc2VEaW1lbnNpb25zKCkge1xuICAgIF9iYXNlU2NyZWVuV2lkdGggPSBfd2luJDEuaW5uZXJXaWR0aDtcbiAgICBfYmFzZVNjcmVlbkhlaWdodCA9IF93aW4kMS5pbm5lckhlaWdodDtcbiAgfSxcbiAgICAgIF9vblJlc2l6ZSA9IGZ1bmN0aW9uIF9vblJlc2l6ZSgpIHtcbiAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG4gICAgIV9yZWZyZXNoaW5nICYmICFfaWdub3JlUmVzaXplICYmICFfZG9jJDEuZnVsbHNjcmVlbkVsZW1lbnQgJiYgIV9kb2MkMS53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCAmJiAoIV9pZ25vcmVNb2JpbGVSZXNpemUgfHwgX2Jhc2VTY3JlZW5XaWR0aCAhPT0gX3dpbiQxLmlubmVyV2lkdGggfHwgTWF0aC5hYnMoX3dpbiQxLmlubmVySGVpZ2h0IC0gX2Jhc2VTY3JlZW5IZWlnaHQpID4gX3dpbiQxLmlubmVySGVpZ2h0ICogMC4yNSkgJiYgX3Jlc2l6ZURlbGF5LnJlc3RhcnQodHJ1ZSk7XG4gIH0sXG4gICAgICBfbGlzdGVuZXJzID0ge30sXG4gICAgICBfZW1wdHlBcnJheSA9IFtdLFxuICAgICAgX3NvZnRSZWZyZXNoID0gZnVuY3Rpb24gX3NvZnRSZWZyZXNoKCkge1xuICAgIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIkMShTY3JvbGxUcmlnZ2VyJDEsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCkgfHwgX3JlZnJlc2hBbGwodHJ1ZSk7XG4gIH0sXG4gICAgICBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBfZGlzcGF0Y2godHlwZSkge1xuICAgIHJldHVybiBfbGlzdGVuZXJzW3R5cGVdICYmIF9saXN0ZW5lcnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZigpO1xuICAgIH0pIHx8IF9lbXB0eUFycmF5O1xuICB9LFxuICAgICAgX3NhdmVkU3R5bGVzID0gW10sXG4gICAgICBfcmV2ZXJ0UmVjb3JkZWQgPSBmdW5jdGlvbiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9zYXZlZFN0eWxlcy5sZW5ndGg7IGkgKz0gNSkge1xuICAgICAgaWYgKCFtZWRpYSB8fCBfc2F2ZWRTdHlsZXNbaSArIDRdICYmIF9zYXZlZFN0eWxlc1tpICsgNF0ucXVlcnkgPT09IG1lZGlhKSB7XG4gICAgICAgIF9zYXZlZFN0eWxlc1tpXS5zdHlsZS5jc3NUZXh0ID0gX3NhdmVkU3R5bGVzW2kgKyAxXTtcbiAgICAgICAgX3NhdmVkU3R5bGVzW2ldLmdldEJCb3ggJiYgX3NhdmVkU3R5bGVzW2ldLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBfc2F2ZWRTdHlsZXNbaSArIDJdIHx8IFwiXCIpO1xuICAgICAgICBfc2F2ZWRTdHlsZXNbaSArIDNdLnVuY2FjaGUgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9yZXZlcnRBbGwgPSBmdW5jdGlvbiBfcmV2ZXJ0QWxsKGtpbGwsIG1lZGlhKSB7XG4gICAgdmFyIHRyaWdnZXI7XG5cbiAgICBmb3IgKF9pID0gMDsgX2kgPCBfdHJpZ2dlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB0cmlnZ2VyID0gX3RyaWdnZXJzW19pXTtcblxuICAgICAgaWYgKHRyaWdnZXIgJiYgKCFtZWRpYSB8fCB0cmlnZ2VyLl9jdHggPT09IG1lZGlhKSkge1xuICAgICAgICBpZiAoa2lsbCkge1xuICAgICAgICAgIHRyaWdnZXIua2lsbCgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG1lZGlhICYmIF9yZXZlcnRSZWNvcmRlZChtZWRpYSk7XG4gICAgbWVkaWEgfHwgX2Rpc3BhdGNoKFwicmV2ZXJ0XCIpO1xuICB9LFxuICAgICAgX2NsZWFyU2Nyb2xsTWVtb3J5ID0gZnVuY3Rpb24gX2NsZWFyU2Nyb2xsTWVtb3J5KHNjcm9sbFJlc3RvcmF0aW9uLCBmb3JjZSkge1xuICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgICAoZm9yY2UgfHwgIV9yZWZyZXNoaW5nQWxsKSAmJiBfc2Nyb2xsZXJzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG9iaikgJiYgb2JqLmNhY2hlSUQrKyAmJiAob2JqLnJlYyA9IDApO1xuICAgIH0pO1xuICAgIF9pc1N0cmluZyhzY3JvbGxSZXN0b3JhdGlvbikgJiYgKF93aW4kMS5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gX3Njcm9sbFJlc3RvcmF0aW9uID0gc2Nyb2xsUmVzdG9yYXRpb24pO1xuICB9LFxuICAgICAgX3JlZnJlc2hpbmdBbGwsXG4gICAgICBfcmVmcmVzaElEID0gMCxcbiAgICAgIF9xdWV1ZVJlZnJlc2hJRCxcbiAgICAgIF9xdWV1ZVJlZnJlc2hBbGwgPSBmdW5jdGlvbiBfcXVldWVSZWZyZXNoQWxsKCkge1xuICAgIGlmIChfcXVldWVSZWZyZXNoSUQgIT09IF9yZWZyZXNoSUQpIHtcbiAgICAgIHZhciBpZCA9IF9xdWV1ZVJlZnJlc2hJRCA9IF9yZWZyZXNoSUQ7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaWQgPT09IF9yZWZyZXNoSUQgJiYgX3JlZnJlc2hBbGwodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gICAgICBfcmVmcmVzaDEwMHZoID0gZnVuY3Rpb24gX3JlZnJlc2gxMDB2aCgpIHtcbiAgICBfYm9keSQxLmFwcGVuZENoaWxkKF9kaXYxMDB2aCk7XG5cbiAgICBfMTAwdmggPSBfZGl2MTAwdmgub2Zmc2V0SGVpZ2h0IHx8IF93aW4kMS5pbm5lckhlaWdodDtcblxuICAgIF9ib2R5JDEucmVtb3ZlQ2hpbGQoX2RpdjEwMHZoKTtcbiAgfSxcbiAgICAgIF9yZWZyZXNoQWxsID0gZnVuY3Rpb24gX3JlZnJlc2hBbGwoZm9yY2UsIHNraXBSZXZlcnQpIHtcbiAgICBpZiAoX2xhc3RTY3JvbGxUaW1lICYmICFmb3JjZSkge1xuICAgICAgX2FkZExpc3RlbmVyJDEoU2Nyb2xsVHJpZ2dlciQxLCBcInNjcm9sbEVuZFwiLCBfc29mdFJlZnJlc2gpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3JlZnJlc2gxMDB2aCgpO1xuXG4gICAgX3JlZnJlc2hpbmdBbGwgPSBTY3JvbGxUcmlnZ2VyJDEuaXNSZWZyZXNoaW5nID0gdHJ1ZTtcblxuICAgIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gX2lzRnVuY3Rpb24ob2JqKSAmJiArK29iai5jYWNoZUlEICYmIChvYmoucmVjID0gb2JqKCkpO1xuICAgIH0pO1xuXG4gICAgdmFyIHJlZnJlc2hJbml0cyA9IF9kaXNwYXRjaChcInJlZnJlc2hJbml0XCIpO1xuXG4gICAgX3NvcnQgJiYgU2Nyb2xsVHJpZ2dlciQxLnNvcnQoKTtcbiAgICBza2lwUmV2ZXJ0IHx8IF9yZXZlcnRBbGwoKTtcblxuICAgIF9zY3JvbGxlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAoX2lzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgICBvYmouc21vb3RoICYmIChvYmoudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCIpO1xuICAgICAgICBvYmooMCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIHQucmVmcmVzaCgpO1xuICAgIH0pO1xuXG4gICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQsIGkpIHtcbiAgICAgIGlmICh0Ll9zdWJQaW5PZmZzZXQgJiYgdC5waW4pIHtcbiAgICAgICAgdmFyIHByb3AgPSB0LnZhcnMuaG9yaXpvbnRhbCA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIsXG4gICAgICAgICAgICBvcmlnaW5hbCA9IHQucGluW3Byb3BdO1xuICAgICAgICB0LnJldmVydCh0cnVlLCAxKTtcbiAgICAgICAgdC5hZGp1c3RQaW5TcGFjaW5nKHQucGluW3Byb3BdIC0gb3JpZ2luYWwpO1xuICAgICAgICB0LnJlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgbWF4ID0gX21heFNjcm9sbCh0LnNjcm9sbGVyLCB0Ll9kaXIpO1xuXG4gICAgICAodC52YXJzLmVuZCA9PT0gXCJtYXhcIiB8fCB0Ll9lbmRDbGFtcCAmJiB0LmVuZCA+IG1heCkgJiYgdC5zZXRQb3NpdGlvbnModC5zdGFydCwgTWF0aC5tYXgodC5zdGFydCArIDEsIG1heCksIHRydWUpO1xuICAgIH0pO1xuXG4gICAgcmVmcmVzaEluaXRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHQucmVuZGVyICYmIHJlc3VsdC5yZW5kZXIoLTEpO1xuICAgIH0pO1xuXG4gICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGlmIChfaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICAgIG9iai5zbW9vdGggJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gb2JqLnRhcmdldC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9IFwic21vb3RoXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBvYmoucmVjICYmIG9iaihvYmoucmVjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9jbGVhclNjcm9sbE1lbW9yeShfc2Nyb2xsUmVzdG9yYXRpb24sIDEpO1xuXG4gICAgX3Jlc2l6ZURlbGF5LnBhdXNlKCk7XG5cbiAgICBfcmVmcmVzaElEKys7XG4gICAgX3JlZnJlc2hpbmdBbGwgPSAyO1xuXG4gICAgX3VwZGF0ZUFsbCgyKTtcblxuICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gX2lzRnVuY3Rpb24odC52YXJzLm9uUmVmcmVzaCkgJiYgdC52YXJzLm9uUmVmcmVzaCh0KTtcbiAgICB9KTtcblxuICAgIF9yZWZyZXNoaW5nQWxsID0gU2Nyb2xsVHJpZ2dlciQxLmlzUmVmcmVzaGluZyA9IGZhbHNlO1xuXG4gICAgX2Rpc3BhdGNoKFwicmVmcmVzaFwiKTtcbiAgfSxcbiAgICAgIF9sYXN0U2Nyb2xsID0gMCxcbiAgICAgIF9kaXJlY3Rpb24gPSAxLFxuICAgICAgX3ByaW1hcnksXG4gICAgICBfdXBkYXRlQWxsID0gZnVuY3Rpb24gX3VwZGF0ZUFsbChmb3JjZSkge1xuICAgIGlmICghX3JlZnJlc2hpbmdBbGwgfHwgZm9yY2UgPT09IDIpIHtcbiAgICAgIFNjcm9sbFRyaWdnZXIkMS5pc1VwZGF0aW5nID0gdHJ1ZTtcbiAgICAgIF9wcmltYXJ5ICYmIF9wcmltYXJ5LnVwZGF0ZSgwKTtcblxuICAgICAgdmFyIGwgPSBfdHJpZ2dlcnMubGVuZ3RoLFxuICAgICAgICAgIHRpbWUgPSBfZ2V0VGltZSQxKCksXG4gICAgICAgICAgcmVjb3JkVmVsb2NpdHkgPSB0aW1lIC0gX3RpbWUxID49IDUwLFxuICAgICAgICAgIHNjcm9sbCA9IGwgJiYgX3RyaWdnZXJzWzBdLnNjcm9sbCgpO1xuXG4gICAgICBfZGlyZWN0aW9uID0gX2xhc3RTY3JvbGwgPiBzY3JvbGwgPyAtMSA6IDE7XG4gICAgICBfcmVmcmVzaGluZ0FsbCB8fCAoX2xhc3RTY3JvbGwgPSBzY3JvbGwpO1xuXG4gICAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgICAgaWYgKF9sYXN0U2Nyb2xsVGltZSAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgdGltZSAtIF9sYXN0U2Nyb2xsVGltZSA+IDIwMCkge1xuICAgICAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IDA7XG5cbiAgICAgICAgICBfZGlzcGF0Y2goXCJzY3JvbGxFbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBfdGltZTIgPSBfdGltZTE7XG4gICAgICAgIF90aW1lMSA9IHRpbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICBfaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKF9pLS0gPiAwKSB7XG4gICAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBfZGlyZWN0aW9uID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoX2kgPSAwOyBfaSA8IGw7IF9pKyspIHtcbiAgICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTY3JvbGxUcmlnZ2VyJDEuaXNVcGRhdGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIF9yYWZJRCA9IDA7XG4gIH0sXG4gICAgICBfcHJvcE5hbWVzVG9Db3B5ID0gW19sZWZ0LCBfdG9wLCBfYm90dG9tLCBfcmlnaHQsIF9tYXJnaW4gKyBfQm90dG9tLCBfbWFyZ2luICsgX1JpZ2h0LCBfbWFyZ2luICsgX1RvcCwgX21hcmdpbiArIF9MZWZ0LCBcImRpc3BsYXlcIiwgXCJmbGV4U2hyaW5rXCIsIFwiZmxvYXRcIiwgXCJ6SW5kZXhcIiwgXCJncmlkQ29sdW1uU3RhcnRcIiwgXCJncmlkQ29sdW1uRW5kXCIsIFwiZ3JpZFJvd1N0YXJ0XCIsIFwiZ3JpZFJvd0VuZFwiLCBcImdyaWRBcmVhXCIsIFwianVzdGlmeVNlbGZcIiwgXCJhbGlnblNlbGZcIiwgXCJwbGFjZVNlbGZcIiwgXCJvcmRlclwiXSxcbiAgICAgIF9zdGF0ZVByb3BzID0gX3Byb3BOYW1lc1RvQ29weS5jb25jYXQoW193aWR0aCwgX2hlaWdodCwgXCJib3hTaXppbmdcIiwgXCJtYXhcIiArIF9XaWR0aCwgXCJtYXhcIiArIF9IZWlnaHQsIFwicG9zaXRpb25cIiwgX21hcmdpbiwgX3BhZGRpbmcsIF9wYWRkaW5nICsgX1RvcCwgX3BhZGRpbmcgKyBfUmlnaHQsIF9wYWRkaW5nICsgX0JvdHRvbSwgX3BhZGRpbmcgKyBfTGVmdF0pLFxuICAgICAgX3N3YXBQaW5PdXQgPSBmdW5jdGlvbiBfc3dhcFBpbk91dChwaW4sIHNwYWNlciwgc3RhdGUpIHtcbiAgICBfc2V0U3RhdGUoc3RhdGUpO1xuXG4gICAgdmFyIGNhY2hlID0gcGluLl9nc2FwO1xuXG4gICAgaWYgKGNhY2hlLnNwYWNlcklzTmF0aXZlKSB7XG4gICAgICBfc2V0U3RhdGUoY2FjaGUuc3BhY2VyU3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGluLl9nc2FwLnN3YXBwZWRJbikge1xuICAgICAgdmFyIHBhcmVudCA9IHNwYWNlci5wYXJlbnROb2RlO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUocGluLCBzcGFjZXIpO1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoc3BhY2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwaW4uX2dzYXAuc3dhcHBlZEluID0gZmFsc2U7XG4gIH0sXG4gICAgICBfc3dhcFBpbkluID0gZnVuY3Rpb24gX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MsIHNwYWNlclN0YXRlKSB7XG4gICAgaWYgKCFwaW4uX2dzYXAuc3dhcHBlZEluKSB7XG4gICAgICB2YXIgaSA9IF9wcm9wTmFtZXNUb0NvcHkubGVuZ3RoLFxuICAgICAgICAgIHNwYWNlclN0eWxlID0gc3BhY2VyLnN0eWxlLFxuICAgICAgICAgIHBpblN0eWxlID0gcGluLnN0eWxlLFxuICAgICAgICAgIHA7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcCA9IF9wcm9wTmFtZXNUb0NvcHlbaV07XG4gICAgICAgIHNwYWNlclN0eWxlW3BdID0gY3NbcF07XG4gICAgICB9XG5cbiAgICAgIHNwYWNlclN0eWxlLnBvc2l0aW9uID0gY3MucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiA/IFwiYWJzb2x1dGVcIiA6IFwicmVsYXRpdmVcIjtcbiAgICAgIGNzLmRpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgKHNwYWNlclN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKTtcbiAgICAgIHBpblN0eWxlW19ib3R0b21dID0gcGluU3R5bGVbX3JpZ2h0XSA9IFwiYXV0b1wiO1xuICAgICAgc3BhY2VyU3R5bGUuZmxleEJhc2lzID0gY3MuZmxleEJhc2lzIHx8IFwiYXV0b1wiO1xuICAgICAgc3BhY2VyU3R5bGUub3ZlcmZsb3cgPSBcInZpc2libGVcIjtcbiAgICAgIHNwYWNlclN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgICAgc3BhY2VyU3R5bGVbX3dpZHRoXSA9IF9nZXRTaXplKHBpbiwgX2hvcml6b250YWwpICsgX3B4O1xuICAgICAgc3BhY2VyU3R5bGVbX2hlaWdodF0gPSBfZ2V0U2l6ZShwaW4sIF92ZXJ0aWNhbCkgKyBfcHg7XG4gICAgICBzcGFjZXJTdHlsZVtfcGFkZGluZ10gPSBwaW5TdHlsZVtfbWFyZ2luXSA9IHBpblN0eWxlW190b3BdID0gcGluU3R5bGVbX2xlZnRdID0gXCIwXCI7XG5cbiAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG5cbiAgICAgIHBpblN0eWxlW193aWR0aF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX1dpZHRoXSA9IGNzW193aWR0aF07XG4gICAgICBwaW5TdHlsZVtfaGVpZ2h0XSA9IHBpblN0eWxlW1wibWF4XCIgKyBfSGVpZ2h0XSA9IGNzW19oZWlnaHRdO1xuICAgICAgcGluU3R5bGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuXG4gICAgICBpZiAocGluLnBhcmVudE5vZGUgIT09IHNwYWNlcikge1xuICAgICAgICBwaW4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3BhY2VyLCBwaW4pO1xuICAgICAgICBzcGFjZXIuYXBwZW5kQ2hpbGQocGluKTtcbiAgICAgIH1cblxuICAgICAgcGluLl9nc2FwLnN3YXBwZWRJbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICAgICAgX2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuICAgICAgX3NldFN0YXRlID0gZnVuY3Rpb24gX3NldFN0YXRlKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBzdGF0ZS50LnN0eWxlLFxuICAgICAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgcCxcbiAgICAgICAgICB2YWx1ZTtcbiAgICAgIChzdGF0ZS50Ll9nc2FwIHx8IGdzYXAkMS5jb3JlLmdldENhY2hlKHN0YXRlLnQpKS51bmNhY2hlID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICAgICAgdmFsdWUgPSBzdGF0ZVtpICsgMV07XG4gICAgICAgIHAgPSBzdGF0ZVtpXTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVtwXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlW3BdKSB7XG4gICAgICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9nZXRTdGF0ZSA9IGZ1bmN0aW9uIF9nZXRTdGF0ZShlbGVtZW50KSB7XG4gICAgdmFyIGwgPSBfc3RhdGVQcm9wcy5sZW5ndGgsXG4gICAgICAgIHN0eWxlID0gZWxlbWVudC5zdHlsZSxcbiAgICAgICAgc3RhdGUgPSBbXSxcbiAgICAgICAgaSA9IDA7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgc3RhdGUucHVzaChfc3RhdGVQcm9wc1tpXSwgc3R5bGVbX3N0YXRlUHJvcHNbaV1dKTtcbiAgICB9XG5cbiAgICBzdGF0ZS50ID0gZWxlbWVudDtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH0sXG4gICAgICBfY29weVN0YXRlID0gZnVuY3Rpb24gX2NvcHlTdGF0ZShzdGF0ZSwgb3ZlcnJpZGUsIG9taXRPZmZzZXRzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICBsID0gc3RhdGUubGVuZ3RoLFxuICAgICAgICBpID0gb21pdE9mZnNldHMgPyA4IDogMCxcbiAgICAgICAgcDtcblxuICAgIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgICBwID0gc3RhdGVbaV07XG4gICAgICByZXN1bHQucHVzaChwLCBwIGluIG92ZXJyaWRlID8gb3ZlcnJpZGVbcF0gOiBzdGF0ZVtpICsgMV0pO1xuICAgIH1cblxuICAgIHJlc3VsdC50ID0gc3RhdGUudDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAgICAgX3dpbk9mZnNldHMgPSB7XG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDBcbiAgfSxcbiAgICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24odmFsdWUsIHRyaWdnZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGwsIG1hcmtlciwgbWFya2VyU2Nyb2xsZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgc2Nyb2xsZXJNYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgY2xhbXBaZXJvUHJvcCkge1xuICAgIF9pc0Z1bmN0aW9uKHZhbHVlKSAmJiAodmFsdWUgPSB2YWx1ZShzZWxmKSk7XG5cbiAgICBpZiAoX2lzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5zdWJzdHIoMCwgMykgPT09IFwibWF4XCIpIHtcbiAgICAgIHZhbHVlID0gc2Nyb2xsZXJNYXggKyAodmFsdWUuY2hhckF0KDQpID09PSBcIj1cIiA/IF9vZmZzZXRUb1B4KFwiMFwiICsgdmFsdWUuc3Vic3RyKDMpLCBzY3JvbGxlclNpemUpIDogMCk7XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZSgpIDogMCxcbiAgICAgICAgcDEsXG4gICAgICAgIHAyLFxuICAgICAgICBlbGVtZW50O1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2VlaygwKTtcbiAgICBpc05hTih2YWx1ZSkgfHwgKHZhbHVlID0gK3ZhbHVlKTtcblxuICAgIGlmICghX2lzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgX2lzRnVuY3Rpb24odHJpZ2dlcikgJiYgKHRyaWdnZXIgPSB0cmlnZ2VyKHNlbGYpKTtcbiAgICAgIHZhciBvZmZzZXRzID0gKHZhbHVlIHx8IFwiMFwiKS5zcGxpdChcIiBcIiksXG4gICAgICAgICAgYm91bmRzLFxuICAgICAgICAgIGxvY2FsT2Zmc2V0LFxuICAgICAgICAgIGdsb2JhbE9mZnNldCxcbiAgICAgICAgICBkaXNwbGF5O1xuICAgICAgZWxlbWVudCA9IF9nZXRUYXJnZXQodHJpZ2dlciwgc2VsZikgfHwgX2JvZHkkMTtcbiAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoZWxlbWVudCkgfHwge307XG5cbiAgICAgIGlmICgoIWJvdW5kcyB8fCAhYm91bmRzLmxlZnQgJiYgIWJvdW5kcy50b3ApICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KTtcbiAgICAgICAgZGlzcGxheSA/IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgOiBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxPZmZzZXQgPSBfb2Zmc2V0VG9QeChvZmZzZXRzWzBdLCBib3VuZHNbZGlyZWN0aW9uLmRdKTtcbiAgICAgIGdsb2JhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMV0gfHwgXCIwXCIsIHNjcm9sbGVyU2l6ZSk7XG4gICAgICB2YWx1ZSA9IGJvdW5kc1tkaXJlY3Rpb24ucF0gLSBzY3JvbGxlckJvdW5kc1tkaXJlY3Rpb24ucF0gLSBib3JkZXJXaWR0aCArIGxvY2FsT2Zmc2V0ICsgc2Nyb2xsIC0gZ2xvYmFsT2Zmc2V0O1xuICAgICAgbWFya2VyU2Nyb2xsZXIgJiYgX3Bvc2l0aW9uTWFya2VyKG1hcmtlclNjcm9sbGVyLCBnbG9iYWxPZmZzZXQsIGRpcmVjdGlvbiwgc2Nyb2xsZXJTaXplIC0gZ2xvYmFsT2Zmc2V0IDwgMjAgfHwgbWFya2VyU2Nyb2xsZXIuX2lzU3RhcnQgJiYgZ2xvYmFsT2Zmc2V0ID4gMjApO1xuICAgICAgc2Nyb2xsZXJTaXplIC09IHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyQW5pbWF0aW9uICYmICh2YWx1ZSA9IGdzYXAkMS51dGlscy5tYXBSYW5nZShjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCAwLCBzY3JvbGxlck1heCwgdmFsdWUpKTtcbiAgICAgIG1hcmtlclNjcm9sbGVyICYmIF9wb3NpdGlvbk1hcmtlcihtYXJrZXJTY3JvbGxlciwgc2Nyb2xsZXJTaXplLCBkaXJlY3Rpb24sIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChjbGFtcFplcm9Qcm9wKSB7XG4gICAgICBzZWxmW2NsYW1wWmVyb1Byb3BdID0gdmFsdWUgfHwgLTAuMDAxO1xuICAgICAgdmFsdWUgPCAwICYmICh2YWx1ZSA9IDApO1xuICAgIH1cblxuICAgIGlmIChtYXJrZXIpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHZhbHVlICsgc2Nyb2xsZXJTaXplLFxuICAgICAgICAgIGlzU3RhcnQgPSBtYXJrZXIuX2lzU3RhcnQ7XG4gICAgICBwMSA9IFwic2Nyb2xsXCIgKyBkaXJlY3Rpb24uZDI7XG5cbiAgICAgIF9wb3NpdGlvbk1hcmtlcihtYXJrZXIsIHBvc2l0aW9uLCBkaXJlY3Rpb24sIGlzU3RhcnQgJiYgcG9zaXRpb24gPiAyMCB8fCAhaXNTdGFydCAmJiAodXNlRml4ZWRQb3NpdGlvbiA/IE1hdGgubWF4KF9ib2R5JDFbcDFdLCBfZG9jRWwkMVtwMV0pIDogbWFya2VyLnBhcmVudE5vZGVbcDFdKSA8PSBwb3NpdGlvbiArIDEpO1xuXG4gICAgICBpZiAodXNlRml4ZWRQb3NpdGlvbikge1xuICAgICAgICBzY3JvbGxlckJvdW5kcyA9IF9nZXRCb3VuZHMobWFya2VyU2Nyb2xsZXIpO1xuICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIChtYXJrZXIuc3R5bGVbZGlyZWN0aW9uLm9wLnBdID0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLm9wLnBdIC0gZGlyZWN0aW9uLm9wLm0gLSBtYXJrZXIuX29mZnNldCArIF9weCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBlbGVtZW50KSB7XG4gICAgICBwMSA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgICBjb250YWluZXJBbmltYXRpb24uc2VlayhzY3JvbGxlck1heCk7XG4gICAgICBwMiA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgICBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCA9IHAxW2RpcmVjdGlvbi5wXSAtIHAyW2RpcmVjdGlvbi5wXTtcbiAgICAgIHZhbHVlID0gdmFsdWUgLyBjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCAqIHNjcm9sbGVyTWF4O1xuICAgIH1cblxuICAgIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2Vlayh0aW1lKTtcbiAgICByZXR1cm4gY29udGFpbmVyQW5pbWF0aW9uID8gdmFsdWUgOiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgfSxcbiAgICAgIF9wcmVmaXhFeHAgPSAvKHdlYmtpdHxtb3p8bGVuZ3RofGNzc1RleHR8aW5zZXQpL2ksXG4gICAgICBfcmVwYXJlbnQgPSBmdW5jdGlvbiBfcmVwYXJlbnQoZWxlbWVudCwgcGFyZW50LCB0b3AsIGxlZnQpIHtcbiAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICE9PSBwYXJlbnQpIHtcbiAgICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBjcztcblxuICAgICAgaWYgKHBhcmVudCA9PT0gX2JvZHkkMSkge1xuICAgICAgICBlbGVtZW50Ll9zdE9yaWcgPSBzdHlsZS5jc3NUZXh0O1xuICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgICAgIGZvciAocCBpbiBjcykge1xuICAgICAgICAgIGlmICghK3AgJiYgIV9wcmVmaXhFeHAudGVzdChwKSAmJiBjc1twXSAmJiB0eXBlb2Ygc3R5bGVbcF0gPT09IFwic3RyaW5nXCIgJiYgcCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgIHN0eWxlW3BdID0gY3NbcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUudG9wID0gdG9wO1xuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLmNzc1RleHQgPSBlbGVtZW50Ll9zdE9yaWc7XG4gICAgICB9XG5cbiAgICAgIGdzYXAkMS5jb3JlLmdldENhY2hlKGVsZW1lbnQpLnVuY2FjaGUgPSAxO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIH1cbiAgfSxcbiAgICAgIF9pbnRlcnJ1cHRpb25UcmFja2VyID0gZnVuY3Rpb24gX2ludGVycnVwdGlvblRyYWNrZXIoZ2V0VmFsdWVGdW5jLCBpbml0aWFsVmFsdWUsIG9uSW50ZXJydXB0KSB7XG4gICAgdmFyIGxhc3QxID0gaW5pdGlhbFZhbHVlLFxuICAgICAgICBsYXN0MiA9IGxhc3QxO1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gTWF0aC5yb3VuZChnZXRWYWx1ZUZ1bmMoKSk7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSBsYXN0MSAmJiBjdXJyZW50ICE9PSBsYXN0MiAmJiBNYXRoLmFicyhjdXJyZW50IC0gbGFzdDEpID4gMyAmJiBNYXRoLmFicyhjdXJyZW50IC0gbGFzdDIpID4gMykge1xuICAgICAgICB2YWx1ZSA9IGN1cnJlbnQ7XG4gICAgICAgIG9uSW50ZXJydXB0ICYmIG9uSW50ZXJydXB0KCk7XG4gICAgICB9XG5cbiAgICAgIGxhc3QyID0gbGFzdDE7XG4gICAgICBsYXN0MSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH0sXG4gICAgICBfc2hpZnRNYXJrZXIgPSBmdW5jdGlvbiBfc2hpZnRNYXJrZXIobWFya2VyLCBkaXJlY3Rpb24sIHZhbHVlKSB7XG4gICAgdmFyIHZhcnMgPSB7fTtcbiAgICB2YXJzW2RpcmVjdGlvbi5wXSA9IFwiKz1cIiArIHZhbHVlO1xuICAgIGdzYXAkMS5zZXQobWFya2VyLCB2YXJzKTtcbiAgfSxcbiAgICAgIF9nZXRUd2VlbkNyZWF0b3IgPSBmdW5jdGlvbiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgZ2V0U2Nyb2xsID0gX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbiksXG4gICAgICAgIHByb3AgPSBcIl9zY3JvbGxcIiArIGRpcmVjdGlvbi5wMixcbiAgICAgICAgZ2V0VHdlZW4gPSBmdW5jdGlvbiBnZXRUd2VlbihzY3JvbGxUbywgdmFycywgaW5pdGlhbFZhbHVlLCBjaGFuZ2UxLCBjaGFuZ2UyKSB7XG4gICAgICB2YXIgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbixcbiAgICAgICAgICBvbkNvbXBsZXRlID0gdmFycy5vbkNvbXBsZXRlLFxuICAgICAgICAgIG1vZGlmaWVycyA9IHt9O1xuICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlIHx8IGdldFNjcm9sbCgpO1xuXG4gICAgICB2YXIgY2hlY2tGb3JJbnRlcnJ1cHRpb24gPSBfaW50ZXJydXB0aW9uVHJhY2tlcihnZXRTY3JvbGwsIGluaXRpYWxWYWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0d2Vlbi5raWxsKCk7XG4gICAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIH0pO1xuXG4gICAgICBjaGFuZ2UyID0gY2hhbmdlMSAmJiBjaGFuZ2UyIHx8IDA7XG4gICAgICBjaGFuZ2UxID0gY2hhbmdlMSB8fCBzY3JvbGxUbyAtIGluaXRpYWxWYWx1ZTtcbiAgICAgIHR3ZWVuICYmIHR3ZWVuLmtpbGwoKTtcbiAgICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICAgIHZhcnMubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuXG4gICAgICBtb2RpZmllcnNbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjaGVja0ZvckludGVycnVwdGlvbihpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbyk7XG4gICAgICB9O1xuXG4gICAgICB2YXJzLm9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc2Nyb2xsZXJzLmNhY2hlKys7XG5cbiAgICAgICAgX3VwZGF0ZUFsbCgpO1xuICAgICAgfTtcblxuICAgICAgdmFycy5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBnZXRUd2Vlbi50d2VlbiA9IDA7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICAgIH07XG5cbiAgICAgIHR3ZWVuID0gZ2V0VHdlZW4udHdlZW4gPSBnc2FwJDEudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgICAgcmV0dXJuIHR3ZWVuO1xuICAgIH07XG5cbiAgICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcblxuICAgIGdldFNjcm9sbC53aGVlbEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICAgIH07XG5cbiAgICBfYWRkTGlzdGVuZXIkMShzY3JvbGxlciwgXCJ3aGVlbFwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTtcblxuICAgIFNjcm9sbFRyaWdnZXIkMS5pc1RvdWNoICYmIF9hZGRMaXN0ZW5lciQxKHNjcm9sbGVyLCBcInRvdWNobW92ZVwiLCBnZXRTY3JvbGwud2hlZWxIYW5kbGVyKTtcbiAgICByZXR1cm4gZ2V0VHdlZW47XG4gIH07XG5cbiAgdmFyIFNjcm9sbFRyaWdnZXIkMSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgICAgX2NvcmVJbml0dGVkJDEgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3Rlcihnc2FwJDEpIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuXG4gICAgICBfY29udGV4dCQxKHRoaXMpO1xuXG4gICAgICB0aGlzLmluaXQodmFycywgYW5pbWF0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gU2Nyb2xsVHJpZ2dlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQodmFycywgYW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5zdGFydCA9IDA7XG4gICAgICB0aGlzLnZhcnMgJiYgdGhpcy5raWxsKHRydWUsIHRydWUpO1xuXG4gICAgICBpZiAoIV9lbmFibGVkKSB7XG4gICAgICAgIHRoaXMudXBkYXRlID0gdGhpcy5yZWZyZXNoID0gdGhpcy5raWxsID0gX3Bhc3NUaHJvdWdoO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhcnMgPSBfc2V0RGVmYXVsdHMoX2lzU3RyaW5nKHZhcnMpIHx8IF9pc051bWJlcih2YXJzKSB8fCB2YXJzLm5vZGVUeXBlID8ge1xuICAgICAgICB0cmlnZ2VyOiB2YXJzXG4gICAgICB9IDogdmFycywgX2RlZmF1bHRzKTtcblxuICAgICAgdmFyIF92YXJzID0gdmFycyxcbiAgICAgICAgICBvblVwZGF0ZSA9IF92YXJzLm9uVXBkYXRlLFxuICAgICAgICAgIHRvZ2dsZUNsYXNzID0gX3ZhcnMudG9nZ2xlQ2xhc3MsXG4gICAgICAgICAgaWQgPSBfdmFycy5pZCxcbiAgICAgICAgICBvblRvZ2dsZSA9IF92YXJzLm9uVG9nZ2xlLFxuICAgICAgICAgIG9uUmVmcmVzaCA9IF92YXJzLm9uUmVmcmVzaCxcbiAgICAgICAgICBzY3J1YiA9IF92YXJzLnNjcnViLFxuICAgICAgICAgIHRyaWdnZXIgPSBfdmFycy50cmlnZ2VyLFxuICAgICAgICAgIHBpbiA9IF92YXJzLnBpbixcbiAgICAgICAgICBwaW5TcGFjaW5nID0gX3ZhcnMucGluU3BhY2luZyxcbiAgICAgICAgICBpbnZhbGlkYXRlT25SZWZyZXNoID0gX3ZhcnMuaW52YWxpZGF0ZU9uUmVmcmVzaCxcbiAgICAgICAgICBhbnRpY2lwYXRlUGluID0gX3ZhcnMuYW50aWNpcGF0ZVBpbixcbiAgICAgICAgICBvblNjcnViQ29tcGxldGUgPSBfdmFycy5vblNjcnViQ29tcGxldGUsXG4gICAgICAgICAgb25TbmFwQ29tcGxldGUgPSBfdmFycy5vblNuYXBDb21wbGV0ZSxcbiAgICAgICAgICBvbmNlID0gX3ZhcnMub25jZSxcbiAgICAgICAgICBzbmFwID0gX3ZhcnMuc25hcCxcbiAgICAgICAgICBwaW5SZXBhcmVudCA9IF92YXJzLnBpblJlcGFyZW50LFxuICAgICAgICAgIHBpblNwYWNlciA9IF92YXJzLnBpblNwYWNlcixcbiAgICAgICAgICBjb250YWluZXJBbmltYXRpb24gPSBfdmFycy5jb250YWluZXJBbmltYXRpb24sXG4gICAgICAgICAgZmFzdFNjcm9sbEVuZCA9IF92YXJzLmZhc3RTY3JvbGxFbmQsXG4gICAgICAgICAgcHJldmVudE92ZXJsYXBzID0gX3ZhcnMucHJldmVudE92ZXJsYXBzLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IHZhcnMuaG9yaXpvbnRhbCB8fCB2YXJzLmNvbnRhaW5lckFuaW1hdGlvbiAmJiB2YXJzLmhvcml6b250YWwgIT09IGZhbHNlID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4gICAgICAgICAgaXNUb2dnbGUgPSAhc2NydWIgJiYgc2NydWIgIT09IDAsXG4gICAgICAgICAgc2Nyb2xsZXIgPSBfZ2V0VGFyZ2V0KHZhcnMuc2Nyb2xsZXIgfHwgX3dpbiQxKSxcbiAgICAgICAgICBzY3JvbGxlckNhY2hlID0gZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUoc2Nyb2xsZXIpLFxuICAgICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydCQxKHNjcm9sbGVyKSxcbiAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uID0gKFwicGluVHlwZVwiIGluIHZhcnMgPyB2YXJzLnBpblR5cGUgOiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcInBpblR5cGVcIikgfHwgaXNWaWV3cG9ydCAmJiBcImZpeGVkXCIpID09PSBcImZpeGVkXCIsXG4gICAgICAgICAgY2FsbGJhY2tzID0gW3ZhcnMub25FbnRlciwgdmFycy5vbkxlYXZlLCB2YXJzLm9uRW50ZXJCYWNrLCB2YXJzLm9uTGVhdmVCYWNrXSxcbiAgICAgICAgICB0b2dnbGVBY3Rpb25zID0gaXNUb2dnbGUgJiYgdmFycy50b2dnbGVBY3Rpb25zLnNwbGl0KFwiIFwiKSxcbiAgICAgICAgICBtYXJrZXJzID0gXCJtYXJrZXJzXCIgaW4gdmFycyA/IHZhcnMubWFya2VycyA6IF9kZWZhdWx0cy5tYXJrZXJzLFxuICAgICAgICAgIGJvcmRlcldpZHRoID0gaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCxcbiAgICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgICBvblJlZnJlc2hJbml0ID0gdmFycy5vblJlZnJlc2hJbml0ICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhcnMub25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICAgIH0sXG4gICAgICAgICAgZ2V0U2Nyb2xsZXJTaXplID0gX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pLFxuICAgICAgICAgIGdldFNjcm9sbGVyT2Zmc2V0cyA9IF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCksXG4gICAgICAgICAgbGFzdFNuYXAgPSAwLFxuICAgICAgICAgIGxhc3RSZWZyZXNoID0gMCxcbiAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSAwLFxuICAgICAgICAgIHNjcm9sbEZ1bmMgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgICB0d2VlblRvLFxuICAgICAgICAgIHBpbkNhY2hlLFxuICAgICAgICAgIHNuYXBGdW5jLFxuICAgICAgICAgIHNjcm9sbDEsXG4gICAgICAgICAgc2Nyb2xsMixcbiAgICAgICAgICBzdGFydCxcbiAgICAgICAgICBlbmQsXG4gICAgICAgICAgbWFya2VyU3RhcnQsXG4gICAgICAgICAgbWFya2VyRW5kLFxuICAgICAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlcixcbiAgICAgICAgICBtYXJrZXJFbmRUcmlnZ2VyLFxuICAgICAgICAgIG1hcmtlclZhcnMsXG4gICAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoLFxuICAgICAgICAgIGNoYW5nZSxcbiAgICAgICAgICBwaW5PcmlnaW5hbFN0YXRlLFxuICAgICAgICAgIHBpbkFjdGl2ZVN0YXRlLFxuICAgICAgICAgIHBpblN0YXRlLFxuICAgICAgICAgIHNwYWNlcixcbiAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgcGluR2V0dGVyLFxuICAgICAgICAgIHBpblNldHRlcixcbiAgICAgICAgICBwaW5TdGFydCxcbiAgICAgICAgICBwaW5DaGFuZ2UsXG4gICAgICAgICAgc3BhY2luZ1N0YXJ0LFxuICAgICAgICAgIHNwYWNlclN0YXRlLFxuICAgICAgICAgIG1hcmtlclN0YXJ0U2V0dGVyLFxuICAgICAgICAgIHBpbk1vdmVzLFxuICAgICAgICAgIG1hcmtlckVuZFNldHRlcixcbiAgICAgICAgICBjcyxcbiAgICAgICAgICBzbmFwMSxcbiAgICAgICAgICBzbmFwMixcbiAgICAgICAgICBzY3J1YlR3ZWVuLFxuICAgICAgICAgIHNjcnViU21vb3RoLFxuICAgICAgICAgIHNuYXBEdXJDbGFtcCxcbiAgICAgICAgICBzbmFwRGVsYXllZENhbGwsXG4gICAgICAgICAgcHJldlNjcm9sbCxcbiAgICAgICAgICBwcmV2QW5pbVByb2dyZXNzLFxuICAgICAgICAgIGNhTWFya2VyU2V0dGVyLFxuICAgICAgICAgIGN1c3RvbVJldmVydFJldHVybjtcblxuICAgICAgc2VsZi5fc3RhcnRDbGFtcCA9IHNlbGYuX2VuZENsYW1wID0gZmFsc2U7XG4gICAgICBzZWxmLl9kaXIgPSBkaXJlY3Rpb247XG4gICAgICBhbnRpY2lwYXRlUGluICo9IDQ1O1xuICAgICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgICAgc2VsZi5zY3JvbGwgPSBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24udGltZS5iaW5kKGNvbnRhaW5lckFuaW1hdGlvbikgOiBzY3JvbGxGdW5jO1xuICAgICAgc2Nyb2xsMSA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgIHNlbGYudmFycyA9IHZhcnM7XG4gICAgICBhbmltYXRpb24gPSBhbmltYXRpb24gfHwgdmFycy5hbmltYXRpb247XG5cbiAgICAgIGlmIChcInJlZnJlc2hQcmlvcml0eVwiIGluIHZhcnMpIHtcbiAgICAgICAgX3NvcnQgPSAxO1xuICAgICAgICB2YXJzLnJlZnJlc2hQcmlvcml0eSA9PT0gLTk5OTkgJiYgKF9wcmltYXJ5ID0gc2VsZik7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbGVyQ2FjaGUudHdlZW5TY3JvbGwgPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsIHx8IHtcbiAgICAgICAgdG9wOiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfdmVydGljYWwpLFxuICAgICAgICBsZWZ0OiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfaG9yaXpvbnRhbClcbiAgICAgIH07XG4gICAgICBzZWxmLnR3ZWVuVG8gPSB0d2VlblRvID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbFtkaXJlY3Rpb24ucF07XG5cbiAgICAgIHNlbGYuc2NydWJEdXJhdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBzY3J1YlNtb290aCA9IF9pc051bWJlcih2YWx1ZSkgJiYgdmFsdWU7XG5cbiAgICAgICAgaWYgKCFzY3J1YlNtb290aCkge1xuICAgICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wcm9ncmVzcygxKS5raWxsKCk7XG4gICAgICAgICAgc2NydWJUd2VlbiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NydWJUd2VlbiA/IHNjcnViVHdlZW4uZHVyYXRpb24odmFsdWUpIDogc2NydWJUd2VlbiA9IGdzYXAkMS50byhhbmltYXRpb24sIHtcbiAgICAgICAgICAgIGVhc2U6IFwiZXhwb1wiLFxuICAgICAgICAgICAgdG90YWxQcm9ncmVzczogXCIrPTBcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiBzY3J1YlNtb290aCxcbiAgICAgICAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvblNjcnViQ29tcGxldGUgJiYgb25TY3J1YkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbi52YXJzLmxhenkgPSBmYWxzZTtcbiAgICAgICAgYW5pbWF0aW9uLl9pbml0dGVkICYmICFzZWxmLmlzUmV2ZXJ0ZWQgfHwgYW5pbWF0aW9uLnZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiB2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UgJiYgYW5pbWF0aW9uLmR1cmF0aW9uKCkgJiYgYW5pbWF0aW9uLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgc2VsZi5hbmltYXRpb24gPSBhbmltYXRpb24ucGF1c2UoKTtcbiAgICAgICAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgPSBzZWxmO1xuICAgICAgICBzZWxmLnNjcnViRHVyYXRpb24oc2NydWIpO1xuICAgICAgICBzbmFwMSA9IDA7XG4gICAgICAgIGlkIHx8IChpZCA9IGFuaW1hdGlvbi52YXJzLmlkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgaWYgKCFfaXNPYmplY3Qoc25hcCkgfHwgc25hcC5wdXNoKSB7XG4gICAgICAgICAgc25hcCA9IHtcbiAgICAgICAgICAgIHNuYXBUbzogc25hcFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBcInNjcm9sbEJlaGF2aW9yXCIgaW4gX2JvZHkkMS5zdHlsZSAmJiBnc2FwJDEuc2V0KGlzVmlld3BvcnQgPyBbX2JvZHkkMSwgX2RvY0VsJDFdIDogc2Nyb2xsZXIsIHtcbiAgICAgICAgICBzY3JvbGxCZWhhdmlvcjogXCJhdXRvXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIF9pc0Z1bmN0aW9uKG8pICYmIG8udGFyZ2V0ID09PSAoaXNWaWV3cG9ydCA/IF9kb2MkMS5zY3JvbGxpbmdFbGVtZW50IHx8IF9kb2NFbCQxIDogc2Nyb2xsZXIpICYmIChvLnNtb290aCA9IGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc25hcEZ1bmMgPSBfaXNGdW5jdGlvbihzbmFwLnNuYXBUbykgPyBzbmFwLnNuYXBUbyA6IHNuYXAuc25hcFRvID09PSBcImxhYmVsc1wiID8gX2dldENsb3Nlc3RMYWJlbChhbmltYXRpb24pIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzRGlyZWN0aW9uYWxcIiA/IF9nZXRMYWJlbEF0RGlyZWN0aW9uKGFuaW1hdGlvbikgOiBzbmFwLmRpcmVjdGlvbmFsICE9PSBmYWxzZSA/IGZ1bmN0aW9uICh2YWx1ZSwgc3QpIHtcbiAgICAgICAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChzbmFwLnNuYXBUbykodmFsdWUsIF9nZXRUaW1lJDEoKSAtIGxhc3RSZWZyZXNoIDwgNTAwID8gMCA6IHN0LmRpcmVjdGlvbik7XG4gICAgICAgIH0gOiBnc2FwJDEudXRpbHMuc25hcChzbmFwLnNuYXBUbyk7XG4gICAgICAgIHNuYXBEdXJDbGFtcCA9IHNuYXAuZHVyYXRpb24gfHwge1xuICAgICAgICAgIG1pbjogMC4xLFxuICAgICAgICAgIG1heDogMlxuICAgICAgICB9O1xuICAgICAgICBzbmFwRHVyQ2xhbXAgPSBfaXNPYmplY3Qoc25hcER1ckNsYW1wKSA/IF9jbGFtcCQxKHNuYXBEdXJDbGFtcC5taW4sIHNuYXBEdXJDbGFtcC5tYXgpIDogX2NsYW1wJDEoc25hcER1ckNsYW1wLCBzbmFwRHVyQ2xhbXApO1xuICAgICAgICBzbmFwRGVsYXllZENhbGwgPSBnc2FwJDEuZGVsYXllZENhbGwoc25hcC5kZWxheSB8fCBzY3J1YlNtb290aCAvIDIgfHwgMC4xLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKSxcbiAgICAgICAgICAgICAgcmVmcmVzaGVkUmVjZW50bHkgPSBfZ2V0VGltZSQxKCkgLSBsYXN0UmVmcmVzaCA8IDUwMCxcbiAgICAgICAgICAgICAgdHdlZW4gPSB0d2VlblRvLnR3ZWVuO1xuXG4gICAgICAgICAgaWYgKChyZWZyZXNoZWRSZWNlbnRseSB8fCBNYXRoLmFicyhzZWxmLmdldFZlbG9jaXR5KCkpIDwgMTApICYmICF0d2VlbiAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNjcm9sbCkge1xuICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICAgICAgICB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBwcm9ncmVzcyxcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eSA9IHJlZnJlc2hlZFJlY2VudGx5ID8gMCA6ICh0b3RhbFByb2dyZXNzIC0gc25hcDIpIC8gKF9nZXRUaW1lJDEoKSAtIF90aW1lMikgKiAxMDAwIHx8IDAsXG4gICAgICAgICAgICAgICAgY2hhbmdlMSA9IGdzYXAkMS51dGlscy5jbGFtcCgtcHJvZ3Jlc3MsIDEgLSBwcm9ncmVzcywgX2Ficyh2ZWxvY2l0eSAvIDIpICogdmVsb2NpdHkgLyAwLjE4NSksXG4gICAgICAgICAgICAgICAgbmF0dXJhbEVuZCA9IHByb2dyZXNzICsgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UgPyAwIDogY2hhbmdlMSksXG4gICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBfY2xhbXAkMSgwLCAxLCBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKSksXG4gICAgICAgICAgICAgICAgZW5kU2Nyb2xsID0gTWF0aC5yb3VuZChzdGFydCArIGVuZFZhbHVlICogY2hhbmdlKSxcbiAgICAgICAgICAgICAgICBfc25hcCA9IHNuYXAsXG4gICAgICAgICAgICAgICAgb25TdGFydCA9IF9zbmFwLm9uU3RhcnQsXG4gICAgICAgICAgICAgICAgX29uSW50ZXJydXB0ID0gX3NuYXAub25JbnRlcnJ1cHQsXG4gICAgICAgICAgICAgICAgX29uQ29tcGxldGUgPSBfc25hcC5vbkNvbXBsZXRlO1xuXG4gICAgICAgICAgICBpZiAoc2Nyb2xsIDw9IGVuZCAmJiBzY3JvbGwgPj0gc3RhcnQgJiYgZW5kU2Nyb2xsICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgICAgaWYgKHR3ZWVuICYmICF0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5kYXRhIDw9IF9hYnMoZW5kU2Nyb2xsIC0gc2Nyb2xsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlMSA9IGVuZFZhbHVlIC0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0d2VlblRvKGVuZFNjcm9sbCwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzbmFwRHVyQ2xhbXAoX2FicyhNYXRoLm1heChfYWJzKG5hdHVyYWxFbmQgLSB0b3RhbFByb2dyZXNzKSwgX2FicyhlbmRWYWx1ZSAtIHRvdGFsUHJvZ3Jlc3MpKSAqIDAuMTg1IC8gdmVsb2NpdHkgLyAwLjA1IHx8IDApKSxcbiAgICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgICBkYXRhOiBfYWJzKGVuZFNjcm9sbCAtIHNjcm9sbCksXG4gICAgICAgICAgICAgICAgb25JbnRlcnJ1cHQ6IGZ1bmN0aW9uIG9uSW50ZXJydXB0KCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpICYmIF9vbkludGVycnVwdCAmJiBfb25JbnRlcnJ1cHQoc2VsZik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgIGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICAgICAgICAgICAgc25hcDEgPSBzbmFwMiA9IGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgPyBhbmltYXRpb24udG90YWxQcm9ncmVzcygpIDogc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgICAgICAgIG9uU25hcENvbXBsZXRlICYmIG9uU25hcENvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgX29uQ29tcGxldGUgJiYgX29uQ29tcGxldGUoc2VsZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCBzY3JvbGwsIGNoYW5nZTEgKiBjaGFuZ2UsIGVuZFNjcm9sbCAtIHNjcm9sbCAtIGNoYW5nZTEgKiBjaGFuZ2UpO1xuICAgICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoc2VsZiwgdHdlZW5Uby50d2Vlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWxmLmlzQWN0aXZlICYmIGxhc3RTbmFwICE9PSBzY3JvbGwpIHtcbiAgICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgaWQgJiYgKF9pZHNbaWRdID0gc2VsZik7XG4gICAgICB0cmlnZ2VyID0gc2VsZi50cmlnZ2VyID0gX2dldFRhcmdldCh0cmlnZ2VyIHx8IHBpbiAhPT0gdHJ1ZSAmJiBwaW4pO1xuICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuID0gdHJpZ2dlciAmJiB0cmlnZ2VyLl9nc2FwICYmIHRyaWdnZXIuX2dzYXAuc3RSZXZlcnQ7XG4gICAgICBjdXN0b21SZXZlcnRSZXR1cm4gJiYgKGN1c3RvbVJldmVydFJldHVybiA9IGN1c3RvbVJldmVydFJldHVybihzZWxmKSk7XG4gICAgICBwaW4gPSBwaW4gPT09IHRydWUgPyB0cmlnZ2VyIDogX2dldFRhcmdldChwaW4pO1xuICAgICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICAgIHRhcmdldHM6IHRyaWdnZXIsXG4gICAgICAgIGNsYXNzTmFtZTogdG9nZ2xlQ2xhc3NcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpblNwYWNpbmcgPT09IGZhbHNlIHx8IHBpblNwYWNpbmcgPT09IF9tYXJnaW4gfHwgKHBpblNwYWNpbmcgPSAhcGluU3BhY2luZyAmJiBwaW4ucGFyZW50Tm9kZSAmJiBwaW4ucGFyZW50Tm9kZS5zdHlsZSAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShwaW4ucGFyZW50Tm9kZSkuZGlzcGxheSA9PT0gXCJmbGV4XCIgPyBmYWxzZSA6IF9wYWRkaW5nKTtcbiAgICAgICAgc2VsZi5waW4gPSBwaW47XG4gICAgICAgIHBpbkNhY2hlID0gZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUocGluKTtcblxuICAgICAgICBpZiAoIXBpbkNhY2hlLnNwYWNlcikge1xuICAgICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICAgIHBpblNwYWNlciA9IF9nZXRUYXJnZXQocGluU3BhY2VyKTtcbiAgICAgICAgICAgIHBpblNwYWNlciAmJiAhcGluU3BhY2VyLm5vZGVUeXBlICYmIChwaW5TcGFjZXIgPSBwaW5TcGFjZXIuY3VycmVudCB8fCBwaW5TcGFjZXIubmF0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICBwaW5DYWNoZS5zcGFjZXJJc05hdGl2ZSA9ICEhcGluU3BhY2VyO1xuICAgICAgICAgICAgcGluU3BhY2VyICYmIChwaW5DYWNoZS5zcGFjZXJTdGF0ZSA9IF9nZXRTdGF0ZShwaW5TcGFjZXIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwaW5DYWNoZS5zcGFjZXIgPSBzcGFjZXIgPSBwaW5TcGFjZXIgfHwgX2RvYyQxLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICAgIGlkICYmIHNwYWNlci5jbGFzc0xpc3QuYWRkKFwicGluLXNwYWNlci1cIiArIGlkKTtcbiAgICAgICAgICBwaW5DYWNoZS5waW5TdGF0ZSA9IHBpbk9yaWdpbmFsU3RhdGUgPSBfZ2V0U3RhdGUocGluKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaW5PcmlnaW5hbFN0YXRlID0gcGluQ2FjaGUucGluU3RhdGU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAkMS5zZXQocGluLCB7XG4gICAgICAgICAgZm9yY2UzRDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgc2VsZi5zcGFjZXIgPSBzcGFjZXIgPSBwaW5DYWNoZS5zcGFjZXI7XG4gICAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgICAgc3BhY2luZ1N0YXJ0ID0gY3NbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdO1xuICAgICAgICBwaW5HZXR0ZXIgPSBnc2FwJDEuZ2V0UHJvcGVydHkocGluKTtcbiAgICAgICAgcGluU2V0dGVyID0gZ3NhcCQxLnF1aWNrU2V0dGVyKHBpbiwgZGlyZWN0aW9uLmEsIF9weCk7XG5cbiAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MpO1xuXG4gICAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXJrZXJzKSB7XG4gICAgICAgIG1hcmtlclZhcnMgPSBfaXNPYmplY3QobWFya2VycykgPyBfc2V0RGVmYXVsdHMobWFya2VycywgX21hcmtlckRlZmF1bHRzKSA6IF9tYXJrZXJEZWZhdWx0cztcbiAgICAgICAgbWFya2VyU3RhcnRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLXN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCAwKTtcbiAgICAgICAgbWFya2VyRW5kVHJpZ2dlciA9IF9jcmVhdGVNYXJrZXIoXCJzY3JvbGxlci1lbmRcIiwgaWQsIHNjcm9sbGVyLCBkaXJlY3Rpb24sIG1hcmtlclZhcnMsIDAsIG1hcmtlclN0YXJ0VHJpZ2dlcik7XG4gICAgICAgIG9mZnNldCA9IG1hcmtlclN0YXJ0VHJpZ2dlcltcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICAgICAgICB2YXIgY29udGVudCA9IF9nZXRUYXJnZXQoX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJjb250ZW50XCIpIHx8IHNjcm9sbGVyKTtcblxuICAgICAgICBtYXJrZXJTdGFydCA9IHRoaXMubWFya2VyU3RhcnQgPSBfY3JlYXRlTWFya2VyKFwic3RhcnRcIiwgaWQsIGNvbnRlbnQsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgb2Zmc2V0LCAwLCBjb250YWluZXJBbmltYXRpb24pO1xuICAgICAgICBtYXJrZXJFbmQgPSB0aGlzLm1hcmtlckVuZCA9IF9jcmVhdGVNYXJrZXIoXCJlbmRcIiwgaWQsIGNvbnRlbnQsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgb2Zmc2V0LCAwLCBjb250YWluZXJBbmltYXRpb24pO1xuICAgICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcCQxLnF1aWNrU2V0dGVyKFttYXJrZXJTdGFydCwgbWFya2VyRW5kXSwgZGlyZWN0aW9uLmEsIF9weCkpO1xuXG4gICAgICAgIGlmICghdXNlRml4ZWRQb3NpdGlvbiAmJiAhKF9wcm94aWVzLmxlbmd0aCAmJiBfZ2V0UHJveHlQcm9wKHNjcm9sbGVyLCBcImZpeGVkTWFya2Vyc1wiKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkkMSA6IHNjcm9sbGVyKTtcblxuICAgICAgICAgIGdzYXAkMS5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICAgIGZvcmNlM0Q6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAkMS5xdWlja1NldHRlcihtYXJrZXJTdGFydFRyaWdnZXIsIGRpcmVjdGlvbi5hLCBfcHgpO1xuICAgICAgICAgIG1hcmtlckVuZFNldHRlciA9IGdzYXAkMS5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBvbGRPblVwZGF0ZSA9IGNvbnRhaW5lckFuaW1hdGlvbi52YXJzLm9uVXBkYXRlLFxuICAgICAgICAgICAgb2xkUGFyYW1zID0gY29udGFpbmVyQW5pbWF0aW9uLnZhcnMub25VcGRhdGVQYXJhbXM7XG4gICAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNlbGYudXBkYXRlKDAsIDAsIDEpO1xuICAgICAgICAgIG9sZE9uVXBkYXRlICYmIG9sZE9uVXBkYXRlLmFwcGx5KGNvbnRhaW5lckFuaW1hdGlvbiwgb2xkUGFyYW1zIHx8IFtdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGYucHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgLSAxXTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90cmlnZ2Vyc1tfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSArIDFdO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAocmV2ZXJ0LCB0ZW1wKSB7XG4gICAgICAgIGlmICghdGVtcCkge1xuICAgICAgICAgIHJldHVybiBzZWxmLmtpbGwodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgciA9IHJldmVydCAhPT0gZmFsc2UgfHwgIXNlbGYuZW5hYmxlZCxcbiAgICAgICAgICAgIHByZXZSZWZyZXNoaW5nID0gX3JlZnJlc2hpbmc7XG5cbiAgICAgICAgaWYgKHIgIT09IHNlbGYuaXNSZXZlcnRlZCkge1xuICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICBwcmV2U2Nyb2xsID0gTWF0aC5tYXgoc2Nyb2xsRnVuYygpLCBzZWxmLnNjcm9sbC5yZWMgfHwgMCk7XG4gICAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXJrZXJTdGFydCAmJiBbbWFya2VyU3RhcnQsIG1hcmtlckVuZCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBtYXJrZXJFbmRUcmlnZ2VyXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIF9yZWZyZXNoaW5nID0gc2VsZjtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlKHIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwaW4gJiYgKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkpIHtcbiAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBwaW5PcmlnaW5hbFN0YXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIF9nZXRDb21wdXRlZFN0eWxlKHBpbiksIHNwYWNlclN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByIHx8IHNlbGYudXBkYXRlKHIpO1xuICAgICAgICAgIF9yZWZyZXNoaW5nID0gcHJldlJlZnJlc2hpbmc7XG4gICAgICAgICAgc2VsZi5pc1JldmVydGVkID0gcjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5yZWZyZXNoID0gZnVuY3Rpb24gKHNvZnQsIGZvcmNlLCBwb3NpdGlvbiwgcGluT2Zmc2V0KSB7XG4gICAgICAgIGlmICgoX3JlZnJlc2hpbmcgfHwgIXNlbGYuZW5hYmxlZCkgJiYgIWZvcmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBpbiAmJiBzb2Z0ICYmIF9sYXN0U2Nyb2xsVGltZSkge1xuICAgICAgICAgIF9hZGRMaXN0ZW5lciQxKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAhX3JlZnJlc2hpbmdBbGwgJiYgb25SZWZyZXNoSW5pdCAmJiBvblJlZnJlc2hJbml0KHNlbGYpO1xuICAgICAgICBfcmVmcmVzaGluZyA9IHNlbGY7XG5cbiAgICAgICAgaWYgKHR3ZWVuVG8udHdlZW4gJiYgIXBvc2l0aW9uKSB7XG4gICAgICAgICAgdHdlZW5Uby50d2Vlbi5raWxsKCk7XG4gICAgICAgICAgdHdlZW5Uby50d2VlbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgICAgaW52YWxpZGF0ZU9uUmVmcmVzaCAmJiBhbmltYXRpb24gJiYgYW5pbWF0aW9uLnJldmVydCh7XG4gICAgICAgICAga2lsbDogZmFsc2VcbiAgICAgICAgfSkuaW52YWxpZGF0ZSgpO1xuICAgICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHNlbGYuX3N1YlBpbk9mZnNldCA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzaXplID0gZ2V0U2Nyb2xsZXJTaXplKCksXG4gICAgICAgICAgICBzY3JvbGxlckJvdW5kcyA9IGdldFNjcm9sbGVyT2Zmc2V0cygpLFxuICAgICAgICAgICAgbWF4ID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgOiBfbWF4U2Nyb2xsKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICAgICAgaXNGaXJzdFJlZnJlc2ggPSBjaGFuZ2UgPD0gMC4wMSxcbiAgICAgICAgICAgIG9mZnNldCA9IDAsXG4gICAgICAgICAgICBvdGhlclBpbk9mZnNldCA9IHBpbk9mZnNldCB8fCAwLFxuICAgICAgICAgICAgcGFyc2VkRW5kID0gX2lzT2JqZWN0KHBvc2l0aW9uKSA/IHBvc2l0aW9uLmVuZCA6IHZhcnMuZW5kLFxuICAgICAgICAgICAgcGFyc2VkRW5kVHJpZ2dlciA9IHZhcnMuZW5kVHJpZ2dlciB8fCB0cmlnZ2VyLFxuICAgICAgICAgICAgcGFyc2VkU3RhcnQgPSBfaXNPYmplY3QocG9zaXRpb24pID8gcG9zaXRpb24uc3RhcnQgOiB2YXJzLnN0YXJ0IHx8ICh2YXJzLnN0YXJ0ID09PSAwIHx8ICF0cmlnZ2VyID8gMCA6IHBpbiA/IFwiMCAwXCIgOiBcIjAgMTAwJVwiKSxcbiAgICAgICAgICAgIHBpbm5lZENvbnRhaW5lciA9IHNlbGYucGlubmVkQ29udGFpbmVyID0gdmFycy5waW5uZWRDb250YWluZXIgJiYgX2dldFRhcmdldCh2YXJzLnBpbm5lZENvbnRhaW5lciwgc2VsZiksXG4gICAgICAgICAgICB0cmlnZ2VySW5kZXggPSB0cmlnZ2VyICYmIE1hdGgubWF4KDAsIF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpKSB8fCAwLFxuICAgICAgICAgICAgaSA9IHRyaWdnZXJJbmRleCxcbiAgICAgICAgICAgIGNzLFxuICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgICAgaXNWZXJ0aWNhbCxcbiAgICAgICAgICAgIG92ZXJyaWRlLFxuICAgICAgICAgICAgY3VyVHJpZ2dlcixcbiAgICAgICAgICAgIGN1clBpbixcbiAgICAgICAgICAgIG9wcG9zaXRlU2Nyb2xsLFxuICAgICAgICAgICAgaW5pdHRlZCxcbiAgICAgICAgICAgIHJldmVydGVkUGlucyxcbiAgICAgICAgICAgIGZvcmNlZE92ZXJmbG93LFxuICAgICAgICAgICAgbWFya2VyU3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBtYXJrZXJFbmRPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1hcmtlcnMgJiYgX2lzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgIG1hcmtlclN0YXJ0T2Zmc2V0ID0gZ3NhcCQxLmdldFByb3BlcnR5KG1hcmtlclN0YXJ0VHJpZ2dlciwgZGlyZWN0aW9uLnApO1xuICAgICAgICAgIG1hcmtlckVuZE9mZnNldCA9IGdzYXAkMS5nZXRQcm9wZXJ0eShtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgY3VyVHJpZ2dlciA9IF90cmlnZ2Vyc1tpXTtcbiAgICAgICAgICBjdXJUcmlnZ2VyLmVuZCB8fCBjdXJUcmlnZ2VyLnJlZnJlc2goMCwgMSkgfHwgKF9yZWZyZXNoaW5nID0gc2VsZik7XG4gICAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgICBpZiAoY3VyUGluICYmIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW4gfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmICFjdXJUcmlnZ2VyLmlzUmV2ZXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldmVydGVkUGlucyB8fCAocmV2ZXJ0ZWRQaW5zID0gW10pO1xuICAgICAgICAgICAgcmV2ZXJ0ZWRQaW5zLnVuc2hpZnQoY3VyVHJpZ2dlcik7XG4gICAgICAgICAgICBjdXJUcmlnZ2VyLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyVHJpZ2dlciAhPT0gX3RyaWdnZXJzW2ldKSB7XG4gICAgICAgICAgICB0cmlnZ2VySW5kZXgtLTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfaXNGdW5jdGlvbihwYXJzZWRTdGFydCkgJiYgKHBhcnNlZFN0YXJ0ID0gcGFyc2VkU3RhcnQoc2VsZikpO1xuICAgICAgICBwYXJzZWRTdGFydCA9IF9wYXJzZUNsYW1wKHBhcnNlZFN0YXJ0LCBcInN0YXJ0XCIsIHNlbGYpO1xuICAgICAgICBzdGFydCA9IF9wYXJzZVBvc2l0aW9uKHBhcnNlZFN0YXJ0LCB0cmlnZ2VyLCBzaXplLCBkaXJlY3Rpb24sIHNjcm9sbEZ1bmMoKSwgbWFya2VyU3RhcnQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgc2VsZiwgc2Nyb2xsZXJCb3VuZHMsIGJvcmRlcldpZHRoLCB1c2VGaXhlZFBvc2l0aW9uLCBtYXgsIGNvbnRhaW5lckFuaW1hdGlvbiwgc2VsZi5fc3RhcnRDbGFtcCAmJiBcIl9zdGFydENsYW1wXCIpIHx8IChwaW4gPyAtMC4wMDEgOiAwKTtcbiAgICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkRW5kKSAmJiAocGFyc2VkRW5kID0gcGFyc2VkRW5kKHNlbGYpKTtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHBhcnNlZEVuZCkgJiYgIXBhcnNlZEVuZC5pbmRleE9mKFwiKz1cIikpIHtcbiAgICAgICAgICBpZiAofnBhcnNlZEVuZC5pbmRleE9mKFwiIFwiKSkge1xuICAgICAgICAgICAgcGFyc2VkRW5kID0gKF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydC5zcGxpdChcIiBcIilbMF0gOiBcIlwiKSArIHBhcnNlZEVuZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gX29mZnNldFRvUHgocGFyc2VkRW5kLnN1YnN0cigyKSwgc2l6ZSk7XG4gICAgICAgICAgICBwYXJzZWRFbmQgPSBfaXNTdHJpbmcocGFyc2VkU3RhcnQpID8gcGFyc2VkU3RhcnQgOiAoY29udGFpbmVyQW5pbWF0aW9uID8gZ3NhcCQxLnV0aWxzLm1hcFJhbmdlKDAsIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpLCBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5zdGFydCwgY29udGFpbmVyQW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIuZW5kLCBzdGFydCkgOiBzdGFydCkgKyBvZmZzZXQ7XG4gICAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRFbmQgPSBfcGFyc2VDbGFtcChwYXJzZWRFbmQsIFwiZW5kXCIsIHNlbGYpO1xuICAgICAgICBlbmQgPSBNYXRoLm1heChzdGFydCwgX3BhcnNlUG9zaXRpb24ocGFyc2VkRW5kIHx8IChwYXJzZWRFbmRUcmlnZ2VyID8gXCIxMDAlIDBcIiA6IG1heCksIHBhcnNlZEVuZFRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpICsgb2Zmc2V0LCBtYXJrZXJFbmQsIG1hcmtlckVuZFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24sIHNlbGYuX2VuZENsYW1wICYmIFwiX2VuZENsYW1wXCIpKSB8fCAtMC4wMDE7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIGkgPSB0cmlnZ2VySW5kZXg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIGN1clRyaWdnZXIgPSBfdHJpZ2dlcnNbaV07XG4gICAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgICBpZiAoY3VyUGluICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDw9IHN0YXJ0ICYmICFjb250YWluZXJBbmltYXRpb24gJiYgY3VyVHJpZ2dlci5lbmQgPiAwKSB7XG4gICAgICAgICAgICBjcyA9IGN1clRyaWdnZXIuZW5kIC0gKHNlbGYuX3N0YXJ0Q2xhbXAgPyBNYXRoLm1heCgwLCBjdXJUcmlnZ2VyLnN0YXJ0KSA6IGN1clRyaWdnZXIuc3RhcnQpO1xuXG4gICAgICAgICAgICBpZiAoKGN1clBpbiA9PT0gdHJpZ2dlciAmJiBjdXJUcmlnZ2VyLnN0YXJ0IC0gY3VyVHJpZ2dlci5fcGluUHVzaCA8IHN0YXJ0IHx8IGN1clBpbiA9PT0gcGlubmVkQ29udGFpbmVyKSAmJiBpc05hTihwYXJzZWRTdGFydCkpIHtcbiAgICAgICAgICAgICAgb2Zmc2V0ICs9IGNzICogKDEgLSBjdXJUcmlnZ2VyLnByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VyUGluID09PSBwaW4gJiYgKG90aGVyUGluT2Zmc2V0ICs9IGNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCArPSBvZmZzZXQ7XG4gICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIHNlbGYuX3N0YXJ0Q2xhbXAgJiYgKHNlbGYuX3N0YXJ0Q2xhbXAgKz0gb2Zmc2V0KTtcblxuICAgICAgICBpZiAoc2VsZi5fZW5kQ2xhbXAgJiYgIV9yZWZyZXNoaW5nQWxsKSB7XG4gICAgICAgICAgc2VsZi5fZW5kQ2xhbXAgPSBlbmQgfHwgLTAuMDAxO1xuICAgICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFuZ2UgPSBlbmQgLSBzdGFydCB8fCAoc3RhcnQgLT0gMC4wMSkgJiYgMC4wMDE7XG5cbiAgICAgICAgaWYgKGlzRmlyc3RSZWZyZXNoKSB7XG4gICAgICAgICAgcHJldlByb2dyZXNzID0gZ3NhcCQxLnV0aWxzLmNsYW1wKDAsIDEsIGdzYXAkMS51dGlscy5ub3JtYWxpemUoc3RhcnQsIGVuZCwgcHJldlNjcm9sbCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5fcGluUHVzaCA9IG90aGVyUGluT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtYXJrZXJTdGFydCAmJiBvZmZzZXQpIHtcbiAgICAgICAgICBjcyA9IHt9O1xuICAgICAgICAgIGNzW2RpcmVjdGlvbi5hXSA9IFwiKz1cIiArIG9mZnNldDtcbiAgICAgICAgICBwaW5uZWRDb250YWluZXIgJiYgKGNzW2RpcmVjdGlvbi5wXSA9IFwiLT1cIiArIHNjcm9sbEZ1bmMoKSk7XG4gICAgICAgICAgZ3NhcCQxLnNldChbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKHBpbik7XG4gICAgICAgICAgaXNWZXJ0aWNhbCA9IGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsO1xuICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgICBwaW5TdGFydCA9IHBhcnNlRmxvYXQocGluR2V0dGVyKGRpcmVjdGlvbi5hKSkgKyBvdGhlclBpbk9mZnNldDtcblxuICAgICAgICAgIGlmICghbWF4ICYmIGVuZCA+IDEpIHtcbiAgICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0gKGlzVmlld3BvcnQgPyBfZG9jJDEuc2Nyb2xsaW5nRWxlbWVudCB8fCBfZG9jRWwkMSA6IHNjcm9sbGVyKS5zdHlsZTtcbiAgICAgICAgICAgIGZvcmNlZE92ZXJmbG93ID0ge1xuICAgICAgICAgICAgICBzdHlsZTogZm9yY2VkT3ZlcmZsb3csXG4gICAgICAgICAgICAgIHZhbHVlOiBmb3JjZWRPdmVyZmxvd1tcIm92ZXJmbG93XCIgKyBkaXJlY3Rpb24uYS50b1VwcGVyQ2FzZSgpXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGlzVmlld3BvcnQgJiYgX2dldENvbXB1dGVkU3R5bGUoX2JvZHkkMSlbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gIT09IFwic2Nyb2xsXCIpIHtcbiAgICAgICAgICAgICAgZm9yY2VkT3ZlcmZsb3cuc3R5bGVbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gPSBcInNjcm9sbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zd2FwUGluSW4ocGluLCBzcGFjZXIsIGNzKTtcblxuICAgICAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgICAgICAgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpO1xuICAgICAgICAgIG9wcG9zaXRlU2Nyb2xsID0gdXNlRml4ZWRQb3NpdGlvbiAmJiBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgaXNWZXJ0aWNhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKSgpO1xuXG4gICAgICAgICAgaWYgKHBpblNwYWNpbmcpIHtcbiAgICAgICAgICAgIHNwYWNlclN0YXRlID0gW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyLCBjaGFuZ2UgKyBvdGhlclBpbk9mZnNldCArIF9weF07XG4gICAgICAgICAgICBzcGFjZXJTdGF0ZS50ID0gc3BhY2VyO1xuICAgICAgICAgICAgaSA9IHBpblNwYWNpbmcgPT09IF9wYWRkaW5nID8gX2dldFNpemUocGluLCBkaXJlY3Rpb24pICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQgOiAwO1xuICAgICAgICAgICAgaSAmJiBzcGFjZXJTdGF0ZS5wdXNoKGRpcmVjdGlvbi5kLCBpICsgX3B4KTtcblxuICAgICAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgICAgICAgICAgaWYgKHBpbm5lZENvbnRhaW5lcikge1xuICAgICAgICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIGlmICh0LnBpbiA9PT0gcGlubmVkQ29udGFpbmVyICYmIHQudmFycy5waW5TcGFjaW5nICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgdC5fc3ViUGluT2Zmc2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIHNjcm9sbEZ1bmMocHJldlNjcm9sbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIG92ZXJyaWRlID0ge1xuICAgICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AgKyAoaXNWZXJ0aWNhbCA/IHNjcm9sbCAtIHN0YXJ0IDogb3Bwb3NpdGVTY3JvbGwpICsgX3B4LFxuICAgICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdCArIChpc1ZlcnRpY2FsID8gb3Bwb3NpdGVTY3JvbGwgOiBzY3JvbGwgLSBzdGFydCkgKyBfcHgsXG4gICAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvdmVycmlkZVtfd2lkdGhdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9XaWR0aF0gPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoKSArIF9weDtcbiAgICAgICAgICAgIG92ZXJyaWRlW19oZWlnaHRdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9IZWlnaHRdID0gTWF0aC5jZWlsKGJvdW5kcy5oZWlnaHQpICsgX3B4O1xuICAgICAgICAgICAgb3ZlcnJpZGVbX21hcmdpbl0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1RvcF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX1JpZ2h0XSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfQm90dG9tXSA9IG92ZXJyaWRlW19tYXJnaW4gKyBfTGVmdF0gPSBcIjBcIjtcbiAgICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nXSA9IGNzW19wYWRkaW5nXTtcbiAgICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1RvcF0gPSBjc1tfcGFkZGluZyArIF9Ub3BdO1xuICAgICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfUmlnaHRdID0gY3NbX3BhZGRpbmcgKyBfUmlnaHRdO1xuICAgICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmcgKyBfQm90dG9tXSA9IGNzW19wYWRkaW5nICsgX0JvdHRvbV07XG4gICAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9MZWZ0XSA9IGNzW19wYWRkaW5nICsgX0xlZnRdO1xuICAgICAgICAgICAgcGluQWN0aXZlU3RhdGUgPSBfY29weVN0YXRlKHBpbk9yaWdpbmFsU3RhdGUsIG92ZXJyaWRlLCBwaW5SZXBhcmVudCk7XG4gICAgICAgICAgICBfcmVmcmVzaGluZ0FsbCAmJiBzY3JvbGxGdW5jKDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7XG5cbiAgICAgICAgICAgIF9zdXBwcmVzc092ZXJ3cml0ZXMoMSk7XG5cbiAgICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoYW5pbWF0aW9uLmR1cmF0aW9uKCksIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgICBwaW5Nb3ZlcyA9IE1hdGguYWJzKGNoYW5nZSAtIHBpbkNoYW5nZSkgPiAxO1xuICAgICAgICAgICAgdXNlRml4ZWRQb3NpdGlvbiAmJiBwaW5Nb3ZlcyAmJiBwaW5BY3RpdmVTdGF0ZS5zcGxpY2UocGluQWN0aXZlU3RhdGUubGVuZ3RoIC0gMiwgMik7XG4gICAgICAgICAgICBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgaW5pdHRlZCB8fCBhbmltYXRpb24uaW52YWxpZGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wYXJlbnQgfHwgYW5pbWF0aW9uLnRvdGFsVGltZShhbmltYXRpb24udG90YWxUaW1lKCkpO1xuXG4gICAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwaW5DaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yY2VkT3ZlcmZsb3cgJiYgKGZvcmNlZE92ZXJmbG93LnZhbHVlID8gZm9yY2VkT3ZlcmZsb3cuc3R5bGVbXCJvdmVyZmxvd1wiICsgZGlyZWN0aW9uLmEudG9VcHBlckNhc2UoKV0gPSBmb3JjZWRPdmVyZmxvdy52YWx1ZSA6IGZvcmNlZE92ZXJmbG93LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwib3ZlcmZsb3ctXCIgKyBkaXJlY3Rpb24uYSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgJiYgc2Nyb2xsRnVuYygpICYmICFjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgICBib3VuZHMgPSB0cmlnZ2VyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICB3aGlsZSAoYm91bmRzICYmIGJvdW5kcyAhPT0gX2JvZHkkMSkge1xuICAgICAgICAgICAgaWYgKGJvdW5kcy5fcGluT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIHN0YXJ0IC09IGJvdW5kcy5fcGluT2Zmc2V0O1xuICAgICAgICAgICAgICBlbmQgLT0gYm91bmRzLl9waW5PZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvdW5kcyA9IGJvdW5kcy5wYXJlbnROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldmVydGVkUGlucyAmJiByZXZlcnRlZFBpbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWxmLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHNlbGYuZW5kID0gZW5kO1xuICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IF9yZWZyZXNoaW5nQWxsID8gcHJldlNjcm9sbCA6IHNjcm9sbEZ1bmMoKTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lckFuaW1hdGlvbiAmJiAhX3JlZnJlc2hpbmdBbGwpIHtcbiAgICAgICAgICBzY3JvbGwxIDwgcHJldlNjcm9sbCAmJiBzY3JvbGxGdW5jKHByZXZTY3JvbGwpO1xuICAgICAgICAgIHNlbGYuc2Nyb2xsLnJlYyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnJldmVydChmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIGxhc3RSZWZyZXNoID0gX2dldFRpbWUkMSgpO1xuXG4gICAgICAgIGlmIChzbmFwRGVsYXllZENhbGwpIHtcbiAgICAgICAgICBsYXN0U25hcCA9IC0xO1xuICAgICAgICAgIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSAwO1xuICAgICAgICBhbmltYXRpb24gJiYgaXNUb2dnbGUgJiYgKGFuaW1hdGlvbi5faW5pdHRlZCB8fCBwcmV2QW5pbVByb2dyZXNzKSAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKSAhPT0gcHJldkFuaW1Qcm9ncmVzcyAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocHJldkFuaW1Qcm9ncmVzcyB8fCAwLCB0cnVlKS5yZW5kZXIoYW5pbWF0aW9uLnRpbWUoKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGlzRmlyc3RSZWZyZXNoIHx8IHByZXZQcm9ncmVzcyAhPT0gc2VsZi5wcm9ncmVzcyB8fCBjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgICBhbmltYXRpb24gJiYgIWlzVG9nZ2xlICYmIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBzdGFydCA8IC0wLjAwMSAmJiAhcHJldlByb2dyZXNzID8gZ3NhcCQxLnV0aWxzLm5vcm1hbGl6ZShzdGFydCwgZW5kLCAwKSA6IHByZXZQcm9ncmVzcywgdHJ1ZSk7XG4gICAgICAgICAgc2VsZi5wcm9ncmVzcyA9IGlzRmlyc3RSZWZyZXNoIHx8IChzY3JvbGwxIC0gc3RhcnQpIC8gY2hhbmdlID09PSBwcmV2UHJvZ3Jlc3MgPyAwIDogcHJldlByb2dyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluICYmIHBpblNwYWNpbmcgJiYgKHNwYWNlci5fcGluT2Zmc2V0ID0gTWF0aC5yb3VuZChzZWxmLnByb2dyZXNzICogcGluQ2hhbmdlKSk7XG4gICAgICAgIHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgaWYgKCFpc05hTihtYXJrZXJTdGFydE9mZnNldCkpIHtcbiAgICAgICAgICBtYXJrZXJTdGFydE9mZnNldCAtPSBnc2FwJDEuZ2V0UHJvcGVydHkobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG4gICAgICAgICAgbWFya2VyRW5kT2Zmc2V0IC09IGdzYXAkMS5nZXRQcm9wZXJ0eShtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24ucCk7XG5cbiAgICAgICAgICBfc2hpZnRNYXJrZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24sIG1hcmtlclN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJTdGFydCwgZGlyZWN0aW9uLCBtYXJrZXJTdGFydE9mZnNldCAtIChwaW5PZmZzZXQgfHwgMCkpO1xuXG4gICAgICAgICAgX3NoaWZ0TWFya2VyKG1hcmtlckVuZFRyaWdnZXIsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0KTtcblxuICAgICAgICAgIF9zaGlmdE1hcmtlcihtYXJrZXJFbmQsIGRpcmVjdGlvbiwgbWFya2VyRW5kT2Zmc2V0IC0gKHBpbk9mZnNldCB8fCAwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0ZpcnN0UmVmcmVzaCAmJiAhX3JlZnJlc2hpbmdBbGwgJiYgc2VsZi51cGRhdGUoKTtcblxuICAgICAgICBpZiAob25SZWZyZXNoICYmICFfcmVmcmVzaGluZ0FsbCAmJiAhZXhlY3V0aW5nT25SZWZyZXNoKSB7XG4gICAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgICBvblJlZnJlc2goc2VsZik7XG4gICAgICAgICAgZXhlY3V0aW5nT25SZWZyZXNoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc2Nyb2xsRnVuYygpIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUkMSgpIC0gX3RpbWUyKSAqIDEwMDAgfHwgMDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6ICFhbmltYXRpb24ucGF1c2VkKCkgPyBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLnJldmVyc2VkKCkpIDogaXNUb2dnbGUgfHwgX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHNlbGYuZGlyZWN0aW9uIDwgMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYubGFiZWxUb1Njcm9sbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5sYWJlbHMgJiYgKHN0YXJ0IHx8IHNlbGYucmVmcmVzaCgpIHx8IHN0YXJ0KSArIGFuaW1hdGlvbi5sYWJlbHNbbGFiZWxdIC8gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKiBjaGFuZ2UgfHwgMDtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZ2V0VHJhaWxpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpLFxuICAgICAgICAgICAgYSA9IHNlbGYuZGlyZWN0aW9uID4gMCA/IF90cmlnZ2Vycy5zbGljZSgwLCBpKS5yZXZlcnNlKCkgOiBfdHJpZ2dlcnMuc2xpY2UoaSArIDEpO1xuXG4gICAgICAgIHJldHVybiAoX2lzU3RyaW5nKG5hbWUpID8gYS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gdC52YXJzLnByZXZlbnRPdmVybGFwcyA9PT0gbmFtZTtcbiAgICAgICAgfSkgOiBhKS5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5kaXJlY3Rpb24gPiAwID8gdC5lbmQgPD0gc3RhcnQgOiB0LnN0YXJ0ID49IGVuZDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uIChyZXNldCwgcmVjb3JkVmVsb2NpdHksIGZvcmNlRmFrZSkge1xuICAgICAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uICYmICFmb3JjZUZha2UgJiYgIXJlc2V0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjcm9sbCA9IF9yZWZyZXNoaW5nQWxsID09PSB0cnVlID8gcHJldlNjcm9sbCA6IHNlbGYuc2Nyb2xsKCksXG4gICAgICAgICAgICBwID0gcmVzZXQgPyAwIDogKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICAgIGNsaXBwZWQgPSBwIDwgMCA/IDAgOiBwID4gMSA/IDEgOiBwIHx8IDAsXG4gICAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBzZWxmLnByb2dyZXNzLFxuICAgICAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgICAgICB3YXNBY3RpdmUsXG4gICAgICAgICAgICB0b2dnbGVTdGF0ZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCxcbiAgICAgICAgICAgIHRvZ2dsZWQsXG4gICAgICAgICAgICBpc0F0TWF4LFxuICAgICAgICAgICAgaXNUYWtpbmdBY3Rpb247XG5cbiAgICAgICAgaWYgKHJlY29yZFZlbG9jaXR5KSB7XG4gICAgICAgICAgc2Nyb2xsMiA9IHNjcm9sbDE7XG4gICAgICAgICAgc2Nyb2xsMSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IHNjcm9sbEZ1bmMoKSA6IHNjcm9sbDtcblxuICAgICAgICAgIGlmIChzbmFwKSB7XG4gICAgICAgICAgICBzbmFwMiA9IHNuYXAxO1xuICAgICAgICAgICAgc25hcDEgPSBhbmltYXRpb24gJiYgIWlzVG9nZ2xlID8gYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MoKSA6IGNsaXBwZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYW50aWNpcGF0ZVBpbiAmJiAhY2xpcHBlZCAmJiBwaW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCQxICYmIF9sYXN0U2Nyb2xsVGltZSAmJiBzdGFydCA8IHNjcm9sbCArIChzY3JvbGwgLSBzY3JvbGwyKSAvIChfZ2V0VGltZSQxKCkgLSBfdGltZTIpICogYW50aWNpcGF0ZVBpbiAmJiAoY2xpcHBlZCA9IDAuMDAwMSk7XG5cbiAgICAgICAgaWYgKGNsaXBwZWQgIT09IHByZXZQcm9ncmVzcyAmJiBzZWxmLmVuYWJsZWQpIHtcbiAgICAgICAgICBpc0FjdGl2ZSA9IHNlbGYuaXNBY3RpdmUgPSAhIWNsaXBwZWQgJiYgY2xpcHBlZCA8IDE7XG4gICAgICAgICAgd2FzQWN0aXZlID0gISFwcmV2UHJvZ3Jlc3MgJiYgcHJldlByb2dyZXNzIDwgMTtcbiAgICAgICAgICB0b2dnbGVkID0gaXNBY3RpdmUgIT09IHdhc0FjdGl2ZTtcbiAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0b2dnbGVkIHx8ICEhY2xpcHBlZCAhPT0gISFwcmV2UHJvZ3Jlc3M7XG4gICAgICAgICAgc2VsZi5kaXJlY3Rpb24gPSBjbGlwcGVkID4gcHJldlByb2dyZXNzID8gMSA6IC0xO1xuICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBjbGlwcGVkO1xuXG4gICAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCAmJiAhcHJldlByb2dyZXNzID8gMCA6IGNsaXBwZWQgPT09IDEgPyAxIDogcHJldlByb2dyZXNzID09PSAxID8gMiA6IDM7XG5cbiAgICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgICBhY3Rpb24gPSAhdG9nZ2xlZCAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gIT09IFwibm9uZVwiICYmIHRvZ2dsZUFjdGlvbnNbdG9nZ2xlU3RhdGUgKyAxXSB8fCB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlXTtcbiAgICAgICAgICAgICAgaXNUYWtpbmdBY3Rpb24gPSBhbmltYXRpb24gJiYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiIHx8IGFjdGlvbiA9PT0gXCJyZXNldFwiIHx8IGFjdGlvbiBpbiBhbmltYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHByZXZlbnRPdmVybGFwcyAmJiAodG9nZ2xlZCB8fCBpc1Rha2luZ0FjdGlvbikgJiYgKGlzVGFraW5nQWN0aW9uIHx8IHNjcnViIHx8ICFhbmltYXRpb24pICYmIChfaXNGdW5jdGlvbihwcmV2ZW50T3ZlcmxhcHMpID8gcHJldmVudE92ZXJsYXBzKHNlbGYpIDogc2VsZi5nZXRUcmFpbGluZyhwcmV2ZW50T3ZlcmxhcHMpLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0LmVuZEFuaW1hdGlvbigpO1xuICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGlmICghaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGlmIChzY3J1YlR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAkMSkge1xuICAgICAgICAgICAgICBzY3J1YlR3ZWVuLl9kcC5fdGltZSAtIHNjcnViVHdlZW4uX3N0YXJ0ICE9PSBzY3J1YlR3ZWVuLl90aW1lICYmIHNjcnViVHdlZW4ucmVuZGVyKHNjcnViVHdlZW4uX2RwLl90aW1lIC0gc2NydWJUd2Vlbi5fc3RhcnQpO1xuXG4gICAgICAgICAgICAgIGlmIChzY3J1YlR3ZWVuLnJlc2V0VG8pIHtcbiAgICAgICAgICAgICAgICBzY3J1YlR3ZWVuLnJlc2V0VG8oXCJ0b3RhbFByb2dyZXNzXCIsIGNsaXBwZWQsIGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjcnViVHdlZW4udmFycy50b3RhbFByb2dyZXNzID0gY2xpcHBlZDtcbiAgICAgICAgICAgICAgICBzY3J1YlR3ZWVuLmludmFsaWRhdGUoKS5yZXN0YXJ0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKGNsaXBwZWQsICEhKF9yZWZyZXNoaW5nICYmIChsYXN0UmVmcmVzaCB8fCByZXNldCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgICByZXNldCAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuc3R5bGVbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczJdID0gc3BhY2luZ1N0YXJ0KTtcblxuICAgICAgICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIHBpblNldHRlcihfcm91bmQocGluU3RhcnQgKyBwaW5DaGFuZ2UgKiBjbGlwcGVkKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBpc0F0TWF4ID0gIXJlc2V0ICYmIGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgJiYgZW5kICsgMSA+IHNjcm9sbCAmJiBzY3JvbGwgKyAxID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgaWYgKHBpblJlcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNldCAmJiAoaXNBY3RpdmUgfHwgaXNBdE1heCkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgX29mZnNldCA9IHNjcm9sbCAtIHN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBfYm9keSQxLCBib3VuZHMudG9wICsgKGRpcmVjdGlvbiA9PT0gX3ZlcnRpY2FsID8gX29mZnNldCA6IDApICsgX3B4LCBib3VuZHMubGVmdCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IDAgOiBfb2Zmc2V0KSArIF9weCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIHNwYWNlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX3NldFN0YXRlKGlzQWN0aXZlIHx8IGlzQXRNYXggPyBwaW5BY3RpdmVTdGF0ZSA6IHBpblN0YXRlKTtcblxuICAgICAgICAgICAgICBwaW5Nb3ZlcyAmJiBjbGlwcGVkIDwgMSAmJiBpc0FjdGl2ZSB8fCBwaW5TZXR0ZXIocGluU3RhcnQgKyAoY2xpcHBlZCA9PT0gMSAmJiAhaXNBdE1heCA/IHBpbkNoYW5nZSA6IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzbmFwICYmICF0d2VlblRvLnR3ZWVuICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAkMSAmJiBzbmFwRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgICAgICB0b2dnbGVDbGFzcyAmJiAodG9nZ2xlZCB8fCBvbmNlICYmIGNsaXBwZWQgJiYgKGNsaXBwZWQgPCAxIHx8ICFfbGltaXRDYWxsYmFja3MpKSAmJiBfdG9BcnJheSh0b2dnbGVDbGFzcy50YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFtpc0FjdGl2ZSB8fCBvbmNlID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKHRvZ2dsZUNsYXNzLmNsYXNzTmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb25VcGRhdGUgJiYgIWlzVG9nZ2xlICYmICFyZXNldCAmJiBvblVwZGF0ZShzZWxmKTtcblxuICAgICAgICAgIGlmIChzdGF0ZUNoYW5nZWQgJiYgIV9yZWZyZXNoaW5nKSB7XG4gICAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVGFraW5nQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb24ucGF1c2UoKS50b3RhbFByb2dyZXNzKDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXN0YXJ0KHRydWUpLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVzdGFydCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uW2FjdGlvbl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvblVwZGF0ZSAmJiBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvZ2dsZWQgfHwgIV9saW1pdENhbGxiYWNrcykge1xuICAgICAgICAgICAgICBvblRvZ2dsZSAmJiB0b2dnbGVkICYmIF9jYWxsYmFjayhzZWxmLCBvblRvZ2dsZSk7XG4gICAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgICBvbmNlICYmIChjbGlwcGVkID09PSAxID8gc2VsZi5raWxsKGZhbHNlLCAxKSA6IGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gPSAwKTtcblxuICAgICAgICAgICAgICBpZiAoIXRvZ2dsZWQpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgPT09IDEgPyAxIDogMztcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdICYmIF9jYWxsYmFjayhzZWxmLCBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmFzdFNjcm9sbEVuZCAmJiAhaXNBY3RpdmUgJiYgTWF0aC5hYnMoc2VsZi5nZXRWZWxvY2l0eSgpKSA+IChfaXNOdW1iZXIoZmFzdFNjcm9sbEVuZCkgPyBmYXN0U2Nyb2xsRW5kIDogMjUwMCkpIHtcbiAgICAgICAgICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCBhY3Rpb24gPT09IFwicmV2ZXJzZVwiID8gMSA6ICFjbGlwcGVkLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzVG9nZ2xlICYmIG9uVXBkYXRlICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgICAgb25VcGRhdGUoc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hcmtlckVuZFNldHRlcikge1xuICAgICAgICAgIHZhciBuID0gY29udGFpbmVyQW5pbWF0aW9uID8gc2Nyb2xsIC8gY29udGFpbmVyQW5pbWF0aW9uLmR1cmF0aW9uKCkgKiAoY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgfHwgMCkgOiBzY3JvbGw7XG4gICAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIobiArIChtYXJrZXJTdGFydFRyaWdnZXIuX2lzRmxpcHBlZCA/IDEgOiAwKSk7XG4gICAgICAgICAgbWFya2VyRW5kU2V0dGVyKG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FNYXJrZXJTZXR0ZXIgJiYgY2FNYXJrZXJTZXR0ZXIoLXNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZW5hYmxlID0gZnVuY3Rpb24gKHJlc2V0LCByZWZyZXNoKSB7XG4gICAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgICAgc2VsZi5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lciQxKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgICAgaXNWaWV3cG9ydCB8fCBfYWRkTGlzdGVuZXIkMShzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsJDEpO1xuICAgICAgICAgIG9uUmVmcmVzaEluaXQgJiYgX2FkZExpc3RlbmVyJDEoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICAgIGlmIChyZXNldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNlbGYucHJvZ3Jlc3MgPSBwcmV2UHJvZ3Jlc3MgPSAwO1xuICAgICAgICAgICAgc2Nyb2xsMSA9IHNjcm9sbDIgPSBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZWZyZXNoICE9PSBmYWxzZSAmJiBzZWxmLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5nZXRUd2VlbiA9IGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICAgIHJldHVybiBzbmFwICYmIHR3ZWVuVG8gPyB0d2VlblRvLnR3ZWVuIDogc2NydWJUd2VlbjtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0UG9zaXRpb25zID0gZnVuY3Rpb24gKG5ld1N0YXJ0LCBuZXdFbmQsIGtlZXBDbGFtcCwgcGluT2Zmc2V0KSB7XG4gICAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgICB2YXIgc3QgPSBjb250YWluZXJBbmltYXRpb24uc2Nyb2xsVHJpZ2dlcixcbiAgICAgICAgICAgICAgZHVyYXRpb24gPSBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSxcbiAgICAgICAgICAgICAgX2NoYW5nZSA9IHN0LmVuZCAtIHN0LnN0YXJ0O1xuXG4gICAgICAgICAgbmV3U3RhcnQgPSBzdC5zdGFydCArIF9jaGFuZ2UgKiBuZXdTdGFydCAvIGR1cmF0aW9uO1xuICAgICAgICAgIG5ld0VuZCA9IHN0LnN0YXJ0ICsgX2NoYW5nZSAqIG5ld0VuZCAvIGR1cmF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5yZWZyZXNoKGZhbHNlLCBmYWxzZSwge1xuICAgICAgICAgIHN0YXJ0OiBfa2VlcENsYW1wKG5ld1N0YXJ0LCBrZWVwQ2xhbXAgJiYgISFzZWxmLl9zdGFydENsYW1wKSxcbiAgICAgICAgICBlbmQ6IF9rZWVwQ2xhbXAobmV3RW5kLCBrZWVwQ2xhbXAgJiYgISFzZWxmLl9lbmRDbGFtcClcbiAgICAgICAgfSwgcGluT2Zmc2V0KTtcbiAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuYWRqdXN0UGluU3BhY2luZyA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKHNwYWNlclN0YXRlICYmIGFtb3VudCkge1xuICAgICAgICAgIHZhciBpID0gc3BhY2VyU3RhdGUuaW5kZXhPZihkaXJlY3Rpb24uZCkgKyAxO1xuICAgICAgICAgIHNwYWNlclN0YXRlW2ldID0gcGFyc2VGbG9hdChzcGFjZXJTdGF0ZVtpXSkgKyBhbW91bnQgKyBfcHg7XG4gICAgICAgICAgc3BhY2VyU3RhdGVbMV0gPSBwYXJzZUZsb2F0KHNwYWNlclN0YXRlWzFdKSArIGFtb3VudCArIF9weDtcblxuICAgICAgICAgIF9zZXRTdGF0ZShzcGFjZXJTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZGlzYWJsZSA9IGZ1bmN0aW9uIChyZXNldCwgYWxsb3dBbmltYXRpb24pIHtcbiAgICAgICAgaWYgKHNlbGYuZW5hYmxlZCkge1xuICAgICAgICAgIHJlc2V0ICE9PSBmYWxzZSAmJiBzZWxmLnJldmVydCh0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzZWxmLmVuYWJsZWQgPSBzZWxmLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgc2NydWJUd2VlbiAmJiBzY3J1YlR3ZWVuLnBhdXNlKCk7XG4gICAgICAgICAgcHJldlNjcm9sbCA9IDA7XG4gICAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9yZW1vdmVMaXN0ZW5lciQxKFNjcm9sbFRyaWdnZXIsIFwicmVmcmVzaEluaXRcIiwgb25SZWZyZXNoSW5pdCk7XG5cbiAgICAgICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgICAgICBzbmFwRGVsYXllZENhbGwucGF1c2UoKTtcbiAgICAgICAgICAgIHR3ZWVuVG8udHdlZW4gJiYgdHdlZW5Uby50d2Vlbi5raWxsKCkgJiYgKHR3ZWVuVG8udHdlZW4gPSAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWlzVmlld3BvcnQpIHtcbiAgICAgICAgICAgIHZhciBpID0gX3RyaWdnZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICBpZiAoX3RyaWdnZXJzW2ldLnNjcm9sbGVyID09PSBzY3JvbGxlciAmJiBfdHJpZ2dlcnNbaV0gIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3JlbW92ZUxpc3RlbmVyJDEoc2Nyb2xsZXIsIFwicmVzaXplXCIsIF9vblJlc2l6ZSk7XG5cbiAgICAgICAgICAgIGlzVmlld3BvcnQgfHwgX3JlbW92ZUxpc3RlbmVyJDEoc2Nyb2xsZXIsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCQxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYua2lsbCA9IGZ1bmN0aW9uIChyZXZlcnQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICAgIHNlbGYuZGlzYWJsZShyZXZlcnQsIGFsbG93QW5pbWF0aW9uKTtcbiAgICAgICAgc2NydWJUd2VlbiAmJiAhYWxsb3dBbmltYXRpb24gJiYgc2NydWJUd2Vlbi5raWxsKCk7XG4gICAgICAgIGlkICYmIGRlbGV0ZSBfaWRzW2lkXTtcblxuICAgICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICAgIGkgPj0gMCAmJiBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBpID09PSBfaSAmJiBfZGlyZWN0aW9uID4gMCAmJiBfaS0tO1xuICAgICAgICBpID0gMDtcblxuICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB0LnNjcm9sbGVyID09PSBzZWxmLnNjcm9sbGVyICYmIChpID0gMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGkgfHwgX3JlZnJlc2hpbmdBbGwgfHwgKHNlbGYuc2Nyb2xsLnJlYyA9IDApO1xuXG4gICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IG51bGw7XG4gICAgICAgICAgcmV2ZXJ0ICYmIGFuaW1hdGlvbi5yZXZlcnQoe1xuICAgICAgICAgICAga2lsbDogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhbGxvd0FuaW1hdGlvbiB8fCBhbmltYXRpb24ua2lsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLnBhcmVudE5vZGUgJiYgbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3ByaW1hcnkgPT09IHNlbGYgJiYgKF9wcmltYXJ5ID0gMCk7XG5cbiAgICAgICAgaWYgKHBpbikge1xuICAgICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaSB8fCAocGluQ2FjaGUuc3BhY2VyID0gMCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXJzLm9uS2lsbCAmJiB2YXJzLm9uS2lsbChzZWxmKTtcbiAgICAgIH07XG5cbiAgICAgIF90cmlnZ2Vycy5wdXNoKHNlbGYpO1xuXG4gICAgICBzZWxmLmVuYWJsZShmYWxzZSwgZmFsc2UpO1xuICAgICAgY3VzdG9tUmV2ZXJ0UmV0dXJuICYmIGN1c3RvbVJldmVydFJldHVybihzZWxmKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbiAmJiBhbmltYXRpb24uYWRkICYmICFjaGFuZ2UpIHtcbiAgICAgICAgdmFyIHVwZGF0ZUZ1bmMgPSBzZWxmLnVwZGF0ZTtcblxuICAgICAgICBzZWxmLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLnVwZGF0ZSA9IHVwZGF0ZUZ1bmM7XG4gICAgICAgICAgc3RhcnQgfHwgZW5kIHx8IHNlbGYucmVmcmVzaCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGdzYXAkMS5kZWxheWVkQ2FsbCgwLjAxLCBzZWxmLnVwZGF0ZSk7XG4gICAgICAgIGNoYW5nZSA9IDAuMDE7XG4gICAgICAgIHN0YXJ0ID0gZW5kID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYucmVmcmVzaCgpO1xuICAgICAgfVxuXG4gICAgICBwaW4gJiYgX3F1ZXVlUmVmcmVzaEFsbCgpO1xuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY29yZSkge1xuICAgICAgaWYgKCFfY29yZUluaXR0ZWQkMSkge1xuICAgICAgICBnc2FwJDEgPSBjb3JlIHx8IF9nZXRHU0FQJDEoKTtcbiAgICAgICAgX3dpbmRvd0V4aXN0cygpICYmIHdpbmRvdy5kb2N1bWVudCAmJiBTY3JvbGxUcmlnZ2VyLmVuYWJsZSgpO1xuICAgICAgICBfY29yZUluaXR0ZWQkMSA9IF9lbmFibGVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2NvcmVJbml0dGVkJDE7XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIuZGVmYXVsdHMgPSBmdW5jdGlvbiBkZWZhdWx0cyhjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb25maWcpIHtcbiAgICAgICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9kZWZhdWx0cztcbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZShyZXNldCwga2lsbCkge1xuICAgICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICByZXR1cm4gdHJpZ2dlcltraWxsID8gXCJraWxsXCIgOiBcImRpc2FibGVcIl0ocmVzZXQpO1xuICAgICAgfSk7XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lciQxKF93aW4kMSwgXCJ3aGVlbFwiLCBfb25TY3JvbGwkMSk7XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lciQxKF9kb2MkMSwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsJDEpO1xuXG4gICAgICBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpO1xuXG4gICAgICBfcmVtb3ZlTGlzdGVuZXIkMShfZG9jJDEsIFwidG91Y2hjYW5jZWxcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgICAgX3JlbW92ZUxpc3RlbmVyJDEoX2JvZHkkMSwgXCJ0b3VjaHN0YXJ0XCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciQxLCBfZG9jJDEsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICAgIF9tdWx0aUxpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciQxLCBfZG9jJDEsIFwicG9pbnRlcnVwLHRvdWNoZW5kLG1vdXNldXBcIiwgX3BvaW50ZXJVcEhhbmRsZXIpO1xuXG4gICAgICBfcmVzaXplRGVsYXkua2lsbCgpO1xuXG4gICAgICBfaXRlcmF0ZUF1dG9SZWZyZXNoKF9yZW1vdmVMaXN0ZW5lciQxKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2Nyb2xsZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciQxLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgICAgX3doZWVsTGlzdGVuZXIoX3JlbW92ZUxpc3RlbmVyJDEsIF9zY3JvbGxlcnNbaV0sIF9zY3JvbGxlcnNbaSArIDJdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICBfd2luJDEgPSB3aW5kb3c7XG4gICAgICBfZG9jJDEgPSBkb2N1bWVudDtcbiAgICAgIF9kb2NFbCQxID0gX2RvYyQxLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIF9ib2R5JDEgPSBfZG9jJDEuYm9keTtcblxuICAgICAgaWYgKGdzYXAkMSkge1xuICAgICAgICBfdG9BcnJheSA9IGdzYXAkMS51dGlscy50b0FycmF5O1xuICAgICAgICBfY2xhbXAkMSA9IGdzYXAkMS51dGlscy5jbGFtcDtcbiAgICAgICAgX2NvbnRleHQkMSA9IGdzYXAkMS5jb3JlLmNvbnRleHQgfHwgX3Bhc3NUaHJvdWdoO1xuICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzID0gZ3NhcCQxLmNvcmUuc3VwcHJlc3NPdmVyd3JpdGVzIHx8IF9wYXNzVGhyb3VnaDtcbiAgICAgICAgX3Njcm9sbFJlc3RvcmF0aW9uID0gX3dpbiQxLmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gfHwgXCJhdXRvXCI7XG4gICAgICAgIF9sYXN0U2Nyb2xsID0gX3dpbiQxLnBhZ2VZT2Zmc2V0O1xuICAgICAgICBnc2FwJDEuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLCBTY3JvbGxUcmlnZ2VyKTtcblxuICAgICAgICBpZiAoX2JvZHkkMSkge1xuICAgICAgICAgIF9lbmFibGVkID0gMTtcbiAgICAgICAgICBfZGl2MTAwdmggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIF9kaXYxMDB2aC5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7XG4gICAgICAgICAgX2RpdjEwMHZoLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgICAgICAgX3JlZnJlc2gxMDB2aCgpO1xuXG4gICAgICAgICAgX3JhZkJ1Z0ZpeCgpO1xuXG4gICAgICAgICAgT2JzZXJ2ZXIucmVnaXN0ZXIoZ3NhcCQxKTtcbiAgICAgICAgICBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPSBPYnNlcnZlci5pc1RvdWNoO1xuICAgICAgICAgIF9maXhJT1NCdWcgPSBPYnNlcnZlci5pc1RvdWNoICYmIC8oaVBhZHxpUGhvbmV8aVBvZHxNYWMpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lciQxKF93aW4kMSwgXCJ3aGVlbFwiLCBfb25TY3JvbGwkMSk7XG5cbiAgICAgICAgICBfcm9vdCQxID0gW193aW4kMSwgX2RvYyQxLCBfZG9jRWwkMSwgX2JvZHkkMV07XG5cbiAgICAgICAgICBpZiAoZ3NhcCQxLm1hdGNoTWVkaWEpIHtcbiAgICAgICAgICAgIFNjcm9sbFRyaWdnZXIubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgICAgICAgICAgIHZhciBtbSA9IGdzYXAkMS5tYXRjaE1lZGlhKCksXG4gICAgICAgICAgICAgICAgICBwO1xuXG4gICAgICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICAgICAgbW0uYWRkKHAsIHZhcnNbcF0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIG1tO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZ3NhcCQxLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhSW5pdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0QWxsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdzYXAkMS5hZGRFdmVudExpc3RlbmVyKFwibWF0Y2hNZWRpYVJldmVydFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfcmV2ZXJ0UmVjb3JkZWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3NhcCQxLmFkZEV2ZW50TGlzdGVuZXIoXCJtYXRjaE1lZGlhXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3JlZnJlc2hBbGwoMCwgMSk7XG5cbiAgICAgICAgICAgICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ3NhcCQxLm1hdGNoTWVkaWEoXCIob3JpZW50YXRpb246IHBvcnRyYWl0KVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF9zZXRCYXNlRGltZW5zaW9ucygpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBfc2V0QmFzZURpbWVuc2lvbnM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVxdWlyZXMgR1NBUCAzLjExLjAgb3IgbGF0ZXJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3NldEJhc2VEaW1lbnNpb25zKCk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIkMShfZG9jJDEsIFwic2Nyb2xsXCIsIF9vblNjcm9sbCQxKTtcblxuICAgICAgICAgIHZhciBib2R5U3R5bGUgPSBfYm9keSQxLnN0eWxlLFxuICAgICAgICAgICAgICBib3JkZXIgPSBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUsXG4gICAgICAgICAgICAgIEFuaW1hdGlvblByb3RvID0gZ3NhcCQxLmNvcmUuQW5pbWF0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgICAgICAgYm91bmRzLFxuICAgICAgICAgICAgICBpO1xuICAgICAgICAgIEFuaW1hdGlvblByb3RvLnJldmVydCB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uUHJvdG8sIFwicmV2ZXJ0XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGltZSgtMC4wMSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gXCJzb2xpZFwiO1xuICAgICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHMoX2JvZHkkMSk7XG4gICAgICAgICAgX3ZlcnRpY2FsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy50b3AgKyBfdmVydGljYWwuc2MoKSkgfHwgMDtcbiAgICAgICAgICBfaG9yaXpvbnRhbC5tID0gTWF0aC5yb3VuZChib3VuZHMubGVmdCArIF9ob3Jpem9udGFsLnNjKCkpIHx8IDA7XG4gICAgICAgICAgYm9yZGVyID8gYm9keVN0eWxlLmJvcmRlclRvcFN0eWxlID0gYm9yZGVyIDogYm9keVN0eWxlLnJlbW92ZVByb3BlcnR5KFwiYm9yZGVyLXRvcC1zdHlsZVwiKTtcbiAgICAgICAgICBfc3luY0ludGVydmFsID0gc2V0SW50ZXJ2YWwoX3N5bmMsIDI1MCk7XG4gICAgICAgICAgZ3NhcCQxLmRlbGF5ZWRDYWxsKDAuNSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdGFydHVwJDEgPSAwO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyJDEoX2RvYyQxLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIkMShfYm9keSQxLCBcInRvdWNoc3RhcnRcIiwgX3Bhc3NUaHJvdWdoKTtcblxuICAgICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciQxLCBfZG9jJDEsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgX3BvaW50ZXJEb3duSGFuZGxlcik7XG5cbiAgICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIkMSwgX2RvYyQxLCBcInBvaW50ZXJ1cCx0b3VjaGVuZCxtb3VzZXVwXCIsIF9wb2ludGVyVXBIYW5kbGVyKTtcblxuICAgICAgICAgIF90cmFuc2Zvcm1Qcm9wID0gZ3NhcCQxLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgICAgX3N0YXRlUHJvcHMucHVzaChfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgICAgICBfY29yZUluaXR0ZWQkMSA9IF9nZXRUaW1lJDEoKTtcbiAgICAgICAgICBfcmVzaXplRGVsYXkgPSBnc2FwJDEuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgICBfYXV0b1JlZnJlc2ggPSBbX2RvYyQxLCBcInZpc2liaWxpdHljaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHcgPSBfd2luJDEuaW5uZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBoID0gX3dpbiQxLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAoX2RvYyQxLmhpZGRlbikge1xuICAgICAgICAgICAgICBfcHJldldpZHRoID0gdztcbiAgICAgICAgICAgICAgX3ByZXZIZWlnaHQgPSBoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfcHJldldpZHRoICE9PSB3IHx8IF9wcmV2SGVpZ2h0ICE9PSBoKSB7XG4gICAgICAgICAgICAgIF9vblJlc2l6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIF9kb2MkMSwgXCJET01Db250ZW50TG9hZGVkXCIsIF9yZWZyZXNoQWxsLCBfd2luJDEsIFwibG9hZFwiLCBfcmVmcmVzaEFsbCwgX3dpbiQxLCBcInJlc2l6ZVwiLCBfb25SZXNpemVdO1xuXG4gICAgICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIkMSk7XG5cbiAgICAgICAgICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRyaWdnZXIuZW5hYmxlKDAsIDEpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IF9zY3JvbGxlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciQxLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAxXSk7XG5cbiAgICAgICAgICAgIF93aGVlbExpc3RlbmVyKF9yZW1vdmVMaXN0ZW5lciQxLCBfc2Nyb2xsZXJzW2ldLCBfc2Nyb2xsZXJzW2kgKyAyXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIuY29uZmlnID0gZnVuY3Rpb24gY29uZmlnKHZhcnMpIHtcbiAgICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgICAgdmFyIG1zID0gdmFycy5zeW5jSW50ZXJ2YWw7XG4gICAgICBtcyAmJiBjbGVhckludGVydmFsKF9zeW5jSW50ZXJ2YWwpIHx8IChfc3luY0ludGVydmFsID0gbXMpICYmIHNldEludGVydmFsKF9zeW5jLCBtcyk7XG4gICAgICBcImlnbm9yZU1vYmlsZVJlc2l6ZVwiIGluIHZhcnMgJiYgKF9pZ25vcmVNb2JpbGVSZXNpemUgPSBTY3JvbGxUcmlnZ2VyLmlzVG91Y2ggPT09IDEgJiYgdmFycy5pZ25vcmVNb2JpbGVSZXNpemUpO1xuXG4gICAgICBpZiAoXCJhdXRvUmVmcmVzaEV2ZW50c1wiIGluIHZhcnMpIHtcbiAgICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIkMSkgfHwgX2l0ZXJhdGVBdXRvUmVmcmVzaChfYWRkTGlzdGVuZXIkMSwgdmFycy5hdXRvUmVmcmVzaEV2ZW50cyB8fCBcIm5vbmVcIik7XG4gICAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgICAgdmFyIHQgPSBfZ2V0VGFyZ2V0KHRhcmdldCksXG4gICAgICAgICAgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZih0KSxcbiAgICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQkMSh0KTtcblxuICAgICAgaWYgKH5pKSB7XG4gICAgICAgIF9zY3JvbGxlcnMuc3BsaWNlKGksIGlzVmlld3BvcnQgPyA2IDogMik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YXJzKSB7XG4gICAgICAgIGlzVmlld3BvcnQgPyBfcHJveGllcy51bnNoaWZ0KF93aW4kMSwgdmFycywgX2JvZHkkMSwgdmFycywgX2RvY0VsJDEsIHZhcnMpIDogX3Byb3hpZXMudW5zaGlmdCh0LCB2YXJzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2Nyb2xsVHJpZ2dlci5jbGVhck1hdGNoTWVkaWEgPSBmdW5jdGlvbiBjbGVhck1hdGNoTWVkaWEocXVlcnkpIHtcbiAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiB0Ll9jdHggJiYgdC5fY3R4LnF1ZXJ5ID09PSBxdWVyeSAmJiB0Ll9jdHgua2lsbCh0cnVlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmlzSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbGVtZW50LCByYXRpbywgaG9yaXpvbnRhbCkge1xuICAgICAgdmFyIGJvdW5kcyA9IChfaXNTdHJpbmcoZWxlbWVudCkgPyBfZ2V0VGFyZ2V0KGVsZW1lbnQpIDogZWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgb2Zmc2V0ID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSAqIHJhdGlvIHx8IDA7XG4gICAgICByZXR1cm4gaG9yaXpvbnRhbCA/IGJvdW5kcy5yaWdodCAtIG9mZnNldCA+IDAgJiYgYm91bmRzLmxlZnQgKyBvZmZzZXQgPCBfd2luJDEuaW5uZXJXaWR0aCA6IGJvdW5kcy5ib3R0b20gLSBvZmZzZXQgPiAwICYmIGJvdW5kcy50b3AgKyBvZmZzZXQgPCBfd2luJDEuaW5uZXJIZWlnaHQ7XG4gICAgfTtcblxuICAgIFNjcm9sbFRyaWdnZXIucG9zaXRpb25JblZpZXdwb3J0ID0gZnVuY3Rpb24gcG9zaXRpb25JblZpZXdwb3J0KGVsZW1lbnQsIHJlZmVyZW5jZVBvaW50LCBob3Jpem9udGFsKSB7XG4gICAgICBfaXNTdHJpbmcoZWxlbWVudCkgJiYgKGVsZW1lbnQgPSBfZ2V0VGFyZ2V0KGVsZW1lbnQpKTtcbiAgICAgIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIHNpemUgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdLFxuICAgICAgICAgIG9mZnNldCA9IHJlZmVyZW5jZVBvaW50ID09IG51bGwgPyBzaXplIC8gMiA6IHJlZmVyZW5jZVBvaW50IGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1tyZWZlcmVuY2VQb2ludF0gKiBzaXplIDogfnJlZmVyZW5jZVBvaW50LmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdChyZWZlcmVuY2VQb2ludCkgfHwgMDtcbiAgICAgIHJldHVybiBob3Jpem9udGFsID8gKGJvdW5kcy5sZWZ0ICsgb2Zmc2V0KSAvIF93aW4kMS5pbm5lcldpZHRoIDogKGJvdW5kcy50b3AgKyBvZmZzZXQpIC8gX3dpbiQxLmlubmVySGVpZ2h0O1xuICAgIH07XG5cbiAgICBTY3JvbGxUcmlnZ2VyLmtpbGxBbGwgPSBmdW5jdGlvbiBraWxsQWxsKGFsbG93TGlzdGVuZXJzKSB7XG4gICAgICBfdHJpZ2dlcnMuc2xpY2UoMCkuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC52YXJzLmlkICE9PSBcIlNjcm9sbFNtb290aGVyXCIgJiYgdC5raWxsKCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFsbG93TGlzdGVuZXJzICE9PSB0cnVlKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBfbGlzdGVuZXJzLmtpbGxBbGwgfHwgW107XG4gICAgICAgIF9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG4gIH0oKTtcbiAgU2Nyb2xsVHJpZ2dlciQxLnZlcnNpb24gPSBcIjMuMTIuMlwiO1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5zYXZlU3R5bGVzID0gZnVuY3Rpb24gKHRhcmdldHMpIHtcbiAgICByZXR1cm4gdGFyZ2V0cyA/IF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuc3R5bGUpIHtcbiAgICAgICAgdmFyIGkgPSBfc2F2ZWRTdHlsZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICAgIF9zYXZlZFN0eWxlcy5wdXNoKHRhcmdldCwgdGFyZ2V0LnN0eWxlLmNzc1RleHQsIHRhcmdldC5nZXRCQm94ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiksIGdzYXAkMS5jb3JlLmdldENhY2hlKHRhcmdldCksIF9jb250ZXh0JDEoKSk7XG4gICAgICB9XG4gICAgfSkgOiBfc2F2ZWRTdHlsZXM7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICAgIHJldHVybiBfcmV2ZXJ0QWxsKCFzb2Z0LCBtZWRpYSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YXJzLCBhbmltYXRpb24pIHtcbiAgICByZXR1cm4gbmV3IFNjcm9sbFRyaWdnZXIkMSh2YXJzLCBhbmltYXRpb24pO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgICByZXR1cm4gc2FmZSA/IF9vblJlc2l6ZSgpIDogKF9jb3JlSW5pdHRlZCQxIHx8IFNjcm9sbFRyaWdnZXIkMS5yZWdpc3RlcigpKSAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEudXBkYXRlID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgcmV0dXJuICsrX3Njcm9sbGVycy5jYWNoZSAmJiBfdXBkYXRlQWxsKGZvcmNlID09PSB0cnVlID8gMiA6IDApO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5jbGVhclNjcm9sbE1lbW9yeSA9IF9jbGVhclNjcm9sbE1lbW9yeTtcblxuICBTY3JvbGxUcmlnZ2VyJDEubWF4U2Nyb2xsID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgICByZXR1cm4gX21heFNjcm9sbChlbGVtZW50LCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5nZXRTY3JvbGxGdW5jID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgICByZXR1cm4gX2dldFNjcm9sbEZ1bmMoX2dldFRhcmdldChlbGVtZW50KSwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuZ2V0QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBfaWRzW2lkXTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdHJpZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gdC52YXJzLmlkICE9PSBcIlNjcm9sbFNtb290aGVyXCI7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlciQxLmlzU2Nyb2xsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIV9sYXN0U2Nyb2xsVGltZTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuc25hcERpcmVjdGlvbmFsID0gX3NuYXBEaXJlY3Rpb25hbDtcblxuICBTY3JvbGxUcmlnZ2VyJDEuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgdmFyc0NvcHkgPSB7fSxcbiAgICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgICBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXggfHwgMWU5LFxuICAgICAgICBwcm94eUNhbGxiYWNrID0gZnVuY3Rpb24gcHJveHlDYWxsYmFjayh0eXBlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgICAgdHJpZ2dlcnMgPSBbXSxcbiAgICAgICAgICBkZWxheSA9IGdzYXAkMS5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhlbGVtZW50cywgdHJpZ2dlcnMpO1xuICAgICAgICBlbGVtZW50cyA9IFtdO1xuICAgICAgICB0cmlnZ2VycyA9IFtdO1xuICAgICAgfSkucGF1c2UoKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZikge1xuICAgICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgICAgZWxlbWVudHMucHVzaChzZWxmLnRyaWdnZXIpO1xuICAgICAgICB0cmlnZ2Vycy5wdXNoKHNlbGYpO1xuICAgICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgICAgIHA7XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdmFyc0NvcHlbcF0gPSBwLnN1YnN0cigwLCAyKSA9PT0gXCJvblwiICYmIF9pc0Z1bmN0aW9uKHZhcnNbcF0pICYmIHAgIT09IFwib25SZWZyZXNoSW5pdFwiID8gcHJveHlDYWxsYmFjayhwLCB2YXJzW3BdKSA6IHZhcnNbcF07XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGJhdGNoTWF4KSkge1xuICAgICAgYmF0Y2hNYXggPSBiYXRjaE1heCgpO1xuXG4gICAgICBfYWRkTGlzdGVuZXIkMShTY3JvbGxUcmlnZ2VyJDEsIFwicmVmcmVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBmb3IgKHAgaW4gdmFyc0NvcHkpIHtcbiAgICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgICB9XG5cbiAgICAgIGNvbmZpZy50cmlnZ2VyID0gdGFyZ2V0O1xuICAgICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlciQxLmNyZWF0ZShjb25maWcpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllciA9IGZ1bmN0aW9uIF9jbGFtcFNjcm9sbEFuZEdldER1cmF0aW9uTXVsdGlwbGllcihzY3JvbGxGdW5jLCBjdXJyZW50LCBlbmQsIG1heCkge1xuICAgIGN1cnJlbnQgPiBtYXggPyBzY3JvbGxGdW5jKG1heCkgOiBjdXJyZW50IDwgMCAmJiBzY3JvbGxGdW5jKDApO1xuICAgIHJldHVybiBlbmQgPiBtYXggPyAobWF4IC0gY3VycmVudCkgLyAoZW5kIC0gY3VycmVudCkgOiBlbmQgPCAwID8gY3VycmVudCAvIChjdXJyZW50IC0gZW5kKSA6IDE7XG4gIH0sXG4gICAgICBfYWxsb3dOYXRpdmVQYW5uaW5nID0gZnVuY3Rpb24gX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IHRydWUpIHtcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRvdWNoLWFjdGlvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnN0eWxlLnRvdWNoQWN0aW9uID0gZGlyZWN0aW9uID09PSB0cnVlID8gXCJhdXRvXCIgOiBkaXJlY3Rpb24gPyBcInBhbi1cIiArIGRpcmVjdGlvbiArIChPYnNlcnZlci5pc1RvdWNoID8gXCIgcGluY2gtem9vbVwiIDogXCJcIikgOiBcIm5vbmVcIjtcbiAgICB9XG5cbiAgICB0YXJnZXQgPT09IF9kb2NFbCQxICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcoX2JvZHkkMSwgZGlyZWN0aW9uKTtcbiAgfSxcbiAgICAgIF9vdmVyZmxvdyA9IHtcbiAgICBhdXRvOiAxLFxuICAgIHNjcm9sbDogMVxuICB9LFxuICAgICAgX25lc3RlZFNjcm9sbCA9IGZ1bmN0aW9uIF9uZXN0ZWRTY3JvbGwoX3JlZjUpIHtcbiAgICB2YXIgZXZlbnQgPSBfcmVmNS5ldmVudCxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjUudGFyZ2V0LFxuICAgICAgICBheGlzID0gX3JlZjUuYXhpcztcblxuICAgIHZhciBub2RlID0gKGV2ZW50LmNoYW5nZWRUb3VjaGVzID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudCkudGFyZ2V0LFxuICAgICAgICBjYWNoZSA9IG5vZGUuX2dzYXAgfHwgZ3NhcCQxLmNvcmUuZ2V0Q2FjaGUobm9kZSksXG4gICAgICAgIHRpbWUgPSBfZ2V0VGltZSQxKCksXG4gICAgICAgIGNzO1xuXG4gICAgaWYgKCFjYWNoZS5faXNTY3JvbGxUIHx8IHRpbWUgLSBjYWNoZS5faXNTY3JvbGxUID4gMjAwMCkge1xuICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gX2JvZHkkMSAmJiAobm9kZS5zY3JvbGxIZWlnaHQgPD0gbm9kZS5jbGllbnRIZWlnaHQgJiYgbm9kZS5zY3JvbGxXaWR0aCA8PSBub2RlLmNsaWVudFdpZHRoIHx8ICEoX292ZXJmbG93WyhjcyA9IF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpKS5vdmVyZmxvd1ldIHx8IF9vdmVyZmxvd1tjcy5vdmVyZmxvd1hdKSkpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgY2FjaGUuX2lzU2Nyb2xsID0gbm9kZSAmJiBub2RlICE9PSB0YXJnZXQgJiYgIV9pc1ZpZXdwb3J0JDEobm9kZSkgJiYgKF9vdmVyZmxvd1soY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSkub3ZlcmZsb3dZXSB8fCBfb3ZlcmZsb3dbY3Mub3ZlcmZsb3dYXSk7XG4gICAgICBjYWNoZS5faXNTY3JvbGxUID0gdGltZTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUuX2lzU2Nyb2xsIHx8IGF4aXMgPT09IFwieFwiKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50Ll9nc2FwQWxsb3cgPSB0cnVlO1xuICAgIH1cbiAgfSxcbiAgICAgIF9pbnB1dE9ic2VydmVyID0gZnVuY3Rpb24gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB0eXBlLCBpbnB1dHMsIG5lc3RlZCkge1xuICAgIHJldHVybiBPYnNlcnZlci5jcmVhdGUoe1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgZGVib3VuY2U6IGZhbHNlLFxuICAgICAgbG9ja0F4aXM6IHRydWUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgb25XaGVlbDogbmVzdGVkID0gbmVzdGVkICYmIF9uZXN0ZWRTY3JvbGwsXG4gICAgICBvblByZXNzOiBuZXN0ZWQsXG4gICAgICBvbkRyYWc6IG5lc3RlZCxcbiAgICAgIG9uU2Nyb2xsOiBuZXN0ZWQsXG4gICAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICAgIHJldHVybiBpbnB1dHMgJiYgX2FkZExpc3RlbmVyJDEoX2RvYyQxLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgZmFsc2UsIHRydWUpO1xuICAgICAgfSxcbiAgICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gb25EaXNhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3JlbW92ZUxpc3RlbmVyJDEoX2RvYyQxLCBPYnNlcnZlci5ldmVudFR5cGVzWzBdLCBfY2FwdHVyZUlucHV0cywgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gICAgICBfaW5wdXRFeHAgPSAvKGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkvaSxcbiAgICAgIF9pbnB1dElzRm9jdXNlZCxcbiAgICAgIF9jYXB0dXJlSW5wdXRzID0gZnVuY3Rpb24gX2NhcHR1cmVJbnB1dHMoZSkge1xuICAgIHZhciBpc0lucHV0ID0gX2lucHV0RXhwLnRlc3QoZS50YXJnZXQudGFnTmFtZSk7XG5cbiAgICBpZiAoaXNJbnB1dCB8fCBfaW5wdXRJc0ZvY3VzZWQpIHtcbiAgICAgIGUuX2dzYXBBbGxvdyA9IHRydWU7XG4gICAgICBfaW5wdXRJc0ZvY3VzZWQgPSBpc0lucHV0O1xuICAgIH1cbiAgfSxcbiAgICAgIF9nZXRTY3JvbGxOb3JtYWxpemVyID0gZnVuY3Rpb24gX2dldFNjcm9sbE5vcm1hbGl6ZXIodmFycykge1xuICAgIF9pc09iamVjdCh2YXJzKSB8fCAodmFycyA9IHt9KTtcbiAgICB2YXJzLnByZXZlbnREZWZhdWx0ID0gdmFycy5pc05vcm1hbGl6ZXIgPSB2YXJzLmFsbG93Q2xpY2tzID0gdHJ1ZTtcbiAgICB2YXJzLnR5cGUgfHwgKHZhcnMudHlwZSA9IFwid2hlZWwsdG91Y2hcIik7XG4gICAgdmFycy5kZWJvdW5jZSA9ICEhdmFycy5kZWJvdW5jZTtcbiAgICB2YXJzLmlkID0gdmFycy5pZCB8fCBcIm5vcm1hbGl6ZXJcIjtcblxuICAgIHZhciBfdmFyczIgPSB2YXJzLFxuICAgICAgICBub3JtYWxpemVTY3JvbGxYID0gX3ZhcnMyLm5vcm1hbGl6ZVNjcm9sbFgsXG4gICAgICAgIG1vbWVudHVtID0gX3ZhcnMyLm1vbWVudHVtLFxuICAgICAgICBhbGxvd05lc3RlZFNjcm9sbCA9IF92YXJzMi5hbGxvd05lc3RlZFNjcm9sbCxcbiAgICAgICAgb25SZWxlYXNlID0gX3ZhcnMyLm9uUmVsZWFzZSxcbiAgICAgICAgc2VsZixcbiAgICAgICAgbWF4WSxcbiAgICAgICAgdGFyZ2V0ID0gX2dldFRhcmdldCh2YXJzLnRhcmdldCkgfHwgX2RvY0VsJDEsXG4gICAgICAgIHNtb290aGVyID0gZ3NhcCQxLmNvcmUuZ2xvYmFscygpLlNjcm9sbFNtb290aGVyLFxuICAgICAgICBzbW9vdGhlckluc3RhbmNlID0gc21vb3RoZXIgJiYgc21vb3RoZXIuZ2V0KCksXG4gICAgICAgIGNvbnRlbnQgPSBfZml4SU9TQnVnICYmICh2YXJzLmNvbnRlbnQgJiYgX2dldFRhcmdldCh2YXJzLmNvbnRlbnQpIHx8IHNtb290aGVySW5zdGFuY2UgJiYgdmFycy5jb250ZW50ICE9PSBmYWxzZSAmJiAhc21vb3RoZXJJbnN0YW5jZS5zbW9vdGgoKSAmJiBzbW9vdGhlckluc3RhbmNlLmNvbnRlbnQoKSksXG4gICAgICAgIHNjcm9sbEZ1bmNZID0gX2dldFNjcm9sbEZ1bmModGFyZ2V0LCBfdmVydGljYWwpLFxuICAgICAgICBzY3JvbGxGdW5jWCA9IF9nZXRTY3JvbGxGdW5jKHRhcmdldCwgX2hvcml6b250YWwpLFxuICAgICAgICBzY2FsZSA9IDEsXG4gICAgICAgIGluaXRpYWxTY2FsZSA9IChPYnNlcnZlci5pc1RvdWNoICYmIF93aW4kMS52aXN1YWxWaWV3cG9ydCA/IF93aW4kMS52aXN1YWxWaWV3cG9ydC5zY2FsZSAqIF93aW4kMS52aXN1YWxWaWV3cG9ydC53aWR0aCA6IF93aW4kMS5vdXRlcldpZHRoKSAvIF93aW4kMS5pbm5lcldpZHRoLFxuICAgICAgICB3aGVlbFJlZnJlc2ggPSAwLFxuICAgICAgICByZXNvbHZlTW9tZW50dW1EdXJhdGlvbiA9IF9pc0Z1bmN0aW9uKG1vbWVudHVtKSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBtb21lbnR1bShzZWxmKTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG1vbWVudHVtIHx8IDIuODtcbiAgICB9LFxuICAgICAgICBsYXN0UmVmcmVzaElELFxuICAgICAgICBza2lwVG91Y2hNb3ZlLFxuICAgICAgICBpbnB1dE9ic2VydmVyID0gX2lucHV0T2JzZXJ2ZXIodGFyZ2V0LCB2YXJzLnR5cGUsIHRydWUsIGFsbG93TmVzdGVkU2Nyb2xsKSxcbiAgICAgICAgcmVzdW1lVG91Y2hNb3ZlID0gZnVuY3Rpb24gcmVzdW1lVG91Y2hNb3ZlKCkge1xuICAgICAgcmV0dXJuIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgICB9LFxuICAgICAgICBzY3JvbGxDbGFtcFggPSBfcGFzc1Rocm91Z2gsXG4gICAgICAgIHNjcm9sbENsYW1wWSA9IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgdXBkYXRlQ2xhbXBzID0gZnVuY3Rpb24gdXBkYXRlQ2xhbXBzKCkge1xuICAgICAgbWF4WSA9IF9tYXhTY3JvbGwodGFyZ2V0LCBfdmVydGljYWwpO1xuICAgICAgc2Nyb2xsQ2xhbXBZID0gX2NsYW1wJDEoX2ZpeElPU0J1ZyA/IDEgOiAwLCBtYXhZKTtcbiAgICAgIG5vcm1hbGl6ZVNjcm9sbFggJiYgKHNjcm9sbENsYW1wWCA9IF9jbGFtcCQxKDAsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpKTtcbiAgICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICAgIH0sXG4gICAgICAgIHJlbW92ZUNvbnRlbnRPZmZzZXQgPSBmdW5jdGlvbiByZW1vdmVDb250ZW50T2Zmc2V0KCkge1xuICAgICAgY29udGVudC5fZ3NhcC55ID0gX3JvdW5kKHBhcnNlRmxvYXQoY29udGVudC5fZ3NhcC55KSArIHNjcm9sbEZ1bmNZLm9mZnNldCkgKyBcInB4XCI7XG4gICAgICBjb250ZW50LnN0eWxlLnRyYW5zZm9ybSA9IFwibWF0cml4M2QoMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSwgMCwgMCwgXCIgKyBwYXJzZUZsb2F0KGNvbnRlbnQuX2dzYXAueSkgKyBcIiwgMCwgMSlcIjtcbiAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbEZ1bmNZLmNhY2hlSUQgPSAwO1xuICAgIH0sXG4gICAgICAgIGlnbm9yZURyYWcgPSBmdW5jdGlvbiBpZ25vcmVEcmFnKCkge1xuICAgICAgaWYgKHNraXBUb3VjaE1vdmUpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZVRvdWNoTW92ZSk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF9yb3VuZChzZWxmLmRlbHRhWSAvIDIpLFxuICAgICAgICAgICAgc2Nyb2xsID0gc2Nyb2xsQ2xhbXBZKHNjcm9sbEZ1bmNZLnYgLSBvZmZzZXQpO1xuXG4gICAgICAgIGlmIChjb250ZW50ICYmIHNjcm9sbCAhPT0gc2Nyb2xsRnVuY1kudiArIHNjcm9sbEZ1bmNZLm9mZnNldCkge1xuICAgICAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCA9IHNjcm9sbCAtIHNjcm9sbEZ1bmNZLnY7XG5cbiAgICAgICAgICB2YXIgeSA9IF9yb3VuZCgocGFyc2VGbG9hdChjb250ZW50ICYmIGNvbnRlbnQuX2dzYXAueSkgfHwgMCkgLSBzY3JvbGxGdW5jWS5vZmZzZXQpO1xuXG4gICAgICAgICAgY29udGVudC5zdHlsZS50cmFuc2Zvcm0gPSBcIm1hdHJpeDNkKDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIFwiICsgeSArIFwiLCAwLCAxKVwiO1xuICAgICAgICAgIGNvbnRlbnQuX2dzYXAueSA9IHkgKyBcInB4XCI7XG4gICAgICAgICAgc2Nyb2xsRnVuY1kuY2FjaGVJRCA9IF9zY3JvbGxlcnMuY2FjaGU7XG5cbiAgICAgICAgICBfdXBkYXRlQWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsRnVuY1kub2Zmc2V0ICYmIHJlbW92ZUNvbnRlbnRPZmZzZXQoKTtcbiAgICAgIHNraXBUb3VjaE1vdmUgPSB0cnVlO1xuICAgIH0sXG4gICAgICAgIHR3ZWVuLFxuICAgICAgICBzdGFydFNjcm9sbFgsXG4gICAgICAgIHN0YXJ0U2Nyb2xsWSxcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwsXG4gICAgICAgIG9uUmVzaXplID0gZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICB1cGRhdGVDbGFtcHMoKTtcblxuICAgICAgaWYgKHR3ZWVuLmlzQWN0aXZlKCkgJiYgdHdlZW4udmFycy5zY3JvbGxZID4gbWF4WSkge1xuICAgICAgICBzY3JvbGxGdW5jWSgpID4gbWF4WSA/IHR3ZWVuLnByb2dyZXNzKDEpICYmIHNjcm9sbEZ1bmNZKG1heFkpIDogdHdlZW4ucmVzZXRUbyhcInNjcm9sbFlcIiwgbWF4WSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnRlbnQgJiYgZ3NhcCQxLnNldChjb250ZW50LCB7XG4gICAgICB5OiBcIis9MFwiXG4gICAgfSk7XG5cbiAgICB2YXJzLmlnbm9yZUNoZWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfZml4SU9TQnVnICYmIGUudHlwZSA9PT0gXCJ0b3VjaG1vdmVcIiAmJiBpZ25vcmVEcmFnKCkgfHwgc2NhbGUgPiAxLjA1ICYmIGUudHlwZSAhPT0gXCJ0b3VjaHN0YXJ0XCIgfHwgc2VsZi5pc0dlc3R1cmluZyB8fCBlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDE7XG4gICAgfTtcblxuICAgIHZhcnMub25QcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNraXBUb3VjaE1vdmUgPSBmYWxzZTtcbiAgICAgIHZhciBwcmV2U2NhbGUgPSBzY2FsZTtcbiAgICAgIHNjYWxlID0gX3JvdW5kKChfd2luJDEudmlzdWFsVmlld3BvcnQgJiYgX3dpbiQxLnZpc3VhbFZpZXdwb3J0LnNjYWxlIHx8IDEpIC8gaW5pdGlhbFNjYWxlKTtcbiAgICAgIHR3ZWVuLnBhdXNlKCk7XG4gICAgICBwcmV2U2NhbGUgIT09IHNjYWxlICYmIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCBzY2FsZSA+IDEuMDEgPyB0cnVlIDogbm9ybWFsaXplU2Nyb2xsWCA/IGZhbHNlIDogXCJ4XCIpO1xuICAgICAgc3RhcnRTY3JvbGxYID0gc2Nyb2xsRnVuY1goKTtcbiAgICAgIHN0YXJ0U2Nyb2xsWSA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICB1cGRhdGVDbGFtcHMoKTtcbiAgICAgIGxhc3RSZWZyZXNoSUQgPSBfcmVmcmVzaElEO1xuICAgIH07XG5cbiAgICB2YXJzLm9uUmVsZWFzZSA9IHZhcnMub25HZXN0dXJlU3RhcnQgPSBmdW5jdGlvbiAoc2VsZiwgd2FzRHJhZ2dpbmcpIHtcbiAgICAgIHNjcm9sbEZ1bmNZLm9mZnNldCAmJiByZW1vdmVDb250ZW50T2Zmc2V0KCk7XG5cbiAgICAgIGlmICghd2FzRHJhZ2dpbmcpIHtcbiAgICAgICAgb25TdG9wRGVsYXllZENhbGwucmVzdGFydCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zY3JvbGxlcnMuY2FjaGUrKztcbiAgICAgICAgdmFyIGR1ciA9IHJlc29sdmVNb21lbnR1bUR1cmF0aW9uKCksXG4gICAgICAgICAgICBjdXJyZW50U2Nyb2xsLFxuICAgICAgICAgICAgZW5kU2Nyb2xsO1xuXG4gICAgICAgIGlmIChub3JtYWxpemVTY3JvbGxYKSB7XG4gICAgICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNYKCk7XG4gICAgICAgICAgZW5kU2Nyb2xsID0gY3VycmVudFNjcm9sbCArIGR1ciAqIDAuMDUgKiAtc2VsZi52ZWxvY2l0eVggLyAwLjIyNztcbiAgICAgICAgICBkdXIgKj0gX2NsYW1wU2Nyb2xsQW5kR2V0RHVyYXRpb25NdWx0aXBsaWVyKHNjcm9sbEZ1bmNYLCBjdXJyZW50U2Nyb2xsLCBlbmRTY3JvbGwsIF9tYXhTY3JvbGwodGFyZ2V0LCBfaG9yaXpvbnRhbCkpO1xuICAgICAgICAgIHR3ZWVuLnZhcnMuc2Nyb2xsWCA9IHNjcm9sbENsYW1wWChlbmRTY3JvbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNjcm9sbCA9IHNjcm9sbEZ1bmNZKCk7XG4gICAgICAgIGVuZFNjcm9sbCA9IGN1cnJlbnRTY3JvbGwgKyBkdXIgKiAwLjA1ICogLXNlbGYudmVsb2NpdHlZIC8gMC4yMjc7XG4gICAgICAgIGR1ciAqPSBfY2xhbXBTY3JvbGxBbmRHZXREdXJhdGlvbk11bHRpcGxpZXIoc2Nyb2xsRnVuY1ksIGN1cnJlbnRTY3JvbGwsIGVuZFNjcm9sbCwgX21heFNjcm9sbCh0YXJnZXQsIF92ZXJ0aWNhbCkpO1xuICAgICAgICB0d2Vlbi52YXJzLnNjcm9sbFkgPSBzY3JvbGxDbGFtcFkoZW5kU2Nyb2xsKTtcbiAgICAgICAgdHdlZW4uaW52YWxpZGF0ZSgpLmR1cmF0aW9uKGR1cikucGxheSgwLjAxKTtcblxuICAgICAgICBpZiAoX2ZpeElPU0J1ZyAmJiB0d2Vlbi52YXJzLnNjcm9sbFkgPj0gbWF4WSB8fCBjdXJyZW50U2Nyb2xsID49IG1heFkgLSAxKSB7XG4gICAgICAgICAgZ3NhcCQxLnRvKHt9LCB7XG4gICAgICAgICAgICBvblVwZGF0ZTogb25SZXNpemUsXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb25SZWxlYXNlICYmIG9uUmVsZWFzZShzZWxmKTtcbiAgICB9O1xuXG4gICAgdmFycy5vbldoZWVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHdlZW4uX3RzICYmIHR3ZWVuLnBhdXNlKCk7XG5cbiAgICAgIGlmIChfZ2V0VGltZSQxKCkgLSB3aGVlbFJlZnJlc2ggPiAxMDAwKSB7XG4gICAgICAgIGxhc3RSZWZyZXNoSUQgPSAwO1xuICAgICAgICB3aGVlbFJlZnJlc2ggPSBfZ2V0VGltZSQxKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhcnMub25DaGFuZ2UgPSBmdW5jdGlvbiAoc2VsZiwgZHgsIGR5LCB4QXJyYXksIHlBcnJheSkge1xuICAgICAgX3JlZnJlc2hJRCAhPT0gbGFzdFJlZnJlc2hJRCAmJiB1cGRhdGVDbGFtcHMoKTtcbiAgICAgIGR4ICYmIG5vcm1hbGl6ZVNjcm9sbFggJiYgc2Nyb2xsRnVuY1goc2Nyb2xsQ2xhbXBYKHhBcnJheVsyXSA9PT0gZHggPyBzdGFydFNjcm9sbFggKyAoc2VsZi5zdGFydFggLSBzZWxmLngpIDogc2Nyb2xsRnVuY1goKSArIGR4IC0geEFycmF5WzFdKSk7XG5cbiAgICAgIGlmIChkeSkge1xuICAgICAgICBzY3JvbGxGdW5jWS5vZmZzZXQgJiYgcmVtb3ZlQ29udGVudE9mZnNldCgpO1xuICAgICAgICB2YXIgaXNUb3VjaCA9IHlBcnJheVsyXSA9PT0gZHksXG4gICAgICAgICAgICB5ID0gaXNUb3VjaCA/IHN0YXJ0U2Nyb2xsWSArIHNlbGYuc3RhcnRZIC0gc2VsZi55IDogc2Nyb2xsRnVuY1koKSArIGR5IC0geUFycmF5WzFdLFxuICAgICAgICAgICAgeUNsYW1wZWQgPSBzY3JvbGxDbGFtcFkoeSk7XG4gICAgICAgIGlzVG91Y2ggJiYgeSAhPT0geUNsYW1wZWQgJiYgKHN0YXJ0U2Nyb2xsWSArPSB5Q2xhbXBlZCAtIHkpO1xuICAgICAgICBzY3JvbGxGdW5jWSh5Q2xhbXBlZCk7XG4gICAgICB9XG5cbiAgICAgIChkeSB8fCBkeCkgJiYgX3VwZGF0ZUFsbCgpO1xuICAgIH07XG5cbiAgICB2YXJzLm9uRW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2FsbG93TmF0aXZlUGFubmluZyh0YXJnZXQsIG5vcm1hbGl6ZVNjcm9sbFggPyBmYWxzZSA6IFwieFwiKTtcblxuICAgICAgU2Nyb2xsVHJpZ2dlciQxLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWZyZXNoXCIsIG9uUmVzaXplKTtcblxuICAgICAgX2FkZExpc3RlbmVyJDEoX3dpbiQxLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICAgIGlmIChzY3JvbGxGdW5jWS5zbW9vdGgpIHtcbiAgICAgICAgc2Nyb2xsRnVuY1kudGFyZ2V0LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCI7XG4gICAgICAgIHNjcm9sbEZ1bmNZLnNtb290aCA9IHNjcm9sbEZ1bmNYLnNtb290aCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpbnB1dE9ic2VydmVyLmVuYWJsZSgpO1xuICAgIH07XG5cbiAgICB2YXJzLm9uRGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9hbGxvd05hdGl2ZVBhbm5pbmcodGFyZ2V0LCB0cnVlKTtcblxuICAgICAgX3JlbW92ZUxpc3RlbmVyJDEoX3dpbiQxLCBcInJlc2l6ZVwiLCBvblJlc2l6ZSk7XG5cbiAgICAgIFNjcm9sbFRyaWdnZXIkMS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVmcmVzaFwiLCBvblJlc2l6ZSk7XG4gICAgICBpbnB1dE9ic2VydmVyLmtpbGwoKTtcbiAgICB9O1xuXG4gICAgdmFycy5sb2NrQXhpcyA9IHZhcnMubG9ja0F4aXMgIT09IGZhbHNlO1xuICAgIHNlbGYgPSBuZXcgT2JzZXJ2ZXIodmFycyk7XG4gICAgc2VsZi5pT1MgPSBfZml4SU9TQnVnO1xuICAgIF9maXhJT1NCdWcgJiYgIXNjcm9sbEZ1bmNZKCkgJiYgc2Nyb2xsRnVuY1koMSk7XG4gICAgX2ZpeElPU0J1ZyAmJiBnc2FwJDEudGlja2VyLmFkZChfcGFzc1Rocm91Z2gpO1xuICAgIG9uU3RvcERlbGF5ZWRDYWxsID0gc2VsZi5fZGM7XG4gICAgdHdlZW4gPSBnc2FwJDEudG8oc2VsZiwge1xuICAgICAgZWFzZTogXCJwb3dlcjRcIixcbiAgICAgIHBhdXNlZDogdHJ1ZSxcbiAgICAgIHNjcm9sbFg6IG5vcm1hbGl6ZVNjcm9sbFggPyBcIis9MC4xXCIgOiBcIis9MFwiLFxuICAgICAgc2Nyb2xsWTogXCIrPTAuMVwiLFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIHNjcm9sbFk6IF9pbnRlcnJ1cHRpb25UcmFja2VyKHNjcm9sbEZ1bmNZLCBzY3JvbGxGdW5jWSgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHR3ZWVuLnBhdXNlKCk7XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IF91cGRhdGVBbGwsXG4gICAgICBvbkNvbXBsZXRlOiBvblN0b3BEZWxheWVkQ2FsbC52YXJzLm9uQ29tcGxldGVcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyJDEuc29ydCA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgcmV0dXJuIF90cmlnZ2Vycy5zb3J0KGZ1bmMgfHwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYS52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYgKyBhLnN0YXJ0IC0gKGIuc3RhcnQgKyAoYi52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYpO1xuICAgIH0pO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5vYnNlcnZlID0gZnVuY3Rpb24gKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKHZhcnMpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5ub3JtYWxpemVTY3JvbGwgPSBmdW5jdGlvbiAodmFycykge1xuICAgIGlmICh0eXBlb2YgdmFycyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIF9ub3JtYWxpemVyJDE7XG4gICAgfVxuXG4gICAgaWYgKHZhcnMgPT09IHRydWUgJiYgX25vcm1hbGl6ZXIkMSkge1xuICAgICAgcmV0dXJuIF9ub3JtYWxpemVyJDEuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgaWYgKHZhcnMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gX25vcm1hbGl6ZXIkMSAmJiBfbm9ybWFsaXplciQxLmtpbGwoKTtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFsaXplciA9IHZhcnMgaW5zdGFuY2VvZiBPYnNlcnZlciA/IHZhcnMgOiBfZ2V0U2Nyb2xsTm9ybWFsaXplcih2YXJzKTtcbiAgICBfbm9ybWFsaXplciQxICYmIF9ub3JtYWxpemVyJDEudGFyZ2V0ID09PSBub3JtYWxpemVyLnRhcmdldCAmJiBfbm9ybWFsaXplciQxLmtpbGwoKTtcbiAgICBfaXNWaWV3cG9ydCQxKG5vcm1hbGl6ZXIudGFyZ2V0KSAmJiAoX25vcm1hbGl6ZXIkMSA9IG5vcm1hbGl6ZXIpO1xuICAgIHJldHVybiBub3JtYWxpemVyO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIkMS5jb3JlID0ge1xuICAgIF9nZXRWZWxvY2l0eVByb3A6IF9nZXRWZWxvY2l0eVByb3AsXG4gICAgX2lucHV0T2JzZXJ2ZXI6IF9pbnB1dE9ic2VydmVyLFxuICAgIF9zY3JvbGxlcnM6IF9zY3JvbGxlcnMsXG4gICAgX3Byb3hpZXM6IF9wcm94aWVzLFxuICAgIGJyaWRnZToge1xuICAgICAgc3M6IGZ1bmN0aW9uIHNzKCkge1xuICAgICAgICBfbGFzdFNjcm9sbFRpbWUgfHwgX2Rpc3BhdGNoKFwic2Nyb2xsU3RhcnRcIik7XG4gICAgICAgIF9sYXN0U2Nyb2xsVGltZSA9IF9nZXRUaW1lJDEoKTtcbiAgICAgIH0sXG4gICAgICByZWY6IGZ1bmN0aW9uIHJlZigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWZyZXNoaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgX2dldEdTQVAkMSgpICYmIGdzYXAkMS5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyJDEpO1xuXG4gIGV4cG9ydHMuU2Nyb2xsVHJpZ2dlciA9IFNjcm9sbFRyaWdnZXIkMTtcbiAgZXhwb3J0cy5kZWZhdWx0ID0gU2Nyb2xsVHJpZ2dlciQxO1xuXG4gIGlmICh0eXBlb2Yod2luZG93KSA9PT0gJ3VuZGVmaW5lZCcgfHwgd2luZG93ICE9PSBleHBvcnRzKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTt9IGVsc2Uge2RlbGV0ZSB3aW5kb3cuZGVmYXVsdDt9XG5cbn0pKSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwud2luZG93ID0gZ2xvYmFsLndpbmRvdyB8fCB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIC8qIVxuICAgKiBHU0FQIDMuMTIuMlxuICAgKiBodHRwczovL2dyZWVuc29jay5jb21cbiAgICpcbiAgICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMywgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAgICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gICAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICAqL1xuICB2YXIgX2NvbmZpZyA9IHtcbiAgICBhdXRvU2xlZXA6IDEyMCxcbiAgICBmb3JjZTNEOiBcImF1dG9cIixcbiAgICBudWxsVGFyZ2V0V2FybjogMSxcbiAgICB1bml0czoge1xuICAgICAgbGluZUhlaWdodDogXCJcIlxuICAgIH1cbiAgfSxcbiAgICAgIF9kZWZhdWx0cyA9IHtcbiAgICBkdXJhdGlvbjogLjUsXG4gICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICBkZWxheTogMFxuICB9LFxuICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIF9yZXZlcnRpbmcsXG4gICAgICBfY29udGV4dCxcbiAgICAgIF9iaWdOdW0gPSAxZTgsXG4gICAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgICAgX0hBTEZfUEkgPSBfMlBJIC8gNCxcbiAgICAgIF9nc0lEID0gMCxcbiAgICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgICAgX2NvcyA9IE1hdGguY29zLFxuICAgICAgX3NpbiA9IE1hdGguc2luLFxuICAgICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcbiAgfSxcbiAgICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG4gIH0sXG4gICAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xuICB9LFxuICAgICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIjtcbiAgfSxcbiAgICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIH0sXG4gICAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBmYWxzZTtcbiAgfSxcbiAgICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xuICB9LFxuICAgICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSB8fCBfaXNTdHJpbmcodmFsdWUpO1xuICB9LFxuICAgICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAgIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICAgIF9zdHJpY3ROdW1FeHAgPSAvKD86LT9cXC4/XFxkfFxcLikrL2dpLFxuICAgICAgX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAgIF9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAgIF9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgICAgX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgICBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBfd2luLFxuICAgICAgX2NvcmVJbml0dGVkLFxuICAgICAgX2RvYyxcbiAgICAgIF9nbG9iYWxzID0ge30sXG4gICAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgICBfY29yZVJlYWR5LFxuICAgICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICAgIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xuICB9LFxuICAgICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbiAgfSxcbiAgICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgfSxcbiAgICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICAgIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG4gIH0sXG4gICAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgICAgIF9zdGFydEF0UmV2ZXJ0Q29uZmlnID0ge1xuICAgIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICAgIGlzU3RhcnQ6IHRydWUsXG4gICAga2lsbDogZmFsc2VcbiAgfSxcbiAgICAgIF9yZXZlcnRDb25maWdOb0tpbGwgPSB7XG4gICAgc3VwcHJlc3NFdmVudHM6IHRydWUsXG4gICAga2lsbDogZmFsc2VcbiAgfSxcbiAgICAgIF9yZXZlcnRDb25maWcgPSB7XG4gICAgc3VwcHJlc3NFdmVudHM6IHRydWVcbiAgfSxcbiAgICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgICBfbGF6eVR3ZWVucyA9IFtdLFxuICAgICAgX2xhenlMb29rdXAgPSB7fSxcbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICAgIF9wbHVnaW5zID0ge30sXG4gICAgICBfZWZmZWN0cyA9IHt9LFxuICAgICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgICBfaGFybmVzc1BsdWdpbnMgPSBbXSxcbiAgICAgIF9jYWxsYmFja05hbWVzID0gXCJcIixcbiAgICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzWzBdLFxuICAgICAgICBoYXJuZXNzUGx1Z2luLFxuICAgICAgICBpO1xuICAgIF9pc09iamVjdCh0YXJnZXQpIHx8IF9pc0Z1bmN0aW9uKHRhcmdldCkgfHwgKHRhcmdldHMgPSBbdGFyZ2V0c10pO1xuXG4gICAgaWYgKCEoaGFybmVzc1BsdWdpbiA9ICh0YXJnZXQuX2dzYXAgfHwge30pLmhhcm5lc3MpKSB7XG4gICAgICBpID0gX2hhcm5lc3NQbHVnaW5zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSAmJiAhX2hhcm5lc3NQbHVnaW5zW2ldLnRhcmdldFRlc3QodGFyZ2V0KSkge31cblxuICAgICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgICB9XG5cbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0YXJnZXRzW2ldICYmICh0YXJnZXRzW2ldLl9nc2FwIHx8ICh0YXJnZXRzW2ldLl9nc2FwID0gbmV3IEdTQ2FjaGUodGFyZ2V0c1tpXSwgaGFybmVzc1BsdWdpbikpKSB8fCB0YXJnZXRzLnNwbGljZShpLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0cztcbiAgfSxcbiAgICAgIF9nZXRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRDYWNoZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG4gIH0sXG4gICAgICBfZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgdikge1xuICAgIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbiAgfSxcbiAgICAgIF9mb3JFYWNoTmFtZSA9IGZ1bmN0aW9uIF9mb3JFYWNoTmFtZShuYW1lcywgZnVuYykge1xuICAgIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG4gIH0sXG4gICAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbiAgfSxcbiAgICAgIF9yb3VuZFByZWNpc2UgPSBmdW5jdGlvbiBfcm91bmRQcmVjaXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xuICB9LFxuICAgICAgX3BhcnNlUmVsYXRpdmUgPSBmdW5jdGlvbiBfcGFyc2VSZWxhdGl2ZShzdGFydCwgdmFsdWUpIHtcbiAgICB2YXIgb3BlcmF0b3IgPSB2YWx1ZS5jaGFyQXQoMCksXG4gICAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgICBzdGFydCA9IHBhcnNlRmxvYXQoc3RhcnQpO1xuICAgIHJldHVybiBvcGVyYXRvciA9PT0gXCIrXCIgPyBzdGFydCArIGVuZCA6IG9wZXJhdG9yID09PSBcIi1cIiA/IHN0YXJ0IC0gZW5kIDogb3BlcmF0b3IgPT09IFwiKlwiID8gc3RhcnQgKiBlbmQgOiBzdGFydCAvIGVuZDtcbiAgfSxcbiAgICAgIF9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAgIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgICAgaSA9IDA7XG5cbiAgICBmb3IgKDsgdG9TZWFyY2guaW5kZXhPZih0b0ZpbmRbaV0pIDwgMCAmJiArK2kgPCBsOykge31cblxuICAgIHJldHVybiBpIDwgbDtcbiAgfSxcbiAgICAgIF9sYXp5UmVuZGVyID0gZnVuY3Rpb24gX2xhenlSZW5kZXIoKSB7XG4gICAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgICAgaSxcbiAgICAgICAgdHdlZW47XG5cbiAgICBfbGF6eUxvb2t1cCA9IHt9O1xuICAgIF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0d2VlbiA9IGFbaV07XG4gICAgICB0d2VlbiAmJiB0d2Vlbi5fbGF6eSAmJiAodHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSkuX2xhenkgPSAwKTtcbiAgICB9XG4gIH0sXG4gICAgICBfbGF6eVNhZmVSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVNhZmVSZW5kZXIoYW5pbWF0aW9uLCB0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgIV9yZXZlcnRpbmcgJiYgX2xhenlSZW5kZXIoKTtcbiAgICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIHRpbWUgPCAwICYmIChhbmltYXRpb24uX2luaXR0ZWQgfHwgYW5pbWF0aW9uLl9zdGFydEF0KSk7XG4gICAgX2xhenlUd2VlbnMubGVuZ3RoICYmICFfcmV2ZXJ0aW5nICYmIF9sYXp5UmVuZGVyKCk7XG4gIH0sXG4gICAgICBfbnVtZXJpY0lmUG9zc2libGUgPSBmdW5jdGlvbiBfbnVtZXJpY0lmUG9zc2libGUodmFsdWUpIHtcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgIHJldHVybiAobiB8fCBuID09PSAwKSAmJiAodmFsdWUgKyBcIlwiKS5tYXRjaChfZGVsaW1pdGVkVmFsdWVFeHApLmxlbmd0aCA8IDIgPyBuIDogX2lzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnRyaW0oKSA6IHZhbHVlO1xuICB9LFxuICAgICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgICByZXR1cm4gcDtcbiAgfSxcbiAgICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICAgICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgZGVmYXVsdHMpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gICAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICAgIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH0sXG4gICAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gICAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlO1xuICB9LFxuICAgICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICAgIHZhciBjb3B5ID0ge30sXG4gICAgICAgIHA7XG5cbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBwIGluIGV4Y2x1ZGluZyB8fCAoY29weVtwXSA9IG9ialtwXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHk7XG4gIH0sXG4gICAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gICAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgZnVuYyA9IHZhcnMua2V5ZnJhbWVzID8gX3NldEtleWZyYW1lRGVmYXVsdHMoX2lzQXJyYXkodmFycy5rZXlmcmFtZXMpKSA6IF9zZXREZWZhdWx0cztcblxuICAgIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGZ1bmModmFycywgcGFyZW50LnZhcnMuZGVmYXVsdHMpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnM7XG4gIH0sXG4gICAgICBfYXJyYXlzTWF0Y2ggPSBmdW5jdGlvbiBfYXJyYXlzTWF0Y2goYTEsIGEyKSB7XG4gICAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICAgIG1hdGNoID0gaSA9PT0gYTIubGVuZ3RoO1xuXG4gICAgd2hpbGUgKG1hdGNoICYmIGktLSAmJiBhMVtpXSA9PT0gYTJbaV0pIHt9XG5cbiAgICByZXR1cm4gaSA8IDA7XG4gIH0sXG4gICAgICBfYWRkTGlua2VkTGlzdEl0ZW0gPSBmdW5jdGlvbiBfYWRkTGlua2VkTGlzdEl0ZW0ocGFyZW50LCBjaGlsZCwgZmlyc3RQcm9wLCBsYXN0UHJvcCwgc29ydEJ5KSB7XG4gICAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICAgIH1cblxuICAgIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgICB9XG5cbiAgICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICAgIHQ7XG5cbiAgICBpZiAoc29ydEJ5KSB7XG4gICAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgICAgd2hpbGUgKHByZXYgJiYgcHJldltzb3J0QnldID4gdCkge1xuICAgICAgICBwcmV2ID0gcHJldi5fcHJldjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldikge1xuICAgICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgICAgcHJldi5fbmV4dCA9IGNoaWxkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgICAgcGFyZW50W2ZpcnN0UHJvcF0gPSBjaGlsZDtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICAgIGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgICB9XG5cbiAgICBjaGlsZC5fcHJldiA9IHByZXY7XG4gICAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICAgIHJldHVybiBjaGlsZDtcbiAgfSxcbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gICAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBmaXJzdFByb3AgPSBcIl9maXJzdFwiO1xuICAgIH1cblxuICAgIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBsYXN0UHJvcCA9IFwiX2xhc3RcIjtcbiAgICB9XG5cbiAgICB2YXIgcHJldiA9IGNoaWxkLl9wcmV2LFxuICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICBpZiAocHJldikge1xuICAgICAgcHJldi5fbmV4dCA9IG5leHQ7XG4gICAgfSBlbHNlIGlmIChwYXJlbnRbZmlyc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobmV4dCkge1xuICAgICAgbmV4dC5fcHJldiA9IHByZXY7XG4gICAgfSBlbHNlIGlmIChwYXJlbnRbbGFzdFByb3BdID09PSBjaGlsZCkge1xuICAgICAgcGFyZW50W2xhc3RQcm9wXSA9IHByZXY7XG4gICAgfVxuXG4gICAgY2hpbGQuX25leHQgPSBjaGlsZC5fcHJldiA9IGNoaWxkLnBhcmVudCA9IG51bGw7XG4gIH0sXG4gICAgICBfcmVtb3ZlRnJvbVBhcmVudCA9IGZ1bmN0aW9uIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkLCBvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlKSB7XG4gICAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlICYmIGNoaWxkLnBhcmVudC5yZW1vdmUoY2hpbGQpO1xuICAgIGNoaWxkLl9hY3QgPSAwO1xuICB9LFxuICAgICAgX3VuY2FjaGUgPSBmdW5jdGlvbiBfdW5jYWNoZShhbmltYXRpb24sIGNoaWxkKSB7XG4gICAgaWYgKGFuaW1hdGlvbiAmJiAoIWNoaWxkIHx8IGNoaWxkLl9lbmQgPiBhbmltYXRpb24uX2R1ciB8fCBjaGlsZC5fc3RhcnQgPCAwKSkge1xuICAgICAgdmFyIGEgPSBhbmltYXRpb247XG5cbiAgICAgIHdoaWxlIChhKSB7XG4gICAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgICAgYSA9IGEucGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhbmltYXRpb247XG4gIH0sXG4gICAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICAgIHZhciBwYXJlbnQgPSBhbmltYXRpb24ucGFyZW50O1xuXG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQucGFyZW50KSB7XG4gICAgICBwYXJlbnQuX2RpcnR5ID0gMTtcbiAgICAgIHBhcmVudC50b3RhbER1cmF0aW9uKCk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiBhbmltYXRpb247XG4gIH0sXG4gICAgICBfcmV3aW5kU3RhcnRBdCA9IGZ1bmN0aW9uIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgIHJldHVybiB0d2Vlbi5fc3RhcnRBdCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyICYmICF0d2Vlbi52YXJzLmF1dG9SZXZlcnQgfHwgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpKTtcbiAgfSxcbiAgICAgIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24pIHtcbiAgICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbiAgfSxcbiAgICAgIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbiA9IGZ1bmN0aW9uIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xuICB9LFxuICAgICAgX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gICAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgICByZXR1cm4gdFRpbWUgJiYgd2hvbGUgPT09IHRUaW1lID8gd2hvbGUgLSAxIDogd2hvbGU7XG4gIH0sXG4gICAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gICAgcmV0dXJuIChwYXJlbnRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyArIChjaGlsZC5fdHMgPj0gMCA/IDAgOiBjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cik7XG4gIH0sXG4gICAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgICByZXR1cm4gYW5pbWF0aW9uLl9lbmQgPSBfcm91bmRQcmVjaXNlKGFuaW1hdGlvbi5fc3RhcnQgKyAoYW5pbWF0aW9uLl90RHVyIC8gTWF0aC5hYnMoYW5pbWF0aW9uLl90cyB8fCBhbmltYXRpb24uX3J0cyB8fCBfdGlueU51bSkgfHwgMCkpO1xuICB9LFxuICAgICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAgIHZhciBwYXJlbnQgPSBhbmltYXRpb24uX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICAgIF9zZXRFbmQoYW5pbWF0aW9uKTtcblxuICAgICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfSxcbiAgICAgIF9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gICAgdmFyIHQ7XG5cbiAgICBpZiAoY2hpbGQuX3RpbWUgfHwgIWNoaWxkLl9kdXIgJiYgY2hpbGQuX2luaXR0ZWQgfHwgY2hpbGQuX3N0YXJ0IDwgdGltZWxpbmUuX3RpbWUgJiYgKGNoaWxkLl9kdXIgfHwgIWNoaWxkLmFkZCkpIHtcbiAgICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgICAgY2hpbGQucmVuZGVyKHQsIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChfdW5jYWNoZSh0aW1lbGluZSwgY2hpbGQpLl9kcCAmJiB0aW1lbGluZS5faW5pdHRlZCAmJiB0aW1lbGluZS5fdGltZSA+PSB0aW1lbGluZS5fZHVyICYmIHRpbWVsaW5lLl90cykge1xuICAgICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICAgIHQgPSB0aW1lbGluZTtcblxuICAgICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTtcbiAgICAgICAgICB0ID0gdC5fZHA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUuX3pUaW1lID0gLV90aW55TnVtO1xuICAgIH1cbiAgfSxcbiAgICAgIF9hZGRUb1RpbWVsaW5lID0gZnVuY3Rpb24gX2FkZFRvVGltZWxpbmUodGltZWxpbmUsIGNoaWxkLCBwb3NpdGlvbiwgc2tpcENoZWNrcykge1xuICAgIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgICBjaGlsZC5fZW5kID0gX3JvdW5kUHJlY2lzZShjaGlsZC5fc3RhcnQgKyAoY2hpbGQudG90YWxEdXJhdGlvbigpIC8gTWF0aC5hYnMoY2hpbGQudGltZVNjYWxlKCkpIHx8IDApKTtcblxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICAgIHNraXBDaGVja3MgfHwgX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKTtcbiAgICB0aW1lbGluZS5fdHMgPCAwICYmIF9hbGlnblBsYXloZWFkKHRpbWVsaW5lLCB0aW1lbGluZS5fdFRpbWUpO1xuICAgIHJldHVybiB0aW1lbGluZTtcbiAgfSxcbiAgICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gICAgcmV0dXJuIChfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyIHx8IF9taXNzaW5nUGx1Z2luKFwic2Nyb2xsVHJpZ2dlclwiLCB0cmlnZ2VyKSkgJiYgX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlci5jcmVhdGUodHJpZ2dlciwgYW5pbWF0aW9uKTtcbiAgfSxcbiAgICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpIHtcbiAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lLCB0VGltZSk7XG5cbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoIWZvcmNlICYmIHR3ZWVuLl9wdCAmJiAhX3JldmVydGluZyAmJiAodHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkgIT09IGZhbHNlIHx8ICF0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSkgJiYgX2xhc3RSZW5kZXJlZEZyYW1lICE9PSBfdGlja2VyLmZyYW1lKSB7XG4gICAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgICAgdHdlZW4uX2xhenkgPSBbdFRpbWUsIHN1cHByZXNzRXZlbnRzXTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfSxcbiAgICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQuX3RzICYmIHBhcmVudC5faW5pdHRlZCAmJiAhcGFyZW50Ll9sb2NrICYmIChwYXJlbnQucmF3VGltZSgpIDwgMCB8fCBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHBhcmVudCkpO1xuICB9LFxuICAgICAgX2lzRnJvbU9yRnJvbVN0YXJ0ID0gZnVuY3Rpb24gX2lzRnJvbU9yRnJvbVN0YXJ0KF9yZWYyKSB7XG4gICAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICAgIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG4gIH0sXG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgICByYXRpbyA9IHRvdGFsVGltZSA8IDAgfHwgIXRvdGFsVGltZSAmJiAoIXR3ZWVuLl9zdGFydCAmJiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KHR3ZWVuKSAmJiAhKCF0d2Vlbi5faW5pdHRlZCAmJiBfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSB8fCAodHdlZW4uX3RzIDwgMCB8fCB0d2Vlbi5fZHAuX3RzIDwgMCkgJiYgIV9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpID8gMCA6IDEsXG4gICAgICAgIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgICAgdFRpbWUgPSAwLFxuICAgICAgICBwdCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBwcmV2SXRlcmF0aW9uO1xuXG4gICAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApO1xuICAgICAgc3VwcHJlc3NFdmVudHMgfHwgKHN1cHByZXNzRXZlbnRzID0gdG90YWxUaW1lICYmICFwcmV2SXRlcmF0aW9uKTtcbiAgICAgIHR3ZWVuLnJhdGlvID0gcmF0aW87XG4gICAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgICAgdHdlZW4uX3RUaW1lID0gdFRpbWU7XG4gICAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0b3RhbFRpbWUgPCAwICYmIF9yZXdpbmRTdGFydEF0KHR3ZWVuLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCB0cnVlKTtcbiAgICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgdFRpbWUgJiYgdHdlZW4uX3JlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdHdlZW4ucGFyZW50ICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICFfcmV2ZXJ0aW5nKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICB9XG4gIH0sXG4gICAgICBfZmluZE5leHRQYXVzZVR3ZWVuID0gZnVuY3Rpb24gX2ZpbmROZXh0UGF1c2VUd2VlbihhbmltYXRpb24sIHByZXZUaW1lLCB0aW1lKSB7XG4gICAgdmFyIGNoaWxkO1xuXG4gICAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgICAgY2hpbGQgPSBhbmltYXRpb24uX2ZpcnN0O1xuXG4gICAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPj0gdGltZSkge1xuICAgICAgICBpZiAoY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICAgIHZhciByZXBlYXQgPSBhbmltYXRpb24uX3JlcGVhdCxcbiAgICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gICAgdG90YWxQcm9ncmVzcyAmJiAhbGVhdmVQbGF5aGVhZCAmJiAoYW5pbWF0aW9uLl90aW1lICo9IGR1ciAvIGFuaW1hdGlvbi5fZHVyKTtcbiAgICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgICB0b3RhbFByb2dyZXNzID4gMCAmJiAhbGVhdmVQbGF5aGVhZCAmJiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKTtcbiAgICBhbmltYXRpb24ucGFyZW50ICYmIF9zZXRFbmQoYW5pbWF0aW9uKTtcbiAgICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH0sXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgICByZXR1cm4gYW5pbWF0aW9uIGluc3RhbmNlb2YgVGltZWxpbmUgPyBfdW5jYWNoZShhbmltYXRpb24pIDogX3NldER1cmF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLl9kdXIpO1xuICB9LFxuICAgICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgICBfc3RhcnQ6IDAsXG4gICAgZW5kVGltZTogX2VtcHR5RnVuYyxcbiAgICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG4gIH0sXG4gICAgICBfcGFyc2VQb3NpdGlvbiA9IGZ1bmN0aW9uIF9wYXJzZVBvc2l0aW9uKGFuaW1hdGlvbiwgcG9zaXRpb24sIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgICAgcmVjZW50ID0gYW5pbWF0aW9uLl9yZWNlbnQgfHwgX3plcm9Qb3NpdGlvbixcbiAgICAgICAgY2xpcHBlZER1cmF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgPj0gX2JpZ051bSA/IHJlY2VudC5lbmRUaW1lKGZhbHNlKSA6IGFuaW1hdGlvbi5fZHVyLFxuICAgICAgICBpLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGlzUGVyY2VudDtcblxuICAgIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgICAgaXNQZXJjZW50ID0gcG9zaXRpb24uc3Vic3RyKC0xKSA9PT0gXCIlXCI7XG4gICAgICBpID0gcG9zaXRpb24uaW5kZXhPZihcIj1cIik7XG5cbiAgICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgICAgaSA+PSAwICYmIChwb3NpdGlvbiA9IHBvc2l0aW9uLnJlcGxhY2UoLz0vLCBcIlwiKSk7XG4gICAgICAgIHJldHVybiAob2Zmc2V0ID09PSBcIjxcIiA/IHJlY2VudC5fc3RhcnQgOiByZWNlbnQuZW5kVGltZShyZWNlbnQuX3JlcGVhdCA+PSAwKSkgKyAocGFyc2VGbG9hdChwb3NpdGlvbi5zdWJzdHIoMSkpIHx8IDApICogKGlzUGVyY2VudCA/IChpIDwgMCA/IHJlY2VudCA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKSAvIDEwMCA6IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgcG9zaXRpb24gaW4gbGFiZWxzIHx8IChsYWJlbHNbcG9zaXRpb25dID0gY2xpcHBlZER1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgICB9XG5cbiAgICAgIG9mZnNldCA9IHBhcnNlRmxvYXQocG9zaXRpb24uY2hhckF0KGkgLSAxKSArIHBvc2l0aW9uLnN1YnN0cihpICsgMSkpO1xuXG4gICAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IC8gMTAwICogKF9pc0FycmF5KHBlcmNlbnRBbmltYXRpb24pID8gcGVyY2VudEFuaW1hdGlvblswXSA6IHBlcmNlbnRBbmltYXRpb24pLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb24gPT0gbnVsbCA/IGNsaXBwZWREdXJhdGlvbiA6ICtwb3NpdGlvbjtcbiAgfSxcbiAgICAgIF9jcmVhdGVUd2VlblR5cGUgPSBmdW5jdGlvbiBfY3JlYXRlVHdlZW5UeXBlKHR5cGUsIHBhcmFtcywgdGltZWxpbmUpIHtcbiAgICB2YXIgaXNMZWdhY3kgPSBfaXNOdW1iZXIocGFyYW1zWzFdKSxcbiAgICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgICB2YXJzID0gcGFyYW1zW3ZhcnNJbmRleF0sXG4gICAgICAgIGlyVmFycyxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaXNMZWdhY3kgJiYgKHZhcnMuZHVyYXRpb24gPSBwYXJhbXNbMV0pO1xuICAgIHZhcnMucGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICBpZiAodHlwZSkge1xuICAgICAgaXJWYXJzID0gdmFycztcbiAgICAgIHBhcmVudCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAgIGlyVmFycyA9IHBhcmVudC52YXJzLmRlZmF1bHRzIHx8IHt9O1xuICAgICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKGlyVmFycy5pbW1lZGlhdGVSZW5kZXIpO1xuICAgICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUd2VlbihwYXJhbXNbMF0sIHZhcnMsIHBhcmFtc1t2YXJzSW5kZXggKyAxXSk7XG4gIH0sXG4gICAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgPyBmdW5jKHZhbHVlKSA6IGZ1bmM7XG4gIH0sXG4gICAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgbWluID8gbWluIDogdmFsdWUgPiBtYXggPyBtYXggOiB2YWx1ZTtcbiAgfSxcbiAgICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gICAgcmV0dXJuICFfaXNTdHJpbmcodmFsdWUpIHx8ICEodiA9IF91bml0RXhwLmV4ZWModmFsdWUpKSA/IFwiXCIgOiB2WzFdO1xuICB9LFxuICAgICAgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIF9jbGFtcChtaW4sIG1heCwgdik7XG4gICAgfSk7XG4gIH0sXG4gICAgICBfc2xpY2UgPSBbXS5zbGljZSxcbiAgICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbiAgfSxcbiAgICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBfYWNjdW11bGF0b3I7XG5cbiAgICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICAgIH0pIHx8IGFjY3VtdWxhdG9yO1xuICB9LFxuICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUsIHNjb3BlLCBsZWF2ZVN0cmluZ3MpIHtcbiAgICByZXR1cm4gX2NvbnRleHQgJiYgIXNjb3BlICYmIF9jb250ZXh0LnNlbGVjdG9yID8gX2NvbnRleHQuc2VsZWN0b3IodmFsdWUpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xuICB9LFxuICAgICAgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcih2YWx1ZSkge1xuICAgIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgdmFyIGVsID0gdmFsdWUuY3VycmVudCB8fCB2YWx1ZS5uYXRpdmVFbGVtZW50IHx8IHZhbHVlO1xuICAgICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgICB9O1xuICB9LFxuICAgICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICAgIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC41IC0gTWF0aC5yYW5kb20oKTtcbiAgICB9KTtcbiAgfSxcbiAgICAgIGRpc3RyaWJ1dGUgPSBmdW5jdGlvbiBkaXN0cmlidXRlKHYpIHtcbiAgICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cblxuICAgIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICAgIGVhY2g6IHZcbiAgICB9LFxuICAgICAgICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICAgIGJhc2UgPSBwYXJzZUZsb2F0KHZhcnMuYmFzZSkgfHwgMCxcbiAgICAgICAgY2FjaGUgPSB7fSxcbiAgICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICAgIHJhdGlvcyA9IGlzTmFOKGZyb20pIHx8IGlzRGVjaW1hbCxcbiAgICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgICAgcmF0aW9ZID0gZnJvbTtcblxuICAgIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgICAgY2VudGVyOiAuNSxcbiAgICAgICAgZWRnZXM6IC41LFxuICAgICAgICBlbmQ6IDFcbiAgICAgIH1bZnJvbV0gfHwgMDtcbiAgICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgICAgcmF0aW9ZID0gZnJvbVsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgICAgdmFyIGwgPSAoYSB8fCB2YXJzKS5sZW5ndGgsXG4gICAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgICBvcmlnaW5ZLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgeSxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGosXG4gICAgICAgICAgbWF4LFxuICAgICAgICAgIG1pbixcbiAgICAgICAgICB3cmFwQXQ7XG5cbiAgICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICAgIHdyYXBBdCA9IHZhcnMuZ3JpZCA9PT0gXCJhdXRvXCIgPyAwIDogKHZhcnMuZ3JpZCB8fCBbMSwgX2JpZ051bV0pWzFdO1xuXG4gICAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgICB3aGlsZSAobWF4IDwgKG1heCA9IGFbd3JhcEF0KytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpICYmIHdyYXBBdCA8IGwpIHt9XG5cbiAgICAgICAgICB3cmFwQXQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3RhbmNlcyA9IGNhY2hlW2xdID0gW107XG4gICAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgICBtYXggPSAwO1xuICAgICAgICBtaW4gPSBfYmlnTnVtO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICB4ID0gaiAlIHdyYXBBdCAtIG9yaWdpblg7XG4gICAgICAgICAgeSA9IG9yaWdpblkgLSAoaiAvIHdyYXBBdCB8IDApO1xuICAgICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgICAgZCA+IG1heCAmJiAobWF4ID0gZCk7XG4gICAgICAgICAgZCA8IG1pbiAmJiAobWluID0gZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmcm9tID09PSBcInJhbmRvbVwiICYmIHNodWZmbGUoZGlzdGFuY2VzKTtcbiAgICAgICAgZGlzdGFuY2VzLm1heCA9IG1heCAtIG1pbjtcbiAgICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgICAgZGlzdGFuY2VzLnYgPSBsID0gKHBhcnNlRmxvYXQodmFycy5hbW91bnQpIHx8IHBhcnNlRmxvYXQodmFycy5lYWNoKSAqICh3cmFwQXQgPiBsID8gbCAtIDEgOiAhYXhpcyA/IE1hdGgubWF4KHdyYXBBdCwgbCAvIHdyYXBBdCkgOiBheGlzID09PSBcInlcIiA/IGwgLyB3cmFwQXQgOiB3cmFwQXQpIHx8IDApICogKGZyb20gPT09IFwiZWRnZXNcIiA/IC0xIDogMSk7XG4gICAgICAgIGRpc3RhbmNlcy5iID0gbCA8IDAgPyBiYXNlIC0gbCA6IGJhc2U7XG4gICAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7XG4gICAgICAgIGVhc2UgPSBlYXNlICYmIGwgPCAwID8gX2ludmVydEVhc2UoZWFzZSkgOiBlYXNlO1xuICAgICAgfVxuXG4gICAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgICAgcmV0dXJuIF9yb3VuZFByZWNpc2UoZGlzdGFuY2VzLmIgKyAoZWFzZSA/IGVhc2UobCkgOiBsKSAqIGRpc3RhbmNlcy52KSArIGRpc3RhbmNlcy51O1xuICAgIH07XG4gIH0sXG4gICAgICBfcm91bmRNb2RpZmllciA9IGZ1bmN0aW9uIF9yb3VuZE1vZGlmaWVyKHYpIHtcbiAgICB2YXIgcCA9IE1hdGgucG93KDEwLCAoKHYgKyBcIlwiKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJhdykge1xuICAgICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICAgIHJldHVybiAobiAtIG4gJSAxKSAvIHAgKyAoX2lzTnVtYmVyKHJhdykgPyAwIDogZ2V0VW5pdChyYXcpKTtcbiAgICB9O1xuICB9LFxuICAgICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICAgIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgICAgcmFkaXVzLFxuICAgICAgICBpczJEO1xuXG4gICAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgICByYWRpdXMgPSBpc0FycmF5ID0gc25hcFRvLnJhZGl1cyB8fCBfYmlnTnVtO1xuXG4gICAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICAgIGlmIChpczJEID0gIV9pc051bWJlcihzbmFwVG9bMF0pKSB7XG4gICAgICAgICAgcmFkaXVzICo9IHJhZGl1cztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICAgIHJldHVybiBNYXRoLmFicyhpczJEIC0gcmF3KSA8PSByYWRpdXMgPyBpczJEIDogcmF3O1xuICAgIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgICB5ID0gcGFyc2VGbG9hdChpczJEID8gcmF3LnkgOiAwKSxcbiAgICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICAgIGkgPSBzbmFwVG8ubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5O1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmIChpczJEKSB7XG4gICAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgICAgZHkgPSBzbmFwVG9baV0ueSAtIHk7XG4gICAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkeCA9IE1hdGguYWJzKHNuYXBUb1tpXSAtIHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgICAgbWluID0gZHg7XG4gICAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICAgIH0pO1xuICB9LFxuICAgICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKF9pc0FycmF5KG1pbikgPyAhbWF4IDogcm91bmRpbmdJbmNyZW1lbnQgPT09IHRydWUgPyAhIShyb3VuZGluZ0luY3JlbWVudCA9IDApIDogIXJldHVybkZ1bmN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICAgIH0pO1xuICB9LFxuICAgICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGZ1bmN0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb25zLnJlZHVjZShmdW5jdGlvbiAodiwgZikge1xuICAgICAgICByZXR1cm4gZih2KTtcbiAgICAgIH0sIHZhbHVlKTtcbiAgICB9O1xuICB9LFxuICAgICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgICB9O1xuICB9LFxuICAgICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAgIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xuICB9LFxuICAgICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBhW35+d3JhcHBlcihpbmRleCldO1xuICAgIH0pO1xuICB9LFxuICAgICAgd3JhcCA9IGZ1bmN0aW9uIHdyYXAobWluLCBtYXgsIHZhbHVlKSB7XG4gICAgdmFyIHJhbmdlID0gbWF4IC0gbWluO1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgICB9KTtcbiAgfSxcbiAgICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gICAgdmFyIHJhbmdlID0gbWF4IC0gbWluLFxuICAgICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSAodG90YWwgKyAodmFsdWUgLSBtaW4pICUgdG90YWwpICUgdG90YWwgfHwgMDtcbiAgICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gICAgfSk7XG4gIH0sXG4gICAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gICAgdmFyIHByZXYgPSAwLFxuICAgICAgICBzID0gXCJcIixcbiAgICAgICAgaSxcbiAgICAgICAgbnVtcyxcbiAgICAgICAgZW5kLFxuICAgICAgICBpc0FycmF5O1xuXG4gICAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgICAgZW5kID0gdmFsdWUuaW5kZXhPZihcIilcIiwgaSk7XG4gICAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgICAgcyArPSB2YWx1ZS5zdWJzdHIocHJldiwgaSAtIHByZXYpICsgcmFuZG9tKGlzQXJyYXkgPyBudW1zIDogK251bXNbMF0sIGlzQXJyYXkgPyAwIDogK251bXNbMV0sICtudW1zWzJdIHx8IDFlLTUpO1xuICAgICAgcHJldiA9IGVuZCArIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMgKyB2YWx1ZS5zdWJzdHIocHJldiwgdmFsdWUubGVuZ3RoIC0gcHJldik7XG4gIH0sXG4gICAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gICAgdmFyIGluUmFuZ2UgPSBpbk1heCAtIGluTWluLFxuICAgICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBvdXRNaW4gKyAoKHZhbHVlIC0gaW5NaW4pIC8gaW5SYW5nZSAqIG91dFJhbmdlIHx8IDApO1xuICAgIH0pO1xuICB9LFxuICAgICAgaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgZW5kLCBwcm9ncmVzcywgbXV0YXRlKSB7XG4gICAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICAgIH07XG5cbiAgICBpZiAoIWZ1bmMpIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgICAgbWFzdGVyID0ge30sXG4gICAgICAgICAgcCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGludGVycG9sYXRvcnMsXG4gICAgICAgICAgbCxcbiAgICAgICAgICBpbDtcblxuICAgICAgcHJvZ3Jlc3MgPT09IHRydWUgJiYgKG11dGF0ZSA9IDEpICYmIChwcm9ncmVzcyA9IG51bGwpO1xuXG4gICAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgICAgc3RhcnQgPSB7XG4gICAgICAgICAgcDogc3RhcnRcbiAgICAgICAgfTtcbiAgICAgICAgZW5kID0ge1xuICAgICAgICAgIHA6IGVuZFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgaW50ZXJwb2xhdG9ycyA9IFtdO1xuICAgICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbC0tO1xuXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHApIHtcbiAgICAgICAgICBwICo9IGw7XG4gICAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdG9yc1tpXShwIC0gaSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgICB9IGVsc2UgaWYgKCFtdXRhdGUpIHtcbiAgICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWludGVycG9sYXRvcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihwcm9ncmVzcywgZnVuYyk7XG4gIH0sXG4gICAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBwLFxuICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgbGFiZWw7XG5cbiAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgICAgbGFiZWwgPSBwO1xuICAgICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGFiZWw7XG4gIH0sXG4gICAgICBfY2FsbGJhY2sgPSBmdW5jdGlvbiBfY2FsbGJhY2soYW5pbWF0aW9uLCB0eXBlLCBleGVjdXRlTGF6eUZpcnN0KSB7XG4gICAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgICBwcmV2Q29udGV4dCA9IF9jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gYW5pbWF0aW9uLl9jdHgsXG4gICAgICAgIHBhcmFtcyxcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIHJlc3VsdDtcblxuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgICBzY29wZSA9IHYuY2FsbGJhY2tTY29wZSB8fCBhbmltYXRpb247XG4gICAgZXhlY3V0ZUxhenlGaXJzdCAmJiBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICAgIHJlc3VsdCA9IHBhcmFtcyA/IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpIDogY2FsbGJhY2suY2FsbChzY29wZSk7XG4gICAgX2NvbnRleHQgPSBwcmV2Q29udGV4dDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAgICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gICAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyICYmIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyLmtpbGwoISFfcmV2ZXJ0aW5nKTtcbiAgICBhbmltYXRpb24ucHJvZ3Jlc3MoKSA8IDEgJiYgX2NhbGxiYWNrKGFuaW1hdGlvbiwgXCJvbkludGVycnVwdFwiKTtcbiAgICByZXR1cm4gYW5pbWF0aW9uO1xuICB9LFxuICAgICAgX3F1aWNrVHdlZW4sXG4gICAgICBfcmVnaXN0ZXJQbHVnaW5RdWV1ZSA9IFtdLFxuICAgICAgX2NyZWF0ZVBsdWdpbiA9IGZ1bmN0aW9uIF9jcmVhdGVQbHVnaW4oY29uZmlnKSB7XG4gICAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiBjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9ICFjb25maWcubmFtZSAmJiBjb25maWdbXCJkZWZhdWx0XCJdIHx8IGNvbmZpZztcblxuICAgICAgdmFyIG5hbWUgPSBjb25maWcubmFtZSxcbiAgICAgICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcHJvcHMgPSBbXTtcbiAgICAgIH0gOiBjb25maWcsXG4gICAgICAgICAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICAgICAgaW5pdDogX2VtcHR5RnVuYyxcbiAgICAgICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICAgICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgICAgICBraWxsOiBfa2lsbFByb3BUd2VlbnNPZixcbiAgICAgICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICAgICAgcmF3VmFyczogMFxuICAgICAgfSxcbiAgICAgICAgICBzdGF0aWNzID0ge1xuICAgICAgICB0YXJnZXRUZXN0OiAwLFxuICAgICAgICBnZXQ6IDAsXG4gICAgICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICAgICAgYWxpYXNlczoge30sXG4gICAgICAgIHJlZ2lzdGVyOiAwXG4gICAgICB9O1xuXG4gICAgICBfd2FrZSgpO1xuXG4gICAgICBpZiAoY29uZmlnICE9PSBQbHVnaW4pIHtcbiAgICAgICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTtcblxuICAgICAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTtcblxuICAgICAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgICAgIGlmIChjb25maWcudGFyZ2V0VGVzdCkge1xuICAgICAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7XG4gICAgICB9XG5cbiAgICAgIF9hZGRHbG9iYWwobmFtZSwgUGx1Z2luKTtcblxuICAgICAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyAmJiBfcmVnaXN0ZXJQbHVnaW5RdWV1ZS5wdXNoKGNvbmZpZyk7XG4gICAgfVxuICB9LFxuICAgICAgXzI1NSA9IDI1NSxcbiAgICAgIF9jb2xvckxvb2t1cCA9IHtcbiAgICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gICAgbGltZTogWzAsIF8yNTUsIDBdLFxuICAgIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICAgIGJsYWNrOiBbMCwgMCwgMF0sXG4gICAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgICB0ZWFsOiBbMCwgMTI4LCAxMjhdLFxuICAgIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgICB3aGl0ZTogW18yNTUsIF8yNTUsIF8yNTVdLFxuICAgIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICAgIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICAgIG9yYW5nZTogW18yNTUsIDE2NSwgMF0sXG4gICAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICAgIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgICBncmVlbjogWzAsIDEyOCwgMF0sXG4gICAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gICAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgICBjeWFuOiBbMCwgXzI1NSwgXzI1NV0sXG4gICAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxuICB9LFxuICAgICAgX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gICAgaCArPSBoIDwgMCA/IDEgOiBoID4gMSA/IC0xIDogMDtcbiAgICByZXR1cm4gKGggKiA2IDwgMSA/IG0xICsgKG0yIC0gbTEpICogaCAqIDYgOiBoIDwgLjUgPyBtMiA6IGggKiAzIDwgMiA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogXzI1NSArIC41IHwgMDtcbiAgfSxcbiAgICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gICAgdmFyIGEgPSAhdiA/IF9jb2xvckxvb2t1cC5ibGFjayA6IF9pc051bWJlcih2KSA/IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV0gOiAwLFxuICAgICAgICByLFxuICAgICAgICBnLFxuICAgICAgICBiLFxuICAgICAgICBoLFxuICAgICAgICBzLFxuICAgICAgICBsLFxuICAgICAgICBtYXgsXG4gICAgICAgIG1pbixcbiAgICAgICAgZCxcbiAgICAgICAgd2FzSFNMO1xuXG4gICAgaWYgKCFhKSB7XG4gICAgICBpZiAodi5zdWJzdHIoLTEpID09PSBcIixcIikge1xuICAgICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgICAgfSBlbHNlIGlmICh2LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgICBnID0gdi5jaGFyQXQoMik7XG4gICAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAgIGEgPSBwYXJzZUludCh2LnN1YnN0cigxLCA2KSwgMTYpO1xuICAgICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgICB9XG5cbiAgICAgICAgdiA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG4gICAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgICBhID0gd2FzSFNMID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKTtcblxuICAgICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICAgIHMgPSArYVsxXSAvIDEwMDtcbiAgICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgICAgciA9IGwgKiAyIC0gZztcbiAgICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7XG4gICAgICAgICAgYVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcbiAgICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgICB9IGVsc2UgaWYgKH52LmluZGV4T2YoXCI9XCIpKSB7XG4gICAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgICAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgICAgfVxuXG4gICAgICBhID0gYS5tYXAoTnVtYmVyKTtcbiAgICB9XG5cbiAgICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgICAgciA9IGFbMF0gLyBfMjU1O1xuICAgICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gcyA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkID0gbWF4IC0gbWluO1xuICAgICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgaCAqPSA2MDtcbiAgICAgIH1cblxuICAgICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgICBhWzFdID0gfn4ocyAqIDEwMCArIC41KTtcbiAgICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICAgIH1cblxuICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gICAgICBfY29sb3JPcmRlckRhdGEgPSBmdW5jdGlvbiBfY29sb3JPcmRlckRhdGEodikge1xuICAgIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgICAgYyA9IFtdLFxuICAgICAgICBpID0gLTE7XG4gICAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgIHZhciBhID0gdi5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gICAgfSk7XG4gICAgdmFsdWVzLmMgPSBjO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gICAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgICAgY29sb3JzID0gKHMgKyByZXN1bHQpLm1hdGNoKF9jb2xvckV4cCksXG4gICAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGMsXG4gICAgICAgIHNoZWxsLFxuICAgICAgICBkLFxuICAgICAgICBsO1xuXG4gICAgaWYgKCFjb2xvcnMpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICAgIH0pO1xuXG4gICAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgICAgYyA9IG9yZGVyTWF0Y2hEYXRhLmM7XG5cbiAgICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaGVsbCkge1xuICAgICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbiAgfSxcbiAgICAgIF9jb2xvckV4cCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgICAgcDtcblxuICAgIGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcbiAgICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVnRXhwKHMgKyBcIilcIiwgXCJnaVwiKTtcbiAgfSgpLFxuICAgICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICAgIF9jb2xvclN0cmluZ0ZpbHRlciA9IGZ1bmN0aW9uIF9jb2xvclN0cmluZ0ZpbHRlcihhKSB7XG4gICAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgICAgdG9IU0w7XG4gICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgICBhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG4gICAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgICAgIF90aWNrZXJBY3RpdmUsXG4gICAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfZ2V0VGltZSA9IERhdGUubm93LFxuICAgICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgICAgX3N0YXJ0VGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICAgIF9uZXh0VGltZSA9IF9nYXAsXG4gICAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgX2lkLFxuICAgICAgICBfcmVxLFxuICAgICAgICBfcmFmLFxuICAgICAgICBfc2VsZixcbiAgICAgICAgX2RlbHRhLFxuICAgICAgICBfaSxcbiAgICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgICB2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcbiAgICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICAgIG92ZXJsYXAsXG4gICAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgICAgdGltZSxcbiAgICAgICAgICBmcmFtZTtcblxuICAgICAgZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQgJiYgKF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZyk7XG4gICAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICAgIG92ZXJsYXAgPSB0aW1lIC0gX25leHRUaW1lO1xuXG4gICAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgICAgX2RlbHRhID0gdGltZSAtIF9zZWxmLnRpbWUgKiAxMDAwO1xuICAgICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgICBkaXNwYXRjaCA9IDE7XG4gICAgICB9XG5cbiAgICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpO1xuXG4gICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfc2VsZiA9IHtcbiAgICAgIHRpbWU6IDAsXG4gICAgICBmcmFtZTogMCxcbiAgICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgIF90aWNrKHRydWUpO1xuICAgICAgfSxcbiAgICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICAgIHJldHVybiBfZGVsdGEgLyAoMTAwMCAvIChmcHMgfHwgNjApKTtcbiAgICAgIH0sXG4gICAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgICBpZiAoX2NvcmVSZWFkeSkge1xuICAgICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICAgIF9kb2MgPSBfd2luLmRvY3VtZW50IHx8IHt9O1xuICAgICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICAgIF9pbnN0YWxsKF9pbnN0YWxsU2NvcGUgfHwgX3dpbi5HcmVlblNvY2tHbG9iYWxzIHx8ICFfd2luLmdzYXAgJiYgX3dpbiB8fCB7fSk7XG5cbiAgICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgICAgICAgICAgX3JlZ2lzdGVyUGx1Z2luUXVldWUuZm9yRWFjaChfY3JlYXRlUGx1Z2luKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfaWQgJiYgX3NlbGYuc2xlZXAoKTtcblxuICAgICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgICBfdGljaygyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgICAgKF9yYWYgPyBfd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lIDogY2xlYXJUaW1lb3V0KShfaWQpO1xuICAgICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgICB9LFxuICAgICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IEluZmluaXR5O1xuICAgICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZyB8fCAzMywgX2xhZ1RocmVzaG9sZCk7XG4gICAgICB9LFxuICAgICAgZnBzOiBmdW5jdGlvbiBmcHMoX2Zwcykge1xuICAgICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICAgIH0sXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgICB2YXIgZnVuYyA9IG9uY2UgPyBmdW5jdGlvbiAodCwgZCwgZiwgdikge1xuICAgICAgICAgIGNhbGxiYWNrKHQsIGQsIGYsIHYpO1xuXG4gICAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgICB9IDogY2FsbGJhY2s7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGNhbGxiYWNrKTtcblxuICAgICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNhbGxiYWNrLCBpKSB7XG4gICAgICAgIH4oaSA9IF9saXN0ZW5lcnMuaW5kZXhPZihjYWxsYmFjaykpICYmIF9saXN0ZW5lcnMuc3BsaWNlKGksIDEpICYmIF9pID49IGkgJiYgX2ktLTtcbiAgICAgIH0sXG4gICAgICBfbGlzdGVuZXJzOiBfbGlzdGVuZXJzXG4gICAgfTtcbiAgICByZXR1cm4gX3NlbGY7XG4gIH0oKSxcbiAgICAgIF93YWtlID0gZnVuY3Rpb24gX3dha2UoKSB7XG4gICAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xuICB9LFxuICAgICAgX2Vhc2VNYXAgPSB7fSxcbiAgICAgIF9jdXN0b21FYXNlRXhwID0gL15bXFxkLlxcLU1dW1xcZC5cXC0sXFxzXS8sXG4gICAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgICBfcGFyc2VPYmplY3RJblN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZU9iamVjdEluU3RyaW5nKHZhbHVlKSB7XG4gICAgdmFyIG9iaiA9IHt9LFxuICAgICAgICBzcGxpdCA9IHZhbHVlLnN1YnN0cigxLCB2YWx1ZS5sZW5ndGggLSAzKS5zcGxpdChcIjpcIiksXG4gICAgICAgIGtleSA9IHNwbGl0WzBdLFxuICAgICAgICBpID0gMSxcbiAgICAgICAgbCA9IHNwbGl0Lmxlbmd0aCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHZhbCxcbiAgICAgICAgcGFyc2VkVmFsO1xuXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgICAgaW5kZXggPSBpICE9PSBsIC0gMSA/IHZhbC5sYXN0SW5kZXhPZihcIixcIikgOiB2YWwubGVuZ3RoO1xuICAgICAgcGFyc2VkVmFsID0gdmFsLnN1YnN0cigwLCBpbmRleCk7XG4gICAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgICAga2V5ID0gdmFsLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9LFxuICAgICAgX3ZhbHVlSW5QYXJlbnRoZXNlcyA9IGZ1bmN0aW9uIF92YWx1ZUluUGFyZW50aGVzZXModmFsdWUpIHtcbiAgICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgICAgY2xvc2UgPSB2YWx1ZS5pbmRleE9mKFwiKVwiKSxcbiAgICAgICAgbmVzdGVkID0gdmFsdWUuaW5kZXhPZihcIihcIiwgb3Blbik7XG4gICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbiAgfSxcbiAgICAgIF9jb25maWdFYXNlRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9jb25maWdFYXNlRnJvbVN0cmluZyhuYW1lKSB7XG4gICAgdmFyIHNwbGl0ID0gKG5hbWUgKyBcIlwiKS5zcGxpdChcIihcIiksXG4gICAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gICAgcmV0dXJuIGVhc2UgJiYgc3BsaXQubGVuZ3RoID4gMSAmJiBlYXNlLmNvbmZpZyA/IGVhc2UuY29uZmlnLmFwcGx5KG51bGwsIH5uYW1lLmluZGV4T2YoXCJ7XCIpID8gW19wYXJzZU9iamVjdEluU3RyaW5nKHNwbGl0WzFdKV0gOiBfdmFsdWVJblBhcmVudGhlc2VzKG5hbWUpLnNwbGl0KFwiLFwiKS5tYXAoX251bWVyaWNJZlBvc3NpYmxlKSkgOiBfZWFzZU1hcC5fQ0UgJiYgX2N1c3RvbUVhc2VFeHAudGVzdChuYW1lKSA/IF9lYXNlTWFwLl9DRShcIlwiLCBuYW1lKSA6IGVhc2U7XG4gIH0sXG4gICAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZSgxIC0gcCk7XG4gICAgfTtcbiAgfSxcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gICAgdmFyIGNoaWxkID0gdGltZWxpbmUuX2ZpcnN0LFxuICAgICAgICBlYXNlO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUaW1lbGluZSkge1xuICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQsIGlzWW95byk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgICBpZiAoY2hpbGQudGltZWxpbmUpIHtcbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UoY2hpbGQudGltZWxpbmUsIGlzWW95byk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWFzZSA9IGNoaWxkLl9lYXNlO1xuICAgICAgICAgIGNoaWxkLl9lYXNlID0gY2hpbGQuX3lFYXNlO1xuICAgICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgICAgY2hpbGQuX3lveW8gPSBpc1lveW87XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0sXG4gICAgICBfcGFyc2VFYXNlID0gZnVuY3Rpb24gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkge1xuICAgIHJldHVybiAhZWFzZSA/IGRlZmF1bHRFYXNlIDogKF9pc0Z1bmN0aW9uKGVhc2UpID8gZWFzZSA6IF9lYXNlTWFwW2Vhc2VdIHx8IF9jb25maWdFYXNlRnJvbVN0cmluZyhlYXNlKSkgfHwgZGVmYXVsdEVhc2U7XG4gIH0sXG4gICAgICBfaW5zZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnNlcnRFYXNlKG5hbWVzLCBlYXNlSW4sIGVhc2VPdXQsIGVhc2VJbk91dCkge1xuICAgIGlmIChlYXNlT3V0ID09PSB2b2lkIDApIHtcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgICAgcmV0dXJuIDEgLSBlYXNlSW4oMSAtIHApO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZWFzZUluT3V0ID09PSB2b2lkIDApIHtcbiAgICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uIGVhc2VJbk91dChwKSB7XG4gICAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGVhc2UgPSB7XG4gICAgICBlYXNlSW46IGVhc2VJbixcbiAgICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICAgIH0sXG4gICAgICAgIGxvd2VyY2FzZU5hbWU7XG5cbiAgICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfZWFzZU1hcFtuYW1lXSA9IF9nbG9iYWxzW25hbWVdID0gZWFzZTtcbiAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCldID0gZWFzZU91dDtcblxuICAgICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICAgIF9lYXNlTWFwW2xvd2VyY2FzZU5hbWUgKyAocCA9PT0gXCJlYXNlSW5cIiA/IFwiLmluXCIgOiBwID09PSBcImVhc2VPdXRcIiA/IFwiLm91dFwiIDogXCIuaW5PdXRcIildID0gX2Vhc2VNYXBbbmFtZSArIFwiLlwiICsgcF0gPSBlYXNlW3BdO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVhc2U7XG4gIH0sXG4gICAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyAoMSAtIGVhc2VPdXQoMSAtIHAgKiAyKSkgLyAyIDogLjUgKyBlYXNlT3V0KChwIC0gLjUpICogMikgLyAyO1xuICAgIH07XG4gIH0sXG4gICAgICBfY29uZmlnRWxhc3RpYyA9IGZ1bmN0aW9uIF9jb25maWdFbGFzdGljKHR5cGUsIGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgICBwMiA9IChwZXJpb2QgfHwgKHR5cGUgPyAuMyA6IC40NSkpIC8gKGFtcGxpdHVkZSA8IDEgPyBhbXBsaXR1ZGUgOiAxKSxcbiAgICAgICAgcDMgPSBwMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyBwMSkgfHwgMCksXG4gICAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiBwID09PSAxID8gMSA6IHAxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBfc2luKChwIC0gcDMpICogcDIpICsgMTtcbiAgICB9LFxuICAgICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgICBwMiA9IF8yUEkgLyBwMjtcblxuICAgIGVhc2UuY29uZmlnID0gZnVuY3Rpb24gKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG4gICAgICByZXR1cm4gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZWFzZTtcbiAgfSxcbiAgICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gICAgaWYgKG92ZXJzaG9vdCA9PT0gdm9pZCAwKSB7XG4gICAgICBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuICAgIH1cblxuICAgIHZhciBlYXNlT3V0ID0gZnVuY3Rpb24gZWFzZU91dChwKSB7XG4gICAgICByZXR1cm4gcCA/IC0tcCAqIHAgKiAoKG92ZXJzaG9vdCArIDEpICogcCArIG92ZXJzaG9vdCkgKyAxIDogMDtcbiAgICB9LFxuICAgICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChvdmVyc2hvb3QpIHtcbiAgICAgIHJldHVybiBfY29uZmlnQmFjayh0eXBlLCBvdmVyc2hvb3QpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZWFzZTtcbiAgfTtcblxuICBfZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgICB2YXIgcG93ZXIgPSBpIDwgNSA/IGkgKyAxIDogaTtcblxuICAgIF9pbnNlcnRFYXNlKG5hbWUgKyBcIixQb3dlclwiICsgKHBvd2VyIC0gMSksIGkgPyBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgICB9IDogZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSBwLCBwb3dlcik7XG4gICAgfSwgZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgICB9KTtcbiAgfSk7XG5cbiAgX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbiAgX2luc2VydEVhc2UoXCJFbGFzdGljXCIsIF9jb25maWdFbGFzdGljKFwiaW5cIiksIF9jb25maWdFbGFzdGljKFwib3V0XCIpLCBfY29uZmlnRWxhc3RpYygpKTtcblxuICAoZnVuY3Rpb24gKG4sIGMpIHtcbiAgICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgICAgbjIgPSAyICogbjEsXG4gICAgICAgIG4zID0gMi41ICogbjEsXG4gICAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgbjEgPyBuICogcCAqIHAgOiBwIDwgbjIgPyBuICogTWF0aC5wb3cocCAtIDEuNSAvIGMsIDIpICsgLjc1IDogcCA8IG4zID8gbiAqIChwIC09IDIuMjUgLyBjKSAqIHAgKyAuOTM3NSA6IG4gKiBNYXRoLnBvdyhwIC0gMi42MjUgLyBjLCAyKSArIC45ODQzNzU7XG4gICAgfTtcblxuICAgIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICAgIH0sIGVhc2VPdXQpO1xuICB9KSg3LjU2MjUsIDIuNzUpO1xuXG4gIF9pbnNlcnRFYXNlKFwiRXhwb1wiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwID8gTWF0aC5wb3coMiwgMTAgKiAocCAtIDEpKSA6IDA7XG4gIH0pO1xuXG4gIF9pbnNlcnRFYXNlKFwiQ2lyY1wiLCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAtKF9zcXJ0KDEgLSBwICogcCkgLSAxKTtcbiAgfSk7XG5cbiAgX2luc2VydEVhc2UoXCJTaW5lXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPT09IDEgPyAxIDogLV9jb3MocCAqIF9IQUxGX1BJKSArIDE7XG4gIH0pO1xuXG4gIF9pbnNlcnRFYXNlKFwiQmFja1wiLCBfY29uZmlnQmFjayhcImluXCIpLCBfY29uZmlnQmFjayhcIm91dFwiKSwgX2NvbmZpZ0JhY2soKSk7XG5cbiAgX2Vhc2VNYXAuU3RlcHBlZEVhc2UgPSBfZWFzZU1hcC5zdGVwcyA9IF9nbG9iYWxzLlN0ZXBwZWRFYXNlID0ge1xuICAgIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgICAgaWYgKHN0ZXBzID09PSB2b2lkIDApIHtcbiAgICAgICAgc3RlcHMgPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgcDEgPSAxIC8gc3RlcHMsXG4gICAgICAgICAgcDIgPSBzdGVwcyArIChpbW1lZGlhdGVTdGFydCA/IDAgOiAxKSxcbiAgICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgICAgbWF4ID0gMSAtIF90aW55TnVtO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIF9kZWZhdWx0cy5lYXNlID0gX2Vhc2VNYXBbXCJxdWFkLm91dFwiXTtcblxuICBfZm9yRWFjaE5hbWUoXCJvbkNvbXBsZXRlLG9uVXBkYXRlLG9uU3RhcnQsb25SZXBlYXQsb25SZXZlcnNlQ29tcGxldGUsb25JbnRlcnJ1cHRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xuICB9KTtcblxuICB2YXIgR1NDYWNoZSA9IGZ1bmN0aW9uIEdTQ2FjaGUodGFyZ2V0LCBoYXJuZXNzKSB7XG4gICAgdGhpcy5pZCA9IF9nc0lEKys7XG4gICAgdGFyZ2V0Ll9nc2FwID0gdGhpcztcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICAgIHRoaXMuZ2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0IDogX2dldFByb3BlcnR5O1xuICAgIHRoaXMuc2V0ID0gaGFybmVzcyA/IGhhcm5lc3MuZ2V0U2V0dGVyIDogX2dldFNldHRlcjtcbiAgfTtcbiAgdmFyIEFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb24odmFycykge1xuICAgICAgdGhpcy52YXJzID0gdmFycztcbiAgICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCA9IHZhcnMucmVwZWF0ID09PSBJbmZpbml0eSA/IC0yIDogdmFycy5yZXBlYXQgfHwgMCkge1xuICAgICAgICB0aGlzLl9yRGVsYXkgPSB2YXJzLnJlcGVhdERlbGF5IHx8IDA7XG4gICAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RzID0gMTtcblxuICAgICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgICAgdGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXG4gICAgICBpZiAoX2NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBBbmltYXRpb24ucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiB0aGlzLnN0YXJ0VGltZSh0aGlzLl9zdGFydCArIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICAgIH07XG5cbiAgICBfcHJvdG8uZHVyYXRpb24gPSBmdW5jdGlvbiBkdXJhdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbiB0b3RhbER1cmF0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3REdXI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICAgIHJldHVybiBfc2V0RHVyYXRpb24odGhpcywgdGhpcy5fcmVwZWF0IDwgMCA/IHZhbHVlIDogKHZhbHVlIC0gdGhpcy5fcmVwZWF0ICogdGhpcy5fckRlbGF5KSAvICh0aGlzLl9yZXBlYXQgKyAxKSk7XG4gICAgfTtcblxuICAgIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIF93YWtlKCk7XG5cbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLl9kcDtcblxuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgX3RvdGFsVGltZSk7XG5cbiAgICAgICAgIXBhcmVudC5fZHAgfHwgcGFyZW50LnBhcmVudCB8fCBfcG9zdEFkZENoZWNrcyhwYXJlbnQsIHRoaXMpO1xuXG4gICAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnBhcmVudCkge1xuICAgICAgICAgIGlmIChwYXJlbnQucGFyZW50Ll90aW1lICE9PSBwYXJlbnQuX3N0YXJ0ICsgKHBhcmVudC5fdHMgPj0gMCA/IHBhcmVudC5fdFRpbWUgLyBwYXJlbnQuX3RzIDogKHBhcmVudC50b3RhbER1cmF0aW9uKCkgLSBwYXJlbnQuX3RUaW1lKSAvIC1wYXJlbnQuX3RzKSkge1xuICAgICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCAmJiB0aGlzLl9kcC5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgKHRoaXMuX3RzID4gMCAmJiBfdG90YWxUaW1lIDwgdGhpcy5fdER1ciB8fCB0aGlzLl90cyA8IDAgJiYgX3RvdGFsVGltZSA+IDAgfHwgIXRoaXMuX3REdXIgJiYgIV90b3RhbFRpbWUpKSB7XG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUodGhpcy5fZHAsIHRoaXMsIHRoaXMuX3N0YXJ0IC0gdGhpcy5fZGVsYXkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl90VGltZSAhPT0gX3RvdGFsVGltZSB8fCAhdGhpcy5fZHVyICYmICFzdXBwcmVzc0V2ZW50cyB8fCB0aGlzLl9pbml0dGVkICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSA9PT0gX3RpbnlOdW0gfHwgIV90b3RhbFRpbWUgJiYgIXRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuYWRkIHx8IHRoaXMuX3B0TG9va3VwKSkge1xuICAgICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTtcblxuICAgICAgICBfbGF6eVNhZmVSZW5kZXIodGhpcywgX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRpbWUgPSBmdW5jdGlvbiB0aW1lKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZShNYXRoLm1pbih0aGlzLnRvdGFsRHVyYXRpb24oKSwgdmFsdWUgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcykpICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgfHwgKHZhbHVlID8gdGhpcy5fZHVyIDogMCksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuX3RpbWU7XG4gICAgfTtcblxuICAgIF9wcm90by50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24gdG90YWxQcm9ncmVzcyh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy50b3RhbER1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90VGltZSAvIHRoaXMuX3REdXIpIDogdGhpcy5yYXRpbztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnByb2dyZXNzID0gZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKHRoaXMuZHVyYXRpb24oKSAqICh0aGlzLl95b3lvICYmICEodGhpcy5pdGVyYXRpb24oKSAmIDEpID8gMSAtIHZhbHVlIDogdmFsdWUpICsgX2VsYXBzZWRDeWNsZUR1cmF0aW9uKHRoaXMpLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLmR1cmF0aW9uKCkgPyBNYXRoLm1pbigxLCB0aGlzLl90aW1lIC8gdGhpcy5fZHVyKSA6IHRoaXMucmF0aW87XG4gICAgfTtcblxuICAgIF9wcm90by5pdGVyYXRpb24gPSBmdW5jdGlvbiBpdGVyYXRpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICB2YXIgY3ljbGVEdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKSArIHRoaXMuX3JEZWxheTtcblxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gICAgfTtcblxuICAgIF9wcm90by50aW1lU2NhbGUgPSBmdW5jdGlvbiB0aW1lU2NhbGUodmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTtcbiAgICAgIHRoaXMuX3J0cyA9ICt2YWx1ZSB8fCAwO1xuICAgICAgdGhpcy5fdHMgPSB0aGlzLl9wcyB8fCB2YWx1ZSA9PT0gLV90aW55TnVtID8gMCA6IHRoaXMuX3J0cztcbiAgICAgIHRoaXMudG90YWxUaW1lKF9jbGFtcCgtTWF0aC5hYnModGhpcy5fZGVsYXkpLCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpO1xuXG4gICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICByZXR1cm4gX3JlY2FjaGVBbmNlc3RvcnModGhpcyk7XG4gICAgfTtcblxuICAgIF9wcm90by5wYXVzZWQgPSBmdW5jdGlvbiBwYXVzZWQodmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9wcyAhPT0gdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9wVGltZSA9IHRoaXMuX3RUaW1lIHx8IE1hdGgubWF4KC10aGlzLl9kZWxheSwgdGhpcy5yYXdUaW1lKCkpO1xuICAgICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfd2FrZSgpO1xuXG4gICAgICAgICAgdGhpcy5fdHMgPSB0aGlzLl9ydHM7XG4gICAgICAgICAgdGhpcy50b3RhbFRpbWUodGhpcy5wYXJlbnQgJiYgIXRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nID8gdGhpcy5yYXdUaW1lKCkgOiB0aGlzLl90VGltZSB8fCB0aGlzLl9wVGltZSwgdGhpcy5wcm9ncmVzcygpID09PSAxICYmIE1hdGguYWJzKHRoaXMuX3pUaW1lKSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3RUaW1lIC09IF90aW55TnVtKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90by5zdGFydFRpbWUgPSBmdW5jdGlvbiBzdGFydFRpbWUodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcDtcbiAgICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uZW5kVGltZSA9IGZ1bmN0aW9uIGVuZFRpbWUoaW5jbHVkZVJlcGVhdHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJhd1RpbWUgPSBmdW5jdGlvbiByYXdUaW1lKHdyYXBSZXBlYXRzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7XG4gICAgICByZXR1cm4gIXBhcmVudCA/IHRoaXMuX3RUaW1lIDogd3JhcFJlcGVhdHMgJiYgKCF0aGlzLl90cyB8fCB0aGlzLl9yZXBlYXQgJiYgdGhpcy5fdGltZSAmJiB0aGlzLnRvdGFsUHJvZ3Jlc3MoKSA8IDEpID8gdGhpcy5fdFRpbWUgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSA6ICF0aGlzLl90cyA/IHRoaXMuX3RUaW1lIDogX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUocGFyZW50LnJhd1RpbWUod3JhcFJlcGVhdHMpLCB0aGlzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25maWcgPSBfcmV2ZXJ0Q29uZmlnO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldklzUmV2ZXJ0aW5nID0gX3JldmVydGluZztcbiAgICAgIF9yZXZlcnRpbmcgPSBjb25maWc7XG5cbiAgICAgIGlmICh0aGlzLl9pbml0dGVkIHx8IHRoaXMuX3N0YXJ0QXQpIHtcbiAgICAgICAgdGhpcy50aW1lbGluZSAmJiB0aGlzLnRpbWVsaW5lLnJldmVydChjb25maWcpO1xuICAgICAgICB0aGlzLnRvdGFsVGltZSgtMC4wMSwgY29uZmlnLnN1cHByZXNzRXZlbnRzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIGNvbmZpZy5raWxsICE9PSBmYWxzZSAmJiB0aGlzLmtpbGwoKTtcbiAgICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICAgIHZhciBhbmltYXRpb24gPSB0aGlzLFxuICAgICAgICAgIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID8gcmF3VGltZSA6IGFuaW1hdGlvbi5yYXdUaW1lKCk7XG5cbiAgICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgICAgdGltZSA9IGFuaW1hdGlvbi5fc3RhcnQgKyB0aW1lIC8gKGFuaW1hdGlvbi5fdHMgfHwgMSk7XG4gICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbi5fZHA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhdGhpcy5wYXJlbnQgJiYgdGhpcy5fc2F0ID8gdGhpcy5fc2F0LnZhcnMuaW1tZWRpYXRlUmVuZGVyID8gLUluZmluaXR5IDogdGhpcy5fc2F0Lmdsb2JhbFRpbWUocmF3VGltZSkgOiB0aW1lO1xuICAgIH07XG5cbiAgICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9yZXBlYXQgPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyAtMiA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3JlcGVhdCA9PT0gLTIgPyBJbmZpbml0eSA6IHRoaXMuX3JlcGVhdDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlcGVhdERlbGF5ID0gZnVuY3Rpb24gcmVwZWF0RGVsYXkodmFsdWUpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgICAgdGhpcy5fckRlbGF5ID0gdmFsdWU7XG5cbiAgICAgICAgX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcblxuICAgICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9yRGVsYXk7XG4gICAgfTtcblxuICAgIF9wcm90by55b3lvID0gZnVuY3Rpb24geW95byh2YWx1ZSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3lveW87XG4gICAgfTtcblxuICAgIF9wcm90by5zZWVrID0gZnVuY3Rpb24gc2Vlayhwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5yZXN0YXJ0ID0gZnVuY3Rpb24gcmVzdGFydChpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5wbGF5ID0gZnVuY3Rpb24gcGxheShmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuICAgICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICBmcm9tICE9IG51bGwgJiYgdGhpcy5zZWVrKGZyb20gfHwgdGhpcy50b3RhbER1cmF0aW9uKCksIHN1cHByZXNzRXZlbnRzKTtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2VkKHRydWUpLnBhdXNlZChmYWxzZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIGF0VGltZSAhPSBudWxsICYmIHRoaXMuc2VlayhhdFRpbWUsIHN1cHByZXNzRXZlbnRzKTtcbiAgICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlc3VtZSA9IGZ1bmN0aW9uIHJlc3VtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5yZXZlcnNlZCA9IGZ1bmN0aW9uIHJldmVyc2VkKHZhbHVlKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAhIXZhbHVlICE9PSB0aGlzLnJldmVyc2VkKCkgJiYgdGhpcy50aW1lU2NhbGUoLXRoaXMuX3J0cyB8fCAodmFsdWUgPyAtX3RpbnlOdW0gOiAwKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgICB0aGlzLl96VGltZSA9IC1fdGlueU51bTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzLl9kcCxcbiAgICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICAgIHJhd1RpbWU7XG4gICAgICByZXR1cm4gISEoIXBhcmVudCB8fCB0aGlzLl90cyAmJiB0aGlzLl9pbml0dGVkICYmIHBhcmVudC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gcGFyZW50LnJhd1RpbWUodHJ1ZSkpID49IHN0YXJ0ICYmIHJhd1RpbWUgPCB0aGlzLmVuZFRpbWUodHJ1ZSkgLSBfdGlueU51bSk7XG4gICAgfTtcblxuICAgIF9wcm90by5ldmVudENhbGxiYWNrID0gZnVuY3Rpb24gZXZlbnRDYWxsYmFjayh0eXBlLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgICB2YXIgdmFycyA9IHRoaXMudmFycztcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICBkZWxldGUgdmFyc1t0eXBlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXJzW3R5cGVdID0gY2FsbGJhY2s7XG4gICAgICAgICAgcGFyYW1zICYmICh2YXJzW3R5cGUgKyBcIlBhcmFtc1wiXSA9IHBhcmFtcyk7XG4gICAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFyc1t0eXBlXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICAgIF9yZXNvbHZlID0gZnVuY3Rpb24gX3Jlc29sdmUoKSB7XG4gICAgICAgICAgdmFyIF90aGVuID0gc2VsZi50aGVuO1xuICAgICAgICAgIHNlbGYudGhlbiA9IG51bGw7XG4gICAgICAgICAgX2lzRnVuY3Rpb24oZikgJiYgKGYgPSBmKHNlbGYpKSAmJiAoZi50aGVuIHx8IGYgPT09IHNlbGYpICYmIChzZWxmLnRoZW4gPSBfdGhlbik7XG4gICAgICAgICAgcmVzb2x2ZShmKTtcbiAgICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc2VsZi5faW5pdHRlZCAmJiBzZWxmLnRvdGFsUHJvZ3Jlc3MoKSA9PT0gMSAmJiBzZWxmLl90cyA+PSAwIHx8ICFzZWxmLl90VGltZSAmJiBzZWxmLl90cyA8IDApIHtcbiAgICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuX3Byb20gPSBfcmVzb2x2ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICAgIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBBbmltYXRpb247XG4gIH0oKTtcblxuICBfc2V0RGVmYXVsdHMoQW5pbWF0aW9uLnByb3RvdHlwZSwge1xuICAgIF90aW1lOiAwLFxuICAgIF9zdGFydDogMCxcbiAgICBfZW5kOiAwLFxuICAgIF90VGltZTogMCxcbiAgICBfdER1cjogMCxcbiAgICBfZGlydHk6IDAsXG4gICAgX3JlcGVhdDogMCxcbiAgICBfeW95bzogZmFsc2UsXG4gICAgcGFyZW50OiBudWxsLFxuICAgIF9pbml0dGVkOiBmYWxzZSxcbiAgICBfckRlbGF5OiAwLFxuICAgIF90czogMSxcbiAgICBfZHA6IDAsXG4gICAgcmF0aW86IDAsXG4gICAgX3pUaW1lOiAtX3RpbnlOdW0sXG4gICAgX3Byb206IDAsXG4gICAgX3BzOiBmYWxzZSxcbiAgICBfcnRzOiAxXG4gIH0pO1xuXG4gIHZhciBUaW1lbGluZSA9IGZ1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoVGltZWxpbmUsIF9BbmltYXRpb24pO1xuXG4gICAgZnVuY3Rpb24gVGltZWxpbmUodmFycywgcG9zaXRpb24pIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgICB2YXJzID0ge307XG4gICAgICB9XG5cbiAgICAgIF90aGlzID0gX0FuaW1hdGlvbi5jYWxsKHRoaXMsIHZhcnMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5sYWJlbHMgPSB7fTtcbiAgICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgICAgX3RoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gISF2YXJzLmF1dG9SZW1vdmVDaGlsZHJlbjtcbiAgICAgIF90aGlzLl9zb3J0ID0gX2lzTm90RmFsc2UodmFycy5zb3J0Q2hpbGRyZW4pO1xuICAgICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMucmV2ZXJzZSgpO1xuICAgICAgdmFycy5wYXVzZWQgJiYgX3RoaXMucGF1c2VkKHRydWUpO1xuICAgICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi50byA9IGZ1bmN0aW9uIHRvKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICBfY3JlYXRlVHdlZW5UeXBlKDAsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgICAgX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5zZXQgPSBmdW5jdGlvbiBzZXQodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgIHZhcnMuZHVyYXRpb24gPSAwO1xuICAgICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gISF2YXJzLmltbWVkaWF0ZVJlbmRlcjtcbiAgICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zKSwgcG9zaXRpb24pO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnN0YWdnZXJUbyA9IGZ1bmN0aW9uIHN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIHZhcnMuc3RhZ2dlciA9IHZhcnMuc3RhZ2dlciB8fCBzdGFnZ2VyO1xuICAgICAgdmFycy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZUFsbDtcbiAgICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgICB2YXJzLnBhcmVudCA9IHRoaXM7XG4gICAgICBuZXcgVHdlZW4odGFyZ2V0cywgdmFycywgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnN0YWdnZXJGcm9tID0gZnVuY3Rpb24gc3RhZ2dlckZyb20odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zKSB7XG4gICAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgICBfaW5oZXJpdERlZmF1bHRzKHZhcnMpLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKHZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnN0YWdnZXJGcm9tVG8gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbVRvKHRhcmdldHMsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgICAgdG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcbiAgICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICAgIHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICAgIHREdXIgPSB0aGlzLl9kaXJ0eSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5fdER1cixcbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPD0gMCA/IDAgOiBfcm91bmRQcmVjaXNlKHRvdGFsVGltZSksXG4gICAgICAgICAgY3Jvc3NpbmdTdGFydCA9IHRoaXMuX3pUaW1lIDwgMCAhPT0gdG90YWxUaW1lIDwgMCAmJiAodGhpcy5faW5pdHRlZCB8fCAhZHVyKSxcbiAgICAgICAgICB0aW1lLFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIG5leHQsXG4gICAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgICAgcHJldlBhdXNlZCxcbiAgICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICAgIHRpbWVTY2FsZSxcbiAgICAgICAgICBwcmV2U3RhcnQsXG4gICAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgICB5b3lvLFxuICAgICAgICAgIGlzWW95bztcbiAgICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICAgIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgZm9yY2UgfHwgY3Jvc3NpbmdTdGFydCkge1xuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUgJiYgZHVyKSB7XG4gICAgICAgICAgdFRpbWUgKz0gdGhpcy5fdGltZSAtIHByZXZUaW1lO1xuICAgICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gdFRpbWU7XG4gICAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgICB0aW1lU2NhbGUgPSB0aGlzLl90cztcbiAgICAgICAgcHJldlBhdXNlZCA9ICF0aW1lU2NhbGU7XG5cbiAgICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgICBkdXIgfHwgKHByZXZUaW1lID0gdGhpcy5felRpbWUpO1xuICAgICAgICAgICh0b3RhbFRpbWUgfHwgIXN1cHByZXNzRXZlbnRzKSAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAgIHlveW8gPSB0aGlzLl95b3lvO1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICAgIXByZXZUaW1lICYmIHRoaXMuX3RUaW1lICYmIHByZXZJdGVyYXRpb24gIT09IGl0ZXJhdGlvbiAmJiB0aGlzLl90VGltZSAtIHByZXZJdGVyYXRpb24gKiBjeWNsZUR1cmF0aW9uIC0gdGhpcy5fZHVyIDw9IDAgJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgICAgICBpc1lveW8gPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgIHZhciByZXdpbmRpbmcgPSB5b3lvICYmIHByZXZJdGVyYXRpb24gJiAxLFxuICAgICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICAgIGl0ZXJhdGlvbiA8IHByZXZJdGVyYXRpb24gJiYgKHJld2luZGluZyA9ICFyZXdpbmRpbmcpO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyAwIDogdFRpbWUgJSBkdXIgPyBkdXIgOiB0VGltZTtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgICAgICAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG4gICAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgICBpZiAocHJldlRpbWUgJiYgcHJldlRpbWUgIT09IHRoaXMuX3RpbWUgfHwgcHJldlBhdXNlZCAhPT0gIXRoaXMuX3RzIHx8IHRoaXMudmFycy5vblJlcGVhdCAmJiAhdGhpcy5wYXJlbnQgJiYgIXRoaXMuX2FjdCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZHVyID0gdGhpcy5fZHVyO1xuICAgICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICAgIGlmIChkb2VzV3JhcCkge1xuICAgICAgICAgICAgICB0aGlzLl9sb2NrID0gMjtcbiAgICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAwO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgICBwYXVzZVR3ZWVuID0gX2ZpbmROZXh0UGF1c2VUd2Vlbih0aGlzLCBfcm91bmRQcmVjaXNlKHByZXZUaW1lKSwgX3JvdW5kUHJlY2lzZSh0aW1lKSk7XG5cbiAgICAgICAgICBpZiAocGF1c2VUd2Vlbikge1xuICAgICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLl9hY3QgPSAhdGltZVNjYWxlO1xuXG4gICAgICAgIGlmICghdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuICAgICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICAgIHRoaXMuX3pUaW1lID0gdG90YWxUaW1lO1xuICAgICAgICAgIHByZXZUaW1lID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJldlRpbWUgJiYgdGltZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgIWl0ZXJhdGlvbikge1xuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdFRpbWUgIT09IHRUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSA+PSBwcmV2VGltZSAmJiB0b3RhbFRpbWUgPj0gMCkge1xuICAgICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgICAgICAgaWYgKChjaGlsZC5fYWN0IHx8IHRpbWUgPj0gY2hpbGQuX3N0YXJ0KSAmJiBjaGlsZC5fdHMgJiYgcGF1c2VUd2VlbiAhPT0gY2hpbGQpIHtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjaGlsZC5yZW5kZXIoY2hpbGQuX3RzID4gMCA/ICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAodGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgICAgbmV4dCAmJiAodFRpbWUgKz0gdGhpcy5felRpbWUgPSAtX3RpbnlOdW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGQgPSB0aGlzLl9sYXN0O1xuICAgICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTtcblxuICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgbmV4dCA9IGNoaWxkLl9wcmV2O1xuXG4gICAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSB8fCBfcmV2ZXJ0aW5nICYmIChjaGlsZC5faW5pdHRlZCB8fCBjaGlsZC5fc3RhcnRBdCkpO1xuXG4gICAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0O1xuXG4gICAgICAgICAgICBfc2V0RW5kKHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7XG5cbiAgICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEodG90YWxUaW1lIDwgMCAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCAhdER1cikpIHtcbiAgICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciAmJiB0b3RhbFRpbWUgPj0gMCA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgX2lzTnVtYmVyKHBvc2l0aW9uKSB8fCAocG9zaXRpb24gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiwgY2hpbGQpKTtcblxuICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICAgIGlmIChfaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgICBjaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hZGRMYWJlbChjaGlsZCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgICAgIGNoaWxkID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzICE9PSBjaGlsZCA/IF9hZGRUb1RpbWVsaW5lKHRoaXMsIGNoaWxkLCBwb3NpdGlvbikgOiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldENoaWxkcmVuID0gZnVuY3Rpb24gZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG5lc3RlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgICB0d2VlbnMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgICAgdGltZWxpbmVzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICBpZ25vcmVCZWZvcmVUaW1lID0gLV9iaWdOdW07XG4gICAgICB9XG5cbiAgICAgIHZhciBhID0gW10sXG4gICAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgICB0d2VlbnMgJiYgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZWxpbmVzICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgICBuZXN0ZWQgJiYgYS5wdXNoLmFwcGx5KGEsIGNoaWxkLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGE7XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICAgIHZhciBhbmltYXRpb25zID0gdGhpcy5nZXRDaGlsZHJlbigxLCAxLCAxKSxcbiAgICAgICAgICBpID0gYW5pbWF0aW9ucy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbnNbaV0udmFycy5pZCA9PT0gaWQpIHtcbiAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGFiZWwoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtpbGxUd2VlbnNPZihjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBjaGlsZCk7XG5cbiAgICAgIGlmIChjaGlsZCA9PT0gdGhpcy5fcmVjZW50KSB7XG4gICAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9mb3JjaW5nID0gMTtcblxuICAgICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgICB0aGlzLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoX3RpY2tlci50aW1lIC0gKHRoaXMuX3RzID4gMCA/IF90b3RhbFRpbWUyIC8gdGhpcy5fdHMgOiAodGhpcy50b3RhbER1cmF0aW9uKCkgLSBfdG90YWxUaW1lMikgLyAtdGhpcy5fdHMpKTtcbiAgICAgIH1cblxuICAgICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgICAgdGhpcy5fZm9yY2luZyA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5hZGRMYWJlbCA9IGZ1bmN0aW9uIGFkZExhYmVsKGxhYmVsLCBwb3NpdGlvbikge1xuICAgICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICAgIHZhciB0ID0gVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2sgfHwgX2VtcHR5RnVuYywgcGFyYW1zKTtcbiAgICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgICAgcmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRoaXMsIHQsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKSk7XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5fc3RhcnQgPT09IHBvc2l0aW9uICYmIGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG4gICAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICAgIHZhciBhID0gW10sXG4gICAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgICBpc0dsb2JhbFRpbWUgPSBfaXNOdW1iZXIob25seUFjdGl2ZSksXG4gICAgICAgICAgY2hpbGRyZW47XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgICAgdmFyIHRsID0gdGhpcyxcbiAgICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgICAgc3RhcnRBdCA9IF92YXJzLnN0YXJ0QXQsXG4gICAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICAgIGltbWVkaWF0ZVJlbmRlciA9IF92YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgICBpbml0dGVkLFxuICAgICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGVhc2U6IHZhcnMuZWFzZSB8fCBcIm5vbmVcIixcbiAgICAgICAgbGF6eTogZmFsc2UsXG4gICAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICAgIHRpbWU6IGVuZFRpbWUsXG4gICAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uIG9uU3RhcnQoKSB7XG4gICAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpO1xuICAgICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTtcbiAgICAgICAgfVxuICAgICAgfSwgdmFycykpO1xuXG4gICAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gICAgfTtcblxuICAgIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgICAgc3RhcnRBdDoge1xuICAgICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgICAgfVxuICAgICAgfSwgdmFycykpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWNlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgICAgaWYgKGFmdGVyVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBhZnRlclRpbWUpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgICBpZiAoYmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYmVmb3JlVGltZSksIDEpO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnNlZWsodmFsdWUsIHRydWUpIDogdGhpcy5wcmV2aW91c0xhYmVsKHRoaXMuX3RpbWUgKyBfdGlueU51bSk7XG4gICAgfTtcblxuICAgIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgIGlmIChpZ25vcmVCZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICAgIHA7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICAgIGNoaWxkLl9lbmQgKz0gYW1vdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgICAgaWYgKGxhYmVsc1twXSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gICAgfTtcblxuICAgIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoc29mdCkge1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGNoaWxkLmludmFsaWRhdGUoc29mdCk7XG4gICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcywgc29mdCk7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgICBpZiAoaW5jbHVkZUxhYmVscyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgICBuZXh0O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICAgIHJldHVybiBfdW5jYWNoZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIG1heCA9IDAsXG4gICAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICAgIHByZXZTdGFydCA9IF9iaWdOdW0sXG4gICAgICAgICAgcHJldixcbiAgICAgICAgICBzdGFydCxcbiAgICAgICAgICBwYXJlbnQ7XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2O1xuICAgICAgICAgIGNoaWxkLl9kaXJ0eSAmJiBjaGlsZC50b3RhbER1cmF0aW9uKCk7XG4gICAgICAgICAgc3RhcnQgPSBjaGlsZC5fc3RhcnQ7XG5cbiAgICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAgIHNlbGYuX2xvY2sgPSAxO1xuICAgICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGFydCA8IDAgJiYgY2hpbGQuX3RzKSB7XG4gICAgICAgICAgICBtYXggLT0gc3RhcnQ7XG5cbiAgICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICAgIHNlbGYuX3RpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLnNoaWZ0Q2hpbGRyZW4oLXN0YXJ0LCBmYWxzZSwgLTFlOTk5KTtcbiAgICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQuX2VuZCA+IG1heCAmJiBjaGlsZC5fdHMgJiYgKG1heCA9IGNoaWxkLl9lbmQpO1xuICAgICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIF9zZXREdXJhdGlvbihzZWxmLCBzZWxmID09PSBfZ2xvYmFsVGltZWxpbmUgJiYgc2VsZi5fdGltZSA+IG1heCA/IHNlbGYuX3RpbWUgOiBtYXgsIDEsIDEpO1xuXG4gICAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGYuX3REdXI7XG4gICAgfTtcblxuICAgIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICAgIGlmIChfZ2xvYmFsVGltZWxpbmUuX3RzKSB7XG4gICAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgICB2YXIgY2hpbGQgPSBfZ2xvYmFsVGltZWxpbmUuX2ZpcnN0O1xuICAgICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVGltZWxpbmU7XG4gIH0oQW5pbWF0aW9uKTtcblxuICBfc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gICAgX2xvY2s6IDAsXG4gICAgX2hhc1BhdXNlOiAwLFxuICAgIF9mb3JjaW5nOiAwXG4gIH0pO1xuXG4gIHZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAgIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc3RhcnROdW1zLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBjaHVuayxcbiAgICAgICAgc3RhcnROdW0sXG4gICAgICAgIGhhc1JhbmRvbSxcbiAgICAgICAgYTtcbiAgICBwdC5iID0gc3RhcnQ7XG4gICAgcHQuZSA9IGVuZDtcbiAgICBzdGFydCArPSBcIlwiO1xuICAgIGVuZCArPSBcIlwiO1xuXG4gICAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgfVxuXG4gICAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICAgIHN0cmluZ0ZpbHRlcihhLCB0YXJnZXQsIHByb3ApO1xuICAgICAgc3RhcnQgPSBhWzBdO1xuICAgICAgZW5kID0gYVsxXTtcbiAgICB9XG5cbiAgICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgICB3aGlsZSAocmVzdWx0ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1ttYXRjaEluZGV4IC0gMV0pIHx8IDA7XG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCA/IE1hdGgucm91bmQgOiAwXG4gICAgICAgIH07XG4gICAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7XG4gICAgcHQuZnAgPSBmdW5jUGFyYW07XG5cbiAgICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgICBwdC5lID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLl9wdCA9IHB0O1xuICAgIHJldHVybiBwdDtcbiAgfSxcbiAgICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXSxcbiAgICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgICAgcHQ7XG5cbiAgICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgICBwdCA9IF9wYXJzZVJlbGF0aXZlKHBhcnNlZFN0YXJ0LCBlbmQpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAgIGVuZCA9IHB0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25hbCB8fCBwYXJzZWRTdGFydCAhPT0gZW5kIHx8IF9mb3JjZUFsbFByb3BUd2VlbnMpIHtcbiAgICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICAgIG1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0aGlzLCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICAgIH1cblxuICAgICAgIWN1cnJlbnRWYWx1ZSAmJiAhKHByb3AgaW4gdGFyZ2V0KSAmJiBfbWlzc2luZ1BsdWdpbihwcm9wLCBlbmQpO1xuICAgICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgICB9XG4gIH0sXG4gICAgICBfcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgICBfaXNGdW5jdGlvbih2YXJzKSAmJiAodmFycyA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpO1xuXG4gICAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgICB9XG5cbiAgICB2YXIgY29weSA9IHt9LFxuICAgICAgICBwO1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgIH1cblxuICAgIHJldHVybiBjb3B5O1xuICB9LFxuICAgICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICAgIHZhciBwbHVnaW4sIHB0LCBwdExvb2t1cCwgaTtcblxuICAgIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgaWYgKHR3ZWVuICE9PSBfcXVpY2tUd2Vlbikge1xuICAgICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldO1xuICAgICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHB0TG9va3VwW3BsdWdpbi5fcHJvcHNbaV1dID0gcHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGx1Z2luO1xuICB9LFxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4sXG4gICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zLFxuICAgICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUsIHRUaW1lKSB7XG4gICAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgICBzdGFydEF0ID0gdmFycy5zdGFydEF0LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgICAgb25VcGRhdGUgPSB2YXJzLm9uVXBkYXRlLFxuICAgICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGUgPSB2YXJzLmNhbGxiYWNrU2NvcGUsXG4gICAgICAgIHJ1bkJhY2t3YXJkcyA9IHZhcnMucnVuQmFja3dhcmRzLFxuICAgICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgICBhdXRvUmV2ZXJ0ID0gdmFycy5hdXRvUmV2ZXJ0LFxuICAgICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgICB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQudmFycy50YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgICAgYXV0b092ZXJ3cml0ZSA9IHR3ZWVuLl9vdmVyd3JpdGUgPT09IFwiYXV0b1wiICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgICBjbGVhblZhcnMsXG4gICAgICAgIGksXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBnc0RhdGEsXG4gICAgICAgIGhhcm5lc3MsXG4gICAgICAgIHBsdWdpbixcbiAgICAgICAgcHRMb29rdXAsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBoYXJuZXNzVmFycyxcbiAgICAgICAgb3ZlcndyaXR0ZW47XG4gICAgdGwgJiYgKCFrZXlmcmFtZXMgfHwgIWVhc2UpICYmIChlYXNlID0gXCJub25lXCIpO1xuICAgIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gICAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICAgIGlmICh5b3lvRWFzZSAmJiB0d2Vlbi5feW95byAmJiAhdHdlZW4uX3JlcGVhdCkge1xuICAgICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICAgIHR3ZWVuLl9lYXNlID0geW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkcztcblxuICAgIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgICAgaGFybmVzc1ZhcnMgPSBoYXJuZXNzICYmIHZhcnNbaGFybmVzcy5wcm9wXTtcbiAgICAgIGNsZWFuVmFycyA9IF9jb3B5RXhjbHVkaW5nKHZhcnMsIF9yZXNlcnZlZFByb3BzKTtcblxuICAgICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICAgIHByZXZTdGFydEF0Ll96VGltZSA8IDAgJiYgcHJldlN0YXJ0QXQucHJvZ3Jlc3MoMSk7XG4gICAgICAgIHRpbWUgPCAwICYmIHJ1bkJhY2t3YXJkcyAmJiBpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQgPyBwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpIDogcHJldlN0YXJ0QXQucmV2ZXJ0KHJ1bkJhY2t3YXJkcyAmJiBkdXIgPyBfcmV2ZXJ0Q29uZmlnTm9LaWxsIDogX3N0YXJ0QXRSZXZlcnRDb25maWcpO1xuICAgICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydEF0KSB7XG4gICAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgICAgbGF6eTogIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgIHN0YXJ0QXQ6IG51bGwsXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgICAgICAgIG9uVXBkYXRlUGFyYW1zOiBvblVwZGF0ZVBhcmFtcyxcbiAgICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICAgIHN0YWdnZXI6IDBcbiAgICAgICAgfSwgc3RhcnRBdCkpKTtcblxuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwO1xuICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fc2F0ID0gdHdlZW47XG4gICAgICAgIHRpbWUgPCAwICYmIChfcmV2ZXJ0aW5nIHx8ICFpbW1lZGlhdGVSZW5kZXIgJiYgIWF1dG9SZXZlcnQpICYmIHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKTtcblxuICAgICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgICAgaWYgKGR1ciAmJiB0aW1lIDw9IDAgJiYgdFRpbWUgPD0gMCkge1xuICAgICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgICAgaWYgKCFwcmV2U3RhcnRBdCkge1xuICAgICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTtcbiAgICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgICAgICBkYXRhOiBcImlzRnJvbVN0YXJ0XCIsXG4gICAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgIXByZXZTdGFydEF0ICYmIF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgICBzdGFnZ2VyOiAwLFxuICAgICAgICAgICAgcGFyZW50OiBwYXJlbnRcbiAgICAgICAgICB9LCBjbGVhblZhcnMpO1xuICAgICAgICAgIGhhcm5lc3NWYXJzICYmIChwW2hhcm5lc3MucHJvcF0gPSBoYXJuZXNzVmFycyk7XG5cbiAgICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgICB0d2Vlbi5fc3RhcnRBdC5fZHAgPSAwO1xuICAgICAgICAgIHR3ZWVuLl9zdGFydEF0Ll9zYXQgPSB0d2VlbjtcbiAgICAgICAgICB0aW1lIDwgMCAmJiAoX3JldmVydGluZyA/IHR3ZWVuLl9zdGFydEF0LnJldmVydChfcmV2ZXJ0Q29uZmlnTm9LaWxsKSA6IHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSkpO1xuICAgICAgICAgIHR3ZWVuLl96VGltZSA9IHRpbWU7XG5cbiAgICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgICAgX2luaXRUd2Vlbih0d2Vlbi5fc3RhcnRBdCwgX3RpbnlOdW0sIF90aW55TnVtKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCA9IHR3ZWVuLl9wdENhY2hlID0gMDtcbiAgICAgIGxhenkgPSBkdXIgJiYgX2lzTm90RmFsc2UobGF6eSkgfHwgbGF6eSAmJiAhZHVyO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgICBnc0RhdGEgPSB0YXJnZXQuX2dzYXAgfHwgX2hhcm5lc3ModGFyZ2V0cylbaV0uX2dzYXA7XG4gICAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7XG4gICAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICAgIGlmIChoYXJuZXNzICYmIChwbHVnaW4gPSBuZXcgaGFybmVzcygpKS5pbml0KHRhcmdldCwgaGFybmVzc1ZhcnMgfHwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIGZ1bGxUYXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHB0TG9va3VwW25hbWVdID0gcHQ7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgKHBsdWdpbiA9IF9jaGVja1BsdWdpbihwLCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCBmdWxsVGFyZ2V0cykpKSB7XG4gICAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHB0TG9va3VwW3BdID0gcHQgPSBfYWRkUHJvcFR3ZWVuLmNhbGwodHdlZW4sIHRhcmdldCwgcCwgXCJnZXRcIiwgY2xlYW5WYXJzW3BdLCBpbmRleCwgZnVsbFRhcmdldHMsIDAsIHZhcnMuc3RyaW5nRmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gdHdlZW47XG5cbiAgICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpO1xuXG4gICAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTtcbiAgICB9XG5cbiAgICB0d2Vlbi5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuO1xuICAgIGtleWZyYW1lcyAmJiB0aW1lIDw9IDAgJiYgdGwucmVuZGVyKF9iaWdOdW0sIHRydWUsIHRydWUpO1xuICB9LFxuICAgICAgX3VwZGF0ZVByb3BUd2VlbnMgPSBmdW5jdGlvbiBfdXBkYXRlUHJvcFR3ZWVucyh0d2VlbiwgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkge1xuICAgIHZhciBwdENhY2hlID0gKHR3ZWVuLl9wdCAmJiB0d2Vlbi5fcHRDYWNoZSB8fCAodHdlZW4uX3B0Q2FjaGUgPSB7fSkpW3Byb3BlcnR5XSxcbiAgICAgICAgcHQsXG4gICAgICAgIHJvb3RQVCxcbiAgICAgICAgbG9va3VwLFxuICAgICAgICBpO1xuXG4gICAgaWYgKCFwdENhY2hlKSB7XG4gICAgICBwdENhY2hlID0gdHdlZW4uX3B0Q2FjaGVbcHJvcGVydHldID0gW107XG4gICAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgICBpID0gdHdlZW4uX3RhcmdldHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgICBpZiAocHQgJiYgcHQuZCAmJiBwdC5kLl9wdCkge1xuICAgICAgICAgIHB0ID0gcHQuZC5fcHQ7XG5cbiAgICAgICAgICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcGVydHkgJiYgcHQuZnAgIT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHQpIHtcbiAgICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMTtcbiAgICAgICAgICB0d2Vlbi52YXJzW3Byb3BlcnR5XSA9IFwiKz0wXCI7XG5cbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAwO1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcHRDYWNoZS5wdXNoKHB0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpID0gcHRDYWNoZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgICAgcHQgPSByb290UFQuX3B0IHx8IHJvb3RQVDtcbiAgICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgICBwdC5jID0gdmFsdWUgLSBwdC5zO1xuICAgICAgcm9vdFBULmUgJiYgKHJvb3RQVC5lID0gX3JvdW5kKHZhbHVlKSArIGdldFVuaXQocm9vdFBULmUpKTtcbiAgICAgIHJvb3RQVC5iICYmIChyb290UFQuYiA9IHB0LnMgKyBnZXRVbml0KHJvb3RQVC5iKSk7XG4gICAgfVxuICB9LFxuICAgICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgICBwcm9wZXJ0eUFsaWFzZXMgPSBoYXJuZXNzICYmIGhhcm5lc3MuYWxpYXNlcyxcbiAgICAgICAgY29weSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgYWxpYXNlcztcblxuICAgIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgICByZXR1cm4gdmFycztcbiAgICB9XG5cbiAgICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICAgIGZvciAocCBpbiBwcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICAgIGkgPSBhbGlhc2VzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29weTtcbiAgfSxcbiAgICAgIF9wYXJzZUtleWZyYW1lID0gZnVuY3Rpb24gX3BhcnNlS2V5ZnJhbWUocHJvcCwgb2JqLCBhbGxQcm9wcywgZWFzZUVhY2gpIHtcbiAgICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICAgIHAsXG4gICAgICAgIGE7XG5cbiAgICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgICAgYSA9IGFsbFByb3BzW3Byb3BdIHx8IChhbGxQcm9wc1twcm9wXSA9IFtdKTtcbiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgICB0OiBpIC8gKG9iai5sZW5ndGggLSAxKSAqIDEwMCxcbiAgICAgICAgICB2OiB2YWx1ZSxcbiAgICAgICAgICBlOiBlYXNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAocCBpbiBvYmopIHtcbiAgICAgICAgYSA9IGFsbFByb3BzW3BdIHx8IChhbGxQcm9wc1twXSA9IFtdKTtcbiAgICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgICB0OiBwYXJzZUZsb2F0KHByb3ApLFxuICAgICAgICAgIHY6IG9ialtwXSxcbiAgICAgICAgICBlOiBlYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9wYXJzZUZ1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9wYXJzZUZ1bmNPclN0cmluZyh2YWx1ZSwgdHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbiAgfSxcbiAgICAgIF9zdGFnZ2VyVHdlZW5Qcm9wcyA9IF9jYWxsYmFja05hbWVzICsgXCJyZXBlYXQscmVwZWF0RGVsYXkseW95byxyZXBlYXRSZWZyZXNoLHlveW9FYXNlLGF1dG9SZXZlcnRcIixcbiAgICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuICBfZm9yRWFjaE5hbWUoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBfc3RhZ2dlclByb3BzVG9Ta2lwW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgdmFyIFR3ZWVuID0gZnVuY3Rpb24gKF9BbmltYXRpb24yKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICAgIGZ1bmN0aW9uIFR3ZWVuKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uLCBza2lwSW5oZXJpdCkge1xuICAgICAgdmFyIF90aGlzMztcblxuICAgICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHBvc2l0aW9uLmR1cmF0aW9uID0gdmFycztcbiAgICAgICAgdmFycyA9IHBvc2l0aW9uO1xuICAgICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMyA9IF9BbmltYXRpb24yLmNhbGwodGhpcywgc2tpcEluaGVyaXQgPyB2YXJzIDogX2luaGVyaXREZWZhdWx0cyh2YXJzKSkgfHwgdGhpcztcbiAgICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICAgIGR1cmF0aW9uID0gX3RoaXMzJHZhcnMuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXkgPSBfdGhpczMkdmFycy5kZWxheSxcbiAgICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgc3RhZ2dlciA9IF90aGlzMyR2YXJzLnN0YWdnZXIsXG4gICAgICAgICAgb3ZlcndyaXRlID0gX3RoaXMzJHZhcnMub3ZlcndyaXRlLFxuICAgICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgICBkZWZhdWx0cyA9IF90aGlzMyR2YXJzLmRlZmF1bHRzLFxuICAgICAgICAgIHNjcm9sbFRyaWdnZXIgPSBfdGhpczMkdmFycy5zY3JvbGxUcmlnZ2VyLFxuICAgICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgICAgcGFyZW50ID0gdmFycy5wYXJlbnQgfHwgX2dsb2JhbFRpbWVsaW5lLFxuICAgICAgICAgIHBhcnNlZFRhcmdldHMgPSAoX2lzQXJyYXkodGFyZ2V0cykgfHwgX2lzVHlwZWRBcnJheSh0YXJnZXRzKSA/IF9pc051bWJlcih0YXJnZXRzWzBdKSA6IFwibGVuZ3RoXCIgaW4gdmFycykgPyBbdGFyZ2V0c10gOiB0b0FycmF5KHRhcmdldHMpLFxuICAgICAgICAgIHRsLFxuICAgICAgICAgIGksXG4gICAgICAgICAgY29weSxcbiAgICAgICAgICBsLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgY3VyVGFyZ2V0LFxuICAgICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZTtcbiAgICAgIF90aGlzMy5fdGFyZ2V0cyA9IHBhcnNlZFRhcmdldHMubGVuZ3RoID8gX2hhcm5lc3MocGFyc2VkVGFyZ2V0cykgOiBfd2FybihcIkdTQVAgdGFyZ2V0IFwiICsgdGFyZ2V0cyArIFwiIG5vdCBmb3VuZC4gaHR0cHM6Ly9ncmVlbnNvY2suY29tXCIsICFfY29uZmlnLm51bGxUYXJnZXRXYXJuKSB8fCBbXTtcbiAgICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTtcbiAgICAgIF90aGlzMy5fb3ZlcndyaXRlID0gb3ZlcndyaXRlO1xuXG4gICAgICBpZiAoa2V5ZnJhbWVzIHx8IHN0YWdnZXIgfHwgX2lzRnVuY09yU3RyaW5nKGR1cmF0aW9uKSB8fCBfaXNGdW5jT3JTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgICAgdGwgPSBfdGhpczMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUoe1xuICAgICAgICAgIGRhdGE6IFwibmVzdGVkXCIsXG4gICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9LFxuICAgICAgICAgIHRhcmdldHM6IHBhcmVudCAmJiBwYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIiA/IHBhcmVudC52YXJzLnRhcmdldHMgOiBwYXJzZWRUYXJnZXRzXG4gICAgICAgIH0pO1xuICAgICAgICB0bC5raWxsKCk7XG4gICAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgICAgdGwuX3N0YXJ0ID0gMDtcblxuICAgICAgICBpZiAoc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgICAgc3RhZ2dlckZ1bmMgPSBzdGFnZ2VyICYmIGRpc3RyaWJ1dGUoc3RhZ2dlcik7XG5cbiAgICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlIHx8IChzdGFnZ2VyVmFyc1RvTWVyZ2UgPSB7fSk7XG4gICAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvcHkgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfc3RhZ2dlclByb3BzVG9Ta2lwKTtcbiAgICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSAmJiBfbWVyZ2UoY29weSwgc3RhZ2dlclZhcnNUb01lcmdlKTtcbiAgICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07XG4gICAgICAgICAgICBjb3B5LmR1cmF0aW9uID0gK19wYXJzZUZ1bmNPclN0cmluZyhkdXJhdGlvbiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBpLCBjdXJUYXJnZXQsIHBhcnNlZFRhcmdldHMpO1xuICAgICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICAgIF90aGlzMy5fc3RhcnQgKz0gZGVsYXk7XG4gICAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0bC50byhjdXJUYXJnZXQsIGNvcHksIHN0YWdnZXJGdW5jID8gc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSA6IDApO1xuICAgICAgICAgICAgdGwuX2Vhc2UgPSBfZWFzZU1hcC5ub25lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPyBkdXJhdGlvbiA9IGRlbGF5ID0gMCA6IF90aGlzMy50aW1lbGluZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgICAgZWFzZTogXCJub25lXCJcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICB0bC5fZWFzZSA9IF9wYXJzZUVhc2Uoa2V5ZnJhbWVzLmVhc2UgfHwgdmFycy5lYXNlIHx8IFwibm9uZVwiKTtcbiAgICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGtmLFxuICAgICAgICAgICAgICB2O1xuXG4gICAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICAgIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdGwudG8ocGFyc2VkVGFyZ2V0cywgZnJhbWUsIFwiPlwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGwuZHVyYXRpb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHAgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAocCBpbiBjb3B5KSB7XG4gICAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS50IC0gYi50O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBrZiA9IGFbaV07XG4gICAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICAgIGVhc2U6IGtmLmUsXG4gICAgICAgICAgICAgICAgICBkdXJhdGlvbjogKGtmLnQgLSAoaSA/IGFbaSAtIDFdLnQgOiAwKSkgLyAxMDAgKiBkdXJhdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdltwXSA9IGtmLnY7XG4gICAgICAgICAgICAgICAgdGwudG8ocGFyc2VkVGFyZ2V0cywgdiwgdGltZSk7XG4gICAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSB0bC5kdXJhdGlvbigpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkdXJhdGlvbiB8fCBfdGhpczMuZHVyYXRpb24oZHVyYXRpb24gPSB0bC5kdXJhdGlvbigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVyd3JpdGUgPT09IHRydWUgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICAgIHZhcnMucmV2ZXJzZWQgJiYgX3RoaXMzLnJldmVyc2UoKTtcbiAgICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgICAgX3RoaXMzLl90VGltZSA9IC1fdGlueU51bTtcblxuICAgICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkgfHwgMCk7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICAgIHJldHVybiBfdGhpczM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICAgICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgICAgdFRpbWUgPSB0b3RhbFRpbWUgPiB0RHVyIC0gX3RpbnlOdW0gJiYgIWlzTmVnYXRpdmUgPyB0RHVyIDogdG90YWxUaW1lIDwgX3RpbnlOdW0gPyAwIDogdG90YWxUaW1lLFxuICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgcHQsXG4gICAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgICBpc1lveW8sXG4gICAgICAgICAgcmF0aW8sXG4gICAgICAgICAgdGltZWxpbmUsXG4gICAgICAgICAgeW95b0Vhc2U7XG5cbiAgICAgIGlmICghZHVyKSB7XG4gICAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICB9IGVsc2UgaWYgKHRUaW1lICE9PSB0aGlzLl90VGltZSB8fCAhdG90YWxUaW1lIHx8IGZvcmNlIHx8ICF0aGlzLl9pbml0dGVkICYmIHRoaXMuX3RUaW1lIHx8IHRoaXMuX3N0YXJ0QXQgJiYgdGhpcy5felRpbWUgPCAwICE9PSBpc05lZ2F0aXZlKSB7XG4gICAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQpIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIGlzTmVnYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICAgIGlmIChpc1lveW8pIHtcbiAgICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMudmFycy5yZXBlYXRSZWZyZXNoICYmICFpc1lveW8gJiYgIXRoaXMuX2xvY2spIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTtcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICBpZiAoX2F0dGVtcHRJbml0VHdlZW4odGhpcywgaXNOZWdhdGl2ZSA/IHRvdGFsVGltZSA6IHRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cywgdFRpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLl90VGltZSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lO1xuICAgICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIXRoaXMuX2FjdCAmJiB0aGlzLl90cykge1xuICAgICAgICAgIHRoaXMuX2FjdCA9IDE7XG4gICAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAoeW95b0Vhc2UgfHwgdGhpcy5fZWFzZSkodGltZSAvIGR1cik7XG5cbiAgICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzICYmICFpdGVyYXRpb24pIHtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgXCJvblN0YXJ0XCIpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZWxpbmUgJiYgdGltZWxpbmUucmVuZGVyKHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiAhdGltZSAmJiBpc1lveW8gPyAtX3RpbnlOdW0gOiB0aW1lbGluZS5fZHVyICogdGltZWxpbmUuX2Vhc2UodGltZSAvIHRoaXMuX2R1ciksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkgfHwgdGhpcy5fc3RhcnRBdCAmJiAodGhpcy5felRpbWUgPSB0b3RhbFRpbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgICBpc05lZ2F0aXZlICYmIF9yZXdpbmRTdGFydEF0KHRoaXMsIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVwZWF0ICYmIGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbiAmJiB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHRoaXMucGFyZW50ICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0aGlzLl90RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTtcblxuICAgICAgICAgIGlmICghc3VwcHJlc3NFdmVudHMgJiYgIShpc05lZ2F0aXZlICYmICFwcmV2VGltZSkgJiYgKHRUaW1lIHx8IHByZXZUaW1lIHx8IGlzWW95bykpIHtcbiAgICAgICAgICAgIF9jYWxsYmFjayh0aGlzLCB0VGltZSA9PT0gdER1ciA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKHNvZnQpIHtcbiAgICAgICghc29mdCB8fCAhdGhpcy52YXJzLnJ1bkJhY2t3YXJkcykgJiYgKHRoaXMuX3N0YXJ0QXQgPSAwKTtcbiAgICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9vblVwZGF0ZSA9IHRoaXMuX2xhenkgPSB0aGlzLnJhdGlvID0gMDtcbiAgICAgIHRoaXMuX3B0TG9va3VwID0gW107XG4gICAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZShzb2Z0KTtcbiAgICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMsIHNvZnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8zLnJlc2V0VG8gPSBmdW5jdGlvbiByZXNldFRvKHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICAgIHRoaXMuX3RzIHx8IHRoaXMucGxheSgpO1xuICAgICAgdmFyIHRpbWUgPSBNYXRoLm1pbih0aGlzLl9kdXIsICh0aGlzLl9kcC5fdGltZSAtIHRoaXMuX3N0YXJ0KSAqIHRoaXMuX3RzKSxcbiAgICAgICAgICByYXRpbztcbiAgICAgIHRoaXMuX2luaXR0ZWQgfHwgX2luaXRUd2Vlbih0aGlzLCB0aW1lKTtcbiAgICAgIHJhdGlvID0gdGhpcy5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKTtcblxuICAgICAgaWYgKF91cGRhdGVQcm9wVHdlZW5zKHRoaXMsIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTtcbiAgICAgIH1cblxuICAgICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICAgIHRoaXMucGFyZW50IHx8IF9hZGRMaW5rZWRMaXN0SXRlbSh0aGlzLl9kcCwgdGhpcywgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aGlzLl9kcC5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigwKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvMy5raWxsID0gZnVuY3Rpb24ga2lsbCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRhcmdldHMgJiYgKCF2YXJzIHx8IHZhcnMgPT09IFwiYWxsXCIpKSB7XG4gICAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudCA/IF9pbnRlcnJ1cHQodGhpcykgOiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgICB2YXIgdER1ciA9IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpO1xuICAgICAgICB0aGlzLnRpbWVsaW5lLmtpbGxUd2VlbnNPZih0YXJnZXRzLCB2YXJzLCBfb3ZlcndyaXRpbmdUd2VlbiAmJiBfb3ZlcndyaXRpbmdUd2Vlbi52YXJzLm92ZXJ3cml0ZSAhPT0gdHJ1ZSkuX2ZpcnN0IHx8IF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyc2VkVGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG4gICAgICAgICAga2lsbGluZ1RhcmdldHMgPSB0YXJnZXRzID8gdG9BcnJheSh0YXJnZXRzKSA6IHBhcnNlZFRhcmdldHMsXG4gICAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgICAgZmlyc3RQVCA9IHRoaXMuX3B0LFxuICAgICAgICAgIG92ZXJ3cml0dGVuUHJvcHMsXG4gICAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzLFxuICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIHAsXG4gICAgICAgICAgcHQsXG4gICAgICAgICAgaTtcblxuICAgICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICAgIHZhcnMgPT09IFwiYWxsXCIgJiYgKHRoaXMuX3B0ID0gMCk7XG4gICAgICAgIHJldHVybiBfaW50ZXJydXB0KHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3AgPSB0aGlzLl9vcCB8fCBbXTtcblxuICAgICAgaWYgKHZhcnMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFycyA9IHA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXJzID0gX2FkZEFsaWFzZXNUb1ZhcnMocGFyc2VkVGFyZ2V0cywgdmFycyk7XG4gICAgICB9XG5cbiAgICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAofmtpbGxpbmdUYXJnZXRzLmluZGV4T2YocGFyc2VkVGFyZ2V0c1tpXSkpIHtcbiAgICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgICBpZiAodmFycyA9PT0gXCJhbGxcIikge1xuICAgICAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnM7XG4gICAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0ge307XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgICBwcm9wcyA9IHZhcnM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgICBwdCA9IGN1ckxvb2t1cCAmJiBjdXJMb29rdXBbcF07XG5cbiAgICAgICAgICAgIGlmIChwdCkge1xuICAgICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1ck92ZXJ3cml0ZVByb3BzICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdHRlZCAmJiAhdGhpcy5fcHQgJiYgZmlyc3RQVCAmJiBfaW50ZXJydXB0KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFR3ZWVuLnRvID0gZnVuY3Rpb24gdG8odGFyZ2V0cywgdmFycykge1xuICAgICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICAgIH07XG5cbiAgICBUd2Vlbi5mcm9tID0gZnVuY3Rpb24gZnJvbSh0YXJnZXRzLCB2YXJzKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBUd2Vlbi5kZWxheWVkQ2FsbCA9IGZ1bmN0aW9uIGRlbGF5ZWRDYWxsKGRlbGF5LCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuICAgICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgICBsYXp5OiBmYWxzZSxcbiAgICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICBvbkNvbXBsZXRlOiBjYWxsYmFjayxcbiAgICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgICBvbkNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIG9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICAgIHJldHVybiBfY3JlYXRlVHdlZW5UeXBlKDIsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgICB2YXJzLmR1cmF0aW9uID0gMDtcbiAgICAgIHZhcnMucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICAgIH07XG5cbiAgICBUd2Vlbi5raWxsVHdlZW5zT2YgPSBmdW5jdGlvbiBraWxsVHdlZW5zT2YodGFyZ2V0cywgcHJvcHMsIG9ubHlBY3RpdmUpIHtcbiAgICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFR3ZWVuO1xuICB9KEFuaW1hdGlvbik7XG5cbiAgX3NldERlZmF1bHRzKFR3ZWVuLnByb3RvdHlwZSwge1xuICAgIF90YXJnZXRzOiBbXSxcbiAgICBfbGF6eTogMCxcbiAgICBfc3RhcnRBdDogMCxcbiAgICBfb3A6IDAsXG4gICAgX29uSW5pdDogMFxuICB9KTtcblxuICBfZm9yRWFjaE5hbWUoXCJzdGFnZ2VyVG8sc3RhZ2dlckZyb20sc3RhZ2dlckZyb21Ub1wiLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIFR3ZWVuW25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgICAgcGFyYW1zID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgcGFyYW1zLnNwbGljZShuYW1lID09PSBcInN0YWdnZXJGcm9tVG9cIiA/IDUgOiA0LCAwLCAwKTtcbiAgICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XSh2YWx1ZSk7XG4gIH0sXG4gICAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0oZGF0YS5mcCwgdmFsdWUpO1xuICB9LFxuICAgICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnNldEF0dHJpYnV0ZShwcm9wZXJ0eSwgdmFsdWUpO1xuICB9LFxuICAgICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBfaXNGdW5jdGlvbih0YXJnZXRbcHJvcGVydHldKSA/IF9zZXR0ZXJGdW5jIDogX2lzVW5kZWZpbmVkKHRhcmdldFtwcm9wZXJ0eV0pICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUgPyBfc2V0dGVyQXR0cmlidXRlIDogX3NldHRlclBsYWluO1xuICB9LFxuICAgICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMDAwKSAvIDEwMDAwMDAsIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgISEoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pLCBkYXRhKTtcbiAgfSxcbiAgICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgICB2YXIgcHQgPSBkYXRhLl9wdCxcbiAgICAgICAgcyA9IFwiXCI7XG5cbiAgICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgICAgcyA9IGRhdGEuYjtcbiAgICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgICAgcyA9IGRhdGEuZTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHMgPSBwdC5wICsgKHB0Lm0gPyBwdC5tKHB0LnMgKyBwdC5jICogcmF0aW8pIDogTWF0aC5yb3VuZCgocHQucyArIHB0LmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCkgKyBzO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICBzICs9IGRhdGEuYztcbiAgICB9XG5cbiAgICBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcywgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyUHJvcFR3ZWVucyA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wVHdlZW5zKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICB9XG4gIH0sXG4gICAgICBfYWRkUGx1Z2luTW9kaWZpZXIgPSBmdW5jdGlvbiBfYWRkUGx1Z2luTW9kaWZpZXIobW9kaWZpZXIsIHR3ZWVuLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICAgIHB0LnAgPT09IHByb3BlcnR5ICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyLCB0d2VlbiwgdGFyZ2V0KTtcbiAgICAgIHB0ID0gbmV4dDtcbiAgICB9XG4gIH0sXG4gICAgICBfa2lsbFByb3BUd2VlbnNPZiA9IGZ1bmN0aW9uIF9raWxsUHJvcFR3ZWVuc09mKHByb3BlcnR5KSB7XG4gICAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyxcbiAgICAgICAgbmV4dDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgbmV4dCA9IHB0Ll9uZXh0O1xuXG4gICAgICBpZiAocHQucCA9PT0gcHJvcGVydHkgJiYgIXB0Lm9wIHx8IHB0Lm9wID09PSBwcm9wZXJ0eSkge1xuICAgICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgICAgfSBlbHNlIGlmICghcHQuZGVwKSB7XG4gICAgICAgIGhhc05vbkRlcGVuZGVudFJlbWFpbmluZyA9IDE7XG4gICAgICB9XG5cbiAgICAgIHB0ID0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbiAgfSxcbiAgICAgIF9zZXR0ZXJXaXRoTW9kaWZpZXIgPSBmdW5jdGlvbiBfc2V0dGVyV2l0aE1vZGlmaWVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gICAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG4gIH0sXG4gICAgICBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5ID0gZnVuY3Rpb24gX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eShwYXJlbnQpIHtcbiAgICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgICBuZXh0LFxuICAgICAgICBwdDIsXG4gICAgICAgIGZpcnN0LFxuICAgICAgICBsYXN0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgICBwdDIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuICAgICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpIHtcbiAgICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gcHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChwdC5fbmV4dCA9IHB0Mikge1xuICAgICAgICBwdDIuX3ByZXYgPSBwdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhc3QgPSBwdDtcbiAgICAgIH1cblxuICAgICAgcHQgPSBuZXh0O1xuICAgIH1cblxuICAgIHBhcmVudC5fcHQgPSBmaXJzdDtcbiAgfTtcblxuICB2YXIgUHJvcFR3ZWVuID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLnMgPSBzdGFydDtcbiAgICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICAgIHRoaXMucCA9IHByb3A7XG4gICAgICB0aGlzLnIgPSByZW5kZXJlciB8fCBfcmVuZGVyUGxhaW47XG4gICAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgICB0aGlzLnNldCA9IHNldHRlciB8fCBfc2V0dGVyUGxhaW47XG4gICAgICB0aGlzLnByID0gcHJpb3JpdHkgfHwgMDtcbiAgICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgICBpZiAobmV4dCkge1xuICAgICAgICBuZXh0Ll9wcmV2ID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvNCA9IFByb3BUd2Vlbi5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgICAgdGhpcy5tU2V0ID0gdGhpcy5tU2V0IHx8IHRoaXMuc2V0O1xuICAgICAgdGhpcy5zZXQgPSBfc2V0dGVyV2l0aE1vZGlmaWVyO1xuICAgICAgdGhpcy5tID0gZnVuYztcbiAgICAgIHRoaXMubXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm9wVHdlZW47XG4gIH0oKTtcblxuICBfZm9yRWFjaE5hbWUoX2NhbGxiYWNrTmFtZXMgKyBcInBhcmVudCxkdXJhdGlvbixlYXNlLGRlbGF5LG92ZXJ3cml0ZSxydW5CYWNrd2FyZHMsc3RhcnRBdCx5b3lvLGltbWVkaWF0ZVJlbmRlcixyZXBlYXQscmVwZWF0RGVsYXksZGF0YSxwYXVzZWQscmV2ZXJzZWQsbGF6eSxjYWxsYmFja1Njb3BlLHN0cmluZ0ZpbHRlcixpZCx5b3lvRWFzZSxzdGFnZ2VyLGluaGVyaXQscmVwZWF0UmVmcmVzaCxrZXlmcmFtZXMsYXV0b1JldmVydCxzY3JvbGxUcmlnZ2VyXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2dsb2JhbHMuVHdlZW5NYXggPSBfZ2xvYmFscy5Ud2VlbkxpdGUgPSBUd2VlbjtcbiAgX2dsb2JhbHMuVGltZWxpbmVMaXRlID0gX2dsb2JhbHMuVGltZWxpbmVNYXggPSBUaW1lbGluZTtcbiAgX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICBzb3J0Q2hpbGRyZW46IGZhbHNlLFxuICAgIGRlZmF1bHRzOiBfZGVmYXVsdHMsXG4gICAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICAgIGlkOiBcInJvb3RcIixcbiAgICBzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZVxuICB9KTtcbiAgX2NvbmZpZy5zdHJpbmdGaWx0ZXIgPSBfY29sb3JTdHJpbmdGaWx0ZXI7XG5cbiAgdmFyIF9tZWRpYSA9IFtdLFxuICAgICAgX2xpc3RlbmVycyA9IHt9LFxuICAgICAgX2VtcHR5QXJyYXkgPSBbXSxcbiAgICAgIF9sYXN0TWVkaWFUaW1lID0gMCxcbiAgICAgIF9jb250ZXh0SUQgPSAwLFxuICAgICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgICByZXR1cm4gKF9saXN0ZW5lcnNbdHlwZV0gfHwgX2VtcHR5QXJyYXkpLm1hcChmdW5jdGlvbiAoZikge1xuICAgICAgcmV0dXJuIGYoKTtcbiAgICB9KTtcbiAgfSxcbiAgICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gICAgdmFyIHRpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgICBtYXRjaGVzID0gW107XG5cbiAgICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYUluaXRcIik7XG5cbiAgICAgIF9tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgICAgY29uZGl0aW9ucyA9IGMuY29uZGl0aW9ucyxcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgcCxcbiAgICAgICAgICAgIGFueU1hdGNoLFxuICAgICAgICAgICAgdG9nZ2xlZDtcblxuICAgICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICAgIG1hdGNoID0gX3dpbi5tYXRjaE1lZGlhKHF1ZXJpZXNbcF0pLm1hdGNoZXM7XG4gICAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgICBpZiAobWF0Y2ggIT09IGNvbmRpdGlvbnNbcF0pIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbnNbcF0gPSBtYXRjaDtcbiAgICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgICAgYy5yZXZlcnQoKTtcbiAgICAgICAgICBhbnlNYXRjaCAmJiBtYXRjaGVzLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhUmV2ZXJ0XCIpO1xuXG4gICAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGMub25NYXRjaChjKTtcbiAgICAgIH0pO1xuICAgICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgICBfZGlzcGF0Y2goXCJtYXRjaE1lZGlhXCIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gc2NvcGUgJiYgc2VsZWN0b3Ioc2NvcGUpO1xuICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICB0aGlzLl9yID0gW107XG4gICAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaWQgPSBfY29udGV4dElEKys7XG4gICAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG81ID0gQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgICAgaWYgKF9pc0Z1bmN0aW9uKG5hbWUpKSB7XG4gICAgICAgIHNjb3BlID0gZnVuYztcbiAgICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSBfaXNGdW5jdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIGYgPSBmdW5jdGlvbiBmKCkge1xuICAgICAgICB2YXIgcHJldiA9IF9jb250ZXh0LFxuICAgICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgcHJldiAmJiBwcmV2ICE9PSBzZWxmICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgICBzY29wZSAmJiAoc2VsZi5zZWxlY3RvciA9IHNlbGVjdG9yKHNjb3BlKSk7XG4gICAgICAgIF9jb250ZXh0ID0gc2VsZjtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgICBfaXNGdW5jdGlvbihyZXN1bHQpICYmIHNlbGYuX3IucHVzaChyZXN1bHQpO1xuICAgICAgICBfY29udGV4dCA9IHByZXY7XG4gICAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICAgIHNlbGYuaXNSZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgc2VsZi5sYXN0ID0gZjtcbiAgICAgIHJldHVybiBuYW1lID09PSBfaXNGdW5jdGlvbiA/IGYoc2VsZikgOiBuYW1lID8gc2VsZltuYW1lXSA9IGYgOiBmO1xuICAgIH07XG5cbiAgICBfcHJvdG81Lmlnbm9yZSA9IGZ1bmN0aW9uIGlnbm9yZShmdW5jKSB7XG4gICAgICB2YXIgcHJldiA9IF9jb250ZXh0O1xuICAgICAgX2NvbnRleHQgPSBudWxsO1xuICAgICAgZnVuYyh0aGlzKTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICB9O1xuXG4gICAgX3Byb3RvNS5nZXRUd2VlbnMgPSBmdW5jdGlvbiBnZXRUd2VlbnMoKSB7XG4gICAgICB2YXIgYSA9IFtdO1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBDb250ZXh0ID8gYS5wdXNoLmFwcGx5KGEsIGUuZ2V0VHdlZW5zKCkpIDogZSBpbnN0YW5jZW9mIFR3ZWVuICYmICEoZS5wYXJlbnQgJiYgZS5wYXJlbnQuZGF0YSA9PT0gXCJuZXN0ZWRcIikgJiYgYS5wdXNoKGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYTtcbiAgICB9O1xuXG4gICAgX3Byb3RvNS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgICB9O1xuXG4gICAgX3Byb3RvNS5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQsIG1hdGNoTWVkaWEpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVucygpO1xuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGlmICh0LmRhdGEgPT09IFwiaXNGbGlwXCIpIHtcbiAgICAgICAgICAgIHQucmV2ZXJ0KCk7XG4gICAgICAgICAgICB0LmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICAgICAgICByZXR1cm4gdHdlZW5zLnNwbGljZSh0d2VlbnMuaW5kZXhPZih0d2VlbiksIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdHdlZW5zLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnOiB0Lmdsb2JhbFRpbWUoMCksXG4gICAgICAgICAgICB0OiB0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLUluZmluaXR5O1xuICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgcmV0dXJuIG8udC5yZXZlcnQocmV2ZXJ0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuICEoZSBpbnN0YW5jZW9mIFR3ZWVuKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9yLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaXNSZXZlcnRlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHJldHVybiBlLmtpbGwgJiYgZS5raWxsKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICAgIHZhciBpID0gX21lZGlhLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgX21lZGlhW2ldLmlkID09PSB0aGlzLmlkICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvNS5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnRleHQ7XG4gIH0oKTtcblxuICB2YXIgTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzYuYWRkID0gZnVuY3Rpb24gYWRkKGNvbmRpdGlvbnMsIGZ1bmMsIHNjb3BlKSB7XG4gICAgICBfaXNPYmplY3QoY29uZGl0aW9ucykgfHwgKGNvbmRpdGlvbnMgPSB7XG4gICAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCgwLCBzY29wZSB8fCB0aGlzLnNjb3BlKSxcbiAgICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgICAgbXEsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhY3RpdmU7XG4gICAgICBfY29udGV4dCAmJiAhY29udGV4dC5zZWxlY3RvciAmJiAoY29udGV4dC5zZWxlY3RvciA9IF9jb250ZXh0LnNlbGVjdG9yKTtcbiAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgICBjb250ZXh0LnF1ZXJpZXMgPSBjb25kaXRpb25zO1xuXG4gICAgICBmb3IgKHAgaW4gY29uZGl0aW9ucykge1xuICAgICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICAgIGFjdGl2ZSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgICBpZiAobXEpIHtcbiAgICAgICAgICAgIF9tZWRpYS5pbmRleE9mKGNvbnRleHQpIDwgMCAmJiBfbWVkaWEucHVzaChjb250ZXh0KTtcbiAgICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgICAgbXEuYWRkTGlzdGVuZXIgPyBtcS5hZGRMaXN0ZW5lcihfb25NZWRpYUNoYW5nZSkgOiBtcS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIF9vbk1lZGlhQ2hhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWN0aXZlICYmIGZ1bmMoY29udGV4dCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgX3Byb3RvNi5yZXZlcnQgPSBmdW5jdGlvbiByZXZlcnQoY29uZmlnKSB7XG4gICAgICB0aGlzLmtpbGwoY29uZmlnIHx8IHt9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvNi5raWxsID0gZnVuY3Rpb24ga2lsbChyZXZlcnQpIHtcbiAgICAgIHRoaXMuY29udGV4dHMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE1hdGNoTWVkaWE7XG4gIH0oKTtcblxuICB2YXIgX2dzYXAgPSB7XG4gICAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gICAgfSxcbiAgICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgICB9LFxuICAgIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTtcblxuICAgICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgICB1bml0ID09PSBcIm5hdGl2ZVwiICYmICh1bml0ID0gXCJcIik7XG4gICAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICAgIH0gOiBmb3JtYXQoKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiBfcGx1Z2luc1twcm9wZXJ0eV0uZ2V0IHx8IGdldHRlcikodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkpO1xuICAgIH0sXG4gICAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICAgIHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KTtcblxuICAgICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICAgIHJldHVybiBnc2FwLnF1aWNrU2V0dGVyKHQsIHByb3BlcnR5LCB1bml0KTtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICBzZXR0ZXJzW2ldKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgICBjYWNoZSA9IF9nZXRDYWNoZSh0YXJnZXQpLFxuICAgICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICAgIF9xdWlja1R3ZWVuLl9wdCA9IDA7XG4gICAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICAgIF9xdWlja1R3ZWVuLl9wdCAmJiBfcmVuZGVyUHJvcFR3ZWVucygxLCBfcXVpY2tUd2Vlbik7XG4gICAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHNldHRlcih0YXJnZXQsIHAsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgY2FjaGUsIDEpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHF1aWNrVG86IGZ1bmN0aW9uIHF1aWNrVG8odGFyZ2V0LCBwcm9wZXJ0eSwgdmFycykge1xuICAgICAgdmFyIF9tZXJnZTI7XG5cbiAgICAgIHZhciB0d2VlbiA9IGdzYXAudG8odGFyZ2V0LCBfbWVyZ2UoKF9tZXJnZTIgPSB7fSwgX21lcmdlMltwcm9wZXJ0eV0gPSBcIis9MC4xXCIsIF9tZXJnZTIucGF1c2VkID0gdHJ1ZSwgX21lcmdlMiksIHZhcnMgfHwge30pKSxcbiAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyh2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSkge1xuICAgICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgICAgfTtcblxuICAgICAgZnVuYy50d2VlbiA9IHR3ZWVuO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgICB9LFxuICAgIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICAgIHJldHVybiBfbWVyZ2VEZWVwKF9kZWZhdWx0cywgdmFsdWUgfHwge30pO1xuICAgIH0sXG4gICAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICAgIHJldHVybiBfbWVyZ2VEZWVwKF9jb25maWcsIHZhbHVlIHx8IHt9KTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgICBkZWZhdWx0cyA9IF9yZWYzLmRlZmF1bHRzLFxuICAgICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgICByZXR1cm4gcGx1Z2luTmFtZSAmJiAhX3BsdWdpbnNbcGx1Z2luTmFtZV0gJiYgIV9nbG9iYWxzW3BsdWdpbk5hbWVdICYmIF93YXJuKG5hbWUgKyBcIiBlZmZlY3QgcmVxdWlyZXMgXCIgKyBwbHVnaW5OYW1lICsgXCIgcGx1Z2luLlwiKTtcbiAgICAgIH0pO1xuXG4gICAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgICByZXR1cm4gZWZmZWN0KHRvQXJyYXkodGFyZ2V0cyksIF9zZXREZWZhdWx0cyh2YXJzIHx8IHt9LCBkZWZhdWx0cyksIHRsKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgICBUaW1lbGluZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgICAgX2Vhc2VNYXBbbmFtZV0gPSBfcGFyc2VFYXNlKGVhc2UpO1xuICAgIH0sXG4gICAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3BhcnNlRWFzZShlYXNlLCBkZWZhdWx0RWFzZSkgOiBfZWFzZU1hcDtcbiAgICB9LFxuICAgIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0QnlJZChpZCk7XG4gICAgfSxcbiAgICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgICAgdmFycyA9IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgdGwgPSBuZXcgVGltZWxpbmUodmFycyksXG4gICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgbmV4dDtcbiAgICAgIHRsLnNtb290aENoaWxkVGltaW5nID0gX2lzTm90RmFsc2UodmFycy5zbW9vdGhDaGlsZFRpbWluZyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgICB0bC5fZHAgPSAwO1xuICAgICAgdGwuX3RpbWUgPSB0bC5fdFRpbWUgPSBfZ2xvYmFsVGltZWxpbmUuX3RpbWU7XG4gICAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgfVxuXG4gICAgICBfYWRkVG9UaW1lbGluZShfZ2xvYmFsVGltZWxpbmUsIHRsLCAwKTtcblxuICAgICAgcmV0dXJuIHRsO1xuICAgIH0sXG4gICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dChmdW5jLCBzY29wZSkge1xuICAgICAgcmV0dXJuIGZ1bmMgPyBuZXcgQ29udGV4dChmdW5jLCBzY29wZSkgOiBfY29udGV4dDtcbiAgICB9LFxuICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uIG1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICAgIHJldHVybiBuZXcgTWF0Y2hNZWRpYShzY29wZSk7XG4gICAgfSxcbiAgICBtYXRjaE1lZGlhUmVmcmVzaDogZnVuY3Rpb24gbWF0Y2hNZWRpYVJlZnJlc2goKSB7XG4gICAgICByZXR1cm4gX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICAgIHA7XG5cbiAgICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgICBpZiAoY29uZFtwXSkge1xuICAgICAgICAgICAgY29uZFtwXSA9IGZhbHNlO1xuICAgICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgICB9KSB8fCBfb25NZWRpYUNoYW5nZSgpO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICAgICAgfmEuaW5kZXhPZihjYWxsYmFjaykgfHwgYS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgaSA+PSAwICYmIGEuc3BsaWNlKGksIDEpO1xuICAgIH0sXG4gICAgdXRpbHM6IHtcbiAgICAgIHdyYXA6IHdyYXAsXG4gICAgICB3cmFwWW95bzogd3JhcFlveW8sXG4gICAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgICAgcmFuZG9tOiByYW5kb20sXG4gICAgICBzbmFwOiBzbmFwLFxuICAgICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgICAgY2xhbXA6IGNsYW1wLFxuICAgICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgICBwaXBlOiBwaXBlLFxuICAgICAgdW5pdGl6ZTogdW5pdGl6ZSxcbiAgICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICAgIHNodWZmbGU6IHNodWZmbGVcbiAgICB9LFxuICAgIGluc3RhbGw6IF9pbnN0YWxsLFxuICAgIGVmZmVjdHM6IF9lZmZlY3RzLFxuICAgIHRpY2tlcjogX3RpY2tlcixcbiAgICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICAgIHBsdWdpbnM6IF9wbHVnaW5zLFxuICAgIGdsb2JhbFRpbWVsaW5lOiBfZ2xvYmFsVGltZWxpbmUsXG4gICAgY29yZToge1xuICAgICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgICBnbG9iYWxzOiBfYWRkR2xvYmFsLFxuICAgICAgVHdlZW46IFR3ZWVuLFxuICAgICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgICAgQW5pbWF0aW9uOiBBbmltYXRpb24sXG4gICAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgICByZXZlcnRpbmc6IGZ1bmN0aW9uIHJldmVydGluZygpIHtcbiAgICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgICB9LFxuICAgICAgY29udGV4dDogZnVuY3Rpb24gY29udGV4dCh0b0FkZCkge1xuICAgICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgICBfY29udGV4dC5kYXRhLnB1c2godG9BZGQpO1xuXG4gICAgICAgICAgdG9BZGQuX2N0eCA9IF9jb250ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9jb250ZXh0O1xuICAgICAgfSxcbiAgICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLGRlbGF5ZWRDYWxsLHNldCxraWxsVHdlZW5zT2ZcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbiAgfSk7XG5cbiAgX3RpY2tlci5hZGQoVGltZWxpbmUudXBkYXRlUm9vdCk7XG5cbiAgX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICAgIGR1cmF0aW9uOiAwXG4gIH0pO1xuXG4gIHZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgICB2YXIgcHQgPSBwbHVnaW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0O1xuICB9LFxuICAgICAgX2FkZE1vZGlmaWVycyA9IGZ1bmN0aW9uIF9hZGRNb2RpZmllcnModHdlZW4sIG1vZGlmaWVycykge1xuICAgIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICAgIHAsXG4gICAgICAgIGksXG4gICAgICAgIHB0O1xuXG4gICAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgICAgaSA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICAgIGlmIChwdCAmJiAocHQgPSBwdC5kKSkge1xuICAgICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHQgJiYgcHQubW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXJzW3BdLCB0d2VlbiwgdGFyZ2V0c1tpXSwgcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gICAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByYXdWYXJzOiAxLFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG4gICAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICAgIGlmIChfaXNTdHJpbmcodmFycykpIHtcbiAgICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wW25hbWVdID0gMTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICAgIG5hbWU6IFwiYXR0clwiLFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICAgIHZhciBwLCBwdCwgdjtcbiAgICAgIHRoaXMudHdlZW4gPSB0d2VlbjtcblxuICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgICAgcHQgPSB0aGlzLmFkZCh0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsICh2IHx8IDApICsgXCJcIiwgdmFyc1twXSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwdC5vcCA9IHA7XG4gICAgICAgIHB0LmIgPSB2O1xuXG4gICAgICAgIHRoaXMuX3Byb3BzLnB1c2gocCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyYXRpbywgZGF0YSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBfcmV2ZXJ0aW5nID8gcHQuc2V0KHB0LnQsIHB0LnAsIHB0LmIsIHB0KSA6IHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHRoaXMuYWRkKHRhcmdldCwgaSwgdGFyZ2V0W2ldIHx8IDAsIHZhbHVlW2ldLCAwLCAwLCAwLCAwLCAwLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwicm91bmRQcm9wc1wiLCBfcm91bmRNb2RpZmllciksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwibW9kaWZpZXJzXCIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcInNuYXBcIiwgc25hcCkpIHx8IF9nc2FwO1xuICBUd2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMi4yXCI7XG4gIF9jb3JlUmVhZHkgPSAxO1xuICBfd2luZG93RXhpc3RzKCkgJiYgX3dha2UoKTtcbiAgdmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICAgIFBvd2VyMSA9IF9lYXNlTWFwLlBvd2VyMSxcbiAgICAgIFBvd2VyMiA9IF9lYXNlTWFwLlBvd2VyMixcbiAgICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICAgIFBvd2VyNCA9IF9lYXNlTWFwLlBvd2VyNCxcbiAgICAgIExpbmVhciA9IF9lYXNlTWFwLkxpbmVhcixcbiAgICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgICAgQ3ViaWMgPSBfZWFzZU1hcC5DdWJpYyxcbiAgICAgIFF1YXJ0ID0gX2Vhc2VNYXAuUXVhcnQsXG4gICAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgICAgU3Ryb25nID0gX2Vhc2VNYXAuU3Ryb25nLFxuICAgICAgRWxhc3RpYyA9IF9lYXNlTWFwLkVsYXN0aWMsXG4gICAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICAgIFN0ZXBwZWRFYXNlID0gX2Vhc2VNYXAuU3RlcHBlZEVhc2UsXG4gICAgICBCb3VuY2UgPSBfZWFzZU1hcC5Cb3VuY2UsXG4gICAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICAgIEV4cG8gPSBfZWFzZU1hcC5FeHBvLFxuICAgICAgQ2lyYyA9IF9lYXNlTWFwLkNpcmM7XG5cbiAgdmFyIF93aW4kMSxcbiAgICAgIF9kb2MkMSxcbiAgICAgIF9kb2NFbGVtZW50LFxuICAgICAgX3BsdWdpbkluaXR0ZWQsXG4gICAgICBfdGVtcERpdixcbiAgICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgICAgX3JlY2VudFNldHRlclBsdWdpbixcbiAgICAgIF9yZXZlcnRpbmckMSxcbiAgICAgIF93aW5kb3dFeGlzdHMkMSA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG4gIH0sXG4gICAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICAgIF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcbiAgICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgICBfYmlnTnVtJDEgPSAxZTgsXG4gICAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgICAgX2NvbXBsZXhFeHAgPSAvW1xccyxcXChdXFxTLyxcbiAgICAgIF9wcm9wZXJ0eUFsaWFzZXMgPSB7XG4gICAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICAgIHNjYWxlOiBcInNjYWxlWCxzY2FsZVlcIixcbiAgICBhbHBoYTogXCJvcGFjaXR5XCJcbiAgfSxcbiAgICAgIF9yZW5kZXJDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3AocmF0aW8sIGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbiAgfSxcbiAgICAgIF9yZW5kZXJQcm9wV2l0aEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJQcm9wV2l0aEVuZChyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPT09IDEgPyBkYXRhLmUgOiBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSwgZGF0YSk7XG4gIH0sXG4gICAgICBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmcocmF0aW8sIGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIHJhdGlvID8gTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUgOiBkYXRhLmIsIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlclJvdW5kZWRDU1NQcm9wID0gZnVuY3Rpb24gX3JlbmRlclJvdW5kZWRDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0YS5zICsgZGF0YS5jICogcmF0aW87XG4gICAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWUgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZShyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xuICB9LFxuICAgICAgX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgPSBmdW5jdGlvbiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZChyYXRpbywgZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xuICB9LFxuICAgICAgX3NldHRlckNTU1N0eWxlID0gZnVuY3Rpb24gX3NldHRlckNTU1N0eWxlKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJDU1NQcm9wID0gZnVuY3Rpb24gX3NldHRlckNTU1Byb3AodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG4gIH0sXG4gICAgICBfc2V0dGVyVHJhbnNmb3JtID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG4gIH0sXG4gICAgICBfc2V0dGVyU2NhbGUgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgPSBmdW5jdGlvbiBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICAgIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgICBjYWNoZS5zY2FsZVggPSBjYWNoZS5zY2FsZVkgPSB2YWx1ZTtcbiAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbiAgfSxcbiAgICAgIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyID0gZnVuY3Rpb24gX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gICAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xuICB9LFxuICAgICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCIsXG4gICAgICBfc2F2ZVN0eWxlID0gZnVuY3Rpb24gX3NhdmVTdHlsZShwcm9wZXJ0eSwgaXNOb3RDU1MpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgc3R5bGUpIHtcbiAgICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICAgIGlmIChwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldIHx8IHByb3BlcnR5O1xuICAgICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy50Zm1bYV0gPSBfZ2V0KHRhcmdldCwgYSk7XG4gICAgICAgIH0pIDogdGhpcy50Zm1bcHJvcGVydHldID0gdGFyZ2V0Ll9nc2FwLnggPyB0YXJnZXQuX2dzYXBbcHJvcGVydHldIDogX2dldCh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBfcHJvcGVydHlBbGlhc2VzLnRyYW5zZm9ybS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHJldHVybiBfc2F2ZVN0eWxlLmNhbGwoX3RoaXMsIHAsIGlzTm90Q1NTKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluZGV4T2YoX3RyYW5zZm9ybVByb3ApID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Ll9nc2FwLnN2Zykge1xuICAgICAgICB0aGlzLnN2Z28gPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpO1xuICAgICAgICB0aGlzLnByb3BzLnB1c2goX3RyYW5zZm9ybU9yaWdpblByb3AsIGlzTm90Q1NTLCBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICAoc3R5bGUgfHwgaXNOb3RDU1MpICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgaXNOb3RDU1MsIHN0eWxlW3Byb3BlcnR5XSk7XG4gIH0sXG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyhzdHlsZSkge1xuICAgIGlmIChzdHlsZS50cmFuc2xhdGUpIHtcbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY2FsZVwiKTtcbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwicm90YXRlXCIpO1xuICAgIH1cbiAgfSxcbiAgICAgIF9yZXZlcnRTdHlsZSA9IGZ1bmN0aW9uIF9yZXZlcnRTdHlsZSgpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB0YXJnZXQgPSB0aGlzLnRhcmdldCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgICBpLFxuICAgICAgICBwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICBwcm9wc1tpICsgMV0gPyB0YXJnZXRbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogcHJvcHNbaSArIDJdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDJdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0uc3Vic3RyKDAsIDIpID09PSBcIi0tXCIgPyBwcm9wc1tpXSA6IHByb3BzW2ldLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRmbSkge1xuICAgICAgZm9yIChwIGluIHRoaXMudGZtKSB7XG4gICAgICAgIGNhY2hlW3BdID0gdGhpcy50Zm1bcF07XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgY2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdGhpcy5zdmdvIHx8IFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBpID0gX3JldmVydGluZyQxKCk7XG5cbiAgICAgIGlmICgoIWkgfHwgIWkuaXNTdGFydCkgJiYgIXN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gICAgICBfZ2V0U3R5bGVTYXZlciA9IGZ1bmN0aW9uIF9nZXRTdHlsZVNhdmVyKHRhcmdldCwgcHJvcGVydGllcykge1xuICAgIHZhciBzYXZlciA9IHtcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgcHJvcHM6IFtdLFxuICAgICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgICBzYXZlOiBfc2F2ZVN0eWxlXG4gICAgfTtcbiAgICB0YXJnZXQuX2dzYXAgfHwgZ3NhcC5jb3JlLmdldENhY2hlKHRhcmdldCk7XG4gICAgcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2F2ZXI7XG4gIH0sXG4gICAgICBfc3VwcG9ydHMzRCxcbiAgICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgICB2YXIgZSA9IF9kb2MkMS5jcmVhdGVFbGVtZW50TlMgPyBfZG9jJDEuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MkMS5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MkMS5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICB9LFxuICAgICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgICB2YXIgY3MgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjtcbiAgfSxcbiAgICAgIF9wcmVmaXhlcyA9IFwiTyxNb3osbXMsTXMsV2Via2l0XCIuc3BsaXQoXCIsXCIpLFxuICAgICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICAgIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgICAgcyA9IGUuc3R5bGUsXG4gICAgICAgIGkgPSA1O1xuXG4gICAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cblxuICAgIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgICB3aGlsZSAoaS0tICYmICEoX3ByZWZpeGVzW2ldICsgcHJvcGVydHkgaW4gcykpIHt9XG5cbiAgICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xuICB9LFxuICAgICAgX2luaXRDb3JlID0gZnVuY3Rpb24gX2luaXRDb3JlKCkge1xuICAgIGlmIChfd2luZG93RXhpc3RzJDEoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgIF93aW4kMSA9IHdpbmRvdztcbiAgICAgIF9kb2MkMSA9IF93aW4kMS5kb2N1bWVudDtcbiAgICAgIF9kb2NFbGVtZW50ID0gX2RvYyQxLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgICBzdHlsZToge31cbiAgICAgIH07XG4gICAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiO1xuICAgICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjtcbiAgICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgICBfcmV2ZXJ0aW5nJDEgPSBnc2FwLmNvcmUucmV2ZXJ0aW5nO1xuICAgICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICAgIH1cbiAgfSxcbiAgICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAgIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgICBvbGRQYXJlbnQgPSB0aGlzLnBhcmVudE5vZGUsXG4gICAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICAgIGJib3g7XG5cbiAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gICAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYmJveCA9IHRoaXMuZ2V0QkJveCgpO1xuICAgICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDtcbiAgICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2dzYXBCQm94KSB7XG4gICAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgICB9XG5cbiAgICBpZiAob2xkUGFyZW50KSB7XG4gICAgICBpZiAob2xkU2libGluZykge1xuICAgICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gICAgcmV0dXJuIGJib3g7XG4gIH0sXG4gICAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICAgIHZhciBpID0gYXR0cmlidXRlc0FycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlc0FycmF5W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gICAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICAgIHZhciBib3VuZHM7XG5cbiAgICB0cnkge1xuICAgICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBib3VuZHMgJiYgKGJvdW5kcy53aWR0aCB8fCBib3VuZHMuaGVpZ2h0KSB8fCB0YXJnZXQuZ2V0QkJveCA9PT0gX2dldEJCb3hIYWNrIHx8IChib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpKTtcbiAgICByZXR1cm4gYm91bmRzICYmICFib3VuZHMud2lkdGggJiYgIWJvdW5kcy54ICYmICFib3VuZHMueSA/IHtcbiAgICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9IDogYm91bmRzO1xuICB9LFxuICAgICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbiAgfSxcbiAgICAgIF9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5KSB7XG4gICAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICAgIHByb3BlcnR5ID0gX3RyYW5zZm9ybVByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgICBpZiAocHJvcGVydHkuc3Vic3RyKDAsIDIpID09PSBcIm1zXCIgfHwgcHJvcGVydHkuc3Vic3RyKDAsIDYpID09PSBcIndlYmtpdFwiKSB7XG4gICAgICAgICAgcHJvcGVydHkgPSBcIi1cIiArIHByb3BlcnR5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gICAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgICBwbHVnaW4uX3B0ID0gcHQ7XG4gICAgcHQuYiA9IGJlZ2lubmluZztcbiAgICBwdC5lID0gZW5kO1xuXG4gICAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICAgIHJldHVybiBwdDtcbiAgfSxcbiAgICAgIF9ub25Db252ZXJ0aWJsZVVuaXRzID0ge1xuICAgIGRlZzogMSxcbiAgICByYWQ6IDEsXG4gICAgdHVybjogMVxuICB9LFxuICAgICAgX25vblN0YW5kYXJkTGF5b3V0cyA9IHtcbiAgICBncmlkOiAxLFxuICAgIGZsZXg6IDFcbiAgfSxcbiAgICAgIF9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgICB2YXIgY3VyVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLFxuICAgICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgICAgc3R5bGUgPSBfdGVtcERpdi5zdHlsZSxcbiAgICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgICBtZWFzdXJlUHJvcGVydHkgPSAoaXNSb290U1ZHID8gXCJjbGllbnRcIiA6IFwib2Zmc2V0XCIpICsgKGhvcml6b250YWwgPyBcIldpZHRoXCIgOiBcIkhlaWdodFwiKSxcbiAgICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgICAgdG9QZXJjZW50ID0gdW5pdCA9PT0gXCIlXCIsXG4gICAgICAgIHB4LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBpc1NWRztcblxuICAgIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgICAgcmV0dXJuIGN1clZhbHVlO1xuICAgIH1cblxuICAgIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICAgIGlzU1ZHID0gdGFyZ2V0LmdldENUTSAmJiBfaXNTVkcodGFyZ2V0KTtcblxuICAgIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICByZXR1cm4gX3JvdW5kKHRvUGVyY2VudCA/IGN1clZhbHVlIC8gcHggKiBhbW91bnQgOiBjdXJWYWx1ZSAvIDEwMCAqIHB4KTtcbiAgICB9XG5cbiAgICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gICAgcGFyZW50ID0gfnByb3BlcnR5LmluZGV4T2YoXCJhZGl1c1wiKSB8fCB1bml0ID09PSBcImVtXCIgJiYgdGFyZ2V0LmFwcGVuZENoaWxkICYmICFpc1Jvb3RTVkcgPyB0YXJnZXQgOiB0YXJnZXQucGFyZW50Tm9kZTtcblxuICAgIGlmIChpc1NWRykge1xuICAgICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jJDEgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgICAgcGFyZW50ID0gX2RvYyQxLmJvZHk7XG4gICAgfVxuXG4gICAgY2FjaGUgPSBwYXJlbnQuX2dzYXA7XG5cbiAgICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICAgIHBhcmVudCA9PT0gdGFyZ2V0ICYmIChzdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCIpO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcbiAgICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblxuICAgICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICAgIGNhY2hlLnRpbWUgPSBfdGlja2VyLnRpbWU7XG4gICAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbiAgfSxcbiAgICAgIF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3Byb3BlcnR5QWxpYXNlcyAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnNwbGl0KFwiLFwiKVswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSAmJiBwcm9wZXJ0eSAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgICAgdmFsdWUgPSBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSAmJiBfc3BlY2lhbFByb3BzW3Byb3BlcnR5XSh0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB8fCBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCBfZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgKHByb3BlcnR5ID09PSBcIm9wYWNpdHlcIiA/IDEgOiAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbiAgfSxcbiAgICAgIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcgPSBmdW5jdGlvbiBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCkge1xuICAgIGlmICghc3RhcnQgfHwgc3RhcnQgPT09IFwibm9uZVwiKSB7XG4gICAgICB2YXIgcCA9IF9jaGVja1Byb3BQcmVmaXgocHJvcCwgdGFyZ2V0LCAxKSxcbiAgICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgICBpZiAocyAmJiBzICE9PSBzdGFydCkge1xuICAgICAgICBwcm9wID0gcDtcbiAgICAgICAgc3RhcnQgPSBzO1xuICAgICAgfSBlbHNlIGlmIChwcm9wID09PSBcImJvcmRlckNvbG9yXCIpIHtcbiAgICAgICAgc3RhcnQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIFwiYm9yZGVyVG9wQ29sb3JcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LnN0eWxlLCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZyksXG4gICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICAgIGEsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICBjb2xvcixcbiAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgZW5kVmFsdWUsXG4gICAgICAgIGVuZE51bSxcbiAgICAgICAgY2h1bmssXG4gICAgICAgIGVuZFVuaXQsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVmFsdWVzO1xuICAgIHB0LmIgPSBzdGFydDtcbiAgICBwdC5lID0gZW5kO1xuICAgIHN0YXJ0ICs9IFwiXCI7XG4gICAgZW5kICs9IFwiXCI7XG5cbiAgICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gZW5kO1xuICAgICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpO1xuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gICAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICAgIGVuZFZhbHVlcyA9IGVuZC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuXG4gICAgaWYgKGVuZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICAgIGVuZFZhbHVlID0gcmVzdWx0WzBdO1xuICAgICAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgY29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiIHx8IGNodW5rLnN1YnN0cigtNSkgPT09IFwiaHNsYShcIikge1xuICAgICAgICAgIGNvbG9yID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRWYWx1ZSAhPT0gKHN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlc1ttYXRjaEluZGV4KytdIHx8IFwiXCIpKSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgICAgc3RhcnRVbml0ID0gc3RhcnRWYWx1ZS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChlbmRWYWx1ZSA9IF9wYXJzZVJlbGF0aXZlKHN0YXJ0TnVtLCBlbmRWYWx1ZSkgKyBzdGFydFVuaXQpO1xuICAgICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICAgIGVuZFVuaXQgPSBlbmRWYWx1ZS5zdWJzdHIoKGVuZE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgaW5kZXggPSBfbnVtV2l0aFVuaXRFeHAubGFzdEluZGV4IC0gZW5kVW5pdC5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IGVuZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZW5kICs9IGVuZFVuaXQ7XG4gICAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgICBzdGFydE51bSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgfHwgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwdC5fcHQgPSB7XG4gICAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgICAgbTogY29sb3IgJiYgY29sb3IgPCA0IHx8IHByb3AgPT09IFwiekluZGV4XCIgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQuYyA9IGluZGV4IDwgZW5kLmxlbmd0aCA/IGVuZC5zdWJzdHJpbmcoaW5kZXgsIGVuZC5sZW5ndGgpIDogXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICAgIH1cblxuICAgIF9yZWxFeHAudGVzdChlbmQpICYmIChwdC5lID0gMCk7XG4gICAgdGhpcy5fcHQgPSBwdDtcbiAgICByZXR1cm4gcHQ7XG4gIH0sXG4gICAgICBfa2V5d29yZFRvUGVyY2VudCA9IHtcbiAgICB0b3A6IFwiMCVcIixcbiAgICBib3R0b206IFwiMTAwJVwiLFxuICAgIGxlZnQ6IFwiMCVcIixcbiAgICByaWdodDogXCIxMDAlXCIsXG4gICAgY2VudGVyOiBcIjUwJVwiXG4gIH0sXG4gICAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gICAgdmFyIHNwbGl0ID0gdmFsdWUuc3BsaXQoXCIgXCIpLFxuICAgICAgICB4ID0gc3BsaXRbMF0sXG4gICAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gICAgaWYgKHggPT09IFwidG9wXCIgfHwgeCA9PT0gXCJib3R0b21cIiB8fCB5ID09PSBcImxlZnRcIiB8fCB5ID09PSBcInJpZ2h0XCIpIHtcbiAgICAgIHZhbHVlID0geDtcbiAgICAgIHggPSB5O1xuICAgICAgeSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgICBzcGxpdFsxXSA9IF9rZXl3b3JkVG9QZXJjZW50W3ldIHx8IHk7XG4gICAgcmV0dXJuIHNwbGl0LmpvaW4oXCIgXCIpO1xuICB9LFxuICAgICAgX3JlbmRlckNsZWFyUHJvcHMgPSBmdW5jdGlvbiBfcmVuZGVyQ2xlYXJQcm9wcyhyYXRpbywgZGF0YSkge1xuICAgIGlmIChkYXRhLnR3ZWVuICYmIGRhdGEudHdlZW4uX3RpbWUgPT09IGRhdGEudHdlZW4uX2R1cikge1xuICAgICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgICBwcm9wcyA9IGRhdGEudSxcbiAgICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgICBwcm9wLFxuICAgICAgICAgIGNsZWFyVHJhbnNmb3JtcyxcbiAgICAgICAgICBpO1xuXG4gICAgICBpZiAocHJvcHMgPT09IFwiYWxsXCIgfHwgcHJvcHMgPT09IHRydWUpIHtcbiAgICAgICAgc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG4gICAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgICBwcm9wID0gcHJvcHNbaV07XG5cbiAgICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgICBjbGVhclRyYW5zZm9ybXMgPSAxO1xuICAgICAgICAgICAgcHJvcCA9IHByb3AgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF90cmFuc2Zvcm1Qcm9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGVhclRyYW5zZm9ybXMpIHtcbiAgICAgICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGNhY2hlLnN2ZyAmJiB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgICAgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG5cbiAgICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICAgIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICAgICAgX3NwZWNpYWxQcm9wcyA9IHtcbiAgICBjbGVhclByb3BzOiBmdW5jdGlvbiBjbGVhclByb3BzKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICAgIHZhciBwdCA9IHBsdWdpbi5fcHQgPSBuZXcgUHJvcFR3ZWVuKHBsdWdpbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDAsIF9yZW5kZXJDbGVhclByb3BzKTtcbiAgICAgICAgcHQudSA9IGVuZFZhbHVlO1xuICAgICAgICBwdC5wciA9IC0xMDtcbiAgICAgICAgcHQudHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgICAgIF9pZGVudGl0eTJETWF0cml4ID0gWzEsIDAsIDAsIDEsIDAsIDBdLFxuICAgICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgICBfaXNOdWxsVHJhbnNmb3JtID0gZnVuY3Rpb24gX2lzTnVsbFRyYW5zZm9ybSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIiB8fCB2YWx1ZSA9PT0gXCJub25lXCIgfHwgIXZhbHVlO1xuICB9LFxuICAgICAgX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSB7XG4gICAgdmFyIG1hdHJpeFN0cmluZyA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbiAgfSxcbiAgICAgIF9nZXRNYXRyaXggPSBmdW5jdGlvbiBfZ2V0TWF0cml4KHRhcmdldCwgZm9yY2UyRCkge1xuICAgIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBuZXh0U2libGluZyxcbiAgICAgICAgdGVtcCxcbiAgICAgICAgYWRkZWRUb0RPTTtcblxuICAgIGlmIChjYWNoZS5zdmcgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuICAgICAgdGVtcCA9IHRhcmdldC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpLm1hdHJpeDtcbiAgICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICAgIHJldHVybiBtYXRyaXguam9pbihcIixcIikgPT09IFwiMSwwLDAsMSwwLDBcIiA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4O1xuICAgIH0gZWxzZSBpZiAobWF0cml4ID09PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAhdGFyZ2V0Lm9mZnNldFBhcmVudCAmJiB0YXJnZXQgIT09IF9kb2NFbGVtZW50ICYmICFjYWNoZS5zdmcpIHtcbiAgICAgIHRlbXAgPSBzdHlsZS5kaXNwbGF5O1xuICAgICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgICBpZiAoIXBhcmVudCB8fCAhdGFyZ2V0Lm9mZnNldFBhcmVudCkge1xuICAgICAgICBhZGRlZFRvRE9NID0gMTtcbiAgICAgICAgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgICAgIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgICAgaWYgKGFkZGVkVG9ET00pIHtcbiAgICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG4gIH0sXG4gICAgICBfYXBwbHlTVkdPcmlnaW4gPSBmdW5jdGlvbiBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCBvcmlnaW4sIG9yaWdpbklzQWJzb2x1dGUsIHNtb290aCwgbWF0cml4QXJyYXksIHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gICAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICAgIHhPcmlnaW5PbGQgPSBjYWNoZS54T3JpZ2luIHx8IDAsXG4gICAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICAgIHlPZmZzZXRPbGQgPSBjYWNoZS55T2Zmc2V0IHx8IDAsXG4gICAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICAgIGMgPSBtYXRyaXhbMl0sXG4gICAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgICB0eSA9IG1hdHJpeFs1XSxcbiAgICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgICAgeU9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMV0pIHx8IDAsXG4gICAgICAgIGJvdW5kcyxcbiAgICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICAgIHgsXG4gICAgICAgIHk7XG5cbiAgICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICAgIGJvdW5kcyA9IF9nZXRCQm94KHRhcmdldCk7XG4gICAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTtcbiAgICB9IGVsc2UgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXggJiYgKGRldGVybWluYW50ID0gYSAqIGQgLSBiICogYykpIHtcbiAgICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICAgIHkgPSB4T3JpZ2luICogKC1iIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqIChhIC8gZGV0ZXJtaW5hbnQpIC0gKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICAgIHhPcmlnaW4gPSB4O1xuICAgICAgeU9yaWdpbiA9IHk7XG4gICAgfVxuXG4gICAgaWYgKHNtb290aCB8fCBzbW9vdGggIT09IGZhbHNlICYmIGNhY2hlLnNtb290aCkge1xuICAgICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICAgIHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG4gICAgICBjYWNoZS54T2Zmc2V0ID0geE9mZnNldE9sZCArICh0eCAqIGEgKyB0eSAqIGMpIC0gdHg7XG4gICAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlLnhPZmZzZXQgPSBjYWNoZS55T2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBjYWNoZS54T3JpZ2luID0geE9yaWdpbjtcbiAgICBjYWNoZS55T3JpZ2luID0geU9yaWdpbjtcbiAgICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgICBjYWNoZS5vcmlnaW4gPSBvcmlnaW47XG4gICAgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSA9ICEhb3JpZ2luSXNBYnNvbHV0ZTtcbiAgICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7XG5cbiAgICBpZiAocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9yaWdpblwiLCB5T3JpZ2luT2xkLCB5T3JpZ2luKTtcblxuICAgICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPZmZzZXRcIiwgeE9mZnNldE9sZCwgY2FjaGUueE9mZnNldCk7XG5cbiAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICAgIH1cblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgeE9yaWdpbiArIFwiIFwiICsgeU9yaWdpbik7XG4gIH0sXG4gICAgICBfcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKSB7XG4gICAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwIHx8IG5ldyBHU0NhY2hlKHRhcmdldCk7XG5cbiAgICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIGludmVydGVkU2NhbGVYID0gY2FjaGUuc2NhbGVYIDwgMCxcbiAgICAgICAgcHggPSBcInB4XCIsXG4gICAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICAgIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICAgICAgICBvcmlnaW4gPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB8fCBcIjBcIixcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgeixcbiAgICAgICAgc2NhbGVYLFxuICAgICAgICBzY2FsZVksXG4gICAgICAgIHJvdGF0aW9uLFxuICAgICAgICByb3RhdGlvblgsXG4gICAgICAgIHJvdGF0aW9uWSxcbiAgICAgICAgc2tld1gsXG4gICAgICAgIHNrZXdZLFxuICAgICAgICBwZXJzcGVjdGl2ZSxcbiAgICAgICAgeE9yaWdpbixcbiAgICAgICAgeU9yaWdpbixcbiAgICAgICAgbWF0cml4LFxuICAgICAgICBhbmdsZSxcbiAgICAgICAgY29zLFxuICAgICAgICBzaW4sXG4gICAgICAgIGEsXG4gICAgICAgIGIsXG4gICAgICAgIGMsXG4gICAgICAgIGQsXG4gICAgICAgIGExMixcbiAgICAgICAgYTIyLFxuICAgICAgICB0MSxcbiAgICAgICAgdDIsXG4gICAgICAgIHQzLFxuICAgICAgICBhMTMsXG4gICAgICAgIGEyMyxcbiAgICAgICAgYTMzLFxuICAgICAgICBhNDIsXG4gICAgICAgIGE0MyxcbiAgICAgICAgYTMyO1xuICAgIHggPSB5ID0geiA9IHJvdGF0aW9uID0gcm90YXRpb25YID0gcm90YXRpb25ZID0gc2tld1ggPSBza2V3WSA9IHBlcnNwZWN0aXZlID0gMDtcbiAgICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICAgIGNhY2hlLnN2ZyA9ICEhKHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCkpO1xuXG4gICAgaWYgKGNzLnRyYW5zbGF0ZSkge1xuICAgICAgaWYgKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgfHwgY3Muc2NhbGUgIT09IFwibm9uZVwiIHx8IGNzLnJvdGF0ZSAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKGNzLnRyYW5zbGF0ZSAhPT0gXCJub25lXCIgPyBcInRyYW5zbGF0ZTNkKFwiICsgKGNzLnRyYW5zbGF0ZSArIFwiIDAgMFwiKS5zcGxpdChcIiBcIikuc2xpY2UoMCwgMykuam9pbihcIiwgXCIpICsgXCIpIFwiIDogXCJcIikgKyAoY3Mucm90YXRlICE9PSBcIm5vbmVcIiA/IFwicm90YXRlKFwiICsgY3Mucm90YXRlICsgXCIpIFwiIDogXCJcIikgKyAoY3Muc2NhbGUgIT09IFwibm9uZVwiID8gXCJzY2FsZShcIiArIGNzLnNjYWxlLnNwbGl0KFwiIFwiKS5qb2luKFwiLFwiKSArIFwiKSBcIiA6IFwiXCIpICsgKGNzW190cmFuc2Zvcm1Qcm9wXSAhPT0gXCJub25lXCIgPyBjc1tfdHJhbnNmb3JtUHJvcF0gOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgICB9XG5cbiAgICBtYXRyaXggPSBfZ2V0TWF0cml4KHRhcmdldCwgY2FjaGUuc3ZnKTtcblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIGlmIChjYWNoZS51bmNhY2hlKSB7XG4gICAgICAgIHQyID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICAgICAgb3JpZ2luID0gY2FjaGUueE9yaWdpbiAtIHQyLnggKyBcInB4IFwiICsgKGNhY2hlLnlPcmlnaW4gLSB0Mi55KSArIFwicHhcIjtcbiAgICAgICAgdDEgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdDEgPSAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpO1xuICAgICAgfVxuXG4gICAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgICB9XG5cbiAgICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICAgIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgICBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuICAgICAgYSA9IG1hdHJpeFswXTtcbiAgICAgIGIgPSBtYXRyaXhbMV07XG4gICAgICBjID0gbWF0cml4WzJdO1xuICAgICAgZCA9IG1hdHJpeFszXTtcbiAgICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgICB5ID0gYTIyID0gbWF0cml4WzVdO1xuXG4gICAgICBpZiAobWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgICAgcm90YXRpb24gPSBhIHx8IGIgPyBfYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IDA7XG4gICAgICAgIHNrZXdYID0gYyB8fCBkID8gX2F0YW4yKGMsIGQpICogX1JBRDJERUcgKyByb3RhdGlvbiA6IDA7XG4gICAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgeCAtPSB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhICsgeU9yaWdpbiAqIGMpO1xuICAgICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYTMyID0gbWF0cml4WzZdO1xuICAgICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgICAgYTIzID0gbWF0cml4WzldO1xuICAgICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgICB4ID0gbWF0cml4WzEyXTtcbiAgICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgICBhbmdsZSA9IF9hdGFuMihhMzIsIGEzMyk7XG4gICAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICAgIHQyID0gYTIyICogY29zICsgYTIzICogc2luO1xuICAgICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgICAgYTIzID0gYTIyICogLXNpbiArIGEyMyAqIGNvcztcbiAgICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgICAgYTEyID0gdDE7XG4gICAgICAgICAgYTIyID0gdDI7XG4gICAgICAgICAgYTMyID0gdDM7XG4gICAgICAgIH1cblxuICAgICAgICBhbmdsZSA9IF9hdGFuMigtYywgYTMzKTtcbiAgICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICAgIHQyID0gYiAqIGNvcyAtIGEyMyAqIHNpbjtcbiAgICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgICBhID0gdDE7XG4gICAgICAgICAgYiA9IHQyO1xuICAgICAgICAgIGMgPSB0MztcbiAgICAgICAgfVxuXG4gICAgICAgIGFuZ2xlID0gX2F0YW4yKGIsIGEpO1xuICAgICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICAgIHQyID0gYTEyICogY29zICsgYTIyICogc2luO1xuICAgICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgICAgYSA9IHQxO1xuICAgICAgICAgIGExMiA9IHQyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uWCAmJiBNYXRoLmFicyhyb3RhdGlvblgpICsgTWF0aC5hYnMocm90YXRpb24pID4gMzU5LjkpIHtcbiAgICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgICAgcm90YXRpb25ZID0gMTgwIC0gcm90YXRpb25ZO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgICAgc2NhbGVZID0gX3JvdW5kKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMzIgKiBhMzIpKTtcbiAgICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgICBwZXJzcGVjdGl2ZSA9IGE0MyA/IDEgLyAoYTQzIDwgMCA/IC1hNDMgOiBhNDMpIDogMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICAgIGNhY2hlLmZvcmNlQ1NTID0gdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKSB8fCAhX2lzTnVsbFRyYW5zZm9ybShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKSk7XG4gICAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgICBzY2FsZVggKj0gLTE7XG4gICAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdW5jYWNoZSA9IHVuY2FjaGUgfHwgY2FjaGUudW5jYWNoZTtcbiAgICBjYWNoZS54ID0geCAtICgoY2FjaGUueFBlcmNlbnQgPSB4ICYmICghdW5jYWNoZSAmJiBjYWNoZS54UGVyY2VudCB8fCAoTWF0aC5yb3VuZCh0YXJnZXQub2Zmc2V0V2lkdGggLyAyKSA9PT0gTWF0aC5yb3VuZCgteCkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldFdpZHRoICogY2FjaGUueFBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICAgIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgICBjYWNoZS56ID0geiArIHB4O1xuICAgIGNhY2hlLnNjYWxlWCA9IF9yb3VuZChzY2FsZVgpO1xuICAgIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICAgIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgICBjYWNoZS5yb3RhdGlvblggPSBfcm91bmQocm90YXRpb25YKSArIGRlZztcbiAgICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICAgIGNhY2hlLnNrZXdZID0gc2tld1kgKyBkZWc7XG4gICAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gICAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8IDApIHtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSA9IF9maXJzdFR3b09ubHkob3JpZ2luKTtcbiAgICB9XG5cbiAgICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gICAgY2FjaGUuZm9yY2UzRCA9IF9jb25maWcuZm9yY2UzRDtcbiAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICAgIGNhY2hlLnVuY2FjaGUgPSAwO1xuICAgIHJldHVybiBjYWNoZTtcbiAgfSxcbiAgICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSA9IHZhbHVlLnNwbGl0KFwiIFwiKSlbMF0gKyBcIiBcIiArIHZhbHVlWzFdO1xuICB9LFxuICAgICAgX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gICAgdmFyIHVuaXQgPSBnZXRVbml0KHN0YXJ0KTtcbiAgICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG4gIH0sXG4gICAgICBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlck5vbjNEVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgICBjYWNoZS5mb3JjZTNEID0gMDtcblxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG4gIH0sXG4gICAgICBfemVyb0RlZyA9IFwiMGRlZ1wiLFxuICAgICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgICBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICAgIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgICB5UGVyY2VudCA9IF9yZWYueVBlcmNlbnQsXG4gICAgICAgIHggPSBfcmVmLngsXG4gICAgICAgIHkgPSBfcmVmLnksXG4gICAgICAgIHogPSBfcmVmLnosXG4gICAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICAgIHJvdGF0aW9uWCA9IF9yZWYucm90YXRpb25YLFxuICAgICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgICAgc2NhbGVYID0gX3JlZi5zY2FsZVgsXG4gICAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICAgIGZvcmNlM0QgPSBfcmVmLmZvcmNlM0QsXG4gICAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgICB0cmFuc2Zvcm1zID0gXCJcIixcbiAgICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlO1xuXG4gICAgaWYgKHpPcmlnaW4gJiYgKHJvdGF0aW9uWCAhPT0gX3plcm9EZWcgfHwgcm90YXRpb25ZICE9PSBfemVyb0RlZykpIHtcbiAgICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICBhMzMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgY29zO1xuXG4gICAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgICAgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgICAgeiA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHosIGEzMyAqIGNvcyAqIC16T3JpZ2luICsgek9yaWdpbik7XG4gICAgfVxuXG4gICAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IFwicGVyc3BlY3RpdmUoXCIgKyB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSArIF9lbmRQYXJlbnRoZXNpcztcbiAgICB9XG5cbiAgICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJ0cmFuc2xhdGUoXCIgKyB4UGVyY2VudCArIFwiJSwgXCIgKyB5UGVyY2VudCArIFwiJSkgXCI7XG4gICAgfVxuXG4gICAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IHogIT09IF96ZXJvUHggfHwgdXNlM0QgPyBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgXCIgKyB6ICsgXCIpIFwiIDogXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsIFwiICsgeSArIF9lbmRQYXJlbnRoZXNpcztcbiAgICB9XG5cbiAgICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlKFwiICsgcm90YXRpb24gKyBfZW5kUGFyZW50aGVzaXM7XG4gICAgfVxuXG4gICAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVZKFwiICsgcm90YXRpb25ZICsgX2VuZFBhcmVudGhlc2lzO1xuICAgIH1cblxuICAgIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWChcIiArIHJvdGF0aW9uWCArIF9lbmRQYXJlbnRoZXNpcztcbiAgICB9XG5cbiAgICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgICAgdHJhbnNmb3JtcyArPSBcInNrZXcoXCIgKyBza2V3WCArIFwiLCBcIiArIHNrZXdZICsgX2VuZFBhcmVudGhlc2lzO1xuICAgIH1cblxuICAgIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgICB0cmFuc2Zvcm1zICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBfZW5kUGFyZW50aGVzaXM7XG4gICAgfVxuXG4gICAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbiAgfSxcbiAgICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gICAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgICAgeFBlcmNlbnQgPSBfcmVmMi54UGVyY2VudCxcbiAgICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgICAgeCA9IF9yZWYyLngsXG4gICAgICAgIHkgPSBfcmVmMi55LFxuICAgICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgICBza2V3WSA9IF9yZWYyLnNrZXdZLFxuICAgICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgICAgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0LFxuICAgICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICAgIHhPZmZzZXQgPSBfcmVmMi54T2Zmc2V0LFxuICAgICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgICAgdHggPSBwYXJzZUZsb2F0KHgpLFxuICAgICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICAgIGExMSxcbiAgICAgICAgYTIxLFxuICAgICAgICBhMTIsXG4gICAgICAgIGEyMixcbiAgICAgICAgdGVtcDtcblxuICAgIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gICAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuXG4gICAgaWYgKHNrZXdZKSB7XG4gICAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgICAgc2tld1ggKz0gc2tld1k7XG4gICAgICByb3RhdGlvbiArPSBza2V3WTtcbiAgICB9XG5cbiAgICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICAgIHJvdGF0aW9uICo9IF9ERUcyUkFEO1xuICAgICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgICBhMjEgPSBNYXRoLnNpbihyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgICAgaWYgKHNrZXdYKSB7XG4gICAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTEyICo9IHRlbXA7XG4gICAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICAgIGlmIChza2V3WSkge1xuICAgICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICAgIGExMSAqPSB0ZW1wO1xuICAgICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgICBhMTIgPSBfcm91bmQoYTEyKTtcbiAgICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhMTEgPSBzY2FsZVg7XG4gICAgICBhMjIgPSBzY2FsZVk7XG4gICAgICBhMjEgPSBhMTIgPSAwO1xuICAgIH1cblxuICAgIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICAgIHR5ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInlcIiwgeSwgXCJweFwiKTtcbiAgICB9XG5cbiAgICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgICAgdHggPSBfcm91bmQodHggKyB4T3JpZ2luIC0gKHhPcmlnaW4gKiBhMTEgKyB5T3JpZ2luICogYTEyKSArIHhPZmZzZXQpO1xuICAgICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICAgIH1cblxuICAgIGlmICh4UGVyY2VudCB8fCB5UGVyY2VudCkge1xuICAgICAgdGVtcCA9IHRhcmdldC5nZXRCQm94KCk7XG4gICAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICAgIH1cblxuICAgIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgICBmb3JjZUNTUyAmJiAodGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRlbXApO1xuICB9LFxuICAgICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICAgIHZhciBjYXAgPSAzNjAsXG4gICAgICAgIGlzU3RyaW5nID0gX2lzU3RyaW5nKGVuZFZhbHVlKSxcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgICBjaGFuZ2UgPSBlbmROdW0gLSBzdGFydE51bSxcbiAgICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICBwdDtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBcInNob3J0XCIpIHtcbiAgICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgICBjaGFuZ2UgKz0gY2hhbmdlIDwgMCA/IGNhcCA6IC1jYXA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJjd1wiICYmIGNoYW5nZSA8IDApIHtcbiAgICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0kMSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFwiY2N3XCIgJiYgY2hhbmdlID4gMCkge1xuICAgICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSQxKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICAgIHB0LmUgPSBmaW5hbFZhbHVlO1xuICAgIHB0LnUgPSBcImRlZ1wiO1xuXG4gICAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICAgIHJldHVybiBwdDtcbiAgfSxcbiAgICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gICAgZm9yICh2YXIgcCBpbiBzb3VyY2UpIHtcbiAgICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LFxuICAgICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICAgIGV4Y2x1ZGUgPSBcInBlcnNwZWN0aXZlLGZvcmNlM0QsdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpblwiLFxuICAgICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgICAgZW5kQ2FjaGUsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydFVuaXQsXG4gICAgICAgIGVuZFVuaXQ7XG5cbiAgICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIlwiKTtcbiAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0VmFsdWUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldClbX3RyYW5zZm9ybVByb3BdO1xuICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBzdGFydFZhbHVlO1xuICAgIH1cblxuICAgIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICAgIHN0YXJ0VmFsdWUgPSBzdGFydENhY2hlW3BdO1xuICAgICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICBlbmROdW0gPSBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hc3NpZ24oZW5kQ2FjaGUsIHN0YXJ0Q2FjaGUpO1xuICB9O1xuXG4gIF9mb3JFYWNoTmFtZShcInBhZGRpbmcsbWFyZ2luLFdpZHRoLFJhZGl1c1wiLCBmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICAgIGIgPSBcIkJvdHRvbVwiLFxuICAgICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgcmV0dXJuIGluZGV4IDwgMiA/IG5hbWUgKyBzaWRlIDogXCJib3JkZXJcIiArIHNpZGUgKyBuYW1lO1xuICAgIH0pO1xuXG4gICAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgICB2YXIgYSwgdmFycztcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICByZXR1cm4gX2dldChwbHVnaW4sIHByb3AsIHByb3BlcnR5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgICByZXR1cm4gdmFycy5zcGxpdChhWzBdKS5sZW5ndGggPT09IDUgPyBhWzBdIDogdmFycztcbiAgICAgIH1cblxuICAgICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgICB9KTtcbiAgICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBDU1NQbHVnaW4gPSB7XG4gICAgbmFtZTogXCJjc3NcIixcbiAgICByZWdpc3RlcjogX2luaXRDb3JlLFxuICAgIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LnN0eWxlICYmIHRhcmdldC5ub2RlVHlwZTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMuX3Byb3BzLFxuICAgICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgICBlbmROdW0sXG4gICAgICAgICAgc3RhcnROdW0sXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgICBwLFxuICAgICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgICBlbmRVbml0LFxuICAgICAgICAgIHJlbGF0aXZlLFxuICAgICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgc21vb3RoLFxuICAgICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICAgIGlubGluZVByb3BzO1xuICAgICAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG4gICAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgICBpbmxpbmVQcm9wcyA9IHRoaXMuc3R5bGVzLnByb3BzO1xuICAgICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuXG4gICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICBpZiAocCA9PT0gXCJhdXRvUm91bmRcIikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kVmFsdWUgPSB2YXJzW3BdO1xuXG4gICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiBfY2hlY2tQbHVnaW4ocCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgICBzcGVjaWFsUHJvcCA9IF9zcGVjaWFsUHJvcHNbcF07XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGVuZFZhbHVlID0gZW5kVmFsdWUuY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgICAgIGVuZFZhbHVlID0gX3JlcGxhY2VSYW5kb20oZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNwZWNpYWxQcm9wKSB7XG4gICAgICAgICAgc3BlY2lhbFByb3AodGhpcywgdGFyZ2V0LCBwLCBlbmRWYWx1ZSwgdHdlZW4pICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgICBzdGFydFZhbHVlID0gKGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5nZXRQcm9wZXJ0eVZhbHVlKHApICsgXCJcIikudHJpbSgpO1xuICAgICAgICAgIGVuZFZhbHVlICs9IFwiXCI7XG4gICAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgICBpZiAoIV9jb2xvckV4cC50ZXN0KHN0YXJ0VmFsdWUpKSB7XG4gICAgICAgICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVuZFVuaXQgPyBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0VmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpICsgZW5kVW5pdCkgOiBzdGFydFVuaXQgJiYgKGVuZFZhbHVlICs9IHN0YXJ0VW5pdCk7XG4gICAgICAgICAgdGhpcy5hZGQoc3R5bGUsIFwic2V0UHJvcGVydHlcIiwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICAgIGlubGluZVByb3BzLnB1c2gocCwgMCwgc3R5bGVbcF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgICBnZXRVbml0KHN0YXJ0VmFsdWUgKyBcIlwiKSB8fCAoc3RhcnRWYWx1ZSArPSBfY29uZmlnLnVuaXRzW3BdIHx8IGdldFVuaXQoX2dldCh0YXJnZXQsIHApKSB8fCBcIlwiKTtcbiAgICAgICAgICAgIChzdGFydFZhbHVlICsgXCJcIikuY2hhckF0KDEpID09PSBcIj1cIiAmJiAoc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgICByZWxhdGl2ZSAmJiAoZW5kVmFsdWUgPSBlbmRWYWx1ZS5zdWJzdHIoMikpO1xuICAgICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgICAgaWYgKHAgPT09IFwiYXV0b0FscGhhXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXJ0TnVtID09PSAxICYmIF9nZXQodGFyZ2V0LCBcInZpc2liaWxpdHlcIikgPT09IFwiaGlkZGVuXCIgJiYgZW5kTnVtKSB7XG4gICAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChcInZpc2liaWxpdHlcIiwgMCwgc3R5bGUudmlzaWJpbGl0eSk7XG5cbiAgICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgc3R5bGUsIFwidmlzaWJpbGl0eVwiLCBzdGFydE51bSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiwgZW5kTnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCAhZW5kTnVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHAgIT09IFwic2NhbGVcIiAmJiBwICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICAgIHAgPSBfcHJvcGVydHlBbGlhc2VzW3BdO1xuICAgICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wcztcblxuICAgICAgICAgIGlmIChpc1RyYW5zZm9ybVJlbGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICAgIGlmICghdHJhbnNmb3JtUHJvcFR3ZWVuKSB7XG4gICAgICAgICAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwO1xuICAgICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbiA9IHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgc3R5bGUsIF90cmFuc2Zvcm1Qcm9wLCAwLCAxLCBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0sIGNhY2hlLCAwLCAtMSk7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2Vlbi5kZXAgPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocCA9PT0gXCJzY2FsZVwiKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoY2FjaGUuc2NhbGVZLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gY2FjaGUuc2NhbGVZIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgICAgdGhpcy5fcHQudSA9IDA7XG4gICAgICAgICAgICAgIHByb3BzLnB1c2goXCJzY2FsZVlcIiwgcCk7XG4gICAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpIHtcbiAgICAgICAgICAgICAgaW5saW5lUHJvcHMucHVzaChfdHJhbnNmb3JtT3JpZ2luUHJvcCwgMCwgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdKTtcbiAgICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZFVuaXQgPSBwYXJzZUZsb2F0KGVuZFZhbHVlLnNwbGl0KFwiIFwiKVsyXSkgfHwgMDtcbiAgICAgICAgICAgICAgICBlbmRVbml0ICE9PSBjYWNoZS56T3JpZ2luICYmIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIGNhY2hlLCBcInpPcmlnaW5cIiwgY2FjaGUuek9yaWdpbiwgZW5kVW5pdCk7XG5cbiAgICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic21vb3RoT3JpZ2luXCIpIHtcbiAgICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcImZvcmNlM0RcIikge1xuICAgICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgICAgcCA9IF9jaGVja1Byb3BQcmVmaXgocCkgfHwgcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgICBzdGFydFVuaXQgPSAoc3RhcnRWYWx1ZSArIFwiXCIpLnN1YnN0cigoc3RhcnROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICAgICAgZW5kTnVtIHx8IChlbmROdW0gPSAwKTtcbiAgICAgICAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKSB8fCAocCBpbiBfY29uZmlnLnVuaXRzID8gX2NvbmZpZy51bml0c1twXSA6IHN0YXJ0VW5pdCk7XG4gICAgICAgICAgICBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0TnVtID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSk7XG4gICAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgICAgdGhpcy5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiBlbmRVbml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgICB0aGlzLl9wdC5iID0gc3RhcnRWYWx1ZTtcbiAgICAgICAgICAgICAgdGhpcy5fcHQuciA9IF9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICAgIGlmIChwIGluIHRhcmdldCkge1xuICAgICAgICAgICAgICB0aGlzLmFkZCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdLCByZWxhdGl2ZSA/IHJlbGF0aXZlICsgZW5kVmFsdWUgOiBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwICE9PSBcInBhcnNlVHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBzdGFydFZhbHVlLCByZWxhdGl2ZSA/IHJlbGF0aXZlICsgZW5kVmFsdWUgOiBlbmRWYWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChwIGluIHN0eWxlID8gaW5saW5lUHJvcHMucHVzaChwLCAwLCBzdHlsZVtwXSkgOiBpbmxpbmVQcm9wcy5wdXNoKHAsIDEsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdKSk7XG4gICAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoYXNQcmlvcml0eSAmJiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHRoaXMpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocmF0aW8sIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLnR3ZWVuLl90aW1lIHx8ICFfcmV2ZXJ0aW5nJDEoKSkge1xuICAgICAgICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICAgICAgICB3aGlsZSAocHQpIHtcbiAgICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLnN0eWxlcy5yZXZlcnQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogX2dldCxcbiAgICBhbGlhc2VzOiBfcHJvcGVydHlBbGlhc2VzLFxuICAgIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgICByZXR1cm4gcHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiAodGFyZ2V0Ll9nc2FwLnggfHwgX2dldCh0YXJnZXQsIFwieFwiKSkgPyBwbHVnaW4gJiYgX3JlY2VudFNldHRlclBsdWdpbiA9PT0gcGx1Z2luID8gcHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZSA6IF9zZXR0ZXJUcmFuc2Zvcm0gOiAoX3JlY2VudFNldHRlclBsdWdpbiA9IHBsdWdpbiB8fCB7fSkgJiYgKHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIDogX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIpIDogdGFyZ2V0LnN0eWxlICYmICFfaXNVbmRlZmluZWQodGFyZ2V0LnN0eWxlW3Byb3BlcnR5XSkgPyBfc2V0dGVyQ1NTU3R5bGUgOiB+cHJvcGVydHkuaW5kZXhPZihcIi1cIikgPyBfc2V0dGVyQ1NTUHJvcCA6IF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgfSxcbiAgICBjb3JlOiB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHk6IF9yZW1vdmVQcm9wZXJ0eSxcbiAgICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgICB9XG4gIH07XG4gIGdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuICBnc2FwLmNvcmUuZ2V0U3R5bGVTYXZlciA9IF9nZXRTdHlsZVNhdmVyO1xuXG4gIChmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICAgIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90cmFuc2Zvcm1Qcm9wc1tuYW1lXSA9IDE7XG4gICAgfSk7XG5cbiAgICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfY29uZmlnLnVuaXRzW25hbWVdID0gXCJkZWdcIjtcbiAgICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gICAgfSk7XG5cbiAgICBfcHJvcGVydHlBbGlhc2VzW2FsbFsxM11dID0gcG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb247XG5cbiAgICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgICAgX3Byb3BlcnR5QWxpYXNlc1tzcGxpdFsxXV0gPSBhbGxbc3BsaXRbMF1dO1xuICAgIH0pO1xuICB9KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbiAgX2ZvckVhY2hOYW1lKFwieCx5LHosdG9wLHJpZ2h0LGJvdHRvbSxsZWZ0LHdpZHRoLGhlaWdodCxmb250U2l6ZSxwYWRkaW5nLG1hcmdpbixwZXJzcGVjdGl2ZVwiLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG4gIH0pO1xuXG4gIGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKTtcblxuICB2YXIgZ3NhcFdpdGhDU1MgPSBnc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbikgfHwgZ3NhcCxcbiAgICAgIFR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5cbiAgZXhwb3J0cy5CYWNrID0gQmFjaztcbiAgZXhwb3J0cy5Cb3VuY2UgPSBCb3VuY2U7XG4gIGV4cG9ydHMuQ1NTUGx1Z2luID0gQ1NTUGx1Z2luO1xuICBleHBvcnRzLkNpcmMgPSBDaXJjO1xuICBleHBvcnRzLkN1YmljID0gQ3ViaWM7XG4gIGV4cG9ydHMuRWxhc3RpYyA9IEVsYXN0aWM7XG4gIGV4cG9ydHMuRXhwbyA9IEV4cG87XG4gIGV4cG9ydHMuTGluZWFyID0gTGluZWFyO1xuICBleHBvcnRzLlBvd2VyMCA9IFBvd2VyMDtcbiAgZXhwb3J0cy5Qb3dlcjEgPSBQb3dlcjE7XG4gIGV4cG9ydHMuUG93ZXIyID0gUG93ZXIyO1xuICBleHBvcnRzLlBvd2VyMyA9IFBvd2VyMztcbiAgZXhwb3J0cy5Qb3dlcjQgPSBQb3dlcjQ7XG4gIGV4cG9ydHMuUXVhZCA9IFF1YWQ7XG4gIGV4cG9ydHMuUXVhcnQgPSBRdWFydDtcbiAgZXhwb3J0cy5RdWludCA9IFF1aW50O1xuICBleHBvcnRzLlNpbmUgPSBTaW5lO1xuICBleHBvcnRzLlN0ZXBwZWRFYXNlID0gU3RlcHBlZEVhc2U7XG4gIGV4cG9ydHMuU3Ryb25nID0gU3Ryb25nO1xuICBleHBvcnRzLlRpbWVsaW5lTGl0ZSA9IFRpbWVsaW5lO1xuICBleHBvcnRzLlRpbWVsaW5lTWF4ID0gVGltZWxpbmU7XG4gIGV4cG9ydHMuVHdlZW5MaXRlID0gVHdlZW47XG4gIGV4cG9ydHMuVHdlZW5NYXggPSBUd2Vlbk1heFdpdGhDU1M7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IGdzYXBXaXRoQ1NTO1xuICBleHBvcnRzLmdzYXAgPSBnc2FwV2l0aENTUztcblxuICBpZiAodHlwZW9mKHdpbmRvdykgPT09ICd1bmRlZmluZWQnIHx8IHdpbmRvdyAhPT0gZXhwb3J0cykge09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7fSBlbHNlIHtkZWxldGUgd2luZG93LmRlZmF1bHQ7fVxuXG59KSkpO1xuIiwiLyohXG4gKiBVbmlkcmFnZ2VyIHYyLjMuMFxuICogRHJhZ2dhYmxlIGJhc2UgY2xhc3NcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInXG4gICAgXSwgZnVuY3Rpb24oIFVuaXBvaW50ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LlVuaWRyYWdnZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LlVuaXBvaW50ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFVuaWRyYWdnZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gVW5pZHJhZ2dlcigpIHt9XG5cbi8vIGluaGVyaXQgVW5pcG9pbnRlciAmIEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pZHJhZ2dlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBVbmlwb2ludGVyLnByb3RvdHlwZSApO1xuXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXG5cbnByb3RvLmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkXG4gKi9cbnByb3RvLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBpc0FkZCApIHtcbiAgLy8gbXVuZ2UgaXNBZGQsIGRlZmF1bHQgdG8gdHJ1ZVxuICBpc0FkZCA9IGlzQWRkID09PSB1bmRlZmluZWQgPyB0cnVlIDogaXNBZGQ7XG4gIC8vIGJpbmQgZWFjaCBoYW5kbGVcbiAgdmFyIGJpbmRNZXRob2QgPSBpc0FkZCA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgdmFyIHRvdWNoQWN0aW9uID0gaXNBZGQgPyB0aGlzLl90b3VjaEFjdGlvblZhbHVlIDogJyc7XG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmhhbmRsZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuaGFuZGxlc1tpXTtcbiAgICB0aGlzLl9iaW5kU3RhcnRFdmVudCggaGFuZGxlLCBpc0FkZCApO1xuICAgIGhhbmRsZVsgYmluZE1ldGhvZCBdKCAnY2xpY2snLCB0aGlzICk7XG4gICAgLy8gdG91Y2gtYWN0aW9uOiBub25lIHRvIG92ZXJyaWRlIGJyb3dzZXIgdG91Y2ggZ2VzdHVyZXMuIG1ldGFmaXp6eS9mbGlja2l0eSM1NDBcbiAgICBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gICAgICBoYW5kbGUuc3R5bGUudG91Y2hBY3Rpb24gPSB0b3VjaEFjdGlvbjtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHByb3RvdHlwZSBzbyBpdCBjYW4gYmUgb3ZlcndyaXRlYWJsZSBieSBGbGlja2l0eVxucHJvdG8uX3RvdWNoQWN0aW9uVmFsdWUgPSAnbm9uZSc7XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cbi8qKlxuICogcG9pbnRlciBzdGFydFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBpc09rYXkgPSB0aGlzLm9rYXlQb2ludGVyRG93biggZXZlbnQgKTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB0cmFjayBzdGFydCBldmVudCBwb3NpdGlvblxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHBvaW50ZXI7XG5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgdGhpcy5wb2ludGVyRG93bkJsdXIoKTtcbiAgLy8gYmluZCBtb3ZlIGFuZCBlbmQgZXZlbnRzXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIG5vZGVzIHRoYXQgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGN1cnNvck5vZGVzID0ge1xuICBURVhUQVJFQTogdHJ1ZSxcbiAgSU5QVVQ6IHRydWUsXG4gIFNFTEVDVDogdHJ1ZSxcbiAgT1BUSU9OOiB0cnVlLFxufTtcblxuLy8gaW5wdXQgdHlwZXMgdGhhdCBkbyBub3QgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGNsaWNrVHlwZXMgPSB7XG4gIHJhZGlvOiB0cnVlLFxuICBjaGVja2JveDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICBzdWJtaXQ6IHRydWUsXG4gIGltYWdlOiB0cnVlLFxuICBmaWxlOiB0cnVlLFxufTtcblxuLy8gZGlzbWlzcyBpbnB1dHMgd2l0aCB0ZXh0IGZpZWxkcy4gZmxpY2tpdHkjNDAzLCBmbGlja2l0eSM0MDRcbnByb3RvLm9rYXlQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzQ3Vyc29yTm9kZSA9IGN1cnNvck5vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgdmFyIGlzQ2xpY2tUeXBlID0gY2xpY2tUeXBlc1sgZXZlbnQudGFyZ2V0LnR5cGUgXTtcbiAgdmFyIGlzT2theSA9ICFpc0N1cnNvck5vZGUgfHwgaXNDbGlja1R5cGU7XG4gIGlmICggIWlzT2theSApIHtcbiAgICB0aGlzLl9wb2ludGVyUmVzZXQoKTtcbiAgfVxuICByZXR1cm4gaXNPa2F5O1xufTtcblxuLy8ga2x1ZGdlIHRvIGJsdXIgcHJldmlvdXNseSBmb2N1c2VkIGlucHV0XG5wcm90by5wb2ludGVyRG93bkJsdXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAvLyBkbyBub3QgYmx1ciBib2R5IGZvciBJRTEwLCBtZXRhZml6enkvZmxpY2tpdHkjMTE3XG4gIHZhciBjYW5CbHVyID0gZm9jdXNlZCAmJiBmb2N1c2VkLmJsdXIgJiYgZm9jdXNlZCAhPSBkb2N1bWVudC5ib2R5O1xuICBpZiAoIGNhbkJsdXIgKSB7XG4gICAgZm9jdXNlZC5ibHVyKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIG1vdmUgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBkcmFnIG1vdmVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xuICB0aGlzLl9kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbi8vIGJhc2UgcG9pbnRlciBtb3ZlIGxvZ2ljXG5wcm90by5fZHJhZ1BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWSAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZXG4gIH07XG4gIC8vIHN0YXJ0IGRyYWcgaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLmhhc0RyYWdTdGFydGVkKCBtb3ZlVmVjdG9yICkgKSB7XG4gICAgdGhpcy5fZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xuICB9XG4gIHJldHVybiBtb3ZlVmVjdG9yO1xufTtcblxuLy8gY29uZGl0aW9uIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IDMgfHwgTWF0aC5hYnMoIG1vdmVWZWN0b3IueSApID4gMztcbn07XG5cbi8vIC0tLS0tIGVuZCBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyVXAnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLl9kcmFnUG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoIHRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICB0aGlzLl9kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBvaW50ZXIgZGlkbid0IG1vdmUgZW5vdWdoIGZvciBkcmFnIHRvIHN0YXJ0XG4gICAgdGhpcy5fc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZHJhZ1N0YXJ0XG5wcm90by5fZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAvLyBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7XG4gIHRoaXMuZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdTdGFydCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gZHJhZ01vdmVcbnByb3RvLl9kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgLy8gZG8gbm90IGRyYWcgaWYgbm90IGRyYWdnaW5nIHlldFxuICBpZiAoICF0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbnByb3RvLmRyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG59O1xuXG4vLyBkcmFnRW5kXG5wcm90by5fZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAvLyByZS1lbmFibGUgY2xpY2tpbmcgYXN5bmNcbiAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzO1xuICB9LmJpbmQoIHRoaXMgKSApO1xuXG4gIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ0VuZCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gb25jbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xucHJvdG8ub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSBzdGF0aWNDbGljayAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5wcm90by5fc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGlnbm9yZSBlbXVsYXRlZCBtb3VzZSB1cCBjbGlja3NcbiAgaWYgKCB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICYmIGV2ZW50LnR5cGUgPT0gJ21vdXNldXAnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG5cbiAgLy8gc2V0IGZsYWcgZm9yIGVtdWxhdGVkIGNsaWNrcyAzMDBtcyBhZnRlciB0b3VjaGVuZFxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ21vdXNldXAnICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIC8vIHJlc2V0IGZsYWcgYWZ0ZXIgMzAwbXNcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0uYmluZCggdGhpcyApLCA0MDAgKTtcbiAgfVxufTtcblxucHJvdG8uc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIHV0aWxzIC0tLS0tIC8vXG5cblVuaWRyYWdnZXIuZ2V0UG9pbnRlclBvaW50ID0gVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQ7XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gVW5pZHJhZ2dlcjtcblxufSkpO1xuIiwiKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBDb3VudGRvd25UaW1lclxuXG4gICAgQ291bnRkb3duVGltZXIgPSB7XG4gICAgICAgIFxuICAgICAgICBkb206IHtcbiAgICAgICAgICAgIGNvdW50ZG93blRpbWVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLWNvdW50ZG93blRpbWVyJylcbiAgICAgICAgfSxcbiAgICAgICAgYWRkZWRUb0RvbSA6IGZhbHNlLFxuICAgICAgICByZWxlYXNlTW9udGggOiAnJyxcbiAgICAgICAgcmVsZWFzZURheSA6ICcnLFxuICAgICAgICByZWxlYXNlSG91ciA6ICcnLFxuICAgICAgICByZWxlYXNlTWludXRlIDogJycsXG4gICAgICAgIHJlbGVhc2VEYXRlIDogJycsXG4gICAgICAgIHBlcmlvZGljU3RhcnREYXRlIDogJycsXG4gICAgICAgIHBlcmlvZGljRW5kRGF0ZSA6ICcnLFxuICAgICAgICBwZXJpb2RpY0ZyZXF1ZW5jeSA6ICcnLFxuICAgICAgICBjdXN0b21OZXh0RGF0ZSA6ICcnLFxuICAgICAgICBjb3VudGRvd25JbnRlcnZhbCA6ICcnLFxuXG4gICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmKENvdW50ZG93blRpbWVyLmRvbS5jb3VudGRvd25UaW1lcil7XG4gICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIucmVsZWFzZU1vbnRoID0gIENvdW50ZG93blRpbWVyLmRvbS5jb3VudGRvd25UaW1lci5kYXRhc2V0Lm1vbnRoID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3VudGRvd25UaW1lci5kb20uY291bnRkb3duVGltZXIuZGF0YXNldC5tb250aCA6IDExO1xuICAgICAgICAgICAgICAgIENvdW50ZG93blRpbWVyLnJlbGVhc2VEYXkgPSAgQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQuZGF5ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvdW50ZG93blRpbWVyLmRvbS5jb3VudGRvd25UaW1lci5kYXRhc2V0LmRheSA6IDI4O1xuICAgICAgICAgICAgICAgIENvdW50ZG93blRpbWVyLnJlbGVhc2VIb3VyID0gQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQuaG91ciA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQuaG91ciA6IDExO1xuICAgICAgICAgICAgICAgIENvdW50ZG93blRpbWVyLnJlbGVhc2VNaW51dGUgPSBDb3VudGRvd25UaW1lci5kb20uY291bnRkb3duVGltZXIuZGF0YXNldC5taW51dGVzID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3VudGRvd25UaW1lci5kb20uY291bnRkb3duVGltZXIuZGF0YXNldC5taW51dGVzIDogNTk7XG4gICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIucGVyaW9kaWNTdGFydERhdGUgPSBDb3VudGRvd25UaW1lci5kb20uY291bnRkb3duVGltZXIuZGF0YXNldC5wZXJpb2RpY1N0YXJ0RGF0ZSA/IENvdW50ZG93blRpbWVyLmRvbS5jb3VudGRvd25UaW1lci5kYXRhc2V0LnBlcmlvZGljU3RhcnREYXRlIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIucGVyaW9kaWNFbmREYXRlID0gQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQucGVyaW9kaWNFbmREYXRlID8gQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQucGVyaW9kaWNFbmREYXRlIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgICAgIENvdW50ZG93blRpbWVyLnBlcmlvZGljRnJlcXVlbmN5ID0gQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQucGVyaW9kaWNGcmVxdWVuY3kgPyBDb3VudGRvd25UaW1lci5kb20uY291bnRkb3duVGltZXIuZGF0YXNldC5wZXJpb2RpY0ZyZXF1ZW5jeSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgICAgICBDb3VudGRvd25UaW1lci5jdXN0b21OZXh0RGF0ZSA9IENvdW50ZG93blRpbWVyLmRvbS5jb3VudGRvd25UaW1lci5kYXRhc2V0LmN1c3RvbU5leHREYXRlID8gQ291bnRkb3duVGltZXIuZG9tLmNvdW50ZG93blRpbWVyLmRhdGFzZXQuY3VzdG9tTmV4dERhdGUgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIENvdW50ZG93blRpbWVyLmluaXRDb3VudGRvd25UaW1lcigpICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9LCBcblxuICAgICAgICBpc1ZhbGlkRGF0ZVRpbWUgOiAoZGF0ZVRpbWVTdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSBEYXRlLnBhcnNlKGRhdGVUaW1lU3RyaW5nKTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VkRGF0ZSkgJiYgIWlzTmFOKERhdGUucGFyc2UobmV3IERhdGUocGFyc2VkRGF0ZSkudG9JU09TdHJpbmcoKSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRDb3VudGRvd25UaW1lciA6ICgpID0+IHtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnRDb3VudGRvd24oKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0RGF0ZVRpbWUgPSBDb3VudGRvd25UaW1lci5jdXN0b21OZXh0RGF0ZSA/IG5ldyBEYXRlKENvdW50ZG93blRpbWVyLmN1c3RvbU5leHREYXRlKSA6IENvdW50ZG93blRpbWVyLmdldE5leHREYXRlKENvdW50ZG93blRpbWVyLnBlcmlvZGljU3RhcnREYXRlLCBDb3VudGRvd25UaW1lci5wZXJpb2RpY0ZyZXF1ZW5jeSk7XG4gICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIuY291bnRkb3duSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGVDb3VudGRvd24sIDEwMDApO1xuICAgIFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZG93bigpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lRGlmZmVyZW5jZSA9IHRhcmdldERhdGVUaW1lIC0gY3VycmVudFRpbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lRGlmZmVyZW5jZSA8PSAwIHx8IChDb3VudGRvd25UaW1lci5wZXJpb2RpY0VuZERhdGUgJiYgbmV3IERhdGUoQ291bnRkb3duVGltZXIucGVyaW9kaWNFbmREYXRlKSA8IGN1cnJlbnRUaW1lKSB8fCAoQ291bnRkb3duVGltZXIucGVyaW9kaWNFbmREYXRlICYmIG5ldyBEYXRlKENvdW50ZG93blRpbWVyLnBlcmlvZGljRW5kRGF0ZSkgPCB0YXJnZXREYXRlVGltZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRkb3duVGltZXIuc2V0VGltZXJUb1plcm8oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vbnRocyA9IE1hdGguZmxvb3IodGltZURpZmZlcmVuY2UgLyAoMTAwMCAqIDYwICogNjAgKiAyNCAqIDMwKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRheXMgPSBNYXRoLmZsb29yKCh0aW1lRGlmZmVyZW5jZSAlICgxMDAwICogNjAgKiA2MCAqIDI0ICogMzApKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigodGltZURpZmZlcmVuY2UgJSAoMTAwMCAqIDYwICogNjAgKiAyNCkpIC8gKDEwMDAgKiA2MCAqIDYwKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0aW1lRGlmZmVyZW5jZSAlICgxMDAwICogNjAgKiA2MCkpIC8gKDEwMDAgKiA2MCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigodGltZURpZmZlcmVuY2UgJSAoMTAwMCAqIDYwKSkgLyAxMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9nZ2xlUGx1cmFsID0gKHVuaXQsIGVsZW0pPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGx1cmFsID0gZWxlbS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5jb3VudGRvd25UaW1lcl9fdW5pdFBsdXJhbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodW5pdCAhPT0gMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1cmFsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZighcGx1cmFsLmNsYXNzTGlzdC5jb250YWlucygnaGlkZScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVyYWwuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb250aHMnKS5pbm5lclRleHQgPSBtb250aHMgPCAxMCA/IGAwJHttb250aHN9YCA6IG1vbnRocyxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RheXMnKS5pbm5lclRleHQgPSBkYXlzIDwgMTAgPyBgMCR7ZGF5c31gIDogZGF5cyxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hvdXJzJykuaW5uZXJUZXh0ID0gaG91cnMgPCAxMCA/IGAwJHtob3Vyc31gIDogaG91cnMsXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW51dGVzJykuaW5uZXJUZXh0ID0gbWludXRlcyA8IDEwID8gYDAke21pbnV0ZXN9YCA6IG1pbnV0ZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlUGx1cmFsKG1vbnRocywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vbnRocycpKTtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlUGx1cmFsKGRheXMsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXlzJykpO1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVQbHVyYWwoaG91cnMsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdob3VycycpKTtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlUGx1cmFsKG1pbnV0ZXMsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW51dGVzJykpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKFxuICAgICAgICAgICAgICAgIChDb3VudGRvd25UaW1lci5wZXJpb2RpY1N0YXJ0RGF0ZSAmJiBDb3VudGRvd25UaW1lci5pc1ZhbGlkRGF0ZVRpbWUoQ291bnRkb3duVGltZXIucGVyaW9kaWNTdGFydERhdGUpKSB8fCBcbiAgICAgICAgICAgICAgICAoQ291bnRkb3duVGltZXIuY3VzdG9tTmV4dERhdGUgJiYgQ291bnRkb3duVGltZXIuaXNWYWxpZERhdGVUaW1lKENvdW50ZG93blRpbWVyLmN1c3RvbU5leHREYXRlKSlcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgc3RhcnRDb3VudGRvd24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFRpbWVyVG9aZXJvIDogKCk9PntcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoQ291bnRkb3duVGltZXIuY291bnRkb3duSW50ZXJ2YWwpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vbnRocycpLmlubmVyVGV4dCA9ICcwMCcsXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF5cycpLmlubmVyVGV4dCA9ICcwMCcsXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaG91cnMnKS5pbm5lclRleHQgPSAnMDAnLFxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21pbnV0ZXMnKS5pbm5lclRleHQgPSAnMDAnO1xuICAgICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlY29uZHMnKS5pbm5lclRleHQgPSAnMCc7XG4gICAgICAgIH0sXG4gICAgICAgIFxuXG4gICAgICAgIGdldE5leHREYXRlIDogKHBlcmlvZGljU3RhcnREYXRlLCBwZXJpb2RpY0ZyZXF1ZW5jeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudERheSA9IGN1cnJlbnREYXRlLmdldERhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IGN1cnJlbnREYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50WWVhciA9IGN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SG91ciA9IGN1cnJlbnREYXRlLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TWludXRlID0gY3VycmVudERhdGUuZ2V0TWludXRlcygpO1xuXG4gICAgICAgICAgICBsZXQgbmV4dERhdGUgPSAnJztcbiAgICAgICAgICAgIGxldCBuZXh0TW9udGg7XG5cbiAgICAgICAgICAgIGlmKG5ldyBEYXRlKHBlcmlvZGljU3RhcnREYXRlKSA+IGN1cnJlbnREYXRlICl7XG4gICAgICAgICAgICAgICAgbmV4dERhdGUgPSBuZXcgRGF0ZShwZXJpb2RpY1N0YXJ0RGF0ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYocGVyaW9kaWNTdGFydERhdGUgJiYgcGVyaW9kaWNGcmVxdWVuY3kgPT0gJ21vbnRobHknKXtcblxuICAgICAgICAgICAgICAgIG5leHREYXRlID0gbmV3IERhdGUocGVyaW9kaWNTdGFydERhdGUpO1xuICAgICAgICAgICAgICAgIG5leHREYXRlLnNldE1vbnRoKGN1cnJlbnRNb250aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudERheSA+IG5leHREYXRlLmdldERhdGUoKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnREYXkgPT09IG5leHREYXRlLmdldERhdGUoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIChjdXJyZW50SG91ciA+IG5leHREYXRlLmdldEhvdXJzKCkgfHwgKGN1cnJlbnRIb3VyID09PSBuZXh0RGF0ZS5nZXRIb3VycygpICYmIGN1cnJlbnRNaW51dGUgPj0gbmV4dERhdGUuZ2V0TWludXRlcygpKSkpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV4dE1vbnRoID0gKGN1cnJlbnRNb250aCArIDEpICUgMTI7IC8vIFdyYXAgdG8gSmFudWFyeSBpZiBEZWNlbWJlclxuICAgICAgICAgICAgICAgICAgICBuZXh0RGF0ZS5zZXRNb250aChuZXh0TW9udGgpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRNb250aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dERhdGUuc2V0WWVhcihjdXJyZW50WWVhciArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYocGVyaW9kaWNTdGFydERhdGUgJiYgcGVyaW9kaWNGcmVxdWVuY3kgPT0gJ2V2ZXJ5LW90aGVyLW1vbnRoJykge1xuICAgICAgICAgICAgICAgIGxldCBzdGFydERhdGVNb250aCA9IG5ldyBEYXRlKHBlcmlvZGljU3RhcnREYXRlKS5nZXRNb250aCgpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dE9jY3VycmVuY2Uoc3RhcnRNb250aCwgaW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFllYXIgPSBjdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TW9udGggPSBjdXJyZW50RGF0ZS5nZXRNb250aCgpICsgMTsgLy8gTW9udGggaXMgMC1pbmRleGVkIGluIEphdmFTY3JpcHQgKDAgPSBKYW51YXJ5LCAxID0gRmVicnVhcnksIC4uLilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRNb250aCA9IHN0YXJ0TW9udGg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIG1vbnRocyBiZXR3ZWVuIHRoZSBjdXJyZW50IG1vbnRoIGFuZCB0aGUgc3RhcnQgbW9udGhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9udGhzVW50aWxOZXh0T2NjdXJyZW5jZSA9ICgxMiArIG5leHRNb250aCAtIGN1cnJlbnRNb250aCkgJSAxMjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgbW9udGhzIHRvIGFkZCBmb3IgdGhlIG5leHQgb2NjdXJyZW5jZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb250aHNUb0FkZCA9IChtb250aHNVbnRpbE5leHRPY2N1cnJlbmNlID49IDEpID8gaW5jcmVtZW50IDogMTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBuZXh0IG1vbnRoXG4gICAgICAgICAgICAgICAgICAgIG5leHRNb250aCA9IChuZXh0TW9udGggKyBtb250aHNUb0FkZCkgJSAxMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRNb250aCA9PT0gMCkgbmV4dE1vbnRoID0gMTI7IC8vIEhhbmRsZSBEZWNlbWJlclxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dERhdGUgPSBuZXcgRGF0ZShjdXJyZW50WWVhciwgbmV4dE1vbnRoIC0gMSwgMSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0RGF0ZS5nZXRNb250aCgpIDwgY3VycmVudERhdGUuZ2V0TW9udGgoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dERhdGUuc2V0TW9udGgobmV4dERhdGUuZ2V0TW9udGgoKSArIGluY3JlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHREYXRlLmdldE1vbnRoKCk7IC8vIE1vbnRocyBhcmUgMC1pbmRleGVkXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbmV4dERhdGUgPSBuZXcgRGF0ZShwZXJpb2RpY1N0YXJ0RGF0ZSk7XG4gICAgICAgICAgICAgICAgbmV4dERhdGUuc2V0TW9udGgoZ2V0TmV4dE9jY3VycmVuY2Uoc3RhcnREYXRlTW9udGggKyAxLCAzKSk7XG5cbiAgICAgICAgICAgICAgICBpZihjdXJyZW50TW9udGggPT09IG5leHREYXRlLmdldE1vbnRoKCkpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERheSA+IG5leHREYXRlLmdldERhdGUoKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnREYXkgPT09IG5leHREYXRlLmdldERhdGUoKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIChjdXJyZW50SG91ciA+IG5leHREYXRlLmdldEhvdXJzKCkgfHwgKGN1cnJlbnRIb3VyID09PSBuZXh0RGF0ZS5nZXRIb3VycygpICYmIGN1cnJlbnRNaW51dGUgPj0gbmV4dERhdGUuZ2V0TWludXRlcygpKSkpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV4dE1vbnRoID0gKGN1cnJlbnRNb250aCArIDIpICUgMTI7IC8vIFdyYXAgdG8gSmFudWFyeSBpZiBEZWNlbWJlclxuICAgICAgICAgICAgICAgICAgICBuZXh0RGF0ZS5zZXRNb250aChuZXh0TW9udGgpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRNb250aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dERhdGUuc2V0WWVhcihjdXJyZW50WWVhciArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXh0RGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAgIFxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBDb3VudGRvd25UaW1lclxuXG59KCkpIiwiY29uc3QgeyBnc2FwIH0gPSByZXF1aXJlKFwiZ3NhcC9kaXN0L2dzYXBcIik7XG5jb25zdCB7IFNjcm9sbFRyaWdnZXIgfSA9IHJlcXVpcmUoXCJnc2FwL2Rpc3QvU2Nyb2xsVHJpZ2dlclwiKTtcbmNvbnN0IEZsaWNraXR5ID0gcmVxdWlyZSgnZmxpY2tpdHknKTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcblxuY29uc3QgZml4ZWRGaWZ0eUZpZnRpZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZml4ZWRGaWZ0eUZpZnR5Jyk7XG5cbmNvbnN0IHNsaWRlVGltZWxpbmUgPSAodGV4dENvbnRlbnQsIGltYWdlLCBpbmRpY2F0b3IsIGlzTGFzdCwgaXNGaXJzdCkgPT57XG4gICAgbGV0IHRsID0gZ3NhcC50aW1lbGluZSgpO1xuICAgIGlmKCFpc0ZpcnN0KXtcbiAgICAgICAgdGwuZnJvbVRvKGltYWdlLCB7eTonMTAwJSd9LCB7eTonMCcsIGR1cmF0aW9uOjN9KVxuICAgICAgICB0bC50byhpbmRpY2F0b3IsIHtiYWNrZ3JvdW5kQ29sb3I6J3ZhcigtLXN0cm9uZy1waW5rKScsIGR1cmF0aW9uOjB9LCAnPC4yNScpXG4gICAgICAgIHRsLnRvKHRleHRDb250ZW50LCB7b3BhY2l0eToxLCB6SW5kZXg6MSwgZHVyYXRpb246MX0sICc8LjUnKVxuICAgIH0gXG4gICAgXG5cbiAgICBpZighaXNMYXN0KXtcbiAgICAgICAgdGwudG8odGV4dENvbnRlbnQsIHtvcGFjaXR5OjAsIHpJbmRleDowLCBkdXJhdGlvbjoyfSwgXCIrPTEuNVwiKVxuICAgICAgICB0bC50byhpbmRpY2F0b3IsIHtiYWNrZ3JvdW5kQ29sb3I6J3ZhcigtLWdyZXkpJywgZHVyYXRpb246MH0sICc8MScpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy9zbyB0aGVyZSBpcyBhIHBhdXNlIGF0IHRoZSBlbmRcbiAgICAgICAgdGwudG8odGV4dENvbnRlbnQsIHtvcGFjaXR5OjEsIHpJbmRleDoxLCBkdXJhdGlvbjoxfSwgJys9MScpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRsO1xufVxuXG5pZihmaXhlZEZpZnR5RmlmdGllcyAmJiBmaXhlZEZpZnR5RmlmdGllcy5sZW5ndGgpe1xuICAgIGZpeGVkRmlmdHlGaWZ0aWVzLmZvckVhY2goZml4ZWRGaWZ0eUZpZnR5PT57XG4gICAgICAgIGxldCBmaWZ0eUZpZnR5RGVza3RvcElubmVyID0gZml4ZWRGaWZ0eUZpZnR5LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZEZpZnR5RmlmdHlfX2lubmVyLS1kZXNrdG9wJylcbiAgICAgICAgbGV0IHRleHRDb250ZW50ID0gZmlmdHlGaWZ0eURlc2t0b3BJbm5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dENvbnRlbnQnKTtcbiAgICAgICAgbGV0IGltYWdlcyA9IGZpZnR5RmlmdHlEZXNrdG9wSW5uZXIucXVlcnlTZWxlY3RvckFsbCgnLmZpeGVkRmlmdHlGaWZ0eV9faW1hZ2VXcmFwJyk7XG4gICAgICAgIGxldCBpbmRpY2F0b3JzID0gZmlmdHlGaWZ0eURlc2t0b3BJbm5lci5xdWVyeVNlbGVjdG9yQWxsKCcuZmlmdHlGaWZ0eV9faW5kaWNhdG9ycyBzcGFuJyk7XG5cbiAgICAgICAgbGV0IG1lZGlhUXVlcnkgPSBnc2FwLm1hdGNoTWVkaWEoKTtcbiAgICAgICAgbWVkaWFRdWVyeS5hZGQoXCIobWluLXdpZHRoOiAxMDI0cHgpXCIsICgpPT57XG4gICAgICAgICAgICBsZXQgdGwgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6Zml4ZWRGaWZ0eUZpZnR5LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDpcInRvcCB0b3BcIixcbiAgICAgICAgICAgICAgICAgICAgc2NydWI6LjMsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uRW50ZXIsIG9uTGVhdmUsIG9uRW50ZXJCYWNrLCBhbmQgb25MZWF2ZUJhY2tcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9nZ2xlQWN0aW9uczogXCJwbGF5IHBhdXNlIHJldmVyc2UgcGF1c2VcIixcbiAgICAgICAgICAgICAgICAgICAgcGluOnRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVuZDooKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiKz1cIiArICh0ZXh0Q29udGVudC5sZW5ndGggKiBmaXhlZEZpZnR5RmlmdHkub2Zmc2V0SGVpZ2h0KSAqIDIuNSArICdweCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFya2Vyczp0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gbGV0IGluZGljYXRvcnNUaW1lbGluZSA9IGdzYXAudGltZWxpbmUoKTtcbiAgICAgICAgICAgIC8vIC8vIGluZGljYXRvcnNUaW1lbGluZS50byhpbmRpY2F0b3JzWzBdLCB7YmFja2dyb3VuZENvbG9yOidwaW5rJywgZHVyYXRpb246MH0pO1xuICAgICAgICAgICAgLy8gaW5kaWNhdG9yc1RpbWVsaW5lLnRvKGluZGljYXRvcnNbMF0sIHtiYWNrZ3JvdW5kQ29sb3I6J2dyZXknLCBkdXJhdGlvbjowfSwgJys9NCcpO1xuICAgICAgICAgICAgLy8gaW5kaWNhdG9yc1RpbWVsaW5lLnRvKGluZGljYXRvcnNbMV0sIHtiYWNrZ3JvdW5kQ29sb3I6J3BpbmsnLCBkdXJhdGlvbjowfSk7XG4gICAgICAgICAgICAvLyBpbmRpY2F0b3JzVGltZWxpbmUudG8oaW5kaWNhdG9yc1sxXSwge2JhY2tncm91bmRDb2xvcjonZ3JleScsIGR1cmF0aW9uOjB9LCAnKz00Jyk7XG4gICAgICAgICAgICAvLyBpbmRpY2F0b3JzVGltZWxpbmUudG8oaW5kaWNhdG9yc1syXSwge2JhY2tncm91bmRDb2xvcjoncGluaycsIGR1cmF0aW9uOjB9KTtcbiAgICBcbiAgICAgICAgICAgIHRleHRDb250ZW50LmZvckVhY2goKHRjLCBpKT0+e1xuICAgICAgICAgICAgICAgIHRsLmFkZChzbGlkZVRpbWVsaW5lKHRjLCBpbWFnZXNbaV0sIGluZGljYXRvcnNbaV0sIGkgPT0gdGV4dENvbnRlbnQubGVuZ3RoIC0gMSwgaSA9PSAwKSwgaSA+IDAgPyAnLT0wLjknIDogJzwnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgbGV0IGZpeGVkRmlmdHlGaWZ0eU1vYmlsZUlubmVyID0gZml4ZWRGaWZ0eUZpZnR5LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZEZpZnR5RmlmdHlfX2lubmVyLS1tb2JpbGUnKTtcblxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHdyYXBBcm91bmQgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b1BsYXkgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbWFnZXNMb2FkZWQgICAgOiB0cnVlLFxuICAgICAgICAgICAgcGFnZURvdHMgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBwcmV2TmV4dEJ1dHRvbnMgOiBmYWxzZSwgIFxuICAgICAgICAgICAgY29udGFpbiAgICAgICAgIDogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNlbGxBbGlnbiAgICAgICA6ICdsZWZ0JywgXG4gICAgICAgICAgICB3YXRjaENTUzogdHJ1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZsa3R5ID0gbmV3IEZsaWNraXR5KGZpeGVkRmlmdHlGaWZ0eU1vYmlsZUlubmVyLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgZml4ZWRGaWZ0eUZpZnR5LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNhcm91c2VsLXByZXZdJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4geyAgIFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZmxrdHkucHJldmlvdXMoKVxuICAgICAgICB9KVxuXG4gICAgICAgIGZpeGVkRmlmdHlGaWZ0eS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jYXJvdXNlbC1uZXh0XScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGZsa3R5Lm5leHQoKVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICB9KVxufVxuXG5cbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgUm9sbGVyVGV4dFxuXG4gICAgUm9sbGVyVGV4dCA9IHtcbiAgICAgICAgcGhyYXNlczogW1xuICAgICAgICAgICAgJ211bHRpLWRheScsXG4gICAgICAgICAgICAnd2Vla2VuZCcsXG4gICAgICAgICAgICAnYm91dGlxdWUnLFxuICAgICAgICAgICAgJ2NvdW50cnknLFxuICAgICAgICAgICAgJ2hvbGlkYXknLFxuICAgICAgICAgICAgJ3JvY2snLFxuICAgICAgICAgICAgJ2NpdHknLFxuICAgICAgICAgICAgJ2RhbmNlJyxcbiAgICAgICAgICAgICdwb3N0LXB1bmsnLFxuICAgICAgICAgICAgJ2ZhbWlseScsXG4gICAgICAgICAgICAnbWV0YWwnLFxuICAgICAgICAgICAgJ2phenonLFxuICAgICAgICAgICAgJ3dlaXJkJyxcbiAgICAgICAgICAgICdzcGVjaWFsJyxcbiAgICAgICAgICAgICdjbGFzc2ljYWwnLFxuICAgICAgICAgICAgJ3dpbnRlcidcbiAgICAgICAgXSxcbiAgICAgICAgZG9tOiB7XG4gICAgICAgICAgICB0ZXh0V3JhcDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJvbGxlclRleHQnKSxcbiAgICAgICAgICAgIGN1cnJlbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRleHQtY3VycmVudF0nKSxcbiAgICAgICAgICAgIG5leHQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRleHQtbmV4dF0nKSxcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZXJ2YWxMZW5ndGggICAgICAgICAgOiAxNTAwLFxuICAgICAgICBuZXh0UGhyYXNlICAgICAgICAgIDogJ3dpbnRlcicsXG4gICAgICAgIGNvdW50ZXIgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgdGlja2VyICAgICAgICAgICAgICAgICAgOiBmYWxzZSxcblxuICAgICAgICBpbml0OiAoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKFJvbGxlclRleHQuZG9tLnRleHRXcmFwKVxuICAgICAgICAgICAgICAgIFJvbGxlclRleHQuc3RhcnRjb3VudGVyKClcbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIHN0YXJ0Y291bnRlcjogKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBSb2xsZXJUZXh0LnNldFdpZHRoKFJvbGxlclRleHQuZG9tLmN1cnJlbnQpXG5cbiAgICAgICAgICAgIGxldCBpID0gMVxuICAgICAgICAgICAgUm9sbGVyVGV4dC5jb3VudGVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyAgICAgICBcblxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQaHJhc2UgPSBSb2xsZXJUZXh0LnBocmFzZXNbaV1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UGhyYXNlID0gUm9sbGVyVGV4dC5waHJhc2VzW2kgKyAxXSA/IFJvbGxlclRleHQucGhyYXNlc1tpICsgMV0gOiBSb2xsZXJUZXh0LnBocmFzZXNbMF1cblxuICAgICAgICAgICAgICAgIFJvbGxlclRleHQuZG9tLnRleHRXcmFwLmNsYXNzTGlzdC5hZGQoJ3R1cm4nKVxuXG4gICAgICAgICAgICAgICAgUm9sbGVyVGV4dC5zZXRXaWR0aChSb2xsZXJUZXh0LmRvbS5uZXh0KVxuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgUm9sbGVyVGV4dC5kb20udGV4dFdyYXAuY2xhc3NMaXN0LnJlbW92ZSgndHVybicpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIG1vYmlsZSBzY3JlZW4gaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgUm9sbGVyVGV4dC5kb20uY3VycmVudC50ZXh0Q29udGVudCA9IGN1cnJlbnRQaHJhc2VcbiAgICAgICAgICAgICAgICAgICAgUm9sbGVyVGV4dC5kb20ubmV4dC50ZXh0Q29udGVudCA9IG5leHRQaHJhc2VcblxuICAgICAgICAgICAgICAgIH0sIDEwMDApXG5cblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoIHRoZSBlbmQgb2YgdGhlIHRoZW1lcywgcmVzZXQgdG8gZmlyc3QgdGhlbWVcbiAgICAgICAgICAgICAgICBpID49IFJvbGxlclRleHQucGhyYXNlcy5sZW5ndGggLSAxID8gaSA9IDAgOiBpKytcblxuICAgICAgICAgICAgfSwgUm9sbGVyVGV4dC5pbnRlcnZhbExlbmd0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0V2lkdGg6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgdGV4dFdpZHRoID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBSb2xsZXJUZXh0LmRvbS50ZXh0V3JhcC5zdHlsZS53aWR0aCA9IGAke3RleHRXaWR0aH1weGBcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSb2xsZXJUZXh0XG5cbn0oKSlcbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgVGVzdGltb25pYWxzLFxuICAgICAgICBGbGlja2l0eSA9IHJlcXVpcmUoJ2ZsaWNraXR5JylcblxuICAgIFRlc3RpbW9uaWFscyA9IHtcbiAgICAgICAgZG9tOiB7XG4gICAgICAgICAgICBjb250YWluZXIgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLXRlc3RpbW9uaWFscycpLFxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoVGVzdGltb25pYWxzLmRvbS5jb250YWluZXIgJiYgVGVzdGltb25pYWxzLmRvbS5jb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICBUZXN0aW1vbmlhbHMuY3JlYXRlQ2Fyb3VzZWwoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQ2Fyb3VzZWw6ICgpID0+IHtcblxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgY2VsbEFsaWduICAgIDogJ2NlbnRlcicsICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd3JhcEFyb3VuZCAgIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheSAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbWFnZXNMb2FkZWQgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhZ2VEb3RzICAgICA6IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ldyBGbGlja2l0eShUZXN0aW1vbmlhbHMuZG9tLmNvbnRhaW5lciwgc2V0dGluZ3MpXG5cbiAgICAgICAgfVxuXG5cbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IFRlc3RpbW9uaWFsc1xuXG59KCkpXG4iLCJjb25zdCB0aWNrZXJCYW5uZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLkpTLS1wbG90LXRpY2tlcicpO1xuXG5cbmlmKHRpY2tlckJhbm5lcnMgJiYgdGlja2VyQmFubmVycy5sZW5ndGgpe1xuXG4gICAgdGlja2VyQmFubmVycy5mb3JFYWNoKHRpY2tlckJhbm5lcj0+e1xuXG4gICAgICAgIGxldCBtYXhXaW5kb3dXaWR0aCA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogNjM5cHgpXCIpO1xuXG4gICAgICAgIGxldCByZXNldEJhbm5lciA9ICgpPT4ge1xuICAgICAgICAgICAgdGlja2VyQmFubmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUnKTtcbiAgICAgICAgICAgIGxldCBjb250YWluZXJzID0gdGlja2VyQmFubmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50aWNrZXItY29udGFpbmVyJyk7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZXMgPSBjb250YWluZXJzWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZXNzYWdlJyk7XG5cbiAgICAgICAgICAgIGlmKGNvbnRhaW5lcnNbMV0pe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcnNbMV0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKG1lc3NhZ2VzLmxlbmd0aCA+IDEpe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2goKG1zZywgaW5kZXgpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCFtYXhXaW5kb3dXaWR0aC5tYXRjaGVzKXtcbiAgICAgICAgICAgICAgICBzZXR1cEJhbm5lcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2V0dXBCYW5uZXIgPSAoKT0+e1xuICAgICAgICAgICAgbGV0IHRpY2tlckNvbnRhaW5lciA9IHRpY2tlckJhbm5lci5xdWVyeVNlbGVjdG9yKCcudGlja2VyLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB0aWNrZXJCYW5uZXIucXVlcnlTZWxlY3RvcignLm1lc3NhZ2UnKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlV2lkdGggPSBtZXNzYWdlLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgbGV0IGJhbm5lcldpZHRoID0gdGlja2VyQmFubmVyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgbGV0IGhvd01hbnlGaXQgPSBNYXRoLmNlaWwoYmFubmVyV2lkdGggLyBtZXNzYWdlV2lkdGgpO1xuXG4gICAgICAgICAgICBpZihob3dNYW55Rml0KXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgaG93TWFueUZpdDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsb25lID0gbWVzc2FnZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRpY2tlckNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBjbG9uZSA9IHRpY2tlckNvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGlja2VyQmFubmVyLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgICAgICAgICAgICB0aWNrZXJCYW5uZXIuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZScpO1xuXG4gICAgICAgICAgICAgICAgdGlja2VyQmFubmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50aWNrZXItY29udGFpbmVyJykuZm9yRWFjaChlbD0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3BlZWQgPSBiYW5uZXJXaWR0aCA+IDYwMCA/IGJhbm5lcldpZHRoIDogNjAwO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5hbmltYXRpb25EdXJhdGlvbiA9IHNwZWVkIC8gMTUgKyAncyc7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRpY2tlckJhbm5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCk9PntcbiAgICAgICAgLy8gICAgIGxldCB0aWNrZXJDb250YWluZXIgPSB0aWNrZXJCYW5uZXIucXVlcnlTZWxlY3RvckFsbCgnLnRpY2tlci1jb250YWluZXInKTtcbiAgICAgICAgLy8gICAgIHRpY2tlckNvbnRhaW5lci5mb3JFYWNoKGNvbnRhaW5lcj0+e1xuICAgICAgICAvLyAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5hbmltYXRpb25QbGF5U3RhdGUgPSAncGF1c2VkJztcbiAgICAgICAgLy8gICAgIH0pXG4gICAgXG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIHRpY2tlckJhbm5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCk9PntcbiAgICAgICAgLy8gICAgIGxldCB0aWNrZXJDb250YWluZXIgPSB0aWNrZXJCYW5uZXIucXVlcnlTZWxlY3RvckFsbCgnLnRpY2tlci1jb250YWluZXInKTtcbiAgICAgICAgLy8gICAgIHRpY2tlckNvbnRhaW5lci5mb3JFYWNoKGNvbnRhaW5lcj0+e1xuICAgICAgICAvLyAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5hbmltYXRpb25QbGF5U3RhdGUgPSAncnVubmluZyc7XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyB9KVxuXG5cbiAgICAgICAgaWYoIW1heFdpbmRvd1dpZHRoLm1hdGNoZXMpe1xuICAgICAgICAgICAgc2V0dXBCYW5uZXIoKTsgXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2NyZWVuU2l6ZSA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKT0+e1xuICAgICAgICAgICAgaWYod2luZG93LmlubmVyV2lkdGggIT09IHNjcmVlblNpemUpe1xuICAgICAgICAgICAgICAgIHNjcmVlblNpemUgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgICAgICByZXNldEJhbm5lcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG5cbn0gICIsIi8vIEltcG9ydCBuZWNlc3NhcnkgbGlicmFyaWVzXG5pbXBvcnQgb2dsIGZyb20gJy4vbGlicy9vZ2wuanMnO1xuXG4vLyBEZWZpbmUgdGhlIHNpemUgb2YgdGhlIGltYWdlXG5jb25zdCBpbWdTaXplID0gWzE3MDAsIDExMzNdOyBcblxubGV0IHN0YXJ0ZWQgPSBmYWxzZVxuXG4vLyBHZXQgdGhlIGNhbnZhcyB3cmFwcGVyIGVsZW1lbnRcbmNvbnN0IHdyYXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsb3RFZmZlY3RCYW5uZXInKTsgXG5cbndyYXBzLmZvckVhY2god3JhcCA9PiB7XG5cblxuICAgIGxldCBhc3NldHNUb0xvYWQgPSAxXG5cblxuICAgIC8vIENoZWNrIGlmIHRoZSBkZXZpY2UgaXMgdG91Y2gtY2FwYWJsZVxuICAgIGNvbnN0IGlzVG91Y2hDYXBhYmxlID0gXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3c7XG5cbiAgICAvLyBWZXJ0ZXggc2hhZGVyIGNvZGUgZm9yIHJlbmRlcmluZ1xuICAgIGNvbnN0IHZlcnRleCA9IGBcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgdXY7XG4gICAgICAgIGF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xuICAgICAgICB2YXJ5aW5nIHZlYzIgdlV2O1xuICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICB2VXYgPSB1djtcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XG4gICAgICAgIH1cbiAgICBgO1xuXG4gICAgLy8gRnJhZ21lbnQgc2hhZGVyIGNvZGUgZm9yIHJlbmRlcmluZ1xuICAgIGNvbnN0IGZyYWdtZW50ID0gYFxuICAgICAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgICAgIHByZWNpc2lvbiBoaWdocCBpbnQ7XG4gICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIHRCYWNrZ3JvdW5kOyBcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdEJhY2tncm91bmQyOyBcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdExvZ287IFxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB0RmxvdztcbiAgICAgICAgdmFyeWluZyB2ZWMyIHZVdjtcbiAgICAgICAgdW5pZm9ybSB2ZWM0IHJlczsgXG4gICAgICAgIHVuaWZvcm0gZmxvYXQgbW91c2VYO1xuXG5cbiAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBmbG93IHZhbHVlcyBmcm9tIHRoZSBmbG93bWFwIHRleHR1cmVcbiAgICAgICAgICAgIHZlYzMgZmxvdyA9IHRleHR1cmUyRCh0RmxvdywgdlV2KS5yZ2I7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgVVYgY29vcmRpbmF0ZXMgYW5kIGFwcGx5IGZsb3cgb2Zmc2V0c1xuICAgICAgICAgICAgdmVjMiB1diA9IDAuNSAqIGdsX0ZyYWdDb29yZC54eSAvIHJlcy54eTtcbiAgICAgICAgICAgIHZlYzIgbXlVViA9ICh1diAtIHZlYzIoMC41KSkgKiByZXMuencgKyB2ZWMyKDAuNSk7XG5cbiAgICAgICAgICAgIG15VVYgLT0gZmxvdy54eSAqICgwLjYgKiAwLjcpO1xuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdHdvIG1vcmUgVVYgY29vcmRpbmF0ZXMgZm9yIHRoZSBncmVlICYgYmx1ZSBjaGFubmVsc1xuICAgICAgICAgICAgdmVjMiBteVVWMiA9ICh1diAtIHZlYzIoMC41KSkgKiByZXMuencgKyB2ZWMyKDAuNSk7XG4gICAgICAgICAgICBteVVWMiAtPSBmbG93Lnh5ICogKC0wLjIgKiAwLjcpO1xuICAgICAgICAgICAgdmVjMiBteVVWMyA9ICh1diAtIHZlYzIoMC41KSkgKiByZXMuencgKyB2ZWMyKDAuNSk7XG4gICAgICAgICAgICBteVVWMyAtPSBmbG93Lnh5ICogKDAuOCAqIDAuNyk7XG5cblxuICAgICAgICAgICAgdmVjMiBteVVWMjEgPSAodXYgLSB2ZWMyKDAuNSkpICogcmVzLnp3ICsgdmVjMigwLjUpO1xuICAgICAgICAgICAgbXlVVjIxIC09IGZsb3cueHkgKiAoMC42ICogMC4zKTtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHR3byBtb3JlIFVWIGNvb3JkaW5hdGVzIGZvciB0aGUgZ3JlZSAmIGJsdWUgY2hhbm5lbHNcbiAgICAgICAgICAgIHZlYzIgbXlVVjIyID0gKHV2IC0gdmVjMigwLjUpKSAqIHJlcy56dyArIHZlYzIoMC41KTtcbiAgICAgICAgICAgIG15VVYyMiAtPSBmbG93Lnh5ICogKC0wLjQgKiAwLjkpO1xuICAgICAgICAgICAgdmVjMiBteVVWMjMgPSAodXYgLSB2ZWMyKDAuNSkpICogcmVzLnp3ICsgdmVjMigwLjUpO1xuICAgICAgICAgICAgbXlVVjIzIC09IGZsb3cueHkgKiAoMC40ICogMC4yKTtcblxuICAgICAgICAgICAgLy8gR2V0IGNvbG9yIHZhbHVlcyBmcm9tIHRoZSBiYWNrZ3JvdW5kIHRleHR1cmUgZm9yIGVhY2ggVVYgY29vcmRpbmF0ZVxuICAgICAgICAgICAgdmVjMyB0ZXggPSB0ZXh0dXJlMkQodEJhY2tncm91bmQsIG15VVYpLnJnYjtcbiAgICAgICAgICAgIHZlYzMgdGV4MiA9IHRleHR1cmUyRCh0QmFja2dyb3VuZCwgbXlVVjIpLnJnYjtcbiAgICAgICAgICAgIHZlYzMgdGV4MyA9IHRleHR1cmUyRCh0QmFja2dyb3VuZCwgbXlVVjMpLnJnYjtcblxuICAgICAgICAgICAgLy8gR2V0IGNvbG9yIHZhbHVlcyBmcm9tIHRoZSBiYWNrZ3JvdW5kIHRleHR1cmUgZm9yIGVhY2ggVVYgY29vcmRpbmF0ZVxuICAgICAgICAgICAgdmVjMyB0ZXgyMSA9IHRleHR1cmUyRCh0QmFja2dyb3VuZDIsIG15VVYyMSkucmdiO1xuICAgICAgICAgICAgdmVjMyB0ZXgyMiA9IHRleHR1cmUyRCh0QmFja2dyb3VuZDIsIG15VVYyMikucmdiO1xuICAgICAgICAgICAgdmVjMyB0ZXgyMyA9IHRleHR1cmUyRCh0QmFja2dyb3VuZDIsIG15VVYyMykucmdiO1xuXG4gICAgICAgICAgICAvLyBDb21iaW5lIHRCYWNrZ3JvdW5kMiAod2l0aCBmbG93IGFwcGxpZWQpIHdpdGggdEJhY2tncm91bmQgKHdpdGggZmxvdyBhcHBsaWVkKVxuICAgICAgICAgICAgdmVjNCBibGVuZGVkQ29sb3IgPSBtaXgodmVjNCh0ZXguciwgdGV4Mi5nLCB0ZXgzLmIsIDEuMCksIHZlYzQodGV4MjEuciwgdGV4MjIuZywgdGV4MjMuYiwgMS4wKSwgMC41KTtcbiAgICAgICAgXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSBibGVuZGVkQ29sb3I7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgYDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHJlbmRlcmluZyBwcm9jZXNzXG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgV2ViR0wgcmVuZGVyZXJcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgb2dsLlJlbmRlcmVyKHsgZHByOiAyIH0pO1xuICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuXG4gICAgICAgIC8vIEFwcGVuZCB0aGUgY2FudmFzIHRvIHRoZSB3cmFwcGVyIGVsZW1lbnRcbiAgICAgICAgd3JhcC5hcHBlbmRDaGlsZChnbC5jYW52YXMpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgaGVpZ2h0IGFuZCBmbGFnIGZvciB1cGRhdGluZyBzdHlsZVxuICAgICAgICBsZXQgaCA9IHdyYXAuY2xpZW50SGVpZ2h0ICogMTtcblxuICAgICAgICAvLyBBc3BlY3QgcmF0aW8gdmFyaWFibGVcbiAgICAgICAgbGV0IGFzcGVjdCA9IDI7XG5cbiAgICAgICAgLy8gTW91c2UgcG9zaXRpb24gYW5kIHZlbG9jaXR5IHZlY3RvcnNcbiAgICAgICAgY29uc3QgbW91c2UgPSBuZXcgb2dsLlZlYzIoLTEpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG5ldyBvZ2wuVmVjMigpO1xuXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIHJlc2l6ZSB0aGUgY2FudmFzIGFuZCB1cGRhdGUgdGhlIGFzcGVjdCByYXRpb1xuICAgICAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgICAgICBsZXQgYTEsIGEyO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VBc3BlY3QgPSBpbWdTaXplWzFdIC8gaW1nU2l6ZVswXTtcblxuICAgICAgICAgICAgaWYgKGggLyB3cmFwLmNsaWVudFdpZHRoIDwgaW1hZ2VBc3BlY3QpIHtcbiAgICAgICAgICAgICAgICBhMSA9IDE7XG4gICAgICAgICAgICAgICAgYTIgPSBoIC8gd3JhcC5jbGllbnRXaWR0aCAvIGltYWdlQXNwZWN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhMSA9ICh3cmFwLmNsaWVudFdpZHRoIC8gaCkgKiBpbWFnZUFzcGVjdDtcbiAgICAgICAgICAgICAgICBhMiA9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGggPSB3cmFwLmNsaWVudEhlaWdodCAqIDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1lc2gucHJvZ3JhbS51bmlmb3Jtcy5yZXMudmFsdWUgPSBuZXcgb2dsLlZlYzQod3JhcC5jbGllbnRXaWR0aCwgaCwgYTEsIGEyKTtcblxuICAgICAgICBcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldFNpemUod3JhcC5jbGllbnRXaWR0aCwgaCk7XG4gICAgICAgICAgICBhc3BlY3QgPSB3cmFwLmNsaWVudFdpZHRoIC8gaDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGZsb3dtYXAgZm9yIGZsdWlkIHNpbXVsYXRpb25cbiAgICAgICAgY29uc3QgZmxvd21hcCA9bmV3IG9nbC5GbG93bWFwKGdsLCB7IHNpemU6IDUxMiwgZmFsbG9mZjogMC40LCBkaXNzaXBhdGlvbjogMC45OSB9KTtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGdlb21ldHJ5IG9mIGEgdHJpYW5nbGUgZm9yIHJlbmRlcmluZ1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBvZ2wuR2VvbWV0cnkoZ2wsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMixcbiAgICAgICAgICAgICAgICBkYXRhOiBuZXcgRmxvYXQzMkFycmF5KFstMSwgLTEsIDMsIC0xLCAtMSwgM10pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHV2OiB7IHNpemU6IDIsIGRhdGE6IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDIsIDAsIDAsIDJdKSB9LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgYSB0ZXh0dXJlIGZvciB0aGUgYmFja2dyb3VuZCBpbWFnZVxuICAgICAgICBjb25zdCB0ZXh0dXJlID0gbmV3IG9nbC5UZXh0dXJlKGdsLCB7XG4gICAgICAgICAgICBtaW5GaWx0ZXI6IGdsLkxJTkVBUixcbiAgICAgICAgICAgIG1hZ0ZpbHRlcjogZ2wuTElORUFSLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBMb2FkIHRoZSBpbWFnZSBhbmQgc2V0IGl0IGFzIHRoZSB0ZXh0dXJlXG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBsZXQgbG9hZGVkID0gMDtcblxuXG4gICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0ZXh0dXJlLmltYWdlID0gaW1nO1xuICAgICAgICAgICAgbG9hZGVkKys7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsb2FkZWQsYXNzZXRzVG9Mb2FkKVxuICAgICAgICAgICAgaWYobG9hZGVkID09IGFzc2V0c1RvTG9hZCkge1xuICAgICAgICAgICAgICAgIGJlZ2luKClcbiAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xuICAgICAgICBpbWcuc3JjID0gd3JhcC5kYXRhc2V0LmJnO1xuXG4gICAgICAgIC8vIExvYWQgdGhlIGltYWdlIDIgYW5kIHNldCBpdCBhcyB0aGUgdGV4dHVyZVxuICAgICAgICBjb25zdCBpbWcyID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgY29uc3QgdGV4dHVyZTIgPSBuZXcgb2dsLlRleHR1cmUoZ2wsIHtcbiAgICAgICAgICAgIG1pbkZpbHRlcjogZ2wuTElORUFSLFxuICAgICAgICAgICAgbWFnRmlsdGVyOiBnbC5MSU5FQVIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGltZzIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGV4dHVyZTIuaW1hZ2UgPSBpbWcyO1xuICAgICAgICAgICAgbG9hZGVkKys7XG4gICAgICAgICAgICBpZihsb2FkZWQgPT0gYXNzZXRzVG9Mb2FkKSB7XG4gICAgICAgICAgICAgICAgYmVnaW4oKVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGltZzIuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xuICAgICAgICBpbWcyLnNyYyA9IHdyYXAuZGF0YXNldC5iZ0FsdDtcbiAgICAgICAgXG4gICAgICAgIGxldCBtb3VzZVggPSAwLjU7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIGFzcGVjdCByYXRpbyBmb3IgdGhlIGltYWdlXG4gICAgICAgIGxldCBhMSwgYTI7XG4gICAgICAgIGNvbnN0IGltYWdlQXNwZWN0ID0gaW1nU2l6ZVsxXSAvIGltZ1NpemVbMF07XG4gICAgICAgIGlmIChoIC8gd3JhcC5jbGllbnRXaWR0aCA8IGltYWdlQXNwZWN0KSB7XG4gICAgICAgICAgICBhMSA9IDE7XG4gICAgICAgICAgICBhMiA9IGggLyB3cmFwLmNsaWVudFdpZHRoIC8gaW1hZ2VBc3BlY3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhMSA9ICh3cmFwLmNsaWVudFdpZHRoIC8gaCkgKiBpbWFnZUFzcGVjdDtcbiAgICAgICAgICAgIGEyID0gMTtcbiAgICAgICAgfVxuXG5cblxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHJlbmRlcmluZyBwcm9ncmFtIHdpdGggc2hhZGVycyBhbmQgdW5pZm9ybXNcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IG5ldyBvZ2wuUHJvZ3JhbShnbCwge1xuICAgICAgICAgICAgdmVydGV4LFxuICAgICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgICAgIHVUaW1lOiB7IHZhbHVlOiAwIH0sXG4gICAgICAgICAgICAgICAgdEJhY2tncm91bmQ6IHsgdmFsdWU6IHRleHR1cmUgfSxcbiAgICAgICAgICAgICAgICB0QmFja2dyb3VuZDI6IHsgdmFsdWU6IHRleHR1cmUyIH0sXG4gICAgICAgICAgICAgICAgbW91c2VYIDoge3ZhbHVlIDogbW91c2VYfSxcbiAgICAgICAgICAgICAgICByZXM6IHsgdmFsdWU6IG5ldyBvZ2wuVmVjNCh3cmFwLmNsaWVudFdpZHRoLCBoLCBhMSwgYTIpIH0sXG4gICAgICAgICAgICAgICAgaW1nOiB7IHZhbHVlOiBuZXcgb2dsLlZlYzIoaW1nU2l6ZVswXSwgaW1nU2l6ZVsxXSkgfSxcbiAgICAgICAgICAgICAgICB0RmxvdzogZmxvd21hcC51bmlmb3JtLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbWVzaCBmb3IgcmVuZGVyaW5nIHRoZSB0cmlhbmdsZVxuICAgICAgICBjb25zdCBtZXNoID0gbmV3IG9nbC5NZXNoKGdsLCB7IGdlb21ldHJ5LCBwcm9ncmFtIH0pO1xuXG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGJlZ2luKCkge1xuXG4gICAgICAgICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXIgZm9yIHdpbmRvdyByZXNpemVcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgLy8gQ2FsbCByZXNpemUgZnVuY3Rpb24gaW5pdGlhbGx5XG4gICAgICAgICAgICAgICAgcmVzaXplKCk7XG4gICAgICAgICAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlQmFubmVyJyk7XG4gICAgICAgICAgICB9LCAxMDApXG5cbiAgICAgICAgICAgIC8vIEFkZCBtb3VzZSBtb3ZlbWVudCBldmVudCBsaXN0ZW5lciBpZiBub3QgdG91Y2gtY2FwYWJsZVxuICAgICAgICAgICAgaWYgKCFpc1RvdWNoQ2FwYWJsZSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHVwZGF0ZU1vdXNlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyYWNrIHRoZSBzY3JvbGwgcG9zaXRpb24gYW5kIGhhbmRsZSBiYW5uZXIgdmlzaWJpbGl0eVxuICAgICAgICAgICAgbGV0IHNjcm9sbFBvc2l0aW9uID0gd2luZG93LnNjcm9sbFk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBzY3JvbGxQb3NpdGlvbiA9IHdpbmRvdy5zY3JvbGxZO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uIDwgaCAmJiBkaXNhYmxlZCA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVmFyaWFibGVzIGZvciB0cmFja2luZyB0aW1lIGFuZCB3aGV0aGVyIHRoZSBhbmltYXRpb24gaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGxldCBsYXN0VGltZTtcbiAgICAgICAgICAgIGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbGFzdE1vdXNlID0gbmV3IG9nbC5WZWMyKCk7XG5cbiAgICAgICAgICAgIC8vIEZ1bmN0aW9uIHRvIGhhbmRsZSBtb3VzZSBtb3ZlbWVudCBhbmQgdmVsb2NpdHkgY2FsY3VsYXRpb25cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU1vdXNlKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsUG9zaXRpb24gPD0gaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS54ID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUueSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZS54ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUueCA9IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnkgPSBlLnBhZ2VZO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYWRqdXN0ZWQgbW91c2UgcG9zaXRpb24gY29uc2lkZXJpbmcgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGp1c3RlZFkgPSBlLnkgKyBzY3JvbGxQb3NpdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbW91c2UgcG9zaXRpb24gaW4gMCB0byAxIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlLnNldChlLnggLyBnbC5yZW5kZXJlci53aWR0aCwgMS4wIC0gYWRqdXN0ZWRZIC8gZ2wucmVuZGVyZXIuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgbW91c2UgdmVsb2NpdHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXN0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNb3VzZS5zZXQoZS54LCBhZGp1c3RlZFkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFYID0gZS54IC0gbGFzdE1vdXNlLng7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhWSA9IGFkanVzdGVkWSAtIGxhc3RNb3VzZS55O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWx0YVggIT0gMCAmJiBkZWx0YVkgIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1vdXNlLnNldChlLngsIGFkanVzdGVkWSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVsdGEgPSBNYXRoLm1heCgxMC40LCB0aW1lIC0gbGFzdFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueCA9IChkZWx0YVggLyBkZWx0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS55ID0gKGRlbHRhWSAvIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGFuZGxlIG1vYmlsZSBkZXZpY2VzIHdpdGggdG91Y2ggc3VwcG9ydFxuICAgICAgICAgICAgaWYgKGlzVG91Y2hDYXBhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gd3JhcC5kYXRhc2V0LmJnO1xuICAgICAgICAgICAgICAgIHdyYXAuY2xhc3NMaXN0LmFkZCgnbW9iaWxlRmFkZUluJyk7XG4gICAgICAgICAgICAgICAgd3JhcC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7c3JjfSlgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uIGxvb3BcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3VzdG9tTGVycChjdXJyZW50LCB0YXJnZXQsIHNwZWVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHRhcmdldCB2YWx1ZXNcbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gdGFyZ2V0IC0gY3VycmVudDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhlIHZlbG9jaXR5IHRvIGRldGVybWluZSBpZiBpdCdzIGluY3JlYXNpbmcgb3IgZGVjcmVhc2luZ1xuICAgICAgICAgICAgICAgIGNvbnN0IGFic1ZlbG9jaXR5ID0gTWF0aC5hYnMoZGlmZik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBEZWZpbmUgYSB0aHJlc2hvbGQgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBzcGVlZGluZyB1cCBhbmQgc2xvd2luZyBkb3duXG4gICAgICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkID0gMC4wMDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVc2UgYSBkaWZmZXJlbnQgbGVycCBzcGVlZCBkZXBlbmRpbmcgb24gdGhlIHZlbG9jaXR5IGRpcmVjdGlvblxuICAgICAgICAgICAgICAgIGlmIChhYnNWZWxvY2l0eSA+IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTcGVlZCB1cCB3aGVuIHRoZSB2ZWxvY2l0eSBpcyBpbmNyZWFzaW5nXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50ICsgZGlmZiAqIHNwZWVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNsb3cgZG93biB3aGVuIHRoZSB2ZWxvY2l0eSBpcyBkZWNyZWFzaW5nIG9yIGNsb3NlIHRvIHplcm9cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQgKyBkaWZmICogKHNwZWVkIC8gMTApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGxvb3AgZnVuY3Rpb25cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZSh0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbFBvc2l0aW9uIDw9IGgpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB2ZWxvY2l0eSB3aGVuIG1vdXNlIGlzIG5vdCBtb3ZpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2ZWxvY2l0eS5uZWVkc1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkuc2V0KDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5Lm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBmbG93bWFwIGlucHV0c1xuICAgICAgICAgICAgICAgICAgICBmbG93bWFwLmFzcGVjdCA9IGFzcGVjdDtcbiAgICAgICAgICAgICAgICAgICAgZmxvd21hcC5tb3VzZS5jb3B5KG1vdXNlKTsgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZihtZXNoLnByb2dyYW0udW5pZm9ybXMubW91c2VYICE9IG1vdXNlLngpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnByb2dyYW0udW5pZm9ybXMubW91c2VYLnZhbHVlID0gbW91c2UueCA+PSAwID8gbW91c2UueCA6IDAuNVxuICAgICAgICAgICAgICAgICAgICBmbG93bWFwLnZlbG9jaXR5LnggPSBjdXN0b21MZXJwKGZsb3dtYXAudmVsb2NpdHkueCwgdmVsb2NpdHkueCwgMC4wNSk7XG4gICAgICAgICAgICAgICAgICAgIGZsb3dtYXAudmVsb2NpdHkueSA9IGN1c3RvbUxlcnAoZmxvd21hcC52ZWxvY2l0eS55LCB2ZWxvY2l0eS55LCAwLjAyKTtcbiAgICAgICAgICAgICAgICAgICAgZmxvd21hcC51cGRhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXIgdGhlIG1lc2hcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyKHsgc2NlbmU6IG1lc2ggfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udGludWUgdGhlIGFuaW1hdGlvbiBsb29wXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdjYW52YXNMb2FkZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgYmFubmVyIGFuZCBkaXNhYmxlIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnaGlkZUJhbm5lcicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBcblxuICAgIGluaXQoKVxuXG4gICAgY29uc29sZS5sb2cod3JhcClcblxuICAgIFxufSlcblxuIiwidmFyIG9nbD1mdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHQpe2xldCBlPXRbMF0saT10WzFdLHI9dFsyXTtyZXR1cm4gTWF0aC5zcXJ0KGUqZStpKmkrcipyKX1mdW5jdGlvbiBpKHQsZSl7cmV0dXJuIHRbMF09ZVswXSx0WzFdPWVbMV0sdFsyXT1lWzJdLHR9ZnVuY3Rpb24gcih0LGUsaSl7cmV0dXJuIHRbMF09ZVswXStpWzBdLHRbMV09ZVsxXStpWzFdLHRbMl09ZVsyXStpWzJdLHR9ZnVuY3Rpb24gcyh0LGUsaSl7cmV0dXJuIHRbMF09ZVswXS1pWzBdLHRbMV09ZVsxXS1pWzFdLHRbMl09ZVsyXS1pWzJdLHR9ZnVuY3Rpb24gbih0LGUsaSl7cmV0dXJuIHRbMF09ZVswXSppLHRbMV09ZVsxXSppLHRbMl09ZVsyXSppLHR9ZnVuY3Rpb24gYSh0LGUpe2xldCBpPWVbMF0scj1lWzFdLHM9ZVsyXSxuPWkqaStyKnIrcypzO3JldHVybiBuPjAmJihuPTEvTWF0aC5zcXJ0KG4pKSx0WzBdPWVbMF0qbix0WzFdPWVbMV0qbix0WzJdPWVbMl0qbix0fWZ1bmN0aW9uIGgodCxlKXtyZXR1cm4gdFswXSplWzBdK3RbMV0qZVsxXSt0WzJdKmVbMl19Y29uc3Qgbz1mdW5jdGlvbigpe2NvbnN0IHQ9WzAsMCwwXSxlPVswLDAsMF07cmV0dXJuIGZ1bmN0aW9uKHIscyl7aSh0LHIpLGkoZSxzKSxhKHQsdCksYShlLGUpO2xldCBuPWgodCxlKTtyZXR1cm4gbj4xPzA6bjwtMT9NYXRoLlBJOk1hdGguYWNvcyhuKX19KCk7Y2xhc3MgbCBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKHQ9MCxlPXQsaT10KXtyZXR1cm4gc3VwZXIodCxlLGkpLHRoaXN9Z2V0IHgoKXtyZXR1cm4gdGhpc1swXX1zZXQgeCh0KXt0aGlzWzBdPXR9Z2V0IHkoKXtyZXR1cm4gdGhpc1sxXX1zZXQgeSh0KXt0aGlzWzFdPXR9Z2V0IHooKXtyZXR1cm4gdGhpc1syXX1zZXQgeih0KXt0aGlzWzJdPXR9c2V0KHQsZT10LGk9dCl7cmV0dXJuIHQubGVuZ3RoP3RoaXMuY29weSh0KTooZnVuY3Rpb24odCxlLGkscil7dFswXT1lLHRbMV09aSx0WzJdPXJ9KHRoaXMsdCxlLGkpLHRoaXMpfWNvcHkodCl7cmV0dXJuIGkodGhpcyx0KSx0aGlzfWFkZCh0LGUpe3JldHVybiBlP3IodGhpcyx0LGUpOnIodGhpcyx0aGlzLHQpLHRoaXN9c3ViKHQsZSl7cmV0dXJuIGU/cyh0aGlzLHQsZSk6cyh0aGlzLHRoaXMsdCksdGhpc31tdWx0aXBseSh0KXt2YXIgZSxpLHI7cmV0dXJuIHQubGVuZ3RoPyhpPXRoaXMscj10LChlPXRoaXMpWzBdPWlbMF0qclswXSxlWzFdPWlbMV0qclsxXSxlWzJdPWlbMl0qclsyXSk6bih0aGlzLHRoaXMsdCksdGhpc31kaXZpZGUodCl7dmFyIGUsaSxyO3JldHVybiB0Lmxlbmd0aD8oaT10aGlzLHI9dCwoZT10aGlzKVswXT1pWzBdL3JbMF0sZVsxXT1pWzFdL3JbMV0sZVsyXT1pWzJdL3JbMl0pOm4odGhpcyx0aGlzLDEvdCksdGhpc31pbnZlcnNlKHQ9dGhpcyl7dmFyIGUsaTtyZXR1cm4gaT10LChlPXRoaXMpWzBdPTEvaVswXSxlWzFdPTEvaVsxXSxlWzJdPTEvaVsyXSx0aGlzfWxlbigpe3JldHVybiBlKHRoaXMpfWRpc3RhbmNlKHQpe3JldHVybiB0P2Z1bmN0aW9uKHQsZSl7bGV0IGk9ZVswXS10WzBdLHI9ZVsxXS10WzFdLHM9ZVsyXS10WzJdO3JldHVybiBNYXRoLnNxcnQoaSppK3IqcitzKnMpfSh0aGlzLHQpOmUodGhpcyl9c3F1YXJlZExlbigpe3JldHVybiB0aGlzLnNxdWFyZWREaXN0YW5jZSgpfXNxdWFyZWREaXN0YW5jZSh0KXtyZXR1cm4gdD9mdW5jdGlvbih0LGUpe2xldCBpPWVbMF0tdFswXSxyPWVbMV0tdFsxXSxzPWVbMl0tdFsyXTtyZXR1cm4gaSppK3IqcitzKnN9KHRoaXMsdCk6ZnVuY3Rpb24odCl7bGV0IGU9dFswXSxpPXRbMV0scj10WzJdO3JldHVybiBlKmUraSppK3Iqcn0odGhpcyl9bmVnYXRlKHQ9dGhpcyl7dmFyIGUsaTtyZXR1cm4gaT10LChlPXRoaXMpWzBdPS1pWzBdLGVbMV09LWlbMV0sZVsyXT0taVsyXSx0aGlzfWNyb3NzKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXtsZXQgcj1lWzBdLHM9ZVsxXSxuPWVbMl0sYT1pWzBdLGg9aVsxXSxvPWlbMl07dFswXT1zKm8tbipoLHRbMV09biphLXIqbyx0WzJdPXIqaC1zKmF9KHRoaXMsdCxlKSx0aGlzfXNjYWxlKHQpe3JldHVybiBuKHRoaXMsdGhpcyx0KSx0aGlzfW5vcm1hbGl6ZSgpe3JldHVybiBhKHRoaXMsdGhpcyksdGhpc31kb3QodCl7cmV0dXJuIGgodGhpcyx0KX1lcXVhbHModCl7cmV0dXJuIGk9dCwoZT10aGlzKVswXT09PWlbMF0mJmVbMV09PT1pWzFdJiZlWzJdPT09aVsyXTt2YXIgZSxpfWFwcGx5TWF0cml4NCh0KXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2xldCByPWVbMF0scz1lWzFdLG49ZVsyXSxhPWlbM10qcitpWzddKnMraVsxMV0qbitpWzE1XTthPWF8fDEsdFswXT0oaVswXSpyK2lbNF0qcytpWzhdKm4raVsxMl0pL2EsdFsxXT0oaVsxXSpyK2lbNV0qcytpWzldKm4raVsxM10pL2EsdFsyXT0oaVsyXSpyK2lbNl0qcytpWzEwXSpuK2lbMTRdKS9hfSh0aGlzLHRoaXMsdCksdGhpc31hcHBseVF1YXRlcm5pb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXtsZXQgcj1lWzBdLHM9ZVsxXSxuPWVbMl0sYT1pWzBdLGg9aVsxXSxvPWlbMl0sbD1oKm4tbypzLHU9bypyLWEqbixjPWEqcy1oKnIsZD1oKmMtbyp1LGc9bypsLWEqYyxwPWEqdS1oKmwsbT0yKmlbM107bCo9bSx1Kj1tLGMqPW0sZCo9MixnKj0yLHAqPTIsdFswXT1yK2wrZCx0WzFdPXMrdStnLHRbMl09bitjK3B9KHRoaXMsdGhpcyx0KSx0aGlzfWFuZ2xlKHQpe3JldHVybiBvKHRoaXMsdCl9bGVycCh0LGUpe3JldHVybiBmdW5jdGlvbih0LGUsaSxyKXtsZXQgcz1lWzBdLG49ZVsxXSxhPWVbMl07dFswXT1zK3IqKGlbMF0tcyksdFsxXT1uK3IqKGlbMV0tbiksdFsyXT1hK3IqKGlbMl0tYSl9KHRoaXMsdGhpcyx0LGUpLHRoaXN9Y2xvbmUoKXtyZXR1cm4gbmV3IGwodGhpc1swXSx0aGlzWzFdLHRoaXNbMl0pfWZyb21BcnJheSh0LGU9MCl7cmV0dXJuIHRoaXNbMF09dFtlXSx0aGlzWzFdPXRbZSsxXSx0aGlzWzJdPXRbZSsyXSx0aGlzfXRvQXJyYXkodD1bXSxlPTApe3JldHVybiB0W2VdPXRoaXNbMF0sdFtlKzFdPXRoaXNbMV0sdFtlKzJdPXRoaXNbMl0sdH10cmFuc2Zvcm1EaXJlY3Rpb24odCl7Y29uc3QgZT10aGlzWzBdLGk9dGhpc1sxXSxyPXRoaXNbMl07cmV0dXJuIHRoaXNbMF09dFswXSplK3RbNF0qaSt0WzhdKnIsdGhpc1sxXT10WzFdKmUrdFs1XSppK3RbOV0qcix0aGlzWzJdPXRbMl0qZSt0WzZdKmkrdFsxMF0qcix0aGlzLm5vcm1hbGl6ZSgpfX1jb25zdCB1PW5ldyBsO2xldCBjPTAsZD0wO2NsYXNzIGd7Y29uc3RydWN0b3IodCxlPXt9KXt0aGlzLmdsPXQsdGhpcy5hdHRyaWJ1dGVzPWUsdGhpcy5pZD1jKyssdGhpcy5WQU9zPXt9LHRoaXMuZHJhd1JhbmdlPXtzdGFydDowLGNvdW50OjB9LHRoaXMuaW5zdGFuY2VkQ291bnQ9MCx0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheShudWxsKSx0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeT1udWxsLHRoaXMuZ2xTdGF0ZT10aGlzLmdsLnJlbmRlcmVyLnN0YXRlO2ZvcihsZXQgdCBpbiBlKXRoaXMuYWRkQXR0cmlidXRlKHQsZVt0XSl9YWRkQXR0cmlidXRlKHQsZSl7aWYodGhpcy5hdHRyaWJ1dGVzW3RdPWUsZS5pZD1kKyssZS5zaXplPWUuc2l6ZXx8MSxlLnR5cGU9ZS50eXBlfHwoZS5kYXRhLmNvbnN0cnVjdG9yPT09RmxvYXQzMkFycmF5P3RoaXMuZ2wuRkxPQVQ6ZS5kYXRhLmNvbnN0cnVjdG9yPT09VWludDE2QXJyYXk/dGhpcy5nbC5VTlNJR05FRF9TSE9SVDp0aGlzLmdsLlVOU0lHTkVEX0lOVCksZS50YXJnZXQ9XCJpbmRleFwiPT09dD90aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSOnRoaXMuZ2wuQVJSQVlfQlVGRkVSLGUubm9ybWFsaXplPWUubm9ybWFsaXplfHwhMSxlLmJ1ZmZlcj10aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpLGUuY291bnQ9ZS5kYXRhLmxlbmd0aC9lLnNpemUsZS5kaXZpc29yPWUuaW5zdGFuY2VkfHwwLGUubmVlZHNVcGRhdGU9ITEsdGhpcy51cGRhdGVBdHRyaWJ1dGUoZSksZS5kaXZpc29yKXtpZih0aGlzLmlzSW5zdGFuY2VkPSEwLHRoaXMuaW5zdGFuY2VkQ291bnQmJnRoaXMuaW5zdGFuY2VkQ291bnQhPT1lLmNvdW50KmUuZGl2aXNvcilyZXR1cm4gY29uc29sZS53YXJuKFwiZ2VvbWV0cnkgaGFzIG11bHRpcGxlIGluc3RhbmNlZCBidWZmZXJzIG9mIGRpZmZlcmVudCBsZW5ndGhcIiksdGhpcy5pbnN0YW5jZWRDb3VudD1NYXRoLm1pbih0aGlzLmluc3RhbmNlZENvdW50LGUuY291bnQqZS5kaXZpc29yKTt0aGlzLmluc3RhbmNlZENvdW50PWUuY291bnQqZS5kaXZpc29yfWVsc2VcImluZGV4XCI9PT10P3RoaXMuZHJhd1JhbmdlLmNvdW50PWUuY291bnQ6dGhpcy5hdHRyaWJ1dGVzLmluZGV4fHwodGhpcy5kcmF3UmFuZ2UuY291bnQ9TWF0aC5tYXgodGhpcy5kcmF3UmFuZ2UuY291bnQsZS5jb3VudCkpfXVwZGF0ZUF0dHJpYnV0ZSh0KXt0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIhPT10LmlkJiYodGhpcy5nbC5iaW5kQnVmZmVyKHQudGFyZ2V0LHQuYnVmZmVyKSx0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXI9dC5pZCksdGhpcy5nbC5idWZmZXJEYXRhKHQudGFyZ2V0LHQuZGF0YSx0aGlzLmdsLlNUQVRJQ19EUkFXKSx0Lm5lZWRzVXBkYXRlPSExfXNldEluZGV4KHQpe3RoaXMuYWRkQXR0cmlidXRlKFwiaW5kZXhcIix0KX1zZXREcmF3UmFuZ2UodCxlKXt0aGlzLmRyYXdSYW5nZS5zdGFydD10LHRoaXMuZHJhd1JhbmdlLmNvdW50PWV9c2V0SW5zdGFuY2VkQ291bnQodCl7dGhpcy5pbnN0YW5jZWRDb3VudD10fWNyZWF0ZVZBTyh0KXt0aGlzLlZBT3NbdC5hdHRyaWJ1dGVPcmRlcl09dGhpcy5nbC5yZW5kZXJlci5jcmVhdGVWZXJ0ZXhBcnJheSgpLHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1t0LmF0dHJpYnV0ZU9yZGVyXSksdGhpcy5iaW5kQXR0cmlidXRlcyh0KX1iaW5kQXR0cmlidXRlcyh0KXt0LmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKCh0LGUpPT57aWYoIXRoaXMuYXR0cmlidXRlc1tlXSlyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oYGFjdGl2ZSBhdHRyaWJ1dGUgJHtlfSBub3QgYmVpbmcgc3VwcGxpZWRgKTtjb25zdCBpPXRoaXMuYXR0cmlidXRlc1tlXTt0aGlzLmdsLmJpbmRCdWZmZXIoaS50YXJnZXQsaS5idWZmZXIpLHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlcj1pLmlkLHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcih0LGkuc2l6ZSxpLnR5cGUsaS5ub3JtYWxpemUsMCwwKSx0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHQpLHRoaXMuZ2wucmVuZGVyZXIudmVydGV4QXR0cmliRGl2aXNvcih0LGkuZGl2aXNvcil9KSx0aGlzLmF0dHJpYnV0ZXMuaW5kZXgmJnRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpfWRyYXcoe3Byb2dyYW06dCxtb2RlOmU9dGhpcy5nbC5UUklBTkdMRVN9KXt0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSE9PWAke3RoaXMuaWR9XyR7dC5hdHRyaWJ1dGVPcmRlcn1gJiYodGhpcy5WQU9zW3QuYXR0cmlidXRlT3JkZXJdfHx0aGlzLmNyZWF0ZVZBTyh0KSx0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbdC5hdHRyaWJ1dGVPcmRlcl0pLHRoaXMuZ2wucmVuZGVyZXIuY3VycmVudEdlb21ldHJ5PWAke3RoaXMuaWR9XyR7dC5hdHRyaWJ1dGVPcmRlcn1gKSx0LmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKCh0LGUpPT57Y29uc3QgaT10aGlzLmF0dHJpYnV0ZXNbZV07aS5uZWVkc1VwZGF0ZSYmdGhpcy51cGRhdGVBdHRyaWJ1dGUoaSl9KSx0aGlzLmlzSW5zdGFuY2VkP3RoaXMuYXR0cmlidXRlcy5pbmRleD90aGlzLmdsLnJlbmRlcmVyLmRyYXdFbGVtZW50c0luc3RhbmNlZChlLHRoaXMuZHJhd1JhbmdlLmNvdW50LHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLHRoaXMuZHJhd1JhbmdlLnN0YXJ0LHRoaXMuaW5zdGFuY2VkQ291bnQpOnRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChlLHRoaXMuZHJhd1JhbmdlLnN0YXJ0LHRoaXMuZHJhd1JhbmdlLmNvdW50LHRoaXMuaW5zdGFuY2VkQ291bnQpOnRoaXMuYXR0cmlidXRlcy5pbmRleD90aGlzLmdsLmRyYXdFbGVtZW50cyhlLHRoaXMuZHJhd1JhbmdlLmNvdW50LHRoaXMuYXR0cmlidXRlcy5pbmRleC50eXBlLHRoaXMuZHJhd1JhbmdlLnN0YXJ0KTp0aGlzLmdsLmRyYXdBcnJheXMoZSx0aGlzLmRyYXdSYW5nZS5zdGFydCx0aGlzLmRyYXdSYW5nZS5jb3VudCl9Y29tcHV0ZUJvdW5kaW5nQm94KHQpeyF0JiZ0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24mJih0PXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5kYXRhKSx0fHxjb25zb2xlLndhcm4oXCJObyBwb3NpdGlvbiBidWZmZXIgZm91bmQgdG8gY29tcHV0ZSBib3VuZHNcIiksdGhpcy5ib3VuZHN8fCh0aGlzLmJvdW5kcz17bWluOm5ldyBsLG1heDpuZXcgbCxjZW50ZXI6bmV3IGwsc2NhbGU6bmV3IGwscmFkaXVzOjEvMH0pO2NvbnN0IGU9dGhpcy5ib3VuZHMubWluLGk9dGhpcy5ib3VuZHMubWF4LHI9dGhpcy5ib3VuZHMuY2VudGVyLHM9dGhpcy5ib3VuZHMuc2NhbGU7ZS5zZXQoMS8wKSxpLnNldCgtMS8wKTtmb3IobGV0IHI9MCxzPXQubGVuZ3RoO3I8cztyKz0zKXtjb25zdCBzPXRbcl0sbj10W3IrMV0sYT10W3IrMl07ZS54PU1hdGgubWluKHMsZS54KSxlLnk9TWF0aC5taW4obixlLnkpLGUuej1NYXRoLm1pbihhLGUueiksaS54PU1hdGgubWF4KHMsaS54KSxpLnk9TWF0aC5tYXgobixpLnkpLGkuej1NYXRoLm1heChhLGkueil9cy5zdWIoaSxlKSxyLmFkZChlLGkpLmRpdmlkZSgyKX1jb21wdXRlQm91bmRpbmdTcGhlcmUodCl7IXQmJnRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbiYmKHQ9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uLmRhdGEpLHR8fGNvbnNvbGUud2FybihcIk5vIHBvc2l0aW9uIGJ1ZmZlciBmb3VuZCB0byBjb21wdXRlIGJvdW5kc1wiKSx0aGlzLmJvdW5kc3x8dGhpcy5jb21wdXRlQm91bmRpbmdCb3godCk7bGV0IGU9MDtmb3IobGV0IGk9MCxyPXQubGVuZ3RoO2k8cjtpKz0zKXUuZnJvbUFycmF5KHQsaSksZT1NYXRoLm1heChlLHRoaXMuYm91bmRzLmNlbnRlci5zcXVhcmVkRGlzdGFuY2UodSkpO3RoaXMuYm91bmRzLnJhZGl1cz1NYXRoLnNxcnQoZSl9cmVtb3ZlKCl7dGhpcy52YW8mJnRoaXMuZ2wucmVuZGVyZXIuZGVsZXRlVmVydGV4QXJyYXkodGhpcy52YW8pO2ZvcihsZXQgdCBpbiB0aGlzLmF0dHJpYnV0ZXMpdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5hdHRyaWJ1dGVzW3RdLmJ1ZmZlciksZGVsZXRlIHRoaXMuYXR0cmlidXRlc1t0XX19bGV0IHA9MDtjb25zdCBtPXt9O2NsYXNzIGZ7Y29uc3RydWN0b3IodCx7dmVydGV4OmUsZnJhZ21lbnQ6aSx1bmlmb3JtczpyPXt9LHRyYW5zcGFyZW50OnM9ITEsY3VsbEZhY2U6bj10LkJBQ0ssZnJvbnRGYWNlOmE9dC5DQ1csZGVwdGhUZXN0Omg9ITAsZGVwdGhXcml0ZTpvPSEwLGRlcHRoRnVuYzpsPXQuTEVTU309e30pe3RoaXMuZ2w9dCx0aGlzLnVuaWZvcm1zPXIsdGhpcy5pZD1wKyssZXx8Y29uc29sZS53YXJuKFwidmVydGV4IHNoYWRlciBub3Qgc3VwcGxpZWRcIiksaXx8Y29uc29sZS53YXJuKFwiZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZFwiKSx0aGlzLnRyYW5zcGFyZW50PXMsdGhpcy5jdWxsRmFjZT1uLHRoaXMuZnJvbnRGYWNlPWEsdGhpcy5kZXB0aFRlc3Q9aCx0aGlzLmRlcHRoV3JpdGU9byx0aGlzLmRlcHRoRnVuYz1sLHRoaXMuYmxlbmRGdW5jPXt9LHRoaXMuYmxlbmRFcXVhdGlvbj17fSx0aGlzLnRyYW5zcGFyZW50JiYhdGhpcy5ibGVuZEZ1bmMuc3JjJiYodGhpcy5nbC5yZW5kZXJlci5wcmVtdWx0aXBsaWVkQWxwaGE/dGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTp0aGlzLnNldEJsZW5kRnVuYyh0aGlzLmdsLlNSQ19BTFBIQSx0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpKTtjb25zdCB1PXQuY3JlYXRlU2hhZGVyKHQuVkVSVEVYX1NIQURFUik7dC5zaGFkZXJTb3VyY2UodSxlKSx0LmNvbXBpbGVTaGFkZXIodSksXCJcIiE9PXQuZ2V0U2hhZGVySW5mb0xvZyh1KSYmY29uc29sZS53YXJuKGAke3QuZ2V0U2hhZGVySW5mb0xvZyh1KX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHt3KGUpfWApO2NvbnN0IGM9dC5jcmVhdGVTaGFkZXIodC5GUkFHTUVOVF9TSEFERVIpO2lmKHQuc2hhZGVyU291cmNlKGMsaSksdC5jb21waWxlU2hhZGVyKGMpLFwiXCIhPT10LmdldFNoYWRlckluZm9Mb2coYykmJmNvbnNvbGUud2FybihgJHt0LmdldFNoYWRlckluZm9Mb2coYyl9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHt3KGkpfWApLHRoaXMucHJvZ3JhbT10LmNyZWF0ZVByb2dyYW0oKSx0LmF0dGFjaFNoYWRlcih0aGlzLnByb2dyYW0sdSksdC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLGMpLHQubGlua1Byb2dyYW0odGhpcy5wcm9ncmFtKSwhdC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSx0LkxJTktfU1RBVFVTKSlyZXR1cm4gY29uc29sZS53YXJuKHQuZ2V0UHJvZ3JhbUluZm9Mb2codGhpcy5wcm9ncmFtKSk7dC5kZWxldGVTaGFkZXIodSksdC5kZWxldGVTaGFkZXIoYyksdGhpcy51bmlmb3JtTG9jYXRpb25zPW5ldyBNYXA7bGV0IGQ9dC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSx0LkFDVElWRV9VTklGT1JNUyk7Zm9yKGxldCBlPTA7ZTxkO2UrKyl7bGV0IGk9dC5nZXRBY3RpdmVVbmlmb3JtKHRoaXMucHJvZ3JhbSxlKTt0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGksdC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLGkubmFtZSkpO2NvbnN0IHI9aS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7aS51bmlmb3JtTmFtZT1yWzBdLDM9PT1yLmxlbmd0aD8oaS5pc1N0cnVjdEFycmF5PSEwLGkuc3RydWN0SW5kZXg9TnVtYmVyKHJbMV0pLGkuc3RydWN0UHJvcGVydHk9clsyXSk6Mj09PXIubGVuZ3RoJiZpc05hTihOdW1iZXIoclsxXSkpJiYoaS5pc1N0cnVjdD0hMCxpLnN0cnVjdFByb3BlcnR5PXJbMV0pfXRoaXMuYXR0cmlidXRlTG9jYXRpb25zPW5ldyBNYXA7Y29uc3QgZz1bXSxtPXQuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sdC5BQ1RJVkVfQVRUUklCVVRFUyk7Zm9yKGxldCBlPTA7ZTxtO2UrKyl7Y29uc3QgaT10LmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sZSkscj10LmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSxpLm5hbWUpO2dbcl09aS5uYW1lLHRoaXMuYXR0cmlidXRlTG9jYXRpb25zLnNldChpLm5hbWUscil9dGhpcy5hdHRyaWJ1dGVPcmRlcj1nLmpvaW4oXCJcIil9c2V0QmxlbmRGdW5jKHQsZSxpLHIpe3RoaXMuYmxlbmRGdW5jLnNyYz10LHRoaXMuYmxlbmRGdW5jLmRzdD1lLHRoaXMuYmxlbmRGdW5jLnNyY0FscGhhPWksdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGE9cix0JiYodGhpcy50cmFuc3BhcmVudD0hMCl9c2V0QmxlbmRFcXVhdGlvbih0LGUpe3RoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCPXQsdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYT1lfWFwcGx5U3RhdGUoKXt0aGlzLmRlcHRoVGVzdD90aGlzLmdsLnJlbmRlcmVyLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpOnRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpLHRoaXMuY3VsbEZhY2U/dGhpcy5nbC5yZW5kZXJlci5lbmFibGUodGhpcy5nbC5DVUxMX0ZBQ0UpOnRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSksdGhpcy5ibGVuZEZ1bmMuc3JjP3RoaXMuZ2wucmVuZGVyZXIuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpOnRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkJMRU5EKSx0aGlzLmN1bGxGYWNlJiZ0aGlzLmdsLnJlbmRlcmVyLnNldEN1bGxGYWNlKHRoaXMuY3VsbEZhY2UpLHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlKSx0aGlzLmdsLnJlbmRlcmVyLnNldERlcHRoTWFzayh0aGlzLmRlcHRoV3JpdGUpLHRoaXMuZ2wucmVuZGVyZXIuc2V0RGVwdGhGdW5jKHRoaXMuZGVwdGhGdW5jKSx0aGlzLmJsZW5kRnVuYy5zcmMmJnRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRGdW5jKHRoaXMuYmxlbmRGdW5jLnNyYyx0aGlzLmJsZW5kRnVuYy5kc3QsdGhpcy5ibGVuZEZ1bmMuc3JjQWxwaGEsdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEpLHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlUkdCJiZ0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRXF1YXRpb24odGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IsdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSl9dXNlKHtmbGlwRmFjZXM6dD0hMX09e30pe2xldCBlPS0xO3RoaXMuZ2wucmVuZGVyZXIuY3VycmVudFByb2dyYW09PT10aGlzLmlkfHwodGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSksdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50UHJvZ3JhbT10aGlzLmlkKSx0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuZm9yRWFjaCgodCxpKT0+e2xldCByPWkudW5pZm9ybU5hbWUscz10aGlzLnVuaWZvcm1zW3JdO2lmKGkuaXNTdHJ1Y3QmJihzPXNbaS5zdHJ1Y3RQcm9wZXJ0eV0scis9YC4ke2kuc3RydWN0UHJvcGVydHl9YCksaS5pc1N0cnVjdEFycmF5JiYocz1zW2kuc3RydWN0SW5kZXhdW2kuc3RydWN0UHJvcGVydHldLHIrPWBbJHtpLnN0cnVjdEluZGV4fV0uJHtpLnN0cnVjdFByb3BlcnR5fWApLCFzKXJldHVybiBNKGBBY3RpdmUgdW5pZm9ybSAke3J9IGhhcyBub3QgYmVlbiBzdXBwbGllZGApO2lmKHMmJnZvaWQgMD09PXMudmFsdWUpcmV0dXJuIE0oYCR7cn0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7aWYocy52YWx1ZS50ZXh0dXJlKXJldHVybiBlKz0xLHMudmFsdWUudXBkYXRlKGUpLHgodGhpcy5nbCxpLnR5cGUsdCxlKTtpZihzLnZhbHVlLmxlbmd0aCYmcy52YWx1ZVswXS50ZXh0dXJlKXtjb25zdCByPVtdO3JldHVybiBzLnZhbHVlLmZvckVhY2godD0+e2UrPTEsdC51cGRhdGUoZSksci5wdXNoKGUpfSkseCh0aGlzLmdsLGkudHlwZSx0LHIpfXgodGhpcy5nbCxpLnR5cGUsdCxzLnZhbHVlKX0pLHRoaXMuYXBwbHlTdGF0ZSgpLHQmJnRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlPT09dGhpcy5nbC5DQ1c/dGhpcy5nbC5DVzp0aGlzLmdsLkNDVyl9cmVtb3ZlKCl7dGhpcy5nbC5kZWxldGVQcm9ncmFtKHRoaXMucHJvZ3JhbSl9fWZ1bmN0aW9uIHgodCxlLGkscil7cj1yLmxlbmd0aD9mdW5jdGlvbih0KXtjb25zdCBlPXQubGVuZ3RoLGk9dFswXS5sZW5ndGg7aWYodm9pZCAwPT09aSlyZXR1cm4gdDtjb25zdCByPWUqaTtsZXQgcz1tW3JdO3N8fChtW3JdPXM9bmV3IEZsb2F0MzJBcnJheShyKSk7Zm9yKGxldCByPTA7cjxlO3IrKylzLnNldCh0W3JdLHIqaSk7cmV0dXJuIHN9KHIpOnI7Y29uc3Qgcz10LnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGkpO2lmKHIubGVuZ3RoKWlmKHZvaWQgMD09PXMpdC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChpLHIuc2xpY2UoMCkpO2Vsc2V7aWYoZnVuY3Rpb24odCxlKXtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgaT0wLHI9dC5sZW5ndGg7aTxyO2krKylpZih0W2ldIT09ZVtpXSlyZXR1cm4hMTtyZXR1cm4hMH0ocyxyKSlyZXR1cm47cy5zZXQociksdC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChpLHMpfWVsc2V7aWYocz09PXIpcmV0dXJuO3QucmVuZGVyZXIuc3RhdGUudW5pZm9ybUxvY2F0aW9ucy5zZXQoaSxyKX1zd2l0Y2goZSl7Y2FzZSA1MTI2OnJldHVybiByLmxlbmd0aD90LnVuaWZvcm0xZnYoaSxyKTp0LnVuaWZvcm0xZihpLHIpO2Nhc2UgMzU2NjQ6cmV0dXJuIHQudW5pZm9ybTJmdihpLHIpO2Nhc2UgMzU2NjU6cmV0dXJuIHQudW5pZm9ybTNmdihpLHIpO2Nhc2UgMzU2NjY6cmV0dXJuIHQudW5pZm9ybTRmdihpLHIpO2Nhc2UgMzU2NzA6Y2FzZSA1MTI0OmNhc2UgMzU2Nzg6Y2FzZSAzNTY4MDpyZXR1cm4gci5sZW5ndGg/dC51bmlmb3JtMWl2KGkscik6dC51bmlmb3JtMWkoaSxyKTtjYXNlIDM1NjcxOmNhc2UgMzU2Njc6cmV0dXJuIHQudW5pZm9ybTJpdihpLHIpO2Nhc2UgMzU2NzI6Y2FzZSAzNTY2ODpyZXR1cm4gdC51bmlmb3JtM2l2KGkscik7Y2FzZSAzNTY3MzpjYXNlIDM1NjY5OnJldHVybiB0LnVuaWZvcm00aXYoaSxyKTtjYXNlIDM1Njc0OnJldHVybiB0LnVuaWZvcm1NYXRyaXgyZnYoaSwhMSxyKTtjYXNlIDM1Njc1OnJldHVybiB0LnVuaWZvcm1NYXRyaXgzZnYoaSwhMSxyKTtjYXNlIDM1Njc2OnJldHVybiB0LnVuaWZvcm1NYXRyaXg0ZnYoaSwhMSxyKX19ZnVuY3Rpb24gdyh0KXtsZXQgZT10LnNwbGl0KFwiXFxuXCIpO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF09dCsxK1wiOiBcIitlW3RdO3JldHVybiBlLmpvaW4oXCJcXG5cIil9bGV0IGI9MDtmdW5jdGlvbiBNKHQpe2I+MTAwfHwoY29uc29sZS53YXJuKHQpLCsrYj4xMDAmJmNvbnNvbGUud2FybihcIk1vcmUgdGhhbiAxMDAgcHJvZ3JhbSB3YXJuaW5ncyAtIHN0b3BwaW5nIGxvZ3MuXCIpKX1jb25zdCB2PW5ldyBsO2Z1bmN0aW9uIEEodCxlKXtyZXR1cm4gdFswXT1lWzBdLHRbMV09ZVsxXSx0WzJdPWVbMl0sdFszXT1lWzNdLHR9ZnVuY3Rpb24gRSh0LGUsaSxyLHMpe3JldHVybiB0WzBdPWUsdFsxXT1pLHRbMl09cix0WzNdPXMsdH1mdW5jdGlvbiB5KHQsZSl7bGV0IGk9ZVswXSxyPWVbMV0scz1lWzJdLG49ZVszXSxhPWkqaStyKnIrcypzK24qbjtyZXR1cm4gYT4wJiYoYT0xL01hdGguc3FydChhKSksdFswXT1pKmEsdFsxXT1yKmEsdFsyXT1zKmEsdFszXT1uKmEsdH1mdW5jdGlvbiBGKHQsZSxpKXtsZXQgcj1lWzBdLHM9ZVsxXSxuPWVbMl0sYT1lWzNdLGg9aVswXSxvPWlbMV0sbD1pWzJdLHU9aVszXTtyZXR1cm4gdFswXT1yKnUrYSpoK3MqbC1uKm8sdFsxXT1zKnUrYSpvK24qaC1yKmwsdFsyXT1uKnUrYSpsK3Iqby1zKmgsdFszXT1hKnUtcipoLXMqby1uKmwsdH1jb25zdCBUPUEsXz1FLFI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXSplWzBdK3RbMV0qZVsxXSt0WzJdKmVbMl0rdFszXSplWzNdfSxTPXk7Y2xhc3MgTiBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKHQ9MCxlPTAsaT0wLHI9MSl7cmV0dXJuIHN1cGVyKHQsZSxpLHIpLHRoaXMub25DaGFuZ2U9KCgpPT57fSksdGhpc31nZXQgeCgpe3JldHVybiB0aGlzWzBdfXNldCB4KHQpe3RoaXNbMF09dCx0aGlzLm9uQ2hhbmdlKCl9Z2V0IHkoKXtyZXR1cm4gdGhpc1sxXX1zZXQgeSh0KXt0aGlzWzFdPXQsdGhpcy5vbkNoYW5nZSgpfWdldCB6KCl7cmV0dXJuIHRoaXNbMl19c2V0IHoodCl7dGhpc1syXT10LHRoaXMub25DaGFuZ2UoKX1nZXQgdygpe3JldHVybiB0aGlzWzNdfXNldCB3KHQpe3RoaXNbM109dCx0aGlzLm9uQ2hhbmdlKCl9aWRlbnRpdHkoKXt2YXIgdDtyZXR1cm4odD10aGlzKVswXT0wLHRbMV09MCx0WzJdPTAsdFszXT0xLHRoaXMub25DaGFuZ2UoKSx0aGlzfXNldCh0LGUsaSxyKXtyZXR1cm4gdC5sZW5ndGg/dGhpcy5jb3B5KHQpOihfKHRoaXMsdCxlLGksciksdGhpcy5vbkNoYW5nZSgpLHRoaXMpfXJvdGF0ZVgodCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXtpKj0uNTtsZXQgcj1lWzBdLHM9ZVsxXSxuPWVbMl0sYT1lWzNdLGg9TWF0aC5zaW4oaSksbz1NYXRoLmNvcyhpKTt0WzBdPXIqbythKmgsdFsxXT1zKm8rbipoLHRbMl09bipvLXMqaCx0WzNdPWEqby1yKmh9KHRoaXMsdGhpcyx0KSx0aGlzLm9uQ2hhbmdlKCksdGhpc31yb3RhdGVZKHQpe3JldHVybiBmdW5jdGlvbih0LGUsaSl7aSo9LjU7bGV0IHI9ZVswXSxzPWVbMV0sbj1lWzJdLGE9ZVszXSxoPU1hdGguc2luKGkpLG89TWF0aC5jb3MoaSk7dFswXT1yKm8tbipoLHRbMV09cypvK2EqaCx0WzJdPW4qbytyKmgsdFszXT1hKm8tcypofSh0aGlzLHRoaXMsdCksdGhpcy5vbkNoYW5nZSgpLHRoaXN9cm90YXRlWih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2kqPS41O2xldCByPWVbMF0scz1lWzFdLG49ZVsyXSxhPWVbM10saD1NYXRoLnNpbihpKSxvPU1hdGguY29zKGkpO3RbMF09cipvK3MqaCx0WzFdPXMqby1yKmgsdFsyXT1uKm8rYSpoLHRbM109YSpvLW4qaH0odGhpcyx0aGlzLHQpLHRoaXMub25DaGFuZ2UoKSx0aGlzfWludmVyc2UodD10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtsZXQgaT1lWzBdLHI9ZVsxXSxzPWVbMl0sbj1lWzNdLGE9aSppK3IqcitzKnMrbipuLGg9YT8xL2E6MDt0WzBdPS1pKmgsdFsxXT0tcipoLHRbMl09LXMqaCx0WzNdPW4qaH0odGhpcyx0KSx0aGlzLm9uQ2hhbmdlKCksdGhpc31jb25qdWdhdGUodD10aGlzKXt2YXIgZSxpO3JldHVybiBpPXQsKGU9dGhpcylbMF09LWlbMF0sZVsxXT0taVsxXSxlWzJdPS1pWzJdLGVbM109aVszXSx0aGlzLm9uQ2hhbmdlKCksdGhpc31jb3B5KHQpe3JldHVybiBUKHRoaXMsdCksdGhpcy5vbkNoYW5nZSgpLHRoaXN9bm9ybWFsaXplKHQ9dGhpcyl7cmV0dXJuIFModGhpcyx0KSx0aGlzLm9uQ2hhbmdlKCksdGhpc31tdWx0aXBseSh0LGUpe3JldHVybiBlP0YodGhpcyx0LGUpOkYodGhpcyx0aGlzLHQpLHRoaXMub25DaGFuZ2UoKSx0aGlzfWRvdCh0KXtyZXR1cm4gUih0aGlzLHQpfWZyb21NYXRyaXgzKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe2xldCBpLHI9ZVswXStlWzRdK2VbOF07aWYocj4wKWk9TWF0aC5zcXJ0KHIrMSksdFszXT0uNSppLGk9LjUvaSx0WzBdPShlWzVdLWVbN10pKmksdFsxXT0oZVs2XS1lWzJdKSppLHRbMl09KGVbMV0tZVszXSkqaTtlbHNle2xldCByPTA7ZVs0XT5lWzBdJiYocj0xKSxlWzhdPmVbMypyK3JdJiYocj0yKTtsZXQgcz0ocisxKSUzLG49KHIrMiklMztpPU1hdGguc3FydChlWzMqcityXS1lWzMqcytzXS1lWzMqbituXSsxKSx0W3JdPS41KmksaT0uNS9pLHRbM109KGVbMypzK25dLWVbMypuK3NdKSppLHRbc109KGVbMypzK3JdK2VbMypyK3NdKSppLHRbbl09KGVbMypuK3JdK2VbMypyK25dKSppfX0odGhpcyx0KSx0aGlzLm9uQ2hhbmdlKCksdGhpc31mcm9tRXVsZXIodCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpPVwiWVhaXCIpe2xldCByPU1hdGguc2luKC41KmVbMF0pLHM9TWF0aC5jb3MoLjUqZVswXSksbj1NYXRoLnNpbiguNSplWzFdKSxhPU1hdGguY29zKC41KmVbMV0pLGg9TWF0aC5zaW4oLjUqZVsyXSksbz1NYXRoLmNvcyguNSplWzJdKTtcIlhZWlwiPT09aT8odFswXT1yKmEqbytzKm4qaCx0WzFdPXMqbipvLXIqYSpoLHRbMl09cyphKmgrcipuKm8sdFszXT1zKmEqby1yKm4qaCk6XCJZWFpcIj09PWk/KHRbMF09ciphKm8rcypuKmgsdFsxXT1zKm4qby1yKmEqaCx0WzJdPXMqYSpoLXIqbipvLHRbM109cyphKm8rcipuKmgpOlwiWlhZXCI9PT1pPyh0WzBdPXIqYSpvLXMqbipoLHRbMV09cypuKm8rciphKmgsdFsyXT1zKmEqaCtyKm4qbyx0WzNdPXMqYSpvLXIqbipoKTpcIlpZWFwiPT09aT8odFswXT1yKmEqby1zKm4qaCx0WzFdPXMqbipvK3IqYSpoLHRbMl09cyphKmgtcipuKm8sdFszXT1zKmEqbytyKm4qaCk6XCJZWlhcIj09PWk/KHRbMF09ciphKm8rcypuKmgsdFsxXT1zKm4qbytyKmEqaCx0WzJdPXMqYSpoLXIqbipvLHRbM109cyphKm8tcipuKmgpOlwiWFpZXCI9PT1pJiYodFswXT1yKmEqby1zKm4qaCx0WzFdPXMqbipvLXIqYSpoLHRbMl09cyphKmgrcipuKm8sdFszXT1zKmEqbytyKm4qaCl9KHRoaXMsdCx0Lm9yZGVyKSx0aGlzfWZyb21BeGlzQW5nbGUodCxlKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2kqPS41O2xldCByPU1hdGguc2luKGkpO3RbMF09ciplWzBdLHRbMV09ciplWzFdLHRbMl09ciplWzJdLHRbM109TWF0aC5jb3MoaSl9KHRoaXMsdCxlKSx0aGlzfXNsZXJwKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpLHIpe2xldCBzLG4sYSxoLG8sbD1lWzBdLHU9ZVsxXSxjPWVbMl0sZD1lWzNdLGc9aVswXSxwPWlbMV0sbT1pWzJdLGY9aVszXTsobj1sKmcrdSpwK2MqbStkKmYpPDAmJihuPS1uLGc9LWcscD0tcCxtPS1tLGY9LWYpLDEtbj4xZS02PyhzPU1hdGguYWNvcyhuKSxhPU1hdGguc2luKHMpLGg9TWF0aC5zaW4oKDEtcikqcykvYSxvPU1hdGguc2luKHIqcykvYSk6KGg9MS1yLG89ciksdFswXT1oKmwrbypnLHRbMV09aCp1K28qcCx0WzJdPWgqYytvKm0sdFszXT1oKmQrbypmfSh0aGlzLHRoaXMsdCxlKSx0aGlzfWZyb21BcnJheSh0LGU9MCl7cmV0dXJuIHRoaXNbMF09dFtlXSx0aGlzWzFdPXRbZSsxXSx0aGlzWzJdPXRbZSsyXSx0aGlzWzNdPXRbZSszXSx0aGlzfXRvQXJyYXkodD1bXSxlPTApe3JldHVybiB0W2VdPXRoaXNbMF0sdFtlKzFdPXRoaXNbMV0sdFtlKzJdPXRoaXNbMl0sdFtlKzNdPXRoaXNbM10sdH19ZnVuY3Rpb24gTCh0LGUsaSl7bGV0IHI9ZVswXSxzPWVbMV0sbj1lWzJdLGE9ZVszXSxoPWVbNF0sbz1lWzVdLGw9ZVs2XSx1PWVbN10sYz1lWzhdLGQ9ZVs5XSxnPWVbMTBdLHA9ZVsxMV0sbT1lWzEyXSxmPWVbMTNdLHg9ZVsxNF0sdz1lWzE1XSxiPWlbMF0sTT1pWzFdLHY9aVsyXSxBPWlbM107cmV0dXJuIHRbMF09YipyK00qaCt2KmMrQSptLHRbMV09YipzK00qbyt2KmQrQSpmLHRbMl09YipuK00qbCt2KmcrQSp4LHRbM109YiphK00qdSt2KnArQSp3LGI9aVs0XSxNPWlbNV0sdj1pWzZdLEE9aVs3XSx0WzRdPWIqcitNKmgrdipjK0EqbSx0WzVdPWIqcytNKm8rdipkK0EqZix0WzZdPWIqbitNKmwrdipnK0EqeCx0WzddPWIqYStNKnUrdipwK0EqdyxiPWlbOF0sTT1pWzldLHY9aVsxMF0sQT1pWzExXSx0WzhdPWIqcitNKmgrdipjK0EqbSx0WzldPWIqcytNKm8rdipkK0EqZix0WzEwXT1iKm4rTSpsK3YqZytBKngsdFsxMV09YiphK00qdSt2KnArQSp3LGI9aVsxMl0sTT1pWzEzXSx2PWlbMTRdLEE9aVsxNV0sdFsxMl09YipyK00qaCt2KmMrQSptLHRbMTNdPWIqcytNKm8rdipkK0EqZix0WzE0XT1iKm4rTSpsK3YqZytBKngsdFsxNV09YiphK00qdSt2KnArQSp3LHR9Y2xhc3MgUCBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKHQ9MSxlPTAsaT0wLHI9MCxzPTAsbj0xLGE9MCxoPTAsbz0wLGw9MCx1PTEsYz0wLGQ9MCxnPTAscD0wLG09MSl7cmV0dXJuIHN1cGVyKHQsZSxpLHIscyxuLGEsaCxvLGwsdSxjLGQsZyxwLG0pLHRoaXN9c2V0IHgodCl7dGhpc1sxMl09dH1nZXQgeCgpe3JldHVybiB0aGlzWzEyXX1zZXQgeSh0KXt0aGlzWzEzXT10fWdldCB5KCl7cmV0dXJuIHRoaXNbMTNdfXNldCB6KHQpe3RoaXNbMTRdPXR9Z2V0IHooKXtyZXR1cm4gdGhpc1sxNF19c2V0IHcodCl7dGhpc1sxNV09dH1nZXQgdygpe3JldHVybiB0aGlzWzE1XX1zZXQodCxlLGkscixzLG4sYSxoLG8sbCx1LGMsZCxnLHAsbSl7cmV0dXJuIHQubGVuZ3RoP3RoaXMuY29weSh0KTooZnVuY3Rpb24odCxlLGkscixzLG4sYSxoLG8sbCx1LGMsZCxnLHAsbSxmKXt0WzBdPWUsdFsxXT1pLHRbMl09cix0WzNdPXMsdFs0XT1uLHRbNV09YSx0WzZdPWgsdFs3XT1vLHRbOF09bCx0WzldPXUsdFsxMF09Yyx0WzExXT1kLHRbMTJdPWcsdFsxM109cCx0WzE0XT1tLHRbMTVdPWZ9KHRoaXMsdCxlLGkscixzLG4sYSxoLG8sbCx1LGMsZCxnLHAsbSksdGhpcyl9dHJhbnNsYXRlKHQsZT10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2xldCByLHMsbixhLGgsbyxsLHUsYyxkLGcscCxtPWlbMF0sZj1pWzFdLHg9aVsyXTtlPT09dD8odFsxMl09ZVswXSptK2VbNF0qZitlWzhdKngrZVsxMl0sdFsxM109ZVsxXSptK2VbNV0qZitlWzldKngrZVsxM10sdFsxNF09ZVsyXSptK2VbNl0qZitlWzEwXSp4K2VbMTRdLHRbMTVdPWVbM10qbStlWzddKmYrZVsxMV0qeCtlWzE1XSk6KHI9ZVswXSxzPWVbMV0sbj1lWzJdLGE9ZVszXSxoPWVbNF0sbz1lWzVdLGw9ZVs2XSx1PWVbN10sYz1lWzhdLGQ9ZVs5XSxnPWVbMTBdLHA9ZVsxMV0sdFswXT1yLHRbMV09cyx0WzJdPW4sdFszXT1hLHRbNF09aCx0WzVdPW8sdFs2XT1sLHRbN109dSx0WzhdPWMsdFs5XT1kLHRbMTBdPWcsdFsxMV09cCx0WzEyXT1yKm0raCpmK2MqeCtlWzEyXSx0WzEzXT1zKm0rbypmK2QqeCtlWzEzXSx0WzE0XT1uKm0rbCpmK2cqeCtlWzE0XSx0WzE1XT1hKm0rdSpmK3AqeCtlWzE1XSl9KHRoaXMsZSx0KSx0aGlzfXJvdGF0ZVgodCxlPXRoaXMpe3JldHVybiBmdW5jdGlvbih0LGUsaSl7bGV0IHI9TWF0aC5zaW4oaSkscz1NYXRoLmNvcyhpKSxuPWVbNF0sYT1lWzVdLGg9ZVs2XSxvPWVbN10sbD1lWzhdLHU9ZVs5XSxjPWVbMTBdLGQ9ZVsxMV07ZSE9PXQmJih0WzBdPWVbMF0sdFsxXT1lWzFdLHRbMl09ZVsyXSx0WzNdPWVbM10sdFsxMl09ZVsxMl0sdFsxM109ZVsxM10sdFsxNF09ZVsxNF0sdFsxNV09ZVsxNV0pLHRbNF09bipzK2wqcix0WzVdPWEqcyt1KnIsdFs2XT1oKnMrYypyLHRbN109bypzK2Qqcix0WzhdPWwqcy1uKnIsdFs5XT11KnMtYSpyLHRbMTBdPWMqcy1oKnIsdFsxMV09ZCpzLW8qcn0odGhpcyxlLHQpLHRoaXN9cm90YXRlWSh0LGU9dGhpcyl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXtsZXQgcj1NYXRoLnNpbihpKSxzPU1hdGguY29zKGkpLG49ZVswXSxhPWVbMV0saD1lWzJdLG89ZVszXSxsPWVbOF0sdT1lWzldLGM9ZVsxMF0sZD1lWzExXTtlIT09dCYmKHRbNF09ZVs0XSx0WzVdPWVbNV0sdFs2XT1lWzZdLHRbN109ZVs3XSx0WzEyXT1lWzEyXSx0WzEzXT1lWzEzXSx0WzE0XT1lWzE0XSx0WzE1XT1lWzE1XSksdFswXT1uKnMtbCpyLHRbMV09YSpzLXUqcix0WzJdPWgqcy1jKnIsdFszXT1vKnMtZCpyLHRbOF09bipyK2wqcyx0WzldPWEqcit1KnMsdFsxMF09aCpyK2Mqcyx0WzExXT1vKnIrZCpzfSh0aGlzLGUsdCksdGhpc31yb3RhdGVaKHQsZT10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2xldCByPU1hdGguc2luKGkpLHM9TWF0aC5jb3MoaSksbj1lWzBdLGE9ZVsxXSxoPWVbMl0sbz1lWzNdLGw9ZVs0XSx1PWVbNV0sYz1lWzZdLGQ9ZVs3XTtlIT09dCYmKHRbOF09ZVs4XSx0WzldPWVbOV0sdFsxMF09ZVsxMF0sdFsxMV09ZVsxMV0sdFsxMl09ZVsxMl0sdFsxM109ZVsxM10sdFsxNF09ZVsxNF0sdFsxNV09ZVsxNV0pLHRbMF09bipzK2wqcix0WzFdPWEqcyt1KnIsdFsyXT1oKnMrYypyLHRbM109bypzK2Qqcix0WzRdPWwqcy1uKnIsdFs1XT11KnMtYSpyLHRbNl09YypzLWgqcix0WzddPWQqcy1vKnJ9KHRoaXMsZSx0KSx0aGlzfXNjYWxlKHQsZT10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2xldCByPWlbMF0scz1pWzFdLG49aVsyXTt0WzBdPWVbMF0qcix0WzFdPWVbMV0qcix0WzJdPWVbMl0qcix0WzNdPWVbM10qcix0WzRdPWVbNF0qcyx0WzVdPWVbNV0qcyx0WzZdPWVbNl0qcyx0WzddPWVbN10qcyx0WzhdPWVbOF0qbix0WzldPWVbOV0qbix0WzEwXT1lWzEwXSpuLHRbMTFdPWVbMTFdKm4sdFsxMl09ZVsxMl0sdFsxM109ZVsxM10sdFsxNF09ZVsxNF0sdFsxNV09ZVsxNV19KHRoaXMsZSxcIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOnQpLHRoaXN9bXVsdGlwbHkodCxlKXtyZXR1cm4gZT9MKHRoaXMsdCxlKTpMKHRoaXMsdGhpcyx0KSx0aGlzfWlkZW50aXR5KCl7dmFyIHQ7cmV0dXJuKHQ9dGhpcylbMF09MSx0WzFdPTAsdFsyXT0wLHRbM109MCx0WzRdPTAsdFs1XT0xLHRbNl09MCx0WzddPTAsdFs4XT0wLHRbOV09MCx0WzEwXT0xLHRbMTFdPTAsdFsxMl09MCx0WzEzXT0wLHRbMTRdPTAsdFsxNV09MSx0aGlzfWNvcHkodCl7dmFyIGUsaTtyZXR1cm4gaT10LChlPXRoaXMpWzBdPWlbMF0sZVsxXT1pWzFdLGVbMl09aVsyXSxlWzNdPWlbM10sZVs0XT1pWzRdLGVbNV09aVs1XSxlWzZdPWlbNl0sZVs3XT1pWzddLGVbOF09aVs4XSxlWzldPWlbOV0sZVsxMF09aVsxMF0sZVsxMV09aVsxMV0sZVsxMl09aVsxMl0sZVsxM109aVsxM10sZVsxNF09aVsxNF0sZVsxNV09aVsxNV0sdGhpc31mcm9tUGVyc3BlY3RpdmUoe2Zvdjp0LGFzcGVjdDplLG5lYXI6aSxmYXI6cn09e30pe3JldHVybiBmdW5jdGlvbih0LGUsaSxyLHMpe2xldCBuPTEvTWF0aC50YW4oZS8yKSxhPTEvKHItcyk7dFswXT1uL2ksdFsxXT0wLHRbMl09MCx0WzNdPTAsdFs0XT0wLHRbNV09bix0WzZdPTAsdFs3XT0wLHRbOF09MCx0WzldPTAsdFsxMF09KHMrcikqYSx0WzExXT0tMSx0WzEyXT0wLHRbMTNdPTAsdFsxNF09MipzKnIqYSx0WzE1XT0wfSh0aGlzLHQsZSxpLHIpLHRoaXN9ZnJvbU9ydGhvZ29uYWwoe2xlZnQ6dCxyaWdodDplLGJvdHRvbTppLHRvcDpyLG5lYXI6cyxmYXI6bn0pe3JldHVybiBmdW5jdGlvbih0LGUsaSxyLHMsbixhKXtsZXQgaD0xLyhlLWkpLG89MS8oci1zKSxsPTEvKG4tYSk7dFswXT0tMipoLHRbMV09MCx0WzJdPTAsdFszXT0wLHRbNF09MCx0WzVdPS0yKm8sdFs2XT0wLHRbN109MCx0WzhdPTAsdFs5XT0wLHRbMTBdPTIqbCx0WzExXT0wLHRbMTJdPShlK2kpKmgsdFsxM109KHMrcikqbyx0WzE0XT0oYStuKSpsLHRbMTVdPTF9KHRoaXMsdCxlLGkscixzLG4pLHRoaXN9ZnJvbVF1YXRlcm5pb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7bGV0IGk9ZVswXSxyPWVbMV0scz1lWzJdLG49ZVszXSxhPWkraSxoPXIrcixvPXMrcyxsPWkqYSx1PXIqYSxjPXIqaCxkPXMqYSxnPXMqaCxwPXMqbyxtPW4qYSxmPW4qaCx4PW4qbzt0WzBdPTEtYy1wLHRbMV09dSt4LHRbMl09ZC1mLHRbM109MCx0WzRdPXUteCx0WzVdPTEtbC1wLHRbNl09ZyttLHRbN109MCx0WzhdPWQrZix0WzldPWctbSx0WzEwXT0xLWwtYyx0WzExXT0wLHRbMTJdPTAsdFsxM109MCx0WzE0XT0wLHRbMTVdPTF9KHRoaXMsdCksdGhpc31zZXRQb3NpdGlvbih0KXtyZXR1cm4gdGhpcy54PXRbMF0sdGhpcy55PXRbMV0sdGhpcy56PXRbMl0sdGhpc31pbnZlcnNlKHQ9dGhpcyl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7bGV0IGk9ZVswXSxyPWVbMV0scz1lWzJdLG49ZVszXSxhPWVbNF0saD1lWzVdLG89ZVs2XSxsPWVbN10sdT1lWzhdLGM9ZVs5XSxkPWVbMTBdLGc9ZVsxMV0scD1lWzEyXSxtPWVbMTNdLGY9ZVsxNF0seD1lWzE1XSx3PWkqaC1yKmEsYj1pKm8tcyphLE09aSpsLW4qYSx2PXIqby1zKmgsQT1yKmwtbipoLEU9cypsLW4qbyx5PXUqbS1jKnAsRj11KmYtZCpwLFQ9dSp4LWcqcCxfPWMqZi1kKm0sUj1jKngtZyptLFM9ZCp4LWcqZixOPXcqUy1iKlIrTSpfK3YqVC1BKkYrRSp5O04mJihOPTEvTix0WzBdPShoKlMtbypSK2wqXykqTix0WzFdPShzKlItcipTLW4qXykqTix0WzJdPShtKkUtZipBK3gqdikqTix0WzNdPShkKkEtYypFLWcqdikqTix0WzRdPShvKlQtYSpTLWwqRikqTix0WzVdPShpKlMtcypUK24qRikqTix0WzZdPShmKk0tcCpFLXgqYikqTix0WzddPSh1KkUtZCpNK2cqYikqTix0WzhdPShhKlItaCpUK2wqeSkqTix0WzldPShyKlQtaSpSLW4qeSkqTix0WzEwXT0ocCpBLW0qTSt4KncpKk4sdFsxMV09KGMqTS11KkEtZyp3KSpOLHRbMTJdPShoKkYtYSpfLW8qeSkqTix0WzEzXT0oaSpfLXIqRitzKnkpKk4sdFsxNF09KG0qYi1wKnYtZip3KSpOLHRbMTVdPSh1KnYtYypiK2QqdykqTil9KHRoaXMsdCksdGhpc31jb21wb3NlKHQsZSxpKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkscil7bGV0IHM9ZVswXSxuPWVbMV0sYT1lWzJdLGg9ZVszXSxvPXMrcyxsPW4rbix1PWErYSxjPXMqbyxkPXMqbCxnPXMqdSxwPW4qbCxtPW4qdSxmPWEqdSx4PWgqbyx3PWgqbCxiPWgqdSxNPXJbMF0sdj1yWzFdLEE9clsyXTt0WzBdPSgxLShwK2YpKSpNLHRbMV09KGQrYikqTSx0WzJdPShnLXcpKk0sdFszXT0wLHRbNF09KGQtYikqdix0WzVdPSgxLShjK2YpKSp2LHRbNl09KG0reCkqdix0WzddPTAsdFs4XT0oZyt3KSpBLHRbOV09KG0teCkqQSx0WzEwXT0oMS0oYytwKSkqQSx0WzExXT0wLHRbMTJdPWlbMF0sdFsxM109aVsxXSx0WzE0XT1pWzJdLHRbMTVdPTF9KHRoaXMsdCxlLGkpLHRoaXN9Z2V0Um90YXRpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7bGV0IGk9ZVswXStlWzVdK2VbMTBdLHI9MDtpPjA/KHI9MipNYXRoLnNxcnQoaSsxKSx0WzNdPS4yNSpyLHRbMF09KGVbNl0tZVs5XSkvcix0WzFdPShlWzhdLWVbMl0pL3IsdFsyXT0oZVsxXS1lWzRdKS9yKTplWzBdPmVbNV0mJmVbMF0+ZVsxMF0/KHI9MipNYXRoLnNxcnQoMStlWzBdLWVbNV0tZVsxMF0pLHRbM109KGVbNl0tZVs5XSkvcix0WzBdPS4yNSpyLHRbMV09KGVbMV0rZVs0XSkvcix0WzJdPShlWzhdK2VbMl0pL3IpOmVbNV0+ZVsxMF0/KHI9MipNYXRoLnNxcnQoMStlWzVdLWVbMF0tZVsxMF0pLHRbM109KGVbOF0tZVsyXSkvcix0WzBdPShlWzFdK2VbNF0pL3IsdFsxXT0uMjUqcix0WzJdPShlWzZdK2VbOV0pL3IpOihyPTIqTWF0aC5zcXJ0KDErZVsxMF0tZVswXS1lWzVdKSx0WzNdPShlWzFdLWVbNF0pL3IsdFswXT0oZVs4XStlWzJdKS9yLHRbMV09KGVbNl0rZVs5XSkvcix0WzJdPS4yNSpyKX0odCx0aGlzKSx0aGlzfWdldFRyYW5zbGF0aW9uKHQpe3ZhciBlLGk7cmV0dXJuIGk9dGhpcywoZT10KVswXT1pWzEyXSxlWzFdPWlbMTNdLGVbMl09aVsxNF0sdGhpc31nZXRTY2FsaW5nKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe2xldCBpPWVbMF0scj1lWzFdLHM9ZVsyXSxuPWVbNF0sYT1lWzVdLGg9ZVs2XSxvPWVbOF0sbD1lWzldLHU9ZVsxMF07dFswXT1NYXRoLnNxcnQoaSppK3IqcitzKnMpLHRbMV09TWF0aC5zcXJ0KG4qbithKmEraCpoKSx0WzJdPU1hdGguc3FydChvKm8rbCpsK3UqdSl9KHQsdGhpcyksdGhpc31nZXRNYXhTY2FsZU9uQXhpcygpe3JldHVybiBmdW5jdGlvbih0KXtsZXQgZT10WzBdLGk9dFsxXSxyPXRbMl0scz10WzRdLG49dFs1XSxhPXRbNl0saD10WzhdLG89dFs5XSxsPXRbMTBdO2NvbnN0IHU9ZSplK2kqaStyKnIsYz1zKnMrbipuK2EqYSxkPWgqaCtvKm8rbCpsO3JldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgodSxjLGQpKX0odGhpcyl9bG9va0F0KHQsZSxpKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkscil7bGV0IHM9ZVswXSxuPWVbMV0sYT1lWzJdLGg9clswXSxvPXJbMV0sbD1yWzJdLHU9cy1pWzBdLGM9bi1pWzFdLGQ9YS1pWzJdLGc9dSp1K2MqYytkKmQ7Zz4wJiYodSo9Zz0xL01hdGguc3FydChnKSxjKj1nLGQqPWcpO2xldCBwPW8qZC1sKmMsbT1sKnUtaCpkLGY9aCpjLW8qdTsoZz1wKnArbSptK2YqZik+MCYmKHAqPWc9MS9NYXRoLnNxcnQoZyksbSo9ZyxmKj1nKSx0WzBdPXAsdFsxXT1tLHRbMl09Zix0WzNdPTAsdFs0XT1jKmYtZCptLHRbNV09ZCpwLXUqZix0WzZdPXUqbS1jKnAsdFs3XT0wLHRbOF09dSx0WzldPWMsdFsxMF09ZCx0WzExXT0wLHRbMTJdPXMsdFsxM109bix0WzE0XT1hLHRbMTVdPTF9KHRoaXMsdCxlLGkpLHRoaXN9ZGV0ZXJtaW5hbnQoKXtyZXR1cm4gZnVuY3Rpb24odCl7bGV0IGU9dFswXSxpPXRbMV0scj10WzJdLHM9dFszXSxuPXRbNF0sYT10WzVdLGg9dFs2XSxvPXRbN10sbD10WzhdLHU9dFs5XSxjPXRbMTBdLGQ9dFsxMV0sZz10WzEyXSxwPXRbMTNdLG09dFsxNF0sZj10WzE1XTtyZXR1cm4oZSphLWkqbikqKGMqZi1kKm0pLShlKmgtcipuKSoodSpmLWQqcCkrKGUqby1zKm4pKih1Km0tYypwKSsoaSpoLXIqYSkqKGwqZi1kKmcpLShpKm8tcyphKSoobCptLWMqZykrKHIqby1zKmgpKihsKnAtdSpnKX0odGhpcyl9fWNvbnN0IE89bmV3IFA7Y2xhc3MgQiBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKHQ9MCxlPXQsaT10LHI9XCJZWFpcIil7cmV0dXJuIHN1cGVyKHQsZSxpKSx0aGlzLm9yZGVyPXIsdGhpcy5vbkNoYW5nZT0oKCk9Pnt9KSx0aGlzfWdldCB4KCl7cmV0dXJuIHRoaXNbMF19c2V0IHgodCl7dGhpc1swXT10LHRoaXMub25DaGFuZ2UoKX1nZXQgeSgpe3JldHVybiB0aGlzWzFdfXNldCB5KHQpe3RoaXNbMV09dCx0aGlzLm9uQ2hhbmdlKCl9Z2V0IHooKXtyZXR1cm4gdGhpc1syXX1zZXQgeih0KXt0aGlzWzJdPXQsdGhpcy5vbkNoYW5nZSgpfXNldCh0LGU9dCxpPXQpe3JldHVybiB0Lmxlbmd0aD90aGlzLmNvcHkodCk6KHRoaXNbMF09dCx0aGlzWzFdPWUsdGhpc1syXT1pLHRoaXMub25DaGFuZ2UoKSx0aGlzKX1jb3B5KHQpe3JldHVybiB0aGlzWzBdPXRbMF0sdGhpc1sxXT10WzFdLHRoaXNbMl09dFsyXSx0aGlzfXJlb3JkZXIodCl7cmV0dXJuIHRoaXMub3JkZXI9dCx0aGlzLm9uQ2hhbmdlKCksdGhpc31mcm9tUm90YXRpb25NYXRyaXgodCxlPXRoaXMub3JkZXIpe3JldHVybiBmdW5jdGlvbih0LGUsaT1cIllYWlwiKXtcIlhZWlwiPT09aT8odFsxXT1NYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgoZVs4XSwtMSksMSkpLE1hdGguYWJzKGVbOF0pPC45OTk5OT8odFswXT1NYXRoLmF0YW4yKC1lWzldLGVbMTBdKSx0WzJdPU1hdGguYXRhbjIoLWVbNF0sZVswXSkpOih0WzBdPU1hdGguYXRhbjIoZVs2XSxlWzVdKSx0WzJdPTApKTpcIllYWlwiPT09aT8odFswXT1NYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KGVbOV0sLTEpLDEpKSxNYXRoLmFicyhlWzldKTwuOTk5OTk/KHRbMV09TWF0aC5hdGFuMihlWzhdLGVbMTBdKSx0WzJdPU1hdGguYXRhbjIoZVsxXSxlWzVdKSk6KHRbMV09TWF0aC5hdGFuMigtZVsyXSxlWzBdKSx0WzJdPTApKTpcIlpYWVwiPT09aT8odFswXT1NYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgoZVs2XSwtMSksMSkpLE1hdGguYWJzKGVbNl0pPC45OTk5OT8odFsxXT1NYXRoLmF0YW4yKC1lWzJdLGVbMTBdKSx0WzJdPU1hdGguYXRhbjIoLWVbNF0sZVs1XSkpOih0WzFdPTAsdFsyXT1NYXRoLmF0YW4yKGVbMV0sZVswXSkpKTpcIlpZWFwiPT09aT8odFsxXT1NYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KGVbMl0sLTEpLDEpKSxNYXRoLmFicyhlWzJdKTwuOTk5OTk/KHRbMF09TWF0aC5hdGFuMihlWzZdLGVbMTBdKSx0WzJdPU1hdGguYXRhbjIoZVsxXSxlWzBdKSk6KHRbMF09MCx0WzJdPU1hdGguYXRhbjIoLWVbNF0sZVs1XSkpKTpcIllaWFwiPT09aT8odFsyXT1NYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgoZVsxXSwtMSksMSkpLE1hdGguYWJzKGVbMV0pPC45OTk5OT8odFswXT1NYXRoLmF0YW4yKC1lWzldLGVbNV0pLHRbMV09TWF0aC5hdGFuMigtZVsyXSxlWzBdKSk6KHRbMF09MCx0WzFdPU1hdGguYXRhbjIoZVs4XSxlWzEwXSkpKTpcIlhaWVwiPT09aSYmKHRbMl09TWF0aC5hc2luKC1NYXRoLm1pbihNYXRoLm1heChlWzRdLC0xKSwxKSksTWF0aC5hYnMoZVs0XSk8Ljk5OTk5Pyh0WzBdPU1hdGguYXRhbjIoZVs2XSxlWzVdKSx0WzFdPU1hdGguYXRhbjIoZVs4XSxlWzBdKSk6KHRbMF09TWF0aC5hdGFuMigtZVs5XSxlWzEwXSksdFsxXT0wKSl9KHRoaXMsdCxlKSx0aGlzfWZyb21RdWF0ZXJuaW9uKHQsZT10aGlzLm9yZGVyKXtyZXR1cm4gTy5mcm9tUXVhdGVybmlvbih0KSx0aGlzLmZyb21Sb3RhdGlvbk1hdHJpeChPLGUpfX1jbGFzcyBDe2NvbnN0cnVjdG9yKCl7dGhpcy5wYXJlbnQ9bnVsbCx0aGlzLmNoaWxkcmVuPVtdLHRoaXMudmlzaWJsZT0hMCx0aGlzLm1hdHJpeD1uZXcgUCx0aGlzLndvcmxkTWF0cml4PW5ldyBQLHRoaXMubWF0cml4QXV0b1VwZGF0ZT0hMCx0aGlzLnBvc2l0aW9uPW5ldyBsLHRoaXMucXVhdGVybmlvbj1uZXcgTix0aGlzLnNjYWxlPW5ldyBsKDEpLHRoaXMucm90YXRpb249bmV3IEIsdGhpcy51cD1uZXcgbCgwLDEsMCksdGhpcy5yb3RhdGlvbi5vbkNoYW5nZT0oKCk9PnRoaXMucXVhdGVybmlvbi5mcm9tRXVsZXIodGhpcy5yb3RhdGlvbikpLHRoaXMucXVhdGVybmlvbi5vbkNoYW5nZT0oKCk9PnRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKSl9c2V0UGFyZW50KHQsZT0hMCl7ZSYmdGhpcy5wYXJlbnQmJnQhPT10aGlzLnBhcmVudCYmdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcywhMSksdGhpcy5wYXJlbnQ9dCxlJiZ0JiZ0LmFkZENoaWxkKHRoaXMsITEpfWFkZENoaWxkKHQsZT0hMCl7fnRoaXMuY2hpbGRyZW4uaW5kZXhPZih0KXx8dGhpcy5jaGlsZHJlbi5wdXNoKHQpLGUmJnQuc2V0UGFyZW50KHRoaXMsITEpfXJlbW92ZUNoaWxkKHQsZT0hMCl7fnRoaXMuY2hpbGRyZW4uaW5kZXhPZih0KSYmdGhpcy5jaGlsZHJlbi5zcGxpY2UodGhpcy5jaGlsZHJlbi5pbmRleE9mKHQpLDEpLGUmJnQuc2V0UGFyZW50KG51bGwsITEpfXVwZGF0ZU1hdHJpeFdvcmxkKHQpe3RoaXMubWF0cml4QXV0b1VwZGF0ZSYmdGhpcy51cGRhdGVNYXRyaXgoKSwodGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlfHx0KSYmKG51bGw9PT10aGlzLnBhcmVudD90aGlzLndvcmxkTWF0cml4LmNvcHkodGhpcy5tYXRyaXgpOnRoaXMud29ybGRNYXRyaXgubXVsdGlwbHkodGhpcy5wYXJlbnQud29ybGRNYXRyaXgsdGhpcy5tYXRyaXgpLHRoaXMud29ybGRNYXRyaXhOZWVkc1VwZGF0ZT0hMSx0PSEwKTtmb3IobGV0IGU9MCxpPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2U8aTtlKyspdGhpcy5jaGlsZHJlbltlXS51cGRhdGVNYXRyaXhXb3JsZCh0KX11cGRhdGVNYXRyaXgoKXt0aGlzLm1hdHJpeC5jb21wb3NlKHRoaXMucXVhdGVybmlvbix0aGlzLnBvc2l0aW9uLHRoaXMuc2NhbGUpLHRoaXMud29ybGRNYXRyaXhOZWVkc1VwZGF0ZT0hMH10cmF2ZXJzZSh0KXtpZighdCh0aGlzKSlmb3IobGV0IGU9MCxpPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2U8aTtlKyspdGhpcy5jaGlsZHJlbltlXS50cmF2ZXJzZSh0KX1kZWNvbXBvc2UoKXt0aGlzLm1hdHJpeC5nZXRUcmFuc2xhdGlvbih0aGlzLnBvc2l0aW9uKSx0aGlzLm1hdHJpeC5nZXRSb3RhdGlvbih0aGlzLnF1YXRlcm5pb24pLHRoaXMubWF0cml4LmdldFNjYWxpbmcodGhpcy5zY2FsZSksdGhpcy5yb3RhdGlvbi5mcm9tUXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pfWxvb2tBdCh0LGU9ITEpe2U/dGhpcy5tYXRyaXgubG9va0F0KHRoaXMucG9zaXRpb24sdCx0aGlzLnVwKTp0aGlzLm1hdHJpeC5sb29rQXQodCx0aGlzLnBvc2l0aW9uLHRoaXMudXApLHRoaXMubWF0cml4LmdldFJvdGF0aW9uKHRoaXMucXVhdGVybmlvbiksdGhpcy5yb3RhdGlvbi5mcm9tUXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pfX1jb25zdCBEPW5ldyBQLFU9bmV3IGwsej1uZXcgbDtmdW5jdGlvbiBJKHQsZSxpKXtsZXQgcj1lWzBdLHM9ZVsxXSxuPWVbMl0sYT1lWzNdLGg9ZVs0XSxvPWVbNV0sbD1lWzZdLHU9ZVs3XSxjPWVbOF0sZD1pWzBdLGc9aVsxXSxwPWlbMl0sbT1pWzNdLGY9aVs0XSx4PWlbNV0sdz1pWzZdLGI9aVs3XSxNPWlbOF07cmV0dXJuIHRbMF09ZCpyK2cqYStwKmwsdFsxXT1kKnMrZypoK3AqdSx0WzJdPWQqbitnKm8rcCpjLHRbM109bSpyK2YqYSt4KmwsdFs0XT1tKnMrZipoK3gqdSx0WzVdPW0qbitmKm8reCpjLHRbNl09dypyK2IqYStNKmwsdFs3XT13KnMrYipoK00qdSx0WzhdPXcqbitiKm8rTSpjLHR9Y2xhc3MgcSBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKHQ9MSxlPTAsaT0wLHI9MCxzPTEsbj0wLGE9MCxoPTAsbz0xKXtyZXR1cm4gc3VwZXIodCxlLGkscixzLG4sYSxoLG8pLHRoaXN9c2V0KHQsZSxpLHIscyxuLGEsaCxvKXtyZXR1cm4gdC5sZW5ndGg/dGhpcy5jb3B5KHQpOihmdW5jdGlvbih0LGUsaSxyLHMsbixhLGgsbyxsKXt0WzBdPWUsdFsxXT1pLHRbMl09cix0WzNdPXMsdFs0XT1uLHRbNV09YSx0WzZdPWgsdFs3XT1vLHRbOF09bH0odGhpcyx0LGUsaSxyLHMsbixhLGgsbyksdGhpcyl9dHJhbnNsYXRlKHQsZT10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlLGkpe2xldCByPWVbMF0scz1lWzFdLG49ZVsyXSxhPWVbM10saD1lWzRdLG89ZVs1XSxsPWVbNl0sdT1lWzddLGM9ZVs4XSxkPWlbMF0sZz1pWzFdO3RbMF09cix0WzFdPXMsdFsyXT1uLHRbM109YSx0WzRdPWgsdFs1XT1vLHRbNl09ZCpyK2cqYStsLHRbN109ZCpzK2cqaCt1LHRbOF09ZCpuK2cqbytjfSh0aGlzLGUsdCksdGhpc31yb3RhdGUodCxlPXRoaXMpe3JldHVybiBmdW5jdGlvbih0LGUsaSl7bGV0IHI9ZVswXSxzPWVbMV0sbj1lWzJdLGE9ZVszXSxoPWVbNF0sbz1lWzVdLGw9ZVs2XSx1PWVbN10sYz1lWzhdLGQ9TWF0aC5zaW4oaSksZz1NYXRoLmNvcyhpKTt0WzBdPWcqcitkKmEsdFsxXT1nKnMrZCpoLHRbMl09ZypuK2Qqbyx0WzNdPWcqYS1kKnIsdFs0XT1nKmgtZCpzLHRbNV09ZypvLWQqbix0WzZdPWwsdFs3XT11LHRbOF09Y30odGhpcyxlLHQpLHRoaXN9c2NhbGUodCxlPXRoaXMpe3JldHVybiBmdW5jdGlvbih0LGUsaSl7bGV0IHI9aVswXSxzPWlbMV07dFswXT1yKmVbMF0sdFsxXT1yKmVbMV0sdFsyXT1yKmVbMl0sdFszXT1zKmVbM10sdFs0XT1zKmVbNF0sdFs1XT1zKmVbNV0sdFs2XT1lWzZdLHRbN109ZVs3XSx0WzhdPWVbOF19KHRoaXMsZSx0KSx0aGlzfW11bHRpcGx5KHQsZSl7cmV0dXJuIGU/SSh0aGlzLHQsZSk6SSh0aGlzLHRoaXMsdCksdGhpc31pZGVudGl0eSgpe3ZhciB0O3JldHVybih0PXRoaXMpWzBdPTEsdFsxXT0wLHRbMl09MCx0WzNdPTAsdFs0XT0xLHRbNV09MCx0WzZdPTAsdFs3XT0wLHRbOF09MSx0aGlzfWNvcHkodCl7dmFyIGUsaTtyZXR1cm4gaT10LChlPXRoaXMpWzBdPWlbMF0sZVsxXT1pWzFdLGVbMl09aVsyXSxlWzNdPWlbM10sZVs0XT1pWzRdLGVbNV09aVs1XSxlWzZdPWlbNl0sZVs3XT1pWzddLGVbOF09aVs4XSx0aGlzfWZyb21NYXRyaXg0KHQpe3ZhciBlLGk7cmV0dXJuIGk9dCwoZT10aGlzKVswXT1pWzBdLGVbMV09aVsxXSxlWzJdPWlbMl0sZVszXT1pWzRdLGVbNF09aVs1XSxlWzVdPWlbNl0sZVs2XT1pWzhdLGVbN109aVs5XSxlWzhdPWlbMTBdLHRoaXN9ZnJvbVF1YXRlcm5pb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7bGV0IGk9ZVswXSxyPWVbMV0scz1lWzJdLG49ZVszXSxhPWkraSxoPXIrcixvPXMrcyxsPWkqYSx1PXIqYSxjPXIqaCxkPXMqYSxnPXMqaCxwPXMqbyxtPW4qYSxmPW4qaCx4PW4qbzt0WzBdPTEtYy1wLHRbM109dS14LHRbNl09ZCtmLHRbMV09dSt4LHRbNF09MS1sLXAsdFs3XT1nLW0sdFsyXT1kLWYsdFs1XT1nK20sdFs4XT0xLWwtY30odGhpcyx0KSx0aGlzfWZyb21CYXNpcyh0LGUsaSl7cmV0dXJuIHRoaXMuc2V0KHRbMF0sdFsxXSx0WzJdLGVbMF0sZVsxXSxlWzJdLGlbMF0saVsxXSxpWzJdKSx0aGlzfWludmVyc2UodD10aGlzKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtsZXQgaT1lWzBdLHI9ZVsxXSxzPWVbMl0sbj1lWzNdLGE9ZVs0XSxoPWVbNV0sbz1lWzZdLGw9ZVs3XSx1PWVbOF0sYz11KmEtaCpsLGQ9LXUqbitoKm8sZz1sKm4tYSpvLHA9aSpjK3IqZCtzKmc7cCYmKHA9MS9wLHRbMF09YypwLHRbMV09KC11KnIrcypsKSpwLHRbMl09KGgqci1zKmEpKnAsdFszXT1kKnAsdFs0XT0odSppLXMqbykqcCx0WzVdPSgtaCppK3MqbikqcCx0WzZdPWcqcCx0WzddPSgtbCppK3IqbykqcCx0WzhdPShhKmktcipuKSpwKX0odGhpcyx0KSx0aGlzfWdldE5vcm1hbE1hdHJpeCh0KXtyZXR1cm4gZnVuY3Rpb24odCxlKXtsZXQgaT1lWzBdLHI9ZVsxXSxzPWVbMl0sbj1lWzNdLGE9ZVs0XSxoPWVbNV0sbz1lWzZdLGw9ZVs3XSx1PWVbOF0sYz1lWzldLGQ9ZVsxMF0sZz1lWzExXSxwPWVbMTJdLG09ZVsxM10sZj1lWzE0XSx4PWVbMTVdLHc9aSpoLXIqYSxiPWkqby1zKmEsTT1pKmwtbiphLHY9cipvLXMqaCxBPXIqbC1uKmgsRT1zKmwtbipvLHk9dSptLWMqcCxGPXUqZi1kKnAsVD11KngtZypwLF89YypmLWQqbSxSPWMqeC1nKm0sUz1kKngtZypmLE49dypTLWIqUitNKl8rdipULUEqRitFKnk7TiYmKE49MS9OLHRbMF09KGgqUy1vKlIrbCpfKSpOLHRbMV09KG8qVC1hKlMtbCpGKSpOLHRbMl09KGEqUi1oKlQrbCp5KSpOLHRbM109KHMqUi1yKlMtbipfKSpOLHRbNF09KGkqUy1zKlQrbipGKSpOLHRbNV09KHIqVC1pKlItbip5KSpOLHRbNl09KG0qRS1mKkEreCp2KSpOLHRbN109KGYqTS1wKkUteCpiKSpOLHRbOF09KHAqQS1tKk0reCp3KSpOKX0odGhpcyx0KSx0aGlzfX1sZXQgRz0wO2NsYXNzIFkgZXh0ZW5kcyBDe2NvbnN0cnVjdG9yKHQse2dlb21ldHJ5OmUscHJvZ3JhbTppLG1vZGU6cj10LlRSSUFOR0xFUyxmcnVzdHVtQ3VsbGVkOnM9ITAscmVuZGVyT3JkZXI6bj0wfT17fSl7c3VwZXIodCksdGhpcy5nbD10LHRoaXMuaWQ9RysrLHRoaXMuZ2VvbWV0cnk9ZSx0aGlzLnByb2dyYW09aSx0aGlzLm1vZGU9cix0aGlzLmZydXN0dW1DdWxsZWQ9cyx0aGlzLnJlbmRlck9yZGVyPW4sdGhpcy5tb2RlbFZpZXdNYXRyaXg9bmV3IFAsdGhpcy5ub3JtYWxNYXRyaXg9bmV3IHEsdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsTWF0cml4fHxPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcyx7bW9kZWxNYXRyaXg6e3ZhbHVlOm51bGx9LHZpZXdNYXRyaXg6e3ZhbHVlOm51bGx9LG1vZGVsVmlld01hdHJpeDp7dmFsdWU6bnVsbH0sbm9ybWFsTWF0cml4Ont2YWx1ZTpudWxsfSxwcm9qZWN0aW9uTWF0cml4Ont2YWx1ZTpudWxsfSxjYW1lcmFQb3NpdGlvbjp7dmFsdWU6bnVsbH19KX1kcmF3KHtjYW1lcmE6dH09e30pe3RoaXMub25CZWZvcmVSZW5kZXImJnRoaXMub25CZWZvcmVSZW5kZXIoe21lc2g6dGhpcyxjYW1lcmE6dH0pLHQmJih0aGlzLnByb2dyYW0udW5pZm9ybXMucHJvamVjdGlvbk1hdHJpeC52YWx1ZT10LnByb2plY3Rpb25NYXRyaXgsdGhpcy5wcm9ncmFtLnVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uLnZhbHVlPXQucG9zaXRpb24sdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnZpZXdNYXRyaXgudmFsdWU9dC52aWV3TWF0cml4LHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5KHQudmlld01hdHJpeCx0aGlzLndvcmxkTWF0cml4KSx0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5tb2RlbFZpZXdNYXRyaXgpLHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbE1hdHJpeC52YWx1ZT10aGlzLndvcmxkTWF0cml4LHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5tb2RlbFZpZXdNYXRyaXgudmFsdWU9dGhpcy5tb2RlbFZpZXdNYXRyaXgsdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm5vcm1hbE1hdHJpeC52YWx1ZT10aGlzLm5vcm1hbE1hdHJpeCk7bGV0IGU9dGhpcy5wcm9ncmFtLmN1bGxGYWNlJiZ0aGlzLndvcmxkTWF0cml4LmRldGVybWluYW50KCk8MDt0aGlzLnByb2dyYW0udXNlKHtmbGlwRmFjZXM6ZX0pLHRoaXMuZ2VvbWV0cnkuZHJhdyh7bW9kZTp0aGlzLm1vZGUscHJvZ3JhbTp0aGlzLnByb2dyYW19KSx0aGlzLm9uQWZ0ZXJSZW5kZXImJnRoaXMub25BZnRlclJlbmRlcih7bWVzaDp0aGlzLGNhbWVyYTp0fSl9fWNvbnN0IGs9bmV3IFVpbnQ4QXJyYXkoNCk7ZnVuY3Rpb24gVih0KXtyZXR1cm4gMD09KHQmdC0xKX1sZXQgWD0wO2NsYXNzIFd7Y29uc3RydWN0b3IodCx7aW1hZ2U6ZSx0YXJnZXQ6aT10LlRFWFRVUkVfMkQsdHlwZTpyPXQuVU5TSUdORURfQllURSxmb3JtYXQ6cz10LlJHQkEsaW50ZXJuYWxGb3JtYXQ6bj1zLHdyYXBTOmE9dC5DTEFNUF9UT19FREdFLHdyYXBUOmg9dC5DTEFNUF9UT19FREdFLGdlbmVyYXRlTWlwbWFwczpvPSEwLG1pbkZpbHRlcjpsPShvP3QuTkVBUkVTVF9NSVBNQVBfTElORUFSOnQuTElORUFSKSxtYWdGaWx0ZXI6dT10LkxJTkVBUixwcmVtdWx0aXBseUFscGhhOmM9ITEsdW5wYWNrQWxpZ25tZW50OmQ9NCxmbGlwWTpnPSEwLGxldmVsOnA9MCx3aWR0aDptLGhlaWdodDpmPW19PXt9KXt0aGlzLmdsPXQsdGhpcy5pZD1YKyssdGhpcy5pbWFnZT1lLHRoaXMudGFyZ2V0PWksdGhpcy50eXBlPXIsdGhpcy5mb3JtYXQ9cyx0aGlzLmludGVybmFsRm9ybWF0PW4sdGhpcy5taW5GaWx0ZXI9bCx0aGlzLm1hZ0ZpbHRlcj11LHRoaXMud3JhcFM9YSx0aGlzLndyYXBUPWgsdGhpcy5nZW5lcmF0ZU1pcG1hcHM9byx0aGlzLnByZW11bHRpcGx5QWxwaGE9Yyx0aGlzLnVucGFja0FsaWdubWVudD1kLHRoaXMuZmxpcFk9Zyx0aGlzLmxldmVsPXAsdGhpcy53aWR0aD1tLHRoaXMuaGVpZ2h0PWYsdGhpcy50ZXh0dXJlPXRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpLHRoaXMuc3RvcmU9e2ltYWdlOm51bGx9LHRoaXMuZ2xTdGF0ZT10aGlzLmdsLnJlbmRlcmVyLnN0YXRlLHRoaXMuc3RhdGU9e30sdGhpcy5zdGF0ZS5taW5GaWx0ZXI9dGhpcy5nbC5ORUFSRVNUX01JUE1BUF9MSU5FQVIsdGhpcy5zdGF0ZS5tYWdGaWx0ZXI9dGhpcy5nbC5MSU5FQVIsdGhpcy5zdGF0ZS53cmFwUz10aGlzLmdsLlJFUEVBVCx0aGlzLnN0YXRlLndyYXBUPXRoaXMuZ2wuUkVQRUFUfWJpbmQoKXt0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RoaXMuZ2xTdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdF0hPT10aGlzLmlkJiYodGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLnRhcmdldCx0aGlzLnRleHR1cmUpLHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGhpcy5nbFN0YXRlLmFjdGl2ZVRleHR1cmVVbml0XT10aGlzLmlkKX11cGRhdGUodD0wKXtjb25zdCBlPSEodGhpcy5pbWFnZT09PXRoaXMuc3RvcmUuaW1hZ2UmJiF0aGlzLm5lZWRzVXBkYXRlKTsoZXx8dGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0XSE9PXRoaXMuaWQpJiYodGhpcy5nbC5yZW5kZXJlci5hY3RpdmVUZXh0dXJlKHQpLHRoaXMuYmluZCgpKSxlJiYodGhpcy5uZWVkc1VwZGF0ZT0hMSx0aGlzLmZsaXBZIT09dGhpcy5nbFN0YXRlLmZsaXBZJiYodGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19GTElQX1lfV0VCR0wsdGhpcy5mbGlwWSksdGhpcy5nbFN0YXRlLmZsaXBZPXRoaXMuZmxpcFkpLHRoaXMucHJlbXVsdGlwbHlBbHBoYSE9PXRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhJiYodGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCx0aGlzLnByZW11bHRpcGx5QWxwaGEpLHRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhPXRoaXMucHJlbXVsdGlwbHlBbHBoYSksdGhpcy51bnBhY2tBbGlnbm1lbnQhPT10aGlzLmdsU3RhdGUudW5wYWNrQWxpZ25tZW50JiYodGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19BTElHTk1FTlQsdGhpcy51bnBhY2tBbGlnbm1lbnQpLHRoaXMuZ2xTdGF0ZS51bnBhY2tBbGlnbm1lbnQ9dGhpcy51bnBhY2tBbGlnbm1lbnQpLHRoaXMubWluRmlsdGVyIT09dGhpcy5zdGF0ZS5taW5GaWx0ZXImJih0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsdGhpcy5taW5GaWx0ZXIpLHRoaXMuc3RhdGUubWluRmlsdGVyPXRoaXMubWluRmlsdGVyKSx0aGlzLm1hZ0ZpbHRlciE9PXRoaXMuc3RhdGUubWFnRmlsdGVyJiYodGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LHRoaXMuZ2wuVEVYVFVSRV9NQUdfRklMVEVSLHRoaXMubWFnRmlsdGVyKSx0aGlzLnN0YXRlLm1hZ0ZpbHRlcj10aGlzLm1hZ0ZpbHRlciksdGhpcy53cmFwUyE9PXRoaXMuc3RhdGUud3JhcFMmJih0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsdGhpcy5nbC5URVhUVVJFX1dSQVBfUyx0aGlzLndyYXBTKSx0aGlzLnN0YXRlLndyYXBTPXRoaXMud3JhcFMpLHRoaXMud3JhcFQhPT10aGlzLnN0YXRlLndyYXBUJiYodGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1QsdGhpcy53cmFwVCksdGhpcy5zdGF0ZS53cmFwVD10aGlzLndyYXBUKSx0aGlzLmltYWdlPyh0aGlzLmltYWdlLndpZHRoJiYodGhpcy53aWR0aD10aGlzLmltYWdlLndpZHRoLHRoaXMuaGVpZ2h0PXRoaXMuaW1hZ2UuaGVpZ2h0KSx0aGlzLmdsLnJlbmRlcmVyLmlzV2ViZ2wyfHxBcnJheUJ1ZmZlci5pc1ZpZXcodGhpcy5pbWFnZSk/dGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LHRoaXMubGV2ZWwsdGhpcy5pbnRlcm5hbEZvcm1hdCx0aGlzLndpZHRoLHRoaXMuaGVpZ2h0LDAsdGhpcy5mb3JtYXQsdGhpcy50eXBlLHRoaXMuaW1hZ2UpOnRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCx0aGlzLmxldmVsLHRoaXMuaW50ZXJuYWxGb3JtYXQsdGhpcy5mb3JtYXQsdGhpcy50eXBlLHRoaXMuaW1hZ2UpLHRoaXMuZ2VuZXJhdGVNaXBtYXBzJiYodGhpcy5nbC5yZW5kZXJlci5pc1dlYmdsMnx8Vih0aGlzLmltYWdlLndpZHRoKSYmVih0aGlzLmltYWdlLmhlaWdodCk/dGhpcy5nbC5nZW5lcmF0ZU1pcG1hcCh0aGlzLnRhcmdldCk6KHRoaXMuZ2VuZXJhdGVNaXBtYXBzPSExLHRoaXMud3JhcFM9dGhpcy53cmFwVD10aGlzLmdsLkNMQU1QX1RPX0VER0UsdGhpcy5taW5GaWx0ZXI9dGhpcy5nbC5MSU5FQVIpKSk6dGhpcy53aWR0aD90aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsdGhpcy5sZXZlbCx0aGlzLmludGVybmFsRm9ybWF0LHRoaXMud2lkdGgsdGhpcy5oZWlnaHQsMCx0aGlzLmZvcm1hdCx0aGlzLnR5cGUsbnVsbCk6dGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LDAsdGhpcy5nbC5SR0JBLDEsMSwwLHRoaXMuZ2wuUkdCQSx0aGlzLmdsLlVOU0lHTkVEX0JZVEUsayksdGhpcy5zdG9yZS5pbWFnZT10aGlzLmltYWdlLHRoaXMub25VcGRhdGUmJnRoaXMub25VcGRhdGUoKSl9fWNsYXNzIGp7Y29uc3RydWN0b3IodCx7d2lkdGg6ZT10LmNhbnZhcy53aWR0aCxoZWlnaHQ6aT10LmNhbnZhcy5oZWlnaHQsdGFyZ2V0OnI9dC5GUkFNRUJVRkZFUixjb2xvcjpzPTEsZGVwdGg6bj0hMCxzdGVuY2lsOmE9ITEsZGVwdGhUZXh0dXJlOmg9ITEsd3JhcFM6bz10LkNMQU1QX1RPX0VER0Usd3JhcFQ6bD10LkNMQU1QX1RPX0VER0UsbWluRmlsdGVyOnU9dC5MSU5FQVIsbWFnRmlsdGVyOmM9dSx0eXBlOmQ9dC5VTlNJR05FRF9CWVRFLGZvcm1hdDpnPXQuUkdCQSxpbnRlcm5hbEZvcm1hdDpwPWcsdW5wYWNrQWxpZ25tZW50Om0scHJlbXVsdGlwbHlBbHBoYTpmfT17fSl7dGhpcy5nbD10LHRoaXMud2lkdGg9ZSx0aGlzLmhlaWdodD1pLHRoaXMuYnVmZmVyPXRoaXMuZ2wuY3JlYXRlRnJhbWVidWZmZXIoKSx0aGlzLnRhcmdldD1yLHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMudGFyZ2V0LHRoaXMuYnVmZmVyKSx0aGlzLnRleHR1cmVzPVtdO2ZvcihsZXQgcj0wO3I8cztyKyspdGhpcy50ZXh0dXJlcy5wdXNoKG5ldyBXKHQse3dpZHRoOmUsaGVpZ2h0Omksd3JhcFM6byx3cmFwVDpsLG1pbkZpbHRlcjp1LG1hZ0ZpbHRlcjpjLHR5cGU6ZCxmb3JtYXQ6ZyxpbnRlcm5hbEZvcm1hdDpwLHVucGFja0FsaWdubWVudDptLHByZW11bHRpcGx5QWxwaGE6ZixmbGlwWTohMSxnZW5lcmF0ZU1pcG1hcHM6ITF9KSksdGhpcy50ZXh0dXJlc1tyXS51cGRhdGUoKSx0aGlzLmdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHRoaXMudGFyZ2V0LHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDArcix0aGlzLmdsLlRFWFRVUkVfMkQsdGhpcy50ZXh0dXJlc1tyXS50ZXh0dXJlLDApO3RoaXMudGV4dHVyZT10aGlzLnRleHR1cmVzWzBdLGgmJih0aGlzLmdsLnJlbmRlcmVyLmlzV2ViZ2wyfHx0aGlzLmdsLnJlbmRlcmVyLmdldEV4dGVuc2lvbihcIldFQkdMX2RlcHRoX3RleHR1cmVcIikpPyh0aGlzLmRlcHRoVGV4dHVyZT1uZXcgVyh0LHt3aWR0aDplLGhlaWdodDppLHdyYXBTOm8sd3JhcFQ6bCxtaW5GaWx0ZXI6dGhpcy5nbC5ORUFSRVNULG1hZ0ZpbHRlcjp0aGlzLmdsLk5FQVJFU1QsZmxpcFk6ITEsZm9ybWF0OnRoaXMuZ2wuREVQVEhfQ09NUE9ORU5ULGludGVybmFsRm9ybWF0OnQucmVuZGVyZXIuaXNXZWJnbDI/dGhpcy5nbC5ERVBUSF9DT01QT05FTlQyNDp0aGlzLmdsLkRFUFRIX0NPTVBPTkVOVCx0eXBlOnRoaXMuZ2wuVU5TSUdORURfSU5ULGdlbmVyYXRlTWlwbWFwczohMX0pLHRoaXMuZGVwdGhUZXh0dXJlLnVwZGF0ZSgpLHRoaXMuZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQodGhpcy50YXJnZXQsdGhpcy5nbC5ERVBUSF9BVFRBQ0hNRU5ULHRoaXMuZ2wuVEVYVFVSRV8yRCx0aGlzLmRlcHRoVGV4dHVyZS50ZXh0dXJlLDApKToobiYmIWEmJih0aGlzLmRlcHRoQnVmZmVyPXRoaXMuZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCksdGhpcy5nbC5iaW5kUmVuZGVyYnVmZmVyKHRoaXMuZ2wuUkVOREVSQlVGRkVSLHRoaXMuZGVwdGhCdWZmZXIpLHRoaXMuZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSh0aGlzLmdsLlJFTkRFUkJVRkZFUix0aGlzLmdsLkRFUFRIX0NPTVBPTkVOVDE2LGUsaSksdGhpcy5nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcih0aGlzLnRhcmdldCx0aGlzLmdsLkRFUFRIX0FUVEFDSE1FTlQsdGhpcy5nbC5SRU5ERVJCVUZGRVIsdGhpcy5kZXB0aEJ1ZmZlcikpLGEmJiFuJiYodGhpcy5zdGVuY2lsQnVmZmVyPXRoaXMuZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCksdGhpcy5nbC5iaW5kUmVuZGVyYnVmZmVyKHRoaXMuZ2wuUkVOREVSQlVGRkVSLHRoaXMuc3RlbmNpbEJ1ZmZlciksdGhpcy5nbC5yZW5kZXJidWZmZXJTdG9yYWdlKHRoaXMuZ2wuUkVOREVSQlVGRkVSLHRoaXMuZ2wuU1RFTkNJTF9JTkRFWDgsZSxpKSx0aGlzLmdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKHRoaXMudGFyZ2V0LHRoaXMuZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULHRoaXMuZ2wuUkVOREVSQlVGRkVSLHRoaXMuc3RlbmNpbEJ1ZmZlcikpLG4mJmEmJih0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlcj10aGlzLmdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpLHRoaXMuZ2wuYmluZFJlbmRlcmJ1ZmZlcih0aGlzLmdsLlJFTkRFUkJVRkZFUix0aGlzLmRlcHRoU3RlbmNpbEJ1ZmZlciksdGhpcy5nbC5yZW5kZXJidWZmZXJTdG9yYWdlKHRoaXMuZ2wuUkVOREVSQlVGRkVSLHRoaXMuZ2wuREVQVEhfU1RFTkNJTCxlLGkpLHRoaXMuZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIodGhpcy50YXJnZXQsdGhpcy5nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsdGhpcy5nbC5SRU5ERVJCVUZGRVIsdGhpcy5kZXB0aFN0ZW5jaWxCdWZmZXIpKSksdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy50YXJnZXQsbnVsbCl9fWNsYXNzIEggZXh0ZW5kcyBBcnJheXtjb25zdHJ1Y3Rvcih0PTAsZT0wLGk9MCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJihbdCxlLGldPUguaGV4VG9SR0IodCkpLHN1cGVyKHQsZSxpKSx0aGlzfWdldCByKCl7cmV0dXJuIHRoaXNbMF19c2V0IHIodCl7dGhpc1swXT10fWdldCBnKCl7cmV0dXJuIHRoaXNbMV19c2V0IGcodCl7dGhpc1sxXT10fWdldCBiKCl7cmV0dXJuIHRoaXNbMl19c2V0IGIodCl7dGhpc1syXT10fXNldCh0LGUsaSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJihbdCxlLGldPUguaGV4VG9SR0IodCkpLHQubGVuZ3RoP3RoaXMuY29weSh0KToodGhpc1swXT10LHRoaXNbMV09ZSx0aGlzWzJdPWksdGhpcyl9Y29weSh0KXtyZXR1cm4gdGhpc1swXT10WzBdLHRoaXNbMV09dFsxXSx0aGlzWzJdPXRbMl0sdGhpc31zdGF0aWMgaGV4VG9SR0IodCl7ND09PXQubGVuZ3RoJiYodD10WzBdK3RbMV0rdFsxXSt0WzJdK3RbMl0rdFszXSt0WzNdKTtjb25zdCBlPS9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyh0KTtyZXR1cm4gZXx8Y29uc29sZS53YXJuKGBVbmFibGUgdG8gY29udmVydCBoZXggc3RyaW5nICR7dH0gdG8gcmdiIHZhbHVlc2ApLFtwYXJzZUludChlWzFdLDE2KS8yNTUscGFyc2VJbnQoZVsyXSwxNikvMjU1LHBhcnNlSW50KGVbM10sMTYpLzI1NV19fWZ1bmN0aW9uIFoodCxlLGkpe3JldHVybiB0WzBdPWVbMF0raVswXSx0WzFdPWVbMV0raVsxXSx0fWZ1bmN0aW9uICQodCxlLGkpe3JldHVybiB0WzBdPWVbMF0taVswXSx0WzFdPWVbMV0taVsxXSx0fWZ1bmN0aW9uIFEodCxlLGkpe3JldHVybiB0WzBdPWVbMF0qaSx0WzFdPWVbMV0qaSx0fWZ1bmN0aW9uIEsodCl7dmFyIGU9dFswXSxpPXRbMV07cmV0dXJuIE1hdGguc3FydChlKmUraSppKX1jbGFzcyBKIGV4dGVuZHMgQXJyYXl7Y29uc3RydWN0b3IodD0wLGU9dCl7cmV0dXJuIHN1cGVyKHQsZSksdGhpc31nZXQgeCgpe3JldHVybiB0aGlzWzBdfXNldCB4KHQpe3RoaXNbMF09dH1nZXQgeSgpe3JldHVybiB0aGlzWzFdfXNldCB5KHQpe3RoaXNbMV09dH1zZXQodCxlPXQpe3JldHVybiB0Lmxlbmd0aD90aGlzLmNvcHkodCk6KGZ1bmN0aW9uKHQsZSxpKXt0WzBdPWUsdFsxXT1pfSh0aGlzLHQsZSksdGhpcyl9Y29weSh0KXt2YXIgZSxpO3JldHVybiBpPXQsKGU9dGhpcylbMF09aVswXSxlWzFdPWlbMV0sdGhpc31hZGQodCxlKXtyZXR1cm4gZT9aKHRoaXMsdCxlKTpaKHRoaXMsdGhpcyx0KSx0aGlzfXN1Yih0LGUpe3JldHVybiBlPyQodGhpcyx0LGUpOiQodGhpcyx0aGlzLHQpLHRoaXN9bXVsdGlwbHkodCl7dmFyIGUsaSxyO3JldHVybiB0Lmxlbmd0aD8oaT10aGlzLHI9dCwoZT10aGlzKVswXT1pWzBdKnJbMF0sZVsxXT1pWzFdKnJbMV0pOlEodGhpcyx0aGlzLHQpLHRoaXN9ZGl2aWRlKHQpe3ZhciBlLGkscjtyZXR1cm4gdC5sZW5ndGg/KGk9dGhpcyxyPXQsKGU9dGhpcylbMF09aVswXS9yWzBdLGVbMV09aVsxXS9yWzFdKTpRKHRoaXMsdGhpcywxL3QpLHRoaXN9aW52ZXJzZSh0PXRoaXMpe3ZhciBlLGk7cmV0dXJuIGk9dCwoZT10aGlzKVswXT0xL2lbMF0sZVsxXT0xL2lbMV0sdGhpc31sZW4oKXtyZXR1cm4gSyh0aGlzKX1kaXN0YW5jZSh0KXtyZXR1cm4gdD8oZT10aGlzLHI9KGk9dClbMF0tZVswXSxzPWlbMV0tZVsxXSxNYXRoLnNxcnQocipyK3MqcykpOksodGhpcyk7dmFyIGUsaSxyLHN9c3F1YXJlZExlbigpe3JldHVybiB0aGlzLnNxdWFyZWREaXN0YW5jZSgpfXNxdWFyZWREaXN0YW5jZSh0KXtyZXR1cm4gdD8oZT10aGlzLHI9KGk9dClbMF0tZVswXSxzPWlbMV0tZVsxXSxyKnIrcypzKTpmdW5jdGlvbih0KXt2YXIgZT10WzBdLGk9dFsxXTtyZXR1cm4gZSplK2kqaX0odGhpcyk7dmFyIGUsaSxyLHN9bmVnYXRlKHQ9dGhpcyl7dmFyIGUsaTtyZXR1cm4gaT10LChlPXRoaXMpWzBdPS1pWzBdLGVbMV09LWlbMV0sdGhpc31jcm9zcyh0LGUpe3JldHVybiByPWUsKGk9dClbMF0qclsxXS1pWzFdKnJbMF07dmFyIGkscn1zY2FsZSh0KXtyZXR1cm4gUSh0aGlzLHRoaXMsdCksdGhpc31ub3JtYWxpemUoKXt2YXIgdCxlLGkscixzO3JldHVybiB0PXRoaXMsaT0oZT10aGlzKVswXSxyPWVbMV0sKHM9aSppK3Iqcik+MCYmKHM9MS9NYXRoLnNxcnQocykpLHRbMF09ZVswXSpzLHRbMV09ZVsxXSpzLHRoaXN9ZG90KHQpe3JldHVybiBpPXQsKGU9dGhpcylbMF0qaVswXStlWzFdKmlbMV07dmFyIGUsaX1lcXVhbHModCl7cmV0dXJuIGk9dCwoZT10aGlzKVswXT09PWlbMF0mJmVbMV09PT1pWzFdO3ZhciBlLGl9YXBwbHlNYXRyaXgzKHQpe3ZhciBlLGkscixzLG47cmV0dXJuIGU9dGhpcyxyPXQscz0oaT10aGlzKVswXSxuPWlbMV0sZVswXT1yWzBdKnMrclszXSpuK3JbNl0sZVsxXT1yWzFdKnMrcls0XSpuK3JbN10sdGhpc31hcHBseU1hdHJpeDQodCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxpKXtsZXQgcj1lWzBdLHM9ZVsxXTt0WzBdPWlbMF0qcitpWzRdKnMraVsxMl0sdFsxXT1pWzFdKnIraVs1XSpzK2lbMTNdfSh0aGlzLHRoaXMsdCksdGhpc31sZXJwKHQsZSl7IWZ1bmN0aW9uKHQsZSxpLHIpe3ZhciBzPWVbMF0sbj1lWzFdO3RbMF09cytyKihpWzBdLXMpLHRbMV09bityKihpWzFdLW4pfSh0aGlzLHRoaXMsdCxlKX1jbG9uZSgpe3JldHVybiBuZXcgSih0aGlzWzBdLHRoaXNbMV0pfWZyb21BcnJheSh0LGU9MCl7cmV0dXJuIHRoaXNbMF09dFtlXSx0aGlzWzFdPXRbZSsxXSx0aGlzfXRvQXJyYXkodD1bXSxlPTApe3JldHVybiB0W2VdPXRoaXNbMF0sdFtlKzFdPXRoaXNbMV0sdH19Y2xhc3MgdHQgZXh0ZW5kcyBne2NvbnN0cnVjdG9yKHQse3dpZHRoOmU9MSxoZWlnaHQ6aT0xLHdpZHRoU2VnbWVudHM6cj0xLGhlaWdodFNlZ21lbnRzOnM9MSxhdHRyaWJ1dGVzOm49e319PXt9KXtjb25zdCBhPXIsaD1zLG89KGErMSkqKGgrMSksbD1hKmgqNix1PW5ldyBGbG9hdDMyQXJyYXkoMypvKSxjPW5ldyBGbG9hdDMyQXJyYXkoMypvKSxkPW5ldyBGbG9hdDMyQXJyYXkoMipvKSxnPW8+NjU1MzY/bmV3IFVpbnQzMkFycmF5KGwpOm5ldyBVaW50MTZBcnJheShsKTt0dC5idWlsZFBsYW5lKHUsYyxkLGcsZSxpLDAsYSxoKSxPYmplY3QuYXNzaWduKG4se3Bvc2l0aW9uOntzaXplOjMsZGF0YTp1fSxub3JtYWw6e3NpemU6MyxkYXRhOmN9LHV2OntzaXplOjIsZGF0YTpkfSxpbmRleDp7ZGF0YTpnfX0pLHN1cGVyKHQsbil9c3RhdGljIGJ1aWxkUGxhbmUodCxlLGkscixzLG4sYSxoLG8sbD0wLHU9MSxjPTIsZD0xLGc9LTEscD0wLG09MCl7Y29uc3QgZj1wLHg9cy9oLHc9bi9vO2ZvcihsZXQgYj0wO2I8PW87YisrKXtsZXQgTT1iKnctbi8yO2ZvcihsZXQgbj0wO248PWg7bisrLHArKyl7bGV0IHc9bip4LXMvMjtpZih0WzMqcCtsXT13KmQsdFszKnArdV09TSpnLHRbMypwK2NdPWEvMixlWzMqcCtsXT0wLGVbMypwK3VdPTAsZVszKnArY109YT49MD8xOi0xLGlbMipwXT1uL2gsaVsyKnArMV09MS1iL28sYj09PW98fG49PT1oKWNvbnRpbnVlO2xldCB2PWYrbitiKihoKzEpLEE9ZituKyhiKzEpKihoKzEpLEU9ZituKyhiKzEpKihoKzEpKzEseT1mK24rYiooaCsxKSsxO3JbNiptXT12LHJbNiptKzFdPUEscls2Km0rMl09eSxyWzYqbSszXT1BLHJbNiptKzRdPUUscls2Km0rNV09eSxtKyt9fX19Y29uc3QgZXQ9e05PTkU6LTEsUk9UQVRFOjAsRE9MTFk6MSxQQU46MixET0xMWV9QQU46M30saXQ9bmV3IGwscnQ9bmV3IEosc3Q9bmV3IEo7Y29uc3QgbnQ9bmV3IGwsYXQ9bmV3IGwsaHQ9bmV3IGwsb3Q9bmV3IFA7Y29uc3QgbHQ9XCJcXG4gICAgYXR0cmlidXRlIHZlYzIgdXY7XFxuICAgIGF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcblxcbiAgICB2YXJ5aW5nIHZlYzIgdlV2O1xcblxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICB2VXYgPSB1djtcXG4gICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMCwgMSk7XFxuICAgIH1cXG5cIix1dD1cIlxcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuXFxuICAgIHVuaWZvcm0gc2FtcGxlcjJEIHRNYXA7XFxuICAgIHZhcnlpbmcgdmVjMiB2VXY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcbiAgICB9XFxuXCIsY3Q9bmV3IGwsZHQ9bmV3IE4sZ3Q9bmV3IGwscHQ9bmV3IGwsbXQ9bmV3IE4sZnQ9bmV3IGw7Y2xhc3MgeHR7Y29uc3RydWN0b3Ioe29iamVjdHM6dCxkYXRhOmV9KXt0aGlzLm9iamVjdHM9dCx0aGlzLmRhdGE9ZSx0aGlzLmVsYXBzZWQ9MCx0aGlzLndlaWdodD0xLHRoaXMuZHVyYXRpb249ZS5mcmFtZXMubGVuZ3RoLTF9dXBkYXRlKHQ9MSxlKXtjb25zdCBpPWU/MTp0aGlzLndlaWdodC90LHI9dGhpcy5lbGFwc2VkJXRoaXMuZHVyYXRpb24scz1NYXRoLmZsb29yKHIpLG49ci1zLGE9dGhpcy5kYXRhLmZyYW1lc1tzXSxoPXRoaXMuZGF0YS5mcmFtZXNbKHMrMSkldGhpcy5kdXJhdGlvbl07dGhpcy5vYmplY3RzLmZvckVhY2goKHQsZSk9PntjdC5mcm9tQXJyYXkoYS5wb3NpdGlvbiwzKmUpLGR0LmZyb21BcnJheShhLnF1YXRlcm5pb24sNCplKSxndC5mcm9tQXJyYXkoYS5zY2FsZSwzKmUpLHB0LmZyb21BcnJheShoLnBvc2l0aW9uLDMqZSksbXQuZnJvbUFycmF5KGgucXVhdGVybmlvbiw0KmUpLGZ0LmZyb21BcnJheShoLnNjYWxlLDMqZSksY3QubGVycChwdCxuKSxkdC5zbGVycChtdCxuKSxndC5sZXJwKGZ0LG4pLHQucG9zaXRpb24ubGVycChjdCxpKSx0LnF1YXRlcm5pb24uc2xlcnAoZHQsaSksdC5zY2FsZS5sZXJwKGd0LGkpfSl9fWNvbnN0IHd0PW5ldyBQO2NvbnN0IGJ0PVwiXFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxuXFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xcblxcbnVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZOb3JtYWwgPSBub3JtYWxpemUobm9ybWFsTWF0cml4ICogbm9ybWFsKTtcXG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcXG59XFxuXCIsTXQ9XCJcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIGdsX0ZyYWdDb2xvci5yZ2IgPSBub3JtYWxpemUodk5vcm1hbCk7XFxuICAgIGdsX0ZyYWdDb2xvci5hID0gMS4wO1xcbn1cXG5cIjtjb25zdCB2dD1cIlxcbiAgICBhdHRyaWJ1dGUgdmVjMiB1djtcXG4gICAgYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuXFxuICAgIHZhcnlpbmcgdmVjMiB2VXY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZVdiA9IHV2O1xcbiAgICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAwLCAxKTtcXG4gICAgfVxcblwiLEF0PVwiXFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5cXG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG5cXG4gICAgdW5pZm9ybSBmbG9hdCB1RmFsbG9mZjtcXG4gICAgdW5pZm9ybSBmbG9hdCB1QWxwaGE7XFxuICAgIHVuaWZvcm0gZmxvYXQgdURpc3NpcGF0aW9uO1xcblxcbiAgICB1bmlmb3JtIGZsb2F0IHVBc3BlY3Q7XFxuICAgIHVuaWZvcm0gdmVjMiB1TW91c2U7XFxuICAgIHVuaWZvcm0gdmVjMiB1VmVsb2NpdHk7XFxuXFxuICAgIHZhcnlpbmcgdmVjMiB2VXY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG5cXG4gICAgICB2ZWMyIGN1cnNvciA9IHZVdiAtIHVNb3VzZTtcXG5cXG4gICAgICAgIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KSAqIHVEaXNzaXBhdGlvbjtcXG5cXG4gICAgICAgIGN1cnNvci54ICo9IHVBc3BlY3Q7XFxuXFxuICAgICAgICB2ZWMzIHN0YW1wID0gdmVjMyh1VmVsb2NpdHkgKiB2ZWMyKDEsIC0xKSwgMS4wIC0gcG93KDEuMCAtIG1pbigxLjAsIGxlbmd0aCh1VmVsb2NpdHkpKSwgMy4wKSk7XFxuICAgICAgICBmbG9hdCBmYWxsb2ZmID0gc21vb3Roc3RlcCh1RmFsbG9mZiwgMC4wLCBsZW5ndGgoY3Vyc29yKSkgKiB1QWxwaGE7XFxuXFxuICAgICAgICBjb2xvci5yZ2IgPSBtaXgoY29sb3IucmdiLCBzdGFtcCwgdmVjMyhmYWxsb2ZmKSk7XFxuXFxuICAgICAgICBnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4gICAgfVxcblwiO2NvbnN0IEV0PVwiXFxuICAgIGF0dHJpYnV0ZSB2ZWMyIHV2O1xcbiAgICBhdHRyaWJ1dGUgdmVjMiBwb3NpdGlvbjtcXG5cXG4gICAgdmFyeWluZyB2ZWMyIHZVdjtcXG5cXG4gICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdlV2ID0gdXY7XFxuICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDAsIDEpO1xcbiAgICB9XFxuXCIseXQ9XCJcXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcblxcbiAgICB1bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcbiAgICB2YXJ5aW5nIHZlYzIgdlV2O1xcblxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG4gICAgfVxcblwiO3JldHVybiB0LkFuaW1hdGlvbj14dCx0LkJveD1jbGFzcyBleHRlbmRzIGd7Y29uc3RydWN0b3IodCx7d2lkdGg6ZT0xLGhlaWdodDppPTEsZGVwdGg6cj0xLHdpZHRoU2VnbWVudHM6cz0xLGhlaWdodFNlZ21lbnRzOm49MSxkZXB0aFNlZ21lbnRzOmE9MSxhdHRyaWJ1dGVzOmg9e319PXt9KXtjb25zdCBvPXMsbD1uLHU9YSxjPShvKzEpKihsKzEpKjIrKG8rMSkqKHUrMSkqMisobCsxKSoodSsxKSoyLGQ9NioobypsKjIrbyp1KjIrbCp1KjIpLGc9bmV3IEZsb2F0MzJBcnJheSgzKmMpLHA9bmV3IEZsb2F0MzJBcnJheSgzKmMpLG09bmV3IEZsb2F0MzJBcnJheSgyKmMpLGY9Yz42NTUzNj9uZXcgVWludDMyQXJyYXkoZCk6bmV3IFVpbnQxNkFycmF5KGQpO2xldCB4PTAsdz0wO3R0LmJ1aWxkUGxhbmUoZyxwLG0sZixyLGksZSx1LGwsMiwxLDAsLTEsLTEseCx3KSx0dC5idWlsZFBsYW5lKGcscCxtLGYscixpLC1lLHUsbCwyLDEsMCwxLC0xLHgrPSh1KzEpKihsKzEpLHcrPXUqbCksdHQuYnVpbGRQbGFuZShnLHAsbSxmLGUscixpLHUsbCwwLDIsMSwxLDEseCs9KHUrMSkqKGwrMSksdys9dSpsKSx0dC5idWlsZFBsYW5lKGcscCxtLGYsZSxyLC1pLHUsbCwwLDIsMSwxLC0xLHgrPShvKzEpKih1KzEpLHcrPW8qdSksdHQuYnVpbGRQbGFuZShnLHAsbSxmLGUsaSwtcixvLGwsMCwxLDIsLTEsLTEseCs9KG8rMSkqKHUrMSksdys9byp1KSx0dC5idWlsZFBsYW5lKGcscCxtLGYsZSxpLHIsbyxsLDAsMSwyLDEsLTEseCs9KG8rMSkqKGwrMSksdys9bypsKSxPYmplY3QuYXNzaWduKGgse3Bvc2l0aW9uOntzaXplOjMsZGF0YTpnfSxub3JtYWw6e3NpemU6MyxkYXRhOnB9LHV2OntzaXplOjIsZGF0YTptfSxpbmRleDp7ZGF0YTpmfX0pLHN1cGVyKHQsaCl9fSx0LkNhbWVyYT1jbGFzcyBleHRlbmRzIEN7Y29uc3RydWN0b3IodCx7bmVhcjplPS4xLGZhcjppPTEwMCxmb3Y6cj00NSxhc3BlY3Q6cz0xLGxlZnQ6bixyaWdodDphLGJvdHRvbTpoLHRvcDpvfT17fSl7c3VwZXIodCksdGhpcy5uZWFyPWUsdGhpcy5mYXI9aSx0aGlzLmZvdj1yLHRoaXMuYXNwZWN0PXMsdGhpcy5wcm9qZWN0aW9uTWF0cml4PW5ldyBQLHRoaXMudmlld01hdHJpeD1uZXcgUCx0aGlzLnByb2plY3Rpb25WaWV3TWF0cml4PW5ldyBQLG58fGE/dGhpcy5vcnRob2dyYXBoaWMoe2xlZnQ6bixyaWdodDphLGJvdHRvbTpoLHRvcDpvfSk6dGhpcy5wZXJzcGVjdGl2ZSgpfXBlcnNwZWN0aXZlKHtuZWFyOnQ9dGhpcy5uZWFyLGZhcjplPXRoaXMuZmFyLGZvdjppPXRoaXMuZm92LGFzcGVjdDpyPXRoaXMuYXNwZWN0fT17fSl7cmV0dXJuIHRoaXMucHJvamVjdGlvbk1hdHJpeC5mcm9tUGVyc3BlY3RpdmUoe2ZvdjppKihNYXRoLlBJLzE4MCksYXNwZWN0OnIsbmVhcjp0LGZhcjplfSksdGhpcy50eXBlPVwicGVyc3BlY3RpdmVcIix0aGlzfW9ydGhvZ3JhcGhpYyh7bmVhcjp0PXRoaXMubmVhcixmYXI6ZT10aGlzLmZhcixsZWZ0Omk9LTEscmlnaHQ6cj0xLGJvdHRvbTpzPS0xLHRvcDpuPTF9PXt9KXtyZXR1cm4gdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21PcnRob2dvbmFsKHtsZWZ0OmkscmlnaHQ6cixib3R0b206cyx0b3A6bixuZWFyOnQsZmFyOmV9KSx0aGlzLnR5cGU9XCJvcnRob2dyYXBoaWNcIix0aGlzfXVwZGF0ZU1hdHJpeFdvcmxkKCl7cmV0dXJuIHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCksdGhpcy52aWV3TWF0cml4LmludmVyc2UodGhpcy53b3JsZE1hdHJpeCksdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeC5tdWx0aXBseSh0aGlzLnByb2plY3Rpb25NYXRyaXgsdGhpcy52aWV3TWF0cml4KSx0aGlzfWxvb2tBdCh0KXtyZXR1cm4gc3VwZXIubG9va0F0KHQsITApLHRoaXN9cHJvamVjdCh0KXtyZXR1cm4gdC5hcHBseU1hdHJpeDQodGhpcy52aWV3TWF0cml4KSx0LmFwcGx5TWF0cml4NCh0aGlzLnByb2plY3Rpb25NYXRyaXgpLHRoaXN9dW5wcm9qZWN0KHQpe3JldHVybiB0LmFwcGx5TWF0cml4NChELmludmVyc2UodGhpcy5wcm9qZWN0aW9uTWF0cml4KSksdC5hcHBseU1hdHJpeDQodGhpcy53b3JsZE1hdHJpeCksdGhpc311cGRhdGVGcnVzdHVtKCl7dGhpcy5mcnVzdHVtfHwodGhpcy5mcnVzdHVtPVtuZXcgbCxuZXcgbCxuZXcgbCxuZXcgbCxuZXcgbCxuZXcgbF0pO2NvbnN0IHQ9dGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeDt0aGlzLmZydXN0dW1bMF0uc2V0KHRbM10tdFswXSx0WzddLXRbNF0sdFsxMV0tdFs4XSkuY29uc3RhbnQ9dFsxNV0tdFsxMl0sdGhpcy5mcnVzdHVtWzFdLnNldCh0WzNdK3RbMF0sdFs3XSt0WzRdLHRbMTFdK3RbOF0pLmNvbnN0YW50PXRbMTVdK3RbMTJdLHRoaXMuZnJ1c3R1bVsyXS5zZXQodFszXSt0WzFdLHRbN10rdFs1XSx0WzExXSt0WzldKS5jb25zdGFudD10WzE1XSt0WzEzXSx0aGlzLmZydXN0dW1bM10uc2V0KHRbM10tdFsxXSx0WzddLXRbNV0sdFsxMV0tdFs5XSkuY29uc3RhbnQ9dFsxNV0tdFsxM10sdGhpcy5mcnVzdHVtWzRdLnNldCh0WzNdLXRbMl0sdFs3XS10WzZdLHRbMTFdLXRbMTBdKS5jb25zdGFudD10WzE1XS10WzE0XSx0aGlzLmZydXN0dW1bNV0uc2V0KHRbM10rdFsyXSx0WzddK3RbNl0sdFsxMV0rdFsxMF0pLmNvbnN0YW50PXRbMTVdK3RbMTRdO2ZvcihsZXQgdD0wO3Q8Njt0Kyspe2NvbnN0IGU9MS90aGlzLmZydXN0dW1bdF0uZGlzdGFuY2UoKTt0aGlzLmZydXN0dW1bdF0ubXVsdGlwbHkoZSksdGhpcy5mcnVzdHVtW3RdLmNvbnN0YW50Kj1lfX1mcnVzdHVtSW50ZXJzZWN0c01lc2godCl7aWYoIXQuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbilyZXR1cm4hMDt0Lmdlb21ldHJ5LmJvdW5kcyYmdC5nZW9tZXRyeS5ib3VuZHMucmFkaXVzIT09MS8wfHx0Lmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2NvbnN0IGU9VTtlLmNvcHkodC5nZW9tZXRyeS5ib3VuZHMuY2VudGVyKSxlLmFwcGx5TWF0cml4NCh0LndvcmxkTWF0cml4KTtjb25zdCBpPXQuZ2VvbWV0cnkuYm91bmRzLnJhZGl1cyp0LndvcmxkTWF0cml4LmdldE1heFNjYWxlT25BeGlzKCk7cmV0dXJuIHRoaXMuZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUoZSxpKX1mcnVzdHVtSW50ZXJzZWN0c1NwaGVyZSh0LGUpe2NvbnN0IGk9ejtmb3IobGV0IHI9MDtyPDY7cisrKXtjb25zdCBzPXRoaXMuZnJ1c3R1bVtyXTtpZihpLmNvcHkocykuZG90KHQpK3MuY29uc3RhbnQ8LWUpcmV0dXJuITF9cmV0dXJuITB9fSx0LkNvbG9yPUgsdC5DeWxpbmRlcj1jbGFzcyBleHRlbmRzIGd7Y29uc3RydWN0b3IodCx7cmFkaXVzOmU9LjUsaGVpZ2h0Omk9MSxyYWRpYWxTZWdtZW50czpyPTE2LGhlaWdodFNlZ21lbnRzOnM9MSxhdHRyaWJ1dGVzOm49e319PXt9KXtjb25zdCBhPXIsaD1zLG89KHIrMSkqKHMrMSkrMix1PXIqKDIrMipzKSozLGM9bmV3IEZsb2F0MzJBcnJheSgzKm8pLGQ9bmV3IEZsb2F0MzJBcnJheSgzKm8pLGc9bmV3IEZsb2F0MzJBcnJheSgyKm8pLHA9bz42NTUzNj9uZXcgVWludDMyQXJyYXkodSk6bmV3IFVpbnQxNkFycmF5KHUpO2xldCBtLGYseCx3PTAsYj1uZXcgbDttPTAsZj0tLjUqaSx4PTAsY1szKncrMF09bSxjWzMqdysxXT1mLGNbMyp3KzJdPXgsYi5zZXQobSxmLHgpLm5vcm1hbGl6ZSgpLGRbMyp3XT1iLngsZFszKncrMV09Yi55LGRbMyp3KzJdPWIueixnWzIqd109MCxnWzIqdysxXT0xO2xldCBNPXc7bT0wLGY9LjUqaSx4PTAsY1szKisrdyswXT1tLGNbMyp3KzFdPWYsY1szKncrMl09eCxiLnNldChtLGYseCkubm9ybWFsaXplKCksZFszKnddPWIueCxkWzMqdysxXT1iLnksZFszKncrMl09Yi56LGdbMip3XT0wLGdbMip3KzFdPTA7bGV0IHY9dzt3Kys7Zm9yKHZhciBBPTA7QTxhKzE7QSsrKXtsZXQgdD1BL2E7Zm9yKHZhciBFPTA7RTxoKzE7RSsrKXtsZXQgcj1FL2g7bT1NYXRoLmNvcyh0Kk1hdGguUEkqMikqZSxmPShyLS41KSppLHg9TWF0aC5zaW4odCpNYXRoLlBJKjIpKmUsY1szKncrMF09bSxjWzMqdysxXT1mLGNbMyp3KzJdPXgsYi5zZXQobSxmLHgpLm5vcm1hbGl6ZSgpLGRbMyp3XT1iLngsZFszKncrMV09Yi55LGRbMyp3KzJdPWIueixnWzIqd109dCxnWzIqdysxXT0xLXIsdysrfX1sZXQgeT0wLEY9aCsxO2ZvcihBPTA7QTxhO0ErKyl7bGV0IHQ9QSsxO2ZvcihwWzMqeSswXT1NLHBbMyp5KzFdPTIrQSpGLHBbMyp5KzJdPTIrdCpGLHkrKyxFPTA7RTxoO0UrKylwWzMqeSswXT0yK0EqRisoRSswKSxwWzMqeSsxXT0yK0EqRisoRSsxKSxwWzMqeSsyXT0yK3QqRisoRSswKSxwWzMqKyt5KzBdPTIrdCpGKyhFKzApLHBbMyp5KzFdPTIrQSpGKyhFKzEpLHBbMyp5KzJdPTIrdCpGKyhFKzEpLHkrKztwWzMqeSswXT0yK3QqRitoLHBbMyp5KzFdPTIrQSpGK2gscFszKnkrMl09dix5Kyt9T2JqZWN0LmFzc2lnbihuLHtwb3NpdGlvbjp7c2l6ZTozLGRhdGE6Y30sbm9ybWFsOntzaXplOjMsZGF0YTpkfSx1djp7c2l6ZToyLGRhdGE6Z30saW5kZXg6e2RhdGE6cH19KSxzdXBlcih0LG4pfX0sdC5FdWxlcj1CLHQuRmxvd21hcD1jbGFzc3tjb25zdHJ1Y3Rvcih0LHtzaXplOmU9NTEyLGZhbGxvZmY6aT0uMyxhbHBoYTpyPTEsZGlzc2lwYXRpb246cz0uOTZ9PXt9KXtjb25zdCBuPXRoaXM7dGhpcy5nbD10LHRoaXMudW5pZm9ybT17dmFsdWU6bnVsbH0sdGhpcy5tYXNrPXtyZWFkOm51bGwsd3JpdGU6bnVsbCxzd2FwOigpPT57bGV0IHQ9bi5tYXNrLnJlYWQ7bi5tYXNrLnJlYWQ9bi5tYXNrLndyaXRlLG4ubWFzay53cml0ZT10LG4udW5pZm9ybS52YWx1ZT1uLm1hc2sucmVhZC50ZXh0dXJlfX0sZnVuY3Rpb24oKXtsZXQgaT10LnJlbmRlcmVyLmV4dGVuc2lvbnNbYE9FU190ZXh0dXJlXyR7dC5yZW5kZXJlci5pc1dlYmdsMj9cIlwiOlwiaGFsZl9cIn1mbG9hdF9saW5lYXJgXTtjb25zdCByPXt3aWR0aDplLGhlaWdodDplLHR5cGU6dC5yZW5kZXJlci5pc1dlYmdsMj90LkhBTEZfRkxPQVQ6dC5yZW5kZXJlci5leHRlbnNpb25zLk9FU190ZXh0dXJlX2hhbGZfZmxvYXQ/dC5yZW5kZXJlci5leHRlbnNpb25zLk9FU190ZXh0dXJlX2hhbGZfZmxvYXQuSEFMRl9GTE9BVF9PRVM6dC5VTlNJR05FRF9CWVRFLGZvcm1hdDp0LlJHQkEsaW50ZXJuYWxGb3JtYXQ6dC5yZW5kZXJlci5pc1dlYmdsMj90LlJHQkExNkY6dC5SR0JBLG1pbkZpbHRlcjppP3QuTElORUFSOnQuTkVBUkVTVCxkZXB0aDohMX07bi5tYXNrLnJlYWQ9bmV3IGoodCxyKSxuLm1hc2sud3JpdGU9bmV3IGoodCxyKSxuLm1hc2suc3dhcCgpfSgpLHRoaXMuYXNwZWN0PTEsdGhpcy5tb3VzZT1uZXcgSix0aGlzLnZlbG9jaXR5PW5ldyBKLHRoaXMubWVzaD1uZXcgWSh0LHtnZW9tZXRyeTpuZXcgZyh0LHtwb3NpdGlvbjp7c2l6ZToyLGRhdGE6bmV3IEZsb2F0MzJBcnJheShbLTEsLTEsMywtMSwtMSwzXSl9LHV2OntzaXplOjIsZGF0YTpuZXcgRmxvYXQzMkFycmF5KFswLDAsMiwwLDAsMl0pfX0pLHByb2dyYW06bmV3IGYodCx7dmVydGV4OnZ0LGZyYWdtZW50OkF0LHVuaWZvcm1zOnt0TWFwOm4udW5pZm9ybSx1RmFsbG9mZjp7dmFsdWU6LjUqaX0sdUFscGhhOnt2YWx1ZTpyfSx1RGlzc2lwYXRpb246e3ZhbHVlOnN9LHVBc3BlY3Q6e3ZhbHVlOjF9LHVNb3VzZTp7dmFsdWU6bi5tb3VzZX0sdVZlbG9jaXR5Ont2YWx1ZTpuLnZlbG9jaXR5fX0sZGVwdGhUZXN0OiExfSl9KX11cGRhdGUoKXt0aGlzLm1lc2gucHJvZ3JhbS51bmlmb3Jtcy51QXNwZWN0LnZhbHVlPXRoaXMuYXNwZWN0LHRoaXMuZ2wucmVuZGVyZXIucmVuZGVyKHtzY2VuZTp0aGlzLm1lc2gsdGFyZ2V0OnRoaXMubWFzay53cml0ZSxjbGVhcjohMX0pLHRoaXMubWFzay5zd2FwKCl9fSx0LkdQR1BVPWNsYXNze2NvbnN0cnVjdG9yKHQse2RhdGE6ZT1uZXcgRmxvYXQzMkFycmF5KDE2KSxnZW9tZXRyeTppPW5ldyBnKHQse3Bvc2l0aW9uOntzaXplOjIsZGF0YTpuZXcgRmxvYXQzMkFycmF5KFstMSwtMSwzLC0xLC0xLDNdKX0sdXY6e3NpemU6MixkYXRhOm5ldyBGbG9hdDMyQXJyYXkoWzAsMCwyLDAsMCwyXSl9fSl9KXt0aGlzLmdsPXQ7Y29uc3Qgcj1lO3RoaXMucGFzc2VzPVtdLHRoaXMuZ2VvbWV0cnk9aSx0aGlzLmRhdGFMZW5ndGg9ci5sZW5ndGgvNCx0aGlzLnNpemU9TWF0aC5wb3coMixNYXRoLmNlaWwoTWF0aC5sb2coTWF0aC5jZWlsKE1hdGguc3FydCh0aGlzLmRhdGFMZW5ndGgpKSkvTWF0aC5MTjIpKSx0aGlzLmNvb3Jkcz1uZXcgRmxvYXQzMkFycmF5KDIqdGhpcy5kYXRhTGVuZ3RoKTtmb3IobGV0IHQ9MDt0PHRoaXMuZGF0YUxlbmd0aDt0Kyspe2NvbnN0IGU9dCV0aGlzLnNpemUvdGhpcy5zaXplLGk9TWF0aC5mbG9vcih0L3RoaXMuc2l6ZSkvdGhpcy5zaXplO3RoaXMuY29vcmRzLnNldChbZSxpXSwyKnQpfWNvbnN0IHM9KCgpPT57aWYoci5sZW5ndGg9PT10aGlzLnNpemUqdGhpcy5zaXplKjQpcmV0dXJuIHI7e2NvbnN0IHQ9bmV3IEZsb2F0MzJBcnJheSh0aGlzLnNpemUqdGhpcy5zaXplKjQpO3JldHVybiB0LnNldChyKSx0fX0pKCk7dGhpcy51bmlmb3JtPXt2YWx1ZTpuZXcgVyh0LHtpbWFnZTpzLHRhcmdldDp0LlRFWFRVUkVfMkQsdHlwZTp0LkZMT0FULGZvcm1hdDp0LlJHQkEsaW50ZXJuYWxGb3JtYXQ6dC5yZW5kZXJlci5pc1dlYmdsMj90LlJHQkEzMkY6dC5SR0JBLHdyYXBTOnQuQ0xBTVBfVE9fRURHRSx3cmFwVDp0LkNMQU1QX1RPX0VER0UsZ2VuZXJhdGVNaXBtYXBzOiExLG1pbkZpbHRlcjp0Lk5FQVJFU1QsbWFnRmlsdGVyOnQuTkVBUkVTVCx3aWR0aDp0aGlzLnNpemUsZmxpcFk6ITF9KX07Y29uc3Qgbj17d2lkdGg6dGhpcy5zaXplLGhlaWdodDp0aGlzLnNpemUsdHlwZTp0LnJlbmRlcmVyLmlzV2ViZ2wyP3QuSEFMRl9GTE9BVDp0LnJlbmRlcmVyLmV4dGVuc2lvbnMuT0VTX3RleHR1cmVfaGFsZl9mbG9hdD90LnJlbmRlcmVyLmV4dGVuc2lvbnMuT0VTX3RleHR1cmVfaGFsZl9mbG9hdC5IQUxGX0ZMT0FUX09FUzp0LlVOU0lHTkVEX0JZVEUsZm9ybWF0OnQuUkdCQSxpbnRlcm5hbEZvcm1hdDp0LnJlbmRlcmVyLmlzV2ViZ2wyP3QuUkdCQTE2Rjp0LlJHQkEsbWluRmlsdGVyOnQuTkVBUkVTVCxkZXB0aDohMSx1bnBhY2tBbGlnbm1lbnQ6MX07dGhpcy5mYm89e3JlYWQ6bmV3IGoodCxuKSx3cml0ZTpuZXcgaih0LG4pLHN3YXA6KCk9PntsZXQgdD10aGlzLmZiby5yZWFkO3RoaXMuZmJvLnJlYWQ9dGhpcy5mYm8ud3JpdGUsdGhpcy5mYm8ud3JpdGU9dCx0aGlzLnVuaWZvcm0udmFsdWU9dGhpcy5mYm8ucmVhZC50ZXh0dXJlfX19YWRkUGFzcyh7dmVydGV4OnQ9RXQsZnJhZ21lbnQ6ZT15dCx1bmlmb3JtczppPXt9LHRleHR1cmVVbmlmb3JtOnI9XCJ0TWFwXCIsZW5hYmxlZDpzPSEwfT17fSl7aVtyXT10aGlzLnVuaWZvcm07Y29uc3Qgbj1uZXcgZih0aGlzLmdsLHt2ZXJ0ZXg6dCxmcmFnbWVudDplLHVuaWZvcm1zOml9KSxhPXttZXNoOm5ldyBZKHRoaXMuZ2wse2dlb21ldHJ5OnRoaXMuZ2VvbWV0cnkscHJvZ3JhbTpufSkscHJvZ3JhbTpuLHVuaWZvcm1zOmksZW5hYmxlZDpzLHRleHR1cmVVbmlmb3JtOnJ9O3JldHVybiB0aGlzLnBhc3Nlcy5wdXNoKGEpLGF9cmVuZGVyKCl7dGhpcy5wYXNzZXMuZmlsdGVyKHQ9PnQuZW5hYmxlZCkuZm9yRWFjaCgodCxlKT0+e3RoaXMuZ2wucmVuZGVyZXIucmVuZGVyKHtzY2VuZTp0Lm1lc2gsdGFyZ2V0OnRoaXMuZmJvLndyaXRlLGNsZWFyOiExfSksdGhpcy5mYm8uc3dhcCgpfSl9fSx0Lkdlb21ldHJ5PWcsdC5NYXQzPXEsdC5NYXQ0PVAsdC5NZXNoPVksdC5Ob3JtYWxQcm9ncmFtPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgZih0LHt2ZXJ0ZXg6YnQsZnJhZ21lbnQ6TXR9KX0sdC5PcmJpdD1mdW5jdGlvbih0LHtlbGVtZW50OmU9ZG9jdW1lbnQsZW5hYmxlZDppPSEwLHRhcmdldDpyPW5ldyBsLGVhc2U6cz0uMjUsaW5lcnRpYTpuPS44NSxlbmFibGVSb3RhdGU6YT0hMCxyb3RhdGVTcGVlZDpoPS4xLGVuYWJsZVpvb206bz0hMCx6b29tU3BlZWQ6dT0xLGVuYWJsZVBhbjpjPSEwLHBhblNwZWVkOmQ9LjEsbWluUG9sYXJBbmdsZTpnPTAsbWF4UG9sYXJBbmdsZTpwPU1hdGguUEksbWluQXppbXV0aEFuZ2xlOm09LTEvMCxtYXhBemltdXRoQW5nbGU6Zj0xLzAsbWluRGlzdGFuY2U6eD0wLG1heERpc3RhbmNlOnc9MS8wfT17fSl7dGhpcy5lbmFibGVkPWksdGhpcy50YXJnZXQ9cixzPXN8fDEsbj1ufHwxLHRoaXMubWluRGlzdGFuY2U9eCx0aGlzLm1heERpc3RhbmNlPXc7Y29uc3QgYj17cmFkaXVzOjEscGhpOjAsdGhldGE6MH0sTT17cmFkaXVzOjEscGhpOjAsdGhldGE6MH0sdj17cmFkaXVzOjEscGhpOjAsdGhldGE6MH0sQT1uZXcgbCxFPW5ldyBsO0UuY29weSh0LnBvc2l0aW9uKS5zdWIodGhpcy50YXJnZXQpLHYucmFkaXVzPU0ucmFkaXVzPUUuZGlzdGFuY2UoKSx2LnRoZXRhPU0udGhldGE9TWF0aC5hdGFuMihFLngsRS56KSx2LnBoaT1NLnBoaT1NYXRoLmFjb3MoTWF0aC5taW4oTWF0aC5tYXgoRS55L00ucmFkaXVzLC0xKSwxKSksdGhpcy51cGRhdGU9KCgpPT57TS5yYWRpdXMqPWIucmFkaXVzLE0udGhldGErPWIudGhldGEsTS5waGkrPWIucGhpLE0udGhldGE9TWF0aC5tYXgobSxNYXRoLm1pbihmLE0udGhldGEpKSxNLnBoaT1NYXRoLm1heChnLE1hdGgubWluKHAsTS5waGkpKSxNLnJhZGl1cz1NYXRoLm1heCh0aGlzLm1pbkRpc3RhbmNlLE1hdGgubWluKHRoaXMubWF4RGlzdGFuY2UsTS5yYWRpdXMpKSx2LnBoaSs9KE0ucGhpLXYucGhpKSpzLHYudGhldGErPShNLnRoZXRhLXYudGhldGEpKnMsdi5yYWRpdXMrPShNLnJhZGl1cy12LnJhZGl1cykqcyx0aGlzLnRhcmdldC5hZGQoQSk7bGV0IGU9di5yYWRpdXMqTWF0aC5zaW4oTWF0aC5tYXgoMWUtNix2LnBoaSkpO0UueD1lKk1hdGguc2luKHYudGhldGEpLEUueT12LnJhZGl1cypNYXRoLmNvcyh2LnBoaSksRS56PWUqTWF0aC5jb3Modi50aGV0YSksdC5wb3NpdGlvbi5jb3B5KHRoaXMudGFyZ2V0KS5hZGQoRSksdC5sb29rQXQodGhpcy50YXJnZXQpLGIudGhldGEqPW4sYi5waGkqPW4sQS5tdWx0aXBseShuKSxiLnJhZGl1cz0xfSk7Y29uc3QgeT1uZXcgSixGPW5ldyBKLFQ9bmV3IEo7bGV0IF89ZXQuTk9ORTtmdW5jdGlvbiBSKCl7cmV0dXJuIE1hdGgucG93KC45NSx1KX10aGlzLm1vdXNlQnV0dG9ucz17T1JCSVQ6MCxaT09NOjEsUEFOOjJ9O2NvbnN0IFM9KGkscik9PntsZXQgcz1lPT09ZG9jdW1lbnQ/ZG9jdW1lbnQuYm9keTplO2l0LmNvcHkodC5wb3NpdGlvbikuc3ViKHRoaXMudGFyZ2V0KTtsZXQgbj1pdC5kaXN0YW5jZSgpOyhmdW5jdGlvbih0LGUpe2l0LnNldChlWzBdLGVbMV0sZVsyXSksaXQubXVsdGlwbHkoLXQpLEEuYWRkKGl0KX0pKDIqaSoobio9TWF0aC50YW4oKHQuZm92fHw0NSkvMipNYXRoLlBJLzE4MCkpL3MuY2xpZW50SGVpZ2h0LHQubWF0cml4KSxmdW5jdGlvbih0LGUpe2l0LnNldChlWzRdLGVbNV0sZVs2XSksaXQubXVsdGlwbHkodCksQS5hZGQoaXQpfSgyKnIqbi9zLmNsaWVudEhlaWdodCx0Lm1hdHJpeCl9O2Z1bmN0aW9uIE4odCl7Yi5yYWRpdXMvPXR9ZnVuY3Rpb24gTCh0LGkpe3J0LnNldCh0LGkpLHN0LnN1YihydCx5KS5tdWx0aXBseShoKTtsZXQgcj1lPT09ZG9jdW1lbnQ/ZG9jdW1lbnQuYm9keTplO2IudGhldGEtPTIqTWF0aC5QSSpzdC54L3IuY2xpZW50SGVpZ2h0LGIucGhpLT0yKk1hdGguUEkqc3QueS9yLmNsaWVudEhlaWdodCx5LmNvcHkocnQpfWZ1bmN0aW9uIFAodCxlKXtydC5zZXQodCxlKSxzdC5zdWIocnQsRikubXVsdGlwbHkoZCksUyhzdC54LHN0LnkpLEYuY29weShydCl9Y29uc3QgTz10PT57aWYodGhpcy5lbmFibGVkKXtzd2l0Y2godC5idXR0b24pe2Nhc2UgdGhpcy5tb3VzZUJ1dHRvbnMuT1JCSVQ6aWYoITE9PT1hKXJldHVybjt5LnNldCh0LmNsaWVudFgsdC5jbGllbnRZKSxfPWV0LlJPVEFURTticmVhaztjYXNlIHRoaXMubW91c2VCdXR0b25zLlpPT006aWYoITE9PT1vKXJldHVybjtULnNldCh0LmNsaWVudFgsdC5jbGllbnRZKSxfPWV0LkRPTExZO2JyZWFrO2Nhc2UgdGhpcy5tb3VzZUJ1dHRvbnMuUEFOOmlmKCExPT09YylyZXR1cm47Ri5zZXQodC5jbGllbnRYLHQuY2xpZW50WSksXz1ldC5QQU59XyE9PWV0Lk5PTkUmJih3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLEIsITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLEMsITEpKX19LEI9dD0+e2lmKHRoaXMuZW5hYmxlZClzd2l0Y2goXyl7Y2FzZSBldC5ST1RBVEU6aWYoITE9PT1hKXJldHVybjtMKHQuY2xpZW50WCx0LmNsaWVudFkpO2JyZWFrO2Nhc2UgZXQuRE9MTFk6aWYoITE9PT1vKXJldHVybjshZnVuY3Rpb24odCl7cnQuc2V0KHQuY2xpZW50WCx0LmNsaWVudFkpLHN0LnN1YihydCxUKSxzdC55PjA/TihSKCkpOnN0Lnk8MCYmTigxL1IoKSksVC5jb3B5KHJ0KX0odCk7YnJlYWs7Y2FzZSBldC5QQU46aWYoITE9PT1jKXJldHVybjtQKHQuY2xpZW50WCx0LmNsaWVudFkpfX0sQz0oKT0+e3RoaXMuZW5hYmxlZCYmKGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixCLCExKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLEMsITEpLF89ZXQuTk9ORSl9LEQ9dD0+e3RoaXMuZW5hYmxlZCYmbyYmKF89PT1ldC5OT05FfHxfPT09ZXQuUk9UQVRFKSYmKHQuc3RvcFByb3BhZ2F0aW9uKCksdC5kZWx0YVk8MD9OKDEvUigpKTp0LmRlbHRhWT4wJiZOKFIoKSkpfSxVPXQ9PntpZih0aGlzLmVuYWJsZWQpc3dpdGNoKHQucHJldmVudERlZmF1bHQoKSx0LnRvdWNoZXMubGVuZ3RoKXtjYXNlIDE6aWYoITE9PT1hKXJldHVybjt5LnNldCh0LnRvdWNoZXNbMF0ucGFnZVgsdC50b3VjaGVzWzBdLnBhZ2VZKSxfPWV0LlJPVEFURTticmVhaztjYXNlIDI6aWYoITE9PT1vJiYhMT09PWMpcmV0dXJuOyFmdW5jdGlvbih0KXtpZihvKXtsZXQgZT10LnRvdWNoZXNbMF0ucGFnZVgtdC50b3VjaGVzWzFdLnBhZ2VYLGk9dC50b3VjaGVzWzBdLnBhZ2VZLXQudG91Y2hlc1sxXS5wYWdlWSxyPU1hdGguc3FydChlKmUraSppKTtULnNldCgwLHIpfWlmKGMpe2xldCBlPS41Kih0LnRvdWNoZXNbMF0ucGFnZVgrdC50b3VjaGVzWzFdLnBhZ2VYKSxpPS41Kih0LnRvdWNoZXNbMF0ucGFnZVkrdC50b3VjaGVzWzFdLnBhZ2VZKTtGLnNldChlLGkpfX0odCksXz1ldC5ET0xMWV9QQU47YnJlYWs7ZGVmYXVsdDpfPWV0Lk5PTkV9fSx6PXQ9PntpZih0aGlzLmVuYWJsZWQpc3dpdGNoKHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpLHQudG91Y2hlcy5sZW5ndGgpe2Nhc2UgMTppZighMT09PWEpcmV0dXJuO0wodC50b3VjaGVzWzBdLnBhZ2VYLHQudG91Y2hlc1swXS5wYWdlWSk7YnJlYWs7Y2FzZSAyOmlmKCExPT09byYmITE9PT1jKXJldHVybjshZnVuY3Rpb24odCl7aWYobyl7bGV0IGU9dC50b3VjaGVzWzBdLnBhZ2VYLXQudG91Y2hlc1sxXS5wYWdlWCxpPXQudG91Y2hlc1swXS5wYWdlWS10LnRvdWNoZXNbMV0ucGFnZVkscj1NYXRoLnNxcnQoZSplK2kqaSk7cnQuc2V0KDAsciksc3Quc2V0KDAsTWF0aC5wb3cocnQueS9ULnksdSkpLE4oc3QueSksVC5jb3B5KHJ0KX1jJiZQKC41Kih0LnRvdWNoZXNbMF0ucGFnZVgrdC50b3VjaGVzWzFdLnBhZ2VYKSwuNSoodC50b3VjaGVzWzBdLnBhZ2VZK3QudG91Y2hlc1sxXS5wYWdlWSkpfSh0KTticmVhaztkZWZhdWx0Ol89ZXQuTk9ORX19LEk9KCk9Pnt0aGlzLmVuYWJsZWQmJihfPWV0Lk5PTkUpfSxxPXQ9Pnt0aGlzLmVuYWJsZWQmJnQucHJldmVudERlZmF1bHQoKX07dGhpcy5yZW1vdmU9ZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLHEsITEpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLE8sITEpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIixELCExKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsVSwhMSksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixJLCExKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIix6LCExKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLEIsITEpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLEMsITEpfSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLHEsITEpLGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLE8sITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIixELCExKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsVSx7cGFzc2l2ZTohMX0pLGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsSSwhMSksZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIseix7cGFzc2l2ZTohMX0pfSx0LlBsYW5lPXR0LHQuUG9zdD1jbGFzc3tjb25zdHJ1Y3Rvcih0LHt3aWR0aDplLGhlaWdodDppLGRwcjpyLHdyYXBTOnM9dC5DTEFNUF9UT19FREdFLHdyYXBUOm49dC5DTEFNUF9UT19FREdFLG1pbkZpbHRlcjphPXQuTElORUFSLG1hZ0ZpbHRlcjpoPXQuTElORUFSLGdlb21ldHJ5Om89bmV3IGcodCx7cG9zaXRpb246e3NpemU6MixkYXRhOm5ldyBGbG9hdDMyQXJyYXkoWy0xLC0xLDMsLTEsLTEsM10pfSx1djp7c2l6ZToyLGRhdGE6bmV3IEZsb2F0MzJBcnJheShbMCwwLDIsMCwwLDJdKX19KX09e30pe3RoaXMuZ2w9dCx0aGlzLm9wdGlvbnM9e3dyYXBTOnMsd3JhcFQ6bixtaW5GaWx0ZXI6YSxtYWdGaWx0ZXI6aH0sdGhpcy5wYXNzZXM9W10sdGhpcy5nZW9tZXRyeT1vO2NvbnN0IGw9dGhpcy5mYm89e3JlYWQ6bnVsbCx3cml0ZTpudWxsLHN3YXA6KCk9PntsZXQgdD1sLnJlYWQ7bC5yZWFkPWwud3JpdGUsbC53cml0ZT10fX07dGhpcy5yZXNpemUoe3dpZHRoOmUsaGVpZ2h0OmksZHByOnJ9KX1hZGRQYXNzKHt2ZXJ0ZXg6dD1sdCxmcmFnbWVudDplPXV0LHVuaWZvcm1zOmk9e30sdGV4dHVyZVVuaWZvcm06cj1cInRNYXBcIixlbmFibGVkOnM9ITB9PXt9KXtpW3JdPXt2YWx1ZTp0aGlzLmZiby5yZWFkLnRleHR1cmV9O2NvbnN0IG49bmV3IGYodGhpcy5nbCx7dmVydGV4OnQsZnJhZ21lbnQ6ZSx1bmlmb3JtczppfSksYT17bWVzaDpuZXcgWSh0aGlzLmdsLHtnZW9tZXRyeTp0aGlzLmdlb21ldHJ5LHByb2dyYW06bn0pLHByb2dyYW06bix1bmlmb3JtczppLGVuYWJsZWQ6cyx0ZXh0dXJlVW5pZm9ybTpyfTtyZXR1cm4gdGhpcy5wYXNzZXMucHVzaChhKSxhfXJlc2l6ZSh7d2lkdGg6dCxoZWlnaHQ6ZSxkcHI6aX09e30pe2kmJih0aGlzLmRwcj1pKSx0JiYodGhpcy53aWR0aD10LHRoaXMuaGVpZ2h0PWV8fHQpLGk9dGhpcy5kcHJ8fHRoaXMuZ2wucmVuZGVyZXIuZHByLHQ9KHRoaXMud2lkdGh8fHRoaXMuZ2wucmVuZGVyZXIud2lkdGgpKmksZT0odGhpcy5oZWlnaHR8fHRoaXMuZ2wucmVuZGVyZXIuaGVpZ2h0KSppLHRoaXMub3B0aW9ucy53aWR0aD10LHRoaXMub3B0aW9ucy5oZWlnaHQ9ZSx0aGlzLmZiby5yZWFkPW5ldyBqKHRoaXMuZ2wsdGhpcy5vcHRpb25zKSx0aGlzLmZiby53cml0ZT1uZXcgaih0aGlzLmdsLHRoaXMub3B0aW9ucyl9cmVuZGVyKHtzY2VuZTp0LGNhbWVyYTplLHRhcmdldDppPW51bGwsdXBkYXRlOnI9ITAsc29ydDpzPSEwLGZydXN0dW1DdWxsOm49ITB9KXtjb25zdCBhPXRoaXMucGFzc2VzLmZpbHRlcih0PT50LmVuYWJsZWQpO3RoaXMuZ2wucmVuZGVyZXIucmVuZGVyKHtzY2VuZTp0LGNhbWVyYTplLHRhcmdldDphLmxlbmd0aD90aGlzLmZiby53cml0ZTppLHVwZGF0ZTpyLHNvcnQ6cyxmcnVzdHVtQ3VsbDpufSksdGhpcy5mYm8uc3dhcCgpLGEuZm9yRWFjaCgodCxlKT0+e3QubWVzaC5wcm9ncmFtLnVuaWZvcm1zW3QudGV4dHVyZVVuaWZvcm1dLnZhbHVlPXRoaXMuZmJvLnJlYWQudGV4dHVyZSx0aGlzLmdsLnJlbmRlcmVyLnJlbmRlcih7c2NlbmU6dC5tZXNoLHRhcmdldDplPT09YS5sZW5ndGgtMT9pOnRoaXMuZmJvLndyaXRlLGNsZWFyOiExfSksdGhpcy5mYm8uc3dhcCgpfSl9fSx0LlByb2dyYW09Zix0LlF1YXQ9Tix0LlJheWNhc3Q9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy5nbD10LHRoaXMub3JpZ2luPW5ldyBsLHRoaXMuZGlyZWN0aW9uPW5ldyBsfWNhc3RNb3VzZSh0LGU9WzAsMF0pe3Qud29ybGRNYXRyaXguZ2V0VHJhbnNsYXRpb24odGhpcy5vcmlnaW4pLHRoaXMuZGlyZWN0aW9uLnNldChlWzBdLGVbMV0sLjUpLHQudW5wcm9qZWN0KHRoaXMuZGlyZWN0aW9uKSx0aGlzLmRpcmVjdGlvbi5zdWIodGhpcy5vcmlnaW4pLm5vcm1hbGl6ZSgpfWludGVyc2VjdEJvdW5kcyh0KXtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pO2NvbnN0IGU9b3QsaT1udCxyPWF0LHM9W107cmV0dXJuIHQuZm9yRWFjaCh0PT57dC5nZW9tZXRyeS5ib3VuZHN8fHQuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCksXCJzcGhlcmVcIj09PXQuZ2VvbWV0cnkucmF5Y2FzdCYmdC5nZW9tZXRyeS5ib3VuZHM9PT0xLzAmJnQuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCksZS5pbnZlcnNlKHQud29ybGRNYXRyaXgpLGkuY29weSh0aGlzLm9yaWdpbikuYXBwbHlNYXRyaXg0KGUpLHIuY29weSh0aGlzLmRpcmVjdGlvbikudHJhbnNmb3JtRGlyZWN0aW9uKGUpO2xldCBuPTA7KG49XCJzcGhlcmVcIj09PXQuZ2VvbWV0cnkucmF5Y2FzdD90aGlzLmludGVyc2VjdFNwaGVyZSh0Lmdlb21ldHJ5LmJvdW5kcyxpLHIpOnRoaXMuaW50ZXJzZWN0Qm94KHQuZ2VvbWV0cnkuYm91bmRzLGkscikpJiYodC5oaXR8fCh0LmhpdD17bG9jYWxQb2ludDpuZXcgbH0pLHQuaGl0LmRpc3RhbmNlPW4sdC5oaXQubG9jYWxQb2ludC5jb3B5KHIpLm11bHRpcGx5KG4pLmFkZChpKSxzLnB1c2godCkpfSkscy5zb3J0KCh0LGUpPT50LmhpdC5kaXN0YW5jZS1lLmhpdC5kaXN0YW5jZSksc31pbnRlcnNlY3RTcGhlcmUodCxlPXRoaXMub3JpZ2luLGk9dGhpcy5kaXJlY3Rpb24pe2NvbnN0IHI9aHQ7ci5zdWIodC5jZW50ZXIsZSk7Y29uc3Qgcz1yLmRvdChpKSxuPXIuZG90KHIpLXMqcyxhPXQucmFkaXVzKnQucmFkaXVzO2lmKG4+YSlyZXR1cm4gMDtjb25zdCBoPU1hdGguc3FydChhLW4pLG89cy1oLGw9cytoO3JldHVybiBvPDAmJmw8MD8wOm88MD9sOm99aW50ZXJzZWN0Qm94KHQsZT10aGlzLm9yaWdpbixpPXRoaXMuZGlyZWN0aW9uKXtsZXQgcixzLG4sYSxoLG87Y29uc3QgbD0xL2kueCx1PTEvaS55LGM9MS9pLnosZD10Lm1pbixnPXQubWF4O3JldHVybiByPSgobD49MD9kLng6Zy54KS1lLngpKmwscz0oKGw+PTA/Zy54OmQueCktZS54KSpsLG49KCh1Pj0wP2QueTpnLnkpLWUueSkqdSxyPihhPSgodT49MD9nLnk6ZC55KS1lLnkpKnUpfHxuPnM/MDoobj5yJiYocj1uKSxhPHMmJihzPWEpLGg9KChjPj0wP2QuejpnLnopLWUueikqYyxyPihvPSgoYz49MD9nLno6ZC56KS1lLnopKmMpfHxoPnM/MDooaD5yJiYocj1oKSxvPHMmJihzPW8pLHM8MD8wOnI+PTA/cjpzKSl9fSx0LlJlbmRlclRhcmdldD1qLHQuUmVuZGVyZXI9Y2xhc3N7Y29uc3RydWN0b3Ioe2NhbnZhczp0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksd2lkdGg6ZT0zMDAsaGVpZ2h0Omk9MTUwLGRwcjpyPTEsYWxwaGE6cz0hMSxkZXB0aDpuPSEwLHN0ZW5jaWw6YT0hMSxhbnRpYWxpYXM6aD0hMSxwcmVtdWx0aXBsaWVkQWxwaGE6bz0hMSxwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6bD0hMSxwb3dlclByZWZlcmVuY2U6dT1cImRlZmF1bHRcIixhdXRvQ2xlYXI6Yz0hMCx3ZWJnbDpkPTJ9PXt9KXtjb25zdCBnPXthbHBoYTpzLGRlcHRoOm4sc3RlbmNpbDphLGFudGlhbGlhczpoLHByZW11bHRpcGxpZWRBbHBoYTpvLHByZXNlcnZlRHJhd2luZ0J1ZmZlcjpsLHBvd2VyUHJlZmVyZW5jZTp1fTt0aGlzLmRwcj1yLHRoaXMuYWxwaGE9cyx0aGlzLmNvbG9yPSEwLHRoaXMuZGVwdGg9bix0aGlzLnN0ZW5jaWw9YSx0aGlzLnByZW11bHRpcGxpZWRBbHBoYT1vLHRoaXMuYXV0b0NsZWFyPWMsMj09PWQmJih0aGlzLmdsPXQuZ2V0Q29udGV4dChcIndlYmdsMlwiLGcpKSx0aGlzLmlzV2ViZ2wyPSEhdGhpcy5nbCx0aGlzLmdsfHwodGhpcy5nbD10LmdldENvbnRleHQoXCJ3ZWJnbFwiLGcpfHx0LmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixnKSksdGhpcy5nbC5yZW5kZXJlcj10aGlzLHRoaXMuc2V0U2l6ZShlLGkpLHRoaXMucGFyYW1ldGVycz17fSx0aGlzLnBhcmFtZXRlcnMubWF4VGV4dHVyZVVuaXRzPXRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMpLHRoaXMuc3RhdGU9e30sdGhpcy5zdGF0ZS5ibGVuZEZ1bmM9e3NyYzp0aGlzLmdsLk9ORSxkc3Q6dGhpcy5nbC5aRVJPfSx0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb249e21vZGVSR0I6dGhpcy5nbC5GVU5DX0FERH0sdGhpcy5zdGF0ZS5jdWxsRmFjZT1udWxsLHRoaXMuc3RhdGUuZnJvbnRGYWNlPXRoaXMuZ2wuQ0NXLHRoaXMuc3RhdGUuZGVwdGhNYXNrPSEwLHRoaXMuc3RhdGUuZGVwdGhGdW5jPXRoaXMuZ2wuTEVTUyx0aGlzLnN0YXRlLnByZW11bHRpcGx5QWxwaGE9ITEsdGhpcy5zdGF0ZS5mbGlwWT0hMSx0aGlzLnN0YXRlLnVucGFja0FsaWdubWVudD00LHRoaXMuc3RhdGUuZnJhbWVidWZmZXI9bnVsbCx0aGlzLnN0YXRlLnZpZXdwb3J0PXt3aWR0aDpudWxsLGhlaWdodDpudWxsfSx0aGlzLnN0YXRlLnRleHR1cmVVbml0cz1bXSx0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0PTAsdGhpcy5zdGF0ZS5ib3VuZEJ1ZmZlcj1udWxsLHRoaXMuc3RhdGUudW5pZm9ybUxvY2F0aW9ucz1uZXcgTWFwLHRoaXMuZXh0ZW5zaW9ucz17fSx0aGlzLmlzV2ViZ2wyPyh0aGlzLmdldEV4dGVuc2lvbihcIkVYVF9jb2xvcl9idWZmZXJfZmxvYXRcIiksdGhpcy5nZXRFeHRlbnNpb24oXCJPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXJcIikpOih0aGlzLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLHRoaXMuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpLHRoaXMuZ2V0RXh0ZW5zaW9uKFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSx0aGlzLmdldEV4dGVuc2lvbihcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyXCIpLHRoaXMuZ2V0RXh0ZW5zaW9uKFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKSx0aGlzLmdldEV4dGVuc2lvbihcIk9FU19zdGFuZGFyZF9kZXJpdmF0aXZlc1wiKSx0aGlzLmdldEV4dGVuc2lvbihcIkVYVF9zUkdCXCIpLHRoaXMuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKSksdGhpcy52ZXJ0ZXhBdHRyaWJEaXZpc29yPXRoaXMuZ2V0RXh0ZW5zaW9uKFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiLFwidmVydGV4QXR0cmliRGl2aXNvclwiLFwidmVydGV4QXR0cmliRGl2aXNvckFOR0xFXCIpLHRoaXMuZHJhd0FycmF5c0luc3RhbmNlZD10aGlzLmdldEV4dGVuc2lvbihcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIixcImRyYXdBcnJheXNJbnN0YW5jZWRcIixcImRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRVwiKSx0aGlzLmRyYXdFbGVtZW50c0luc3RhbmNlZD10aGlzLmdldEV4dGVuc2lvbihcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIixcImRyYXdFbGVtZW50c0luc3RhbmNlZFwiLFwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEVcIiksdGhpcy5jcmVhdGVWZXJ0ZXhBcnJheT10aGlzLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIsXCJjcmVhdGVWZXJ0ZXhBcnJheVwiLFwiY3JlYXRlVmVydGV4QXJyYXlPRVNcIiksdGhpcy5iaW5kVmVydGV4QXJyYXk9dGhpcy5nZXRFeHRlbnNpb24oXCJPRVNfdmVydGV4X2FycmF5X29iamVjdFwiLFwiYmluZFZlcnRleEFycmF5XCIsXCJiaW5kVmVydGV4QXJyYXlPRVNcIiksdGhpcy5kZWxldGVWZXJ0ZXhBcnJheT10aGlzLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIsXCJkZWxldGVWZXJ0ZXhBcnJheVwiLFwiZGVsZXRlVmVydGV4QXJyYXlPRVNcIil9c2V0U2l6ZSh0LGUpe3RoaXMud2lkdGg9dCx0aGlzLmhlaWdodD1lLHRoaXMuZ2wuY2FudmFzLndpZHRoPXQqdGhpcy5kcHIsdGhpcy5nbC5jYW52YXMuaGVpZ2h0PWUqdGhpcy5kcHIsT2JqZWN0LmFzc2lnbih0aGlzLmdsLmNhbnZhcy5zdHlsZSx7d2lkdGg6dCtcInB4XCIsaGVpZ2h0OmUrXCJweFwifSl9c2V0Vmlld3BvcnQodCxlKXt0aGlzLnN0YXRlLnZpZXdwb3J0LndpZHRoPT09dCYmdGhpcy5zdGF0ZS52aWV3cG9ydC5oZWlnaHQ9PT1lfHwodGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aD10LHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0PWUsdGhpcy5nbC52aWV3cG9ydCgwLDAsdCxlKSl9ZW5hYmxlKHQpeyEwIT09dGhpcy5zdGF0ZVt0XSYmKHRoaXMuZ2wuZW5hYmxlKHQpLHRoaXMuc3RhdGVbdF09ITApfWRpc2FibGUodCl7ITEhPT10aGlzLnN0YXRlW3RdJiYodGhpcy5nbC5kaXNhYmxlKHQpLHRoaXMuc3RhdGVbdF09ITEpfXNldEJsZW5kRnVuYyh0LGUsaSxyKXt0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmM9PT10JiZ0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3Q9PT1lJiZ0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmNBbHBoYT09PWkmJnRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdEFscGhhPT09cnx8KHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyYz10LHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdD1lLHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyY0FscGhhPWksdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGE9cix2b2lkIDAhPT1pP3RoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUodCxlLGkscik6dGhpcy5nbC5ibGVuZEZ1bmModCxlKSl9c2V0QmxlbmRFcXVhdGlvbih0LGUpe3RoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlUkdCPT09dCYmdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYT09PWV8fCh0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24ubW9kZVJHQj10LHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGE9ZSx2b2lkIDAhPT1lP3RoaXMuZ2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKHQsZSk6dGhpcy5nbC5ibGVuZEVxdWF0aW9uKHQpKX1zZXRDdWxsRmFjZSh0KXt0aGlzLnN0YXRlLmN1bGxGYWNlIT09dCYmKHRoaXMuc3RhdGUuY3VsbEZhY2U9dCx0aGlzLmdsLmN1bGxGYWNlKHQpKX1zZXRGcm9udEZhY2UodCl7dGhpcy5zdGF0ZS5mcm9udEZhY2UhPT10JiYodGhpcy5zdGF0ZS5mcm9udEZhY2U9dCx0aGlzLmdsLmZyb250RmFjZSh0KSl9c2V0RGVwdGhNYXNrKHQpe3RoaXMuc3RhdGUuZGVwdGhNYXNrIT09dCYmKHRoaXMuc3RhdGUuZGVwdGhNYXNrPXQsdGhpcy5nbC5kZXB0aE1hc2sodCkpfXNldERlcHRoRnVuYyh0KXt0aGlzLnN0YXRlLmRlcHRoRnVuYyE9PXQmJih0aGlzLnN0YXRlLmRlcHRoRnVuYz10LHRoaXMuZ2wuZGVwdGhGdW5jKHQpKX1hY3RpdmVUZXh0dXJlKHQpe3RoaXMuc3RhdGUuYWN0aXZlVGV4dHVyZVVuaXQhPT10JiYodGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdD10LHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwK3QpKX1iaW5kRnJhbWVidWZmZXIoe3RhcmdldDp0PXRoaXMuZ2wuRlJBTUVCVUZGRVIsYnVmZmVyOmU9bnVsbH09e30pe3RoaXMuc3RhdGUuZnJhbWVidWZmZXIhPT1lJiYodGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlcj1lLHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHQsZSkpfWdldEV4dGVuc2lvbih0LGUsaSl7cmV0dXJuIGUmJnRoaXMuZ2xbZV0/dGhpcy5nbFtlXS5iaW5kKHRoaXMuZ2wpOih0aGlzLmV4dGVuc2lvbnNbdF18fCh0aGlzLmV4dGVuc2lvbnNbdF09dGhpcy5nbC5nZXRFeHRlbnNpb24odCkpLGU/dGhpcy5leHRlbnNpb25zW3RdW2ldLmJpbmQodGhpcy5leHRlbnNpb25zW3RdKTp0aGlzLmV4dGVuc2lvbnNbdF0pfXNvcnRPcGFxdWUodCxlKXtyZXR1cm4gdC5yZW5kZXJPcmRlciE9PWUucmVuZGVyT3JkZXI/dC5yZW5kZXJPcmRlci1lLnJlbmRlck9yZGVyOnQucHJvZ3JhbS5pZCE9PWUucHJvZ3JhbS5pZD90LnByb2dyYW0uaWQtZS5wcm9ncmFtLmlkOnQuekRlcHRoIT09ZS56RGVwdGg/dC56RGVwdGgtZS56RGVwdGg6ZS5pZC10LmlkfXNvcnRUcmFuc3BhcmVudCh0LGUpe3JldHVybiB0LnJlbmRlck9yZGVyIT09ZS5yZW5kZXJPcmRlcj90LnJlbmRlck9yZGVyLWUucmVuZGVyT3JkZXI6dC56RGVwdGghPT1lLnpEZXB0aD9lLnpEZXB0aC10LnpEZXB0aDplLmlkLXQuaWR9c29ydFVJKHQsZSl7cmV0dXJuIHQucmVuZGVyT3JkZXIhPT1lLnJlbmRlck9yZGVyP3QucmVuZGVyT3JkZXItZS5yZW5kZXJPcmRlcjp0LnByb2dyYW0uaWQhPT1lLnByb2dyYW0uaWQ/dC5wcm9ncmFtLmlkLWUucHJvZ3JhbS5pZDplLmlkLXQuaWR9Z2V0UmVuZGVyTGlzdCh7c2NlbmU6dCxjYW1lcmE6ZSxmcnVzdHVtQ3VsbDppLHNvcnQ6cn0pe2xldCBzPVtdO2lmKGUmJmkmJmUudXBkYXRlRnJ1c3R1bSgpLHQudHJhdmVyc2UodD0+e2lmKCF0LnZpc2libGUpcmV0dXJuITA7dC5kcmF3JiYoaSYmdC5mcnVzdHVtQ3VsbGVkJiZlJiYhZS5mcnVzdHVtSW50ZXJzZWN0c01lc2godCl8fHMucHVzaCh0KSl9KSxyKXtjb25zdCB0PVtdLGk9W10scj1bXTtzLmZvckVhY2gocz0+e3MucHJvZ3JhbS50cmFuc3BhcmVudD9zLnByb2dyYW0uZGVwdGhUZXN0P2kucHVzaChzKTpyLnB1c2gocyk6dC5wdXNoKHMpLHMuekRlcHRoPTAsMD09PXMucmVuZGVyT3JkZXImJnMucHJvZ3JhbS5kZXB0aFRlc3QmJmUmJihzLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHYpLHYuYXBwbHlNYXRyaXg0KGUucHJvamVjdGlvblZpZXdNYXRyaXgpLHMuekRlcHRoPXYueil9KSx0LnNvcnQodGhpcy5zb3J0T3BhcXVlKSxpLnNvcnQodGhpcy5zb3J0VHJhbnNwYXJlbnQpLHIuc29ydCh0aGlzLnNvcnRVSSkscz10LmNvbmNhdChpLHIpfXJldHVybiBzfXJlbmRlcih7c2NlbmU6dCxjYW1lcmE6ZSx0YXJnZXQ6aT1udWxsLHVwZGF0ZTpyPSEwLHNvcnQ6cz0hMCxmcnVzdHVtQ3VsbDpuPSEwLGNsZWFyOmF9KXtudWxsPT09aT8odGhpcy5iaW5kRnJhbWVidWZmZXIoKSx0aGlzLnNldFZpZXdwb3J0KHRoaXMud2lkdGgqdGhpcy5kcHIsdGhpcy5oZWlnaHQqdGhpcy5kcHIpKToodGhpcy5iaW5kRnJhbWVidWZmZXIoaSksdGhpcy5zZXRWaWV3cG9ydChpLndpZHRoLGkuaGVpZ2h0KSksKGF8fHRoaXMuYXV0b0NsZWFyJiYhMSE9PWEpJiYoIXRoaXMuZGVwdGh8fGkmJmkuZGVwdGh8fCh0aGlzLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpLHRoaXMuc2V0RGVwdGhNYXNrKCEwKSksdGhpcy5nbC5jbGVhcigodGhpcy5jb2xvcj90aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQ6MCl8KHRoaXMuZGVwdGg/dGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUOjApfCh0aGlzLnN0ZW5jaWw/dGhpcy5nbC5TVEVOQ0lMX0JVRkZFUl9CSVQ6MCkpKSxyJiZ0LnVwZGF0ZU1hdHJpeFdvcmxkKCksZSYmbnVsbD09PWUucGFyZW50JiZlLnVwZGF0ZU1hdHJpeFdvcmxkKCksdGhpcy5nZXRSZW5kZXJMaXN0KHtzY2VuZTp0LGNhbWVyYTplLGZydXN0dW1DdWxsOm4sc29ydDpzfSkuZm9yRWFjaCh0PT57dC5kcmF3KHtjYW1lcmE6ZX0pfSl9fSx0LlNraW49Y2xhc3MgZXh0ZW5kcyBZe2NvbnN0cnVjdG9yKHQse3JpZzplLGdlb21ldHJ5OmkscHJvZ3JhbTpyLG1vZGU6cz10LlRSSUFOR0xFU309e30pe3N1cGVyKHQse2dlb21ldHJ5OmkscHJvZ3JhbTpyLG1vZGU6c30pLHRoaXMuY3JlYXRlQm9uZXMoZSksdGhpcy5jcmVhdGVCb25lVGV4dHVyZSgpLHRoaXMuYW5pbWF0aW9ucz1bXSxPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcyx7Ym9uZVRleHR1cmU6e3ZhbHVlOnRoaXMuYm9uZVRleHR1cmV9LGJvbmVUZXh0dXJlU2l6ZTp7dmFsdWU6dGhpcy5ib25lVGV4dHVyZVNpemV9fSl9Y3JlYXRlQm9uZXModCl7aWYodGhpcy5yb290PW5ldyBDLHRoaXMuYm9uZXM9W10sdC5ib25lcyYmdC5ib25lcy5sZW5ndGgpe2ZvcihsZXQgZT0wO2U8dC5ib25lcy5sZW5ndGg7ZSsrKXtjb25zdCBpPW5ldyBDO2kucG9zaXRpb24uZnJvbUFycmF5KHQuYmluZFBvc2UucG9zaXRpb24sMyplKSxpLnF1YXRlcm5pb24uZnJvbUFycmF5KHQuYmluZFBvc2UucXVhdGVybmlvbiw0KmUpLGkuc2NhbGUuZnJvbUFycmF5KHQuYmluZFBvc2Uuc2NhbGUsMyplKSx0aGlzLmJvbmVzLnB1c2goaSl9dC5ib25lcy5mb3JFYWNoKCh0LGUpPT57aWYodGhpcy5ib25lc1tlXS5uYW1lPXQubmFtZSwtMT09PXQucGFyZW50KXJldHVybiB0aGlzLmJvbmVzW2VdLnNldFBhcmVudCh0aGlzLnJvb3QpO3RoaXMuYm9uZXNbZV0uc2V0UGFyZW50KHRoaXMuYm9uZXNbdC5wYXJlbnRdKX0pLHRoaXMucm9vdC51cGRhdGVNYXRyaXhXb3JsZCghMCksdGhpcy5ib25lcy5mb3JFYWNoKHQ9Pnt0LmJpbmRJbnZlcnNlPW5ldyBQKC4uLnQud29ybGRNYXRyaXgpLmludmVyc2UoKX0pfX1jcmVhdGVCb25lVGV4dHVyZSgpe2lmKCF0aGlzLmJvbmVzLmxlbmd0aClyZXR1cm47Y29uc3QgdD1NYXRoLm1heCg0LE1hdGgucG93KDIsTWF0aC5jZWlsKE1hdGgubG9nKE1hdGguc3FydCg0KnRoaXMuYm9uZXMubGVuZ3RoKSkvTWF0aC5MTjIpKSk7dGhpcy5ib25lTWF0cmljZXM9bmV3IEZsb2F0MzJBcnJheSh0KnQqNCksdGhpcy5ib25lVGV4dHVyZVNpemU9dCx0aGlzLmJvbmVUZXh0dXJlPW5ldyBXKHRoaXMuZ2wse2ltYWdlOnRoaXMuYm9uZU1hdHJpY2VzLGdlbmVyYXRlTWlwbWFwczohMSx0eXBlOnRoaXMuZ2wuRkxPQVQsaW50ZXJuYWxGb3JtYXQ6dGhpcy5nbC5yZW5kZXJlci5pc1dlYmdsMj90aGlzLmdsLlJHQkExNkY6dGhpcy5nbC5SR0JBLGZsaXBZOiExLHdpZHRoOnR9KX1hZGRBbmltYXRpb24odCl7Y29uc3QgZT1uZXcgeHQoe29iamVjdHM6dGhpcy5ib25lcyxkYXRhOnR9KTtyZXR1cm4gdGhpcy5hbmltYXRpb25zLnB1c2goZSksZX11cGRhdGUoKXtsZXQgdD0wO3RoaXMuYW5pbWF0aW9ucy5mb3JFYWNoKGU9PnQrPWUud2VpZ2h0KSx0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaCgoZSxpKT0+e2UudXBkYXRlKHQsMD09PWkpfSl9ZHJhdyh7Y2FtZXJhOnR9PXt9KXt0aGlzLnJvb3QudXBkYXRlTWF0cml4V29ybGQoITApLHRoaXMuYm9uZXMuZm9yRWFjaCgodCxlKT0+e3d0Lm11bHRpcGx5KHQud29ybGRNYXRyaXgsdC5iaW5kSW52ZXJzZSksdGhpcy5ib25lTWF0cmljZXMuc2V0KHd0LDE2KmUpfSksdGhpcy5ib25lVGV4dHVyZSYmKHRoaXMuYm9uZVRleHR1cmUubmVlZHNVcGRhdGU9ITApLHN1cGVyLmRyYXcoe2NhbWVyYTp0fSl9fSx0LlNwaGVyZT1jbGFzcyBleHRlbmRzIGd7Y29uc3RydWN0b3IodCx7cmFkaXVzOmU9LjUsd2lkdGhTZWdtZW50czppPTE2LGhlaWdodFNlZ21lbnRzOnI9TWF0aC5jZWlsKC41KmkpLHBoaVN0YXJ0OnM9MCxwaGlMZW5ndGg6bj0yKk1hdGguUEksdGhldGFTdGFydDphPTAsdGhldGFMZW5ndGg6aD1NYXRoLlBJLGF0dHJpYnV0ZXM6bz17fX09e30pe2NvbnN0IHU9aSxjPXIsZD1zLGc9bixwPWEsbT1oLGY9KHUrMSkqKGMrMSkseD11KmMqNix3PW5ldyBGbG9hdDMyQXJyYXkoMypmKSxiPW5ldyBGbG9hdDMyQXJyYXkoMypmKSxNPW5ldyBGbG9hdDMyQXJyYXkoMipmKSx2PWY+NjU1MzY/bmV3IFVpbnQzMkFycmF5KHgpOm5ldyBVaW50MTZBcnJheSh4KTtsZXQgQT0wLEU9MCx5PTAsRj1wK207Y29uc3QgVD1bXTtsZXQgXz1uZXcgbDtmb3IobGV0IHQ9MDt0PD1jO3QrKyl7bGV0IGk9W10scj10L2M7Zm9yKGxldCB0PTA7dDw9dTt0KyssQSsrKXtsZXQgcz10L3Usbj0tZSpNYXRoLmNvcyhkK3MqZykqTWF0aC5zaW4ocCtyKm0pLGE9ZSpNYXRoLmNvcyhwK3IqbSksaD1lKk1hdGguc2luKGQrcypnKSpNYXRoLnNpbihwK3IqbSk7d1szKkFdPW4sd1szKkErMV09YSx3WzMqQSsyXT1oLF8uc2V0KG4sYSxoKS5ub3JtYWxpemUoKSxiWzMqQV09Xy54LGJbMypBKzFdPV8ueSxiWzMqQSsyXT1fLnosTVsyKkFdPXMsTVsyKkErMV09MS1yLGkucHVzaChFKyspfVQucHVzaChpKX1mb3IobGV0IHQ9MDt0PGM7dCsrKWZvcihsZXQgZT0wO2U8dTtlKyspe2xldCBpPVRbdF1bZSsxXSxyPVRbdF1bZV0scz1UW3QrMV1bZV0sbj1UW3QrMV1bZSsxXTsoMCE9PXR8fHA+MCkmJih2WzMqeV09aSx2WzMqeSsxXT1yLHZbMyp5KzJdPW4seSsrKSwodCE9PWMtMXx8RjxNYXRoLlBJKSYmKHZbMyp5XT1yLHZbMyp5KzFdPXMsdlszKnkrMl09bix5KyspfU9iamVjdC5hc3NpZ24obyx7cG9zaXRpb246e3NpemU6MyxkYXRhOnd9LG5vcm1hbDp7c2l6ZTozLGRhdGE6Yn0sdXY6e3NpemU6MixkYXRhOk19LGluZGV4OntkYXRhOnZ9fSksc3VwZXIodCxvKX19LHQuVGV4dD1mdW5jdGlvbih7Zm9udDp0LHRleHQ6ZSx3aWR0aDppPTEvMCxhbGlnbjpyPVwibGVmdFwiLHNpemU6cz0xLGxldHRlclNwYWNpbmc6bj0wLGxpbmVIZWlnaHQ6YT0xLjQsd29yZFNwYWNpbmc6aD0wLHdvcmRCcmVhazpvPSExfSl7Y29uc3QgbD10aGlzO2xldCB1LGMsZCxnLHA7Y29uc3QgbT0vXFxuLyxmPS9cXHMvO2Z1bmN0aW9uIHgoKXtkPXQuY29tbW9uLmxpbmVIZWlnaHQsZz10LmNvbW1vbi5iYXNlLHA9cy9nO2xldCBpPWUucmVwbGFjZSgvWyBcXG5dL2csXCJcIikubGVuZ3RoO2M9e3Bvc2l0aW9uOm5ldyBGbG9hdDMyQXJyYXkoNCppKjMpLHV2Om5ldyBGbG9hdDMyQXJyYXkoNCppKjIpLGlkOm5ldyBGbG9hdDMyQXJyYXkoNCppKSxpbmRleDpuZXcgVWludDE2QXJyYXkoNippKX07Zm9yKGxldCB0PTA7dDxpO3QrKyljLmlkW3RdPXQsYy5pbmRleC5zZXQoWzQqdCw0KnQrMiw0KnQrMSw0KnQrMSw0KnQrMiw0KnQrM10sNip0KTt3KCl9ZnVuY3Rpb24gdygpe2NvbnN0IGQ9W107bGV0IGc9MCx4PTAsdz0wLE09digpO2Z1bmN0aW9uIHYoKXtjb25zdCB0PXt3aWR0aDowLGdseXBoczpbXX07cmV0dXJuIGQucHVzaCh0KSx4PWcsdz0wLHR9bGV0IEE9MDtmb3IoO2c8ZS5sZW5ndGgmJkE8MTAwOyl7QSsrO2NvbnN0IHQ9ZVtnXTtpZighTS53aWR0aCYmZi50ZXN0KHQpKXt4PSsrZyx3PTA7Y29udGludWV9aWYobS50ZXN0KHQpKXtnKyssTT12KCk7Y29udGludWV9Y29uc3Qgcj11W3RdO2lmKE0uZ2x5cGhzLmxlbmd0aCl7Y29uc3QgdD1NLmdseXBoc1tNLmdseXBocy5sZW5ndGgtMV1bMF07bGV0IGU9YihyLmlkLHQuaWQpKnA7TS53aWR0aCs9ZSx3Kz1lfU0uZ2x5cGhzLnB1c2goW3IsTS53aWR0aF0pO2xldCBhPTA7aWYoZi50ZXN0KHQpPyh4PWcsdz0wLGErPWgqcyk6YSs9bipzLGErPXIueGFkdmFuY2UqcCxNLndpZHRoKz1hLHcrPWEsTS53aWR0aD5pKXtpZihvJiZNLmdseXBocy5sZW5ndGg+MSl7TS53aWR0aC09YSxNLmdseXBocy5wb3AoKSxNPXYoKTtjb250aW51ZX1pZighbyYmdyE9PU0ud2lkdGgpe2xldCB0PWcteCsxO00uZ2x5cGhzLnNwbGljZSgtdCx0KSxnPXgsTS53aWR0aC09dyxNPXYoKTtjb250aW51ZX19ZysrfU0ud2lkdGh8fGQucG9wKCksZnVuY3Rpb24oZSl7Y29uc3QgaT10LmNvbW1vbi5zY2FsZVcsbj10LmNvbW1vbi5zY2FsZUg7bGV0IGg9LjA3KnMsbz0wO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtsZXQgbD1lW3RdO2ZvcihsZXQgdD0wO3Q8bC5nbHlwaHMubGVuZ3RoO3QrKyl7Y29uc3QgZT1sLmdseXBoc1t0XVswXTtsZXQgcz1sLmdseXBoc1t0XVsxXTtpZihcImNlbnRlclwiPT09cj9zLT0uNSpsLndpZHRoOlwicmlnaHRcIj09PXImJihzLT1sLndpZHRoKSxmLnRlc3QoZS5jaGFyKSljb250aW51ZTtzKz1lLnhvZmZzZXQqcCxoLT1lLnlvZmZzZXQqcDtsZXQgYT1lLndpZHRoKnAsdT1lLmhlaWdodCpwO2MucG9zaXRpb24uc2V0KFtzLGgtdSwwLHMsaCwwLHMrYSxoLXUsMCxzK2EsaCwwXSw0Km8qMyk7bGV0IGQ9ZS54L2ksZz1lLndpZHRoL2ksbT0xLWUueS9uLHg9ZS5oZWlnaHQvbjtjLnV2LnNldChbZCxtLXgsZCxtLGQrZyxtLXgsZCtnLG1dLDQqbyoyKSxoKz1lLnlvZmZzZXQqcCxvKyt9aC09cyphfWwuYnVmZmVycz1jLGwubnVtTGluZXM9ZS5sZW5ndGgsbC5oZWlnaHQ9bC5udW1MaW5lcypzKmF9KGQpfWZ1bmN0aW9uIGIoZSxpKXtmb3IobGV0IHI9MDtyPHQua2VybmluZ3MubGVuZ3RoO3IrKyl7bGV0IHM9dC5rZXJuaW5nc1tyXTtpZighKHMuZmlyc3Q8ZXx8cy5zZWNvbmQ8aSkpcmV0dXJuIHMuZmlyc3Q+ZT8wOnMuZmlyc3Q9PT1lJiZzLnNlY29uZD5pPzA6cy5hbW91bnR9cmV0dXJuIDB9dT17fSx0LmNoYXJzLmZvckVhY2godD0+dVt0LmNoYXJdPXQpLHgoKSx0aGlzLnJlc2l6ZT1mdW5jdGlvbih0KXsoe3dpZHRoOml9PXQpLHcoKX0sdGhpcy51cGRhdGU9ZnVuY3Rpb24odCl7KHt0ZXh0OmV9PXQpLHgoKX19LHQuVGV4dHVyZT1XLHQuVHJhbnNmb3JtPUMsdC5WZWMyPUosdC5WZWMzPWwsdC5WZWM0PWNsYXNzIGV4dGVuZHMgQXJyYXl7Y29uc3RydWN0b3IodD0wLGU9dCxpPXQscj10KXtyZXR1cm4gc3VwZXIodCxlLGksciksdGhpc31nZXQgeCgpe3JldHVybiB0aGlzWzBdfXNldCB4KHQpe3RoaXNbMF09dH1nZXQgeSgpe3JldHVybiB0aGlzWzFdfXNldCB5KHQpe3RoaXNbMV09dH1nZXQgeigpe3JldHVybiB0aGlzWzJdfXNldCB6KHQpe3RoaXNbMl09dH1nZXQgdygpe3JldHVybiB0aGlzWzNdfXNldCB3KHQpe3RoaXNbM109dH1zZXQodCxlLGkscil7cmV0dXJuIHQubGVuZ3RoP3RoaXMuY29weSh0KTooRSh0aGlzLHQsZSxpLHIpLHRoaXMpfWNvcHkodCl7cmV0dXJuIEEodGhpcyx0KSx0aGlzfW5vcm1hbGl6ZSgpe3JldHVybiB5KHRoaXMsdGhpcyksdGhpc31mcm9tQXJyYXkodCxlPTApe3JldHVybiB0aGlzWzBdPXRbZV0sdGhpc1sxXT10W2UrMV0sdGhpc1syXT10W2UrMl0sdGhpc1szXT10W2UrM10sdGhpc310b0FycmF5KHQ9W10sZT0wKXtyZXR1cm4gdFtlXT10aGlzWzBdLHRbZSsxXT10aGlzWzFdLHRbZSsyXT10aGlzWzJdLHRbZSszXT10aGlzWzNdLHR9fSx0fSh7fSk7XG5leHBvcnQgZGVmYXVsdCBvZ2wiLCIoZnVuY3Rpb24gKCl7XG5cbiAgICAndXNlIHN0cmljdCdcblxuXHR2YXIgUGxvdCAgICBcdFx0PSByZXF1aXJlKCcuLi8uLi8uLi9wbG90LWNvcmUvc3JjL2pzL3Bsb3QnKSwgIFxuXHRcdExhenlMb2FkICAgXHQgXHQ9IHJlcXVpcmUoJy4uLy4uLy4uL3Bsb3QtY29yZS9zcmMvanMvbGF6eWxvYWQnKSxcblx0XHRNb2RhbHNcdFx0XHQ9IHJlcXVpcmUoJy4uLy4uLy4uL3Bsb3QtY29yZS9zcmMvanMvbW9kYWxzJyksXG5cdFx0Q2Fyb3VzZWxzXHRcdD0gcmVxdWlyZSgnLi4vLi4vLi4vcGxvdC1jb3JlL3NyYy9qcy9jYXJvdXNlbHMnKSxcblx0XHRTbW9vdGggXHRcdFx0PSByZXF1aXJlKCcuLi8uLi8uLi9wbG90LWNvcmUvc3JjL2pzL3Bsb3Qtc21vb3RoLXNjcm9sbCcpLFxuXHRcdEZBUXMgXHRcdFx0PSByZXF1aXJlKCcuLi8uLi8uLi9wbG90LWNvcmUvc3JjL2pzL2ZhcXMnKSxcblx0XHRIb21lXHRcdFx0PSByZXF1aXJlKCcuL3BhZ2VzL2hvbWUnKSxcblx0XHRSb2xsZXJUZXh0ICAgICAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvcm9sbGVyLXRleHQnKSxcblx0XHRSb2xsZXJUZXh0ICAgICAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY291bnRkb3duLXRpbWVyJyksXG5cdFx0UHJpY2luZyAgICAgICAgID0gcmVxdWlyZSgnLi9wYWdlcy9wcmljaW5nJyksXG5cdFx0QXJ0aXN0c1x0XHRcdD0gcmVxdWlyZSgnLi9wYWdlcy9hcnRpc3RzJyksXG5cdFx0VGVzdGltb25pYWxzXHQ9IHJlcXVpcmUoJy4vY29tcG9uZW50cy90ZXN0aW1vbmlhbHMnKSxcblx0XHRTY2hlZHVsZVx0XHQ9IHJlcXVpcmUoJy4vcGFnZXMvc2NoZWR1bGUnKSxcblx0XHRFZmZlY3RCYW5uZXJcdD0gcmVxdWlyZSgnLi9lZmZlY3QtYmFubmVyJyksXG5cdFx0TmV3cyBcdFx0XHQ9IHJlcXVpcmUoJy4vcGFnZXMvbmV3cycpLFxuXHRcdC8vIFNwb3RsaWdodHMgXHRcdD0gcmVxdWlyZSgnLi9wYWdlcy9zcG90bGlnaHRzJyksXG5cdFx0Rml4ZWRGaWZ0eUZpZnR5ID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2ZpeGVkLWZpZnR5LWZpZnR5JyksXG5cdFx0VGlja2VycyBcdFx0PSByZXF1aXJlKCcuL2NvbXBvbmVudHMvdGlja2VyJyksXG5cdCAgICBNYWluXG5cblx0TWFpbiA9IHtcblxuXHRcdGluaXQ6ICgpID0+IHtcdFxuXG5cdFx0XHRNYWluLmluaXRhbGl6ZVNtb290aCgpXG5cblx0XHRcdFBsb3QuaW5pdCgpIFxuXHRcdFx0TGF6eUxvYWQuaW5pdCgpXG5cdFx0XHRNb2RhbHMuaW5pdCgpICBcblx0XHRcdENhcm91c2Vscy5pbml0KClcblx0XHRcdEZBUXMuaW5pdCgpXG5cdFx0XHRSb2xsZXJUZXh0LmluaXQoKVxuXHRcdFx0TWFpbi5maXJlQ29udmVyc2lvblNuaXBwZXRzSWZPblRoYW5rWW91UGFnZSgpXG5cblxuICAgICAgICBcdGlmKFBsb3QuaXNQYWdlKCdzY2hlZHVsZScpKVxuXHRcdFx0XHRTY2hlZHVsZS5pbml0KClcblxuICAgICAgICBcdGlmKFBsb3QuaXNQYWdlKCdhcnRpc3RzJykpXG5cdFx0XHRcdEFydGlzdHMuaW5pdCgpXG5cblx0XHRcdGlmKFBsb3QuaXNQYWdlKCdwcmljaW5nJykpXG5cdFx0XHRcdFByaWNpbmcuaW5pdCgpXG5cblx0XHRcdE5ld3MuaW5pdCgpXG5cdFx0XHRcblx0XHRcdE1haW4uZGVtb0FqYXhCdXR0b24oKSBcblxuXHRcdCAgICBpZiAodHlwZW9mKHdpbmRvdy5IdWJTcG90Q29udmVyc2F0aW9ucykgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdCAgICBNYWluLmh1YnNwb3QoKTtcblx0XHQgIFx0fSBlbHNlIHtcblx0XHQgICAgXHR3aW5kb3cuaHNDb252ZXJzYXRpb25zT25SZWFkeSA9IFtNYWluLmh1YnNwb3RdO1xuXHRcdCAgXHR9XG5cblx0XHRcdGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tdGVzdGltb25pYWxzJykpXG5cdFx0XHRcdFRlc3RpbW9uaWFscy5pbml0KClcblxuXHRcdH0sXG5cdFx0XG5cdFx0aW5pdGFsaXplU21vb3RoIDogKCkgPT4ge1xuXG4gICAgICAgIFx0Y29uc3QgaGFzU21vb3RoU2Nyb2xsID0gZG9jdW1lbnQuYm9keS5kYXRhc2V0LnBsb3RDdXN0b21pemVyU21vb3RoU2Nyb2xsXG5cbiAgICAgICAgXHRjb25zdCBzbW9vdGhTZXR0aW5ncyA9IHtcblx0XHRcdFx0c3RhbmRhcmRTY3JvbGwgIDogaGFzU21vb3RoU2Nyb2xsICE9ICd5ZXMnXG5cdFx0XHR9XG5cbiAgICAgICAgXHRTbW9vdGguaW5pdChzbW9vdGhTZXR0aW5ncylcblxuICAgICAgICB9LFxuXG4gICAgICAgIGZpcmVDb252ZXJzaW9uU25pcHBldHNJZk9uVGhhbmtZb3VQYWdlIDogKCkgPT4ge1xuXG4gICAgICAgIFx0Y29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblx0XHRcdGNvbnN0IHRyYWNraW5nQ29kZSA9IHVybFBhcmFtcy5nZXQoJ2NvZGUnKTtcblxuXG4gICAgICAgIFx0aWYoZ3RhZyAmJiB0cmFja2luZ0NvZGUpIHtcbiAgICAgICAgXHRcdGNvbnNvbGUubG9nKCdwaW5nJyx0cmFja2luZ0NvZGUpXG4gICAgXHRcdCBcdGd0YWcoJ2V2ZW50JywgJ2NvbnZlcnNpb24nLCB7J3NlbmRfdG8nOiAnQVctNjE5MDMyMzQ3LycgKyB0cmFja2luZ0NvZGV9KVxuICAgIFx0XHQgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9ybUlzU3VibWl0dGVkIDogKCkgPT4ge1xuXG4gICAgICAgIFx0dmFyIGVyclZhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dC1lcnJvcicpLmxlbmd0aFxuXHRcdCAgICBpZiAoZXJyVmFsID09PSAwKSB7IFxuXHRcdCAgICAgIFx0Z3RhZygnZXZlbnQnLCAnY29udmVyc2lvbicsIHsnc2VuZF90byc6ICdBVy02MTkwMzIzNDcveS1HMUNNT3B1dGtCRUp2ZWxxY0MnfSk7XG5cdFx0ICAgIH0gIGVsc2Uge1xuXHRcdCAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja1BvcFVwRm9ybUV4aXN0cyA6ICgpID0+IHtcblxuICAgICAgICBcdGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaHNQb3BVcEZvcm0tNzNlZTNlY2YtN2Y4YS00MmM2LTlkY2MtNzI1YzdjODY2MWEyJylcblxuICAgICAgICBcdGlmKCFmb3JtKSB7XG4gICAgICAgIFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgIFx0XHRcdE1haW4uY2hlY2tQb3BVcEZvcm1FeGlzdHMoKVxuXG4gICAgICAgIFx0XHR9LDUwMClcbiAgICAgICAgXHR9IGVsc2Uge1xuXHQgICAgICAgICAgZm9ybS5vbnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcblxuXHQgICAgICAgICAgXHRjb25zb2xlLmxvZygnY29udmVydGVkJylcblx0ICAgICAgICAgIFx0TWFpbi5mb3JtSXNTdWJtaXR0ZWQoKVxuXHQgICAgICAgICAgXHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKVxuXHRcdFx0XHRpbWcuc3JjID0gXCJodHRwczovL3B4LmFkcy5saW5rZWRpbi5jb20vY29sbGVjdC8/cGlkPTIzNTQ3NTYmY29udmVyc2lvbklkPTI3MDY3OTYmZm10PWdpZlwiO1xuXHRcdFx0XHRcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbWcpXG5cdCAgICAgICAgICB9XG4gICAgICAgIFx0fVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaHVic3BvdCA6ICgpID0+IHtcblxuICAgICAgICBcdE1haW4uY2hlY2tQb3BVcEZvcm1FeGlzdHMoKVxuXG4gICAgXHRcdHdpbmRvdy5IdWJTcG90Q29udmVyc2F0aW9ucy5vbignY29udmVyc2F0aW9uU3RhcnRlZCcsIHBheWxvYWQgPT4ge1xuXG4gICAgXHRcdCBpZihndGFnKSB7XG4gICAgXHRcdCBcdGd0YWcoJ2V2ZW50JywgJ2NvbnZlcnNpb24nLCB7XG5cdFx0XHRcdCAgICAgICdzZW5kX3RvJzogJ0FXLTYxOTAzMjM0Ny9ZOXVqQ1B5RDFka0JFSnZlbHFjQydcblx0XHRcdFx0ICB9KVxuICAgIFx0XHQgfVxuXG4gICAgICAgICAgXHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKVxuXHRcdFx0aW1nLnNyYyA9IFwiaHR0cHM6Ly9weC5hZHMubGlua2VkaW4uY29tL2NvbGxlY3QvP3BpZD0yMzU0NzU2JmNvbnZlcnNpb25JZD0yNzIyNzE2JmZtdD1naWZcIjtcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbWcpXG5cdFx0XHQgXG5cblx0XHRcdH0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICBkZW1vQWpheEJ1dHRvbiA6ICgpID0+IHtcblxuXHRcdFx0dmFyIHBsb3REZW1vTG9hZENvbnRlbnQgPSAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbG90TG9hZFRlbXBsYXRlUGFydERlbW8nKTtcblx0XHRcdFxuXG5cdFx0XHRpZihwbG90RGVtb0xvYWRDb250ZW50KVxuXG5cdFx0XHRcdHBsb3REZW1vTG9hZENvbnRlbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblxuXHRcdFx0XHRcdC8vIFRha2UgYSBsb29rIGF0IHdoYXQgeW91IGNhbiBwYXNzIHRvIHRoaXMgZnVuY3Rpb25cblx0XHRcdFx0XHQvLyB2YXIgYXJncyA9IHtcblx0XHRcdFx0ICAgIC8vICAgICAgICAgICAgICB0ZW1wbGF0ZVBhcnQgICAgOiBudWxsLFxuXHRcdFx0XHQgICAgLy8gICAgICAgICAgICAgIGFjdGlvbiAgICAgICAgICA6ICdwbG90TG9hZFRlbXBsYXRlUGFydCcsIC8vVGhpcyBpcyB0aGUgYWN0aW9uIGZpcmVkIGludG8gb3VyIFBsb3RTaXRlIFBIUCBzZXR1cC5waHAgZmlsZVxuXHRcdFx0XHQgICAgLy8gICAgICAgICAgICAgIGRhdGEgICAgICAgICAgICA6IHt9LCAvL0FueSBkYXRhIHdlJ2QgbGlrZSB0byBwYXNzIHRvIHRoZSB0ZW1wbGF0ZSBwYXJ0LiBcblx0XHRcdFx0ICAgIC8vICAgICAgICAgICAgICBjb250ZW50QXJlYSAgICAgOiAnLkpTLS1hamF4VGFyZ2V0QXJlYScsIC8vV2hlcmUgdGhlIG5ldyBjb250ZW50IGdldHMgaW5zZXJ0c1xuXHRcdFx0XHQgICAgLy8gICAgICAgICAgICAgIGFwcGVuZCAgICAgICAgICA6IGZhbHNlIC8vSWYgd2Ugd2FudCB0byBhcHBlbmQgdG8gdGhlIGFib3ZlIGFyZWEsIG9yIHJlcGxhY2UgdGhlIGNvbnRlbnRcblx0XHRcdFx0ICAgIC8vICAgICAgICAgIH1cblxuXHRcdFx0XHRcdGNvbnN0IGFyZ3MgPSB7XG5cblx0XHRcdFx0XHRcdHRlbXBsYXRlUGFydCA6ICdkZW1vcy9hamF4LWNvbnRlbnQnLCBcblx0XHRcdFx0XHRcdGRhdGEgOiB7XG5cdFx0XHRcdFx0XHRcdCdmb28nIFx0XHQ6ICdiYXInLFxuXHRcdFx0XHRcdFx0XHQnYmFuZ2VycydcdDogJ21hc2gnLFxuXHRcdFx0XHRcdFx0XHQnaGF2aW5nJ1x0OiAnaXQnXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRQbG90LmxvYWRUZW1wbGF0ZVBhcnQoYXJncylcblxuXHRcdFx0XHR9KVxuXG4gICAgICAgIH1cblxuXHR9XG5cblx0d2luZG93Lk1haW4gPSBNYWluXG5cbn0oKSk7XG4gIiwiKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBQbG90IFx0XHRcdD0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vcGxvdC1jb3JlL3NyYy9qcy9wbG90JyksXG4gICAgICAgIE1vZGFscyAgICAgICAgICA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3Bsb3QtY29yZS9zcmMvanMvbW9kYWxzJyksXG4gICAgXHRBcnRpc3RzXG5cbiAgICAvL01heSB0aGlzIG9iamVjdCBhY3QgYXMgYSBndWlkZSB0byB1c2luZyBQbG90IGNvcmUgZnVuY3Rpb25zXG4gICAgLy9hbmQgaG93IHRvIHNldCB1cCBhamF4IGR5bmFtaWMgZGF0YSB3aXRoIG91ciBuZXcgcHJpbmNpcGxlcyB3aXRoIGVhc2VcbiAgICBBcnRpc3RzID0ge1xuXG4gICAgXHRtYXhQYWdlcyBcdFx0XHQ6IDEsXG4gICAgXHRjdXJyZW50UGFnZSBcdFx0OiAxLFxuICAgIFx0Y3VycmVudEFydGlzdFR5cGVcdDogZmFsc2UsXG4gICAgXHRsb2FkTW9yZUJ1dHRvbiAgXHQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tYXJ0aXN0c0xvYWRNb3JlJyksXG5cbiAgICAgICAgaW5pdDogKCkgPT4ge1xuXG4gICAgICAgIFx0QXJ0aXN0cy5zaG93T3JIaWRlTG9hZE1vcmVCdXR0b24oKVxuXG4gICAgICAgICAgICBBcnRpc3RzLmNyZWF0ZUxpc3RlbmVycygpXG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVMaXN0ZW5lcnM6ICgpID0+IHtcblxuICAgICAgICBcdEFydGlzdHMubG9hZE1vcmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblxuICAgICAgICBcdFx0Y29uc3QgbmV4dFBhZ2UgPSBwYXJzZUludChBcnRpc3RzLmxvYWRNb3JlQnV0dG9uLmRhdGFzZXQubmV4dFBhZ2UpXG5cbiAgICAgICAgXHRcdEFydGlzdHMuY3VycmVudFBhZ2UgPSBuZXh0UGFnZVxuXG4gICAgICAgIFx0XHRBcnRpc3RzLmxvYWRBcnRpc3RzKHRydWUpXG5cbiAgICAgICAgXHRcdEFydGlzdHMubG9hZE1vcmVCdXR0b24uZGF0YXNldC5uZXh0UGFnZSA9IG5leHRQYWdlICsgMVxuXG4gICAgICAgIFx0fSlcblxuICAgICAgICBcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvL0hhdmUgd2UgY2xpY2tlZCBvbiBhbiBhcnRpc3QgdHlwZSBmaWx0ZXIgYnV0dG9uP1xuXHRcdFx0XHRpZiAoZS50YXJnZXQuY2xvc2VzdCgnLkpTLS1hcnRpc3RUeXBlQnV0dG9uJykpIHtcblx0XHRcdFx0XHRBcnRpc3RzLmN1cnJlbnRBcnRpc3RUeXBlID0gZS50YXJnZXQuZGF0YXNldC5hcnRpc3RUeXBlSWRcblx0XHRcdFx0XHRBcnRpc3RzLmN1cnJlbnRQYWdlID0gMVxuICAgICAgICAgICAgICAgICAgICBBcnRpc3RzLmxvYWRNb3JlQnV0dG9uLmRhdGFzZXQubmV4dFBhZ2UgPSAyXG5cdFx0XHRcdFx0QXJ0aXN0cy5sb2FkQXJ0aXN0cyhmYWxzZSkudGhlbigoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5KUy0tYXJ0aXN0VHlwZUJ1dHRvbicpLmZvckVhY2goYXJ0aXN0VHlwZUJ1dHRvbiA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnRpc3RUeXBlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cdFx0XHRcdH0gXG5cblx0XHRcdH0sIGZhbHNlKVxuXG5cbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkQXJ0aXN0cyA6IGFwcGVuZCA9PiB7XG5cbiAgICAgICAgXHRjb25zdCBhcmdzID0ge1xuXHRcdFx0XHR0ZW1wbGF0ZVBhcnQgOiAncGFydHMvYXJ0aXN0LWxpc3RpbmcnLCBcblx0XHRcdFx0ZGF0YSA6IHtcblx0XHRcdFx0XHQncGFnZScgXHRcdFx0OiBBcnRpc3RzLmN1cnJlbnRQYWdlLFxuXHRcdFx0XHRcdCdhcnRpc3RUeXBlJ1x0OiBBcnRpc3RzLmN1cnJlbnRBcnRpc3RUeXBlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFwcGVuZCA6IGFwcGVuZCBcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFBsb3QubG9hZFRlbXBsYXRlUGFydChhcmdzKS50aGVuKGh0bWwgPT4ge1xuXG5cdFx0XHRcdEFydGlzdHMuc2hvd09ySGlkZUxvYWRNb3JlQnV0dG9uKClcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG5cblx0XHRcdH0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICBzaG93T3JIaWRlTG9hZE1vcmVCdXR0b24gOiAoKSA9PiB7XG5cbiAgICAgICAgXHQvL0NoZWNrIGlmIG1heCBwYWdlcyBpcyAxLiBJZiBpdCBpcywgdGhlcmUncyBvbmx5IDEgcGFnZSBvZiBhcnRpc3RzXG4gICAgICAgIFx0Ly9zbyB3ZSBjYW4gaGlkZSBsb2FkIG1vcmUgYnV0dG9uXG4gICAgICAgIFx0QXJ0aXN0cy5tYXhQYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tbWF4UGFnZXMnKS5kYXRhc2V0Lm1heFBhZ2VzXG5cbiAgICAgICAgXHRpZihBcnRpc3RzLm1heFBhZ2VzID4gQXJ0aXN0cy5jdXJyZW50UGFnZSlcbiAgICAgICAgXHRcdEFydGlzdHMubG9hZE1vcmVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgXHRlbHNlIFxuICAgICAgICBcdFx0QXJ0aXN0cy5sb2FkTW9yZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gQXJ0aXN0c1xuXG59KCkpIiwiKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBIb21lXG5cbiAgICBIb21lID0ge1xuICAgICAgICBkb20gOiB7XG4gICAgICAgICAgICBib2R5ICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICByb290ICAgICAgICAgICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKSxcbiAgICAgICAgICAgIHBob25lICAgICAgICAgICAgICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vYmlsZTNEX19waG9uZScpLFxuICAgICAgICAgICAgaG9tZUJhbm5lciAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZUJhbm5lcicpLFxuICAgICAgICAgICAgaGVhZGVyICAgICAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2l0ZU1haW5IZWFkZXInKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXNUaGVtZSAgICAgICAgICAgOiAnaG9tZScsXG4gICAgICAgIGNvdW50ZXIgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgdGlja2VyICAgICAgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgY3VycmVudE1vdXNlUG9zaXRpb24gICAgOiB7XG4gICAgICAgICAgICBYOiB3aW5kb3cuaW5uZXJXaWR0aCAvIDIsXG4gICAgICAgICAgICBZOiB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyXG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzTW91c2VQb3NpdGlvbiAgIDoge1xuICAgICAgICAgICAgWDogd2luZG93LmlubmVyV2lkdGggLyAyLFxuICAgICAgICAgICAgWTogd2luZG93LmlubmVySGVpZ2h0IC8gMlxuICAgICAgICB9LFxuICAgICAgICBtb3VzZU1vdmVBbmltYXRpb25GcmFtZSA6IG51bGwsXG4gICAgICAgIGN1cnJlbnRTbGlkZSA6IDAsXG4gICAgICAgIHRoZW1lczogW1xuICAgICAgICAgICAgJ2Jyb2Nrd2VsbCcsXG4gICAgICAgICAgICAnbWlnaHR5aG9vcGxhJyxcbiAgICAgICAgICAgICdhZnJpY2FveWUnLFxuICAgICAgICAgICAgJ3NvdXRoZmFjaW5nJyxcbiAgICAgICAgXSxcblxuICAgICAgICBpbml0OiAoKSA9PiB7XG5cbiAgICAgICAgICAgIEhvbWUuY3JlYXRlTGlzdGVuZXJzKClcblxuICAgICAgICAgICAgSG9tZS5zdGFydFRoZW1lQ291bnRlcigpXG5cbiAgICAgICAgICAgIEhvbWUuc2V0V2lkdGhPZlBob25lKClcblxuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUxpc3RlbmVyczogKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBob21lQmFubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVCYW5uZXInKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBPYnNlcnZlIHRoZSBob21lYmFubmVyIHNlY3Rpb24gZm9yIGNsYXNzIGNoYW5nZXNcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoSG9tZS5iYW5uZXJNdXRhdGlvbilcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoaG9tZUJhbm5lciwge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVzICA6IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBidXJnZXJNZW51VHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLW1lbnVUcmlnZ2VyJylcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGJhbm5lciBhbmltYXRpb24gd2hlbiBtZW51IG9wZW5lZC9jbG9zZWRcbiAgICAgICAgICAgIGJ1cmdlck1lbnVUcmlnZ2Vycy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIEhvbWUudG9nZ2xlVGhlbWVDb3VudGVyKVxuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJyxIb21lLnNldFdpZHRoT2ZQaG9uZSlcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8IDY0MCkge1xuXG4gICAgICAgICAgICAgICAgSG9tZS5kb20uYm9keS5jbGFzc0xpc3QuYWRkKCdzbWFsbFNjcmVlbicpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIEhvbWUubW91c2VNb3ZlQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoSG9tZS5ydW5Nb3VzZU1vdmUpXG5cbiAgICAgICAgICAgICAgICBIb21lLmRvbS5ob21lQmFubmVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiBIb21lLnRyYWNrQ3Vyc29yUG9zaXRpb24oZSkpIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFdpZHRoT2ZQaG9uZSA6ICgpID0+IHtcblxuICAgICAgICAgICAgSG9tZS5kb20ucGhvbmUuc3R5bGUud2lkdGggPSBIb21lLmRvbS5waG9uZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKiAuNTUgKyAncHgnXG5cbiAgICAgICAgICAgIEhvbWUuZG9tLnBob25lLnN0eWxlLm9wYWNpdHkgPSAxXG5cbiAgICAgICAgfSxcblxuICAgICAgICBiYW5uZXJNdXRhdGlvbjogKG11dGF0aW9uc0xpc3QsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIHRoZSBiYW5uZXIgZWxlbWVudCBpcyBpbiB2aWV3XG4gICAgICAgICAgICBpZihtdXRhdGlvbnNMaXN0WzBdLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Bsb3RTbW9vdGhTY3JvbGxGcmFtZUluVmlldycpICYmICFIb21lLmJhbm5lckluVmlldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEhvbWUuYmFubmVySW5WaWV3ID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgSG9tZS5zdGFydFRoZW1lQ291bnRlcigpXG5cbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGlmKCFtdXRhdGlvbnNMaXN0WzBdLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Bsb3RTbW9vdGhTY3JvbGxGcmFtZUluVmlldycpICYmIEhvbWUuYmFubmVySW5WaWV3KSB7XG5cbiAgICAgICAgICAgICAgICBIb21lLmJhbm5lckluVmlldyA9IGZhbHNlXG5cbiAgICAgICAgICAgICAgICBIb21lLnN0b3BUaGVtZUNvdW50ZXIoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRyYWNrQ3Vyc29yUG9zaXRpb246IChlKSA9PiB7XG4gICAgXG4gICAgICAgICAgICBIb21lLmN1cnJlbnRNb3VzZVBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgIFg6IGUuY2xpZW50WCxcbiAgICAgICAgICAgICAgICBZOiBlLmNsaWVudFlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWlkZGxlUG9pbnRYID0gd2luZG93LmlubmVyV2lkdGggLyAyXG4gICAgICAgICAgICBjb25zdCBtaWRkbGVQb2ludFkgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyXG5cbiAgICAgICAgICAgIGlmKEhvbWUuY3VycmVudE1vdXNlUG9zaXRpb24uWCAgLSAyMDAwID4gbWlkZGxlUG9pbnRYKVxuICAgICAgICAgICAgICAgIEhvbWUuY3VycmVudE1vdXNlUG9zaXRpb24uWCA9IG1pZGRsZVBvaW50WCArIDIwMDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoSG9tZS5jdXJyZW50TW91c2VQb3NpdGlvbi5YICArIDIwMDAgPCBtaWRkbGVQb2ludFgpXG4gICAgICAgICAgICAgICAgSG9tZS5jdXJyZW50TW91c2VQb3NpdGlvbi5YID0gbWlkZGxlUG9pbnRYIC0gMjAwMFxuXG4gICAgICAgICAgICBpZihIb21lLmN1cnJlbnRNb3VzZVBvc2l0aW9uLlkgIC0gMjAwMCA+IG1pZGRsZVBvaW50WSlcbiAgICAgICAgICAgICAgICBIb21lLmN1cnJlbnRNb3VzZVBvc2l0aW9uLlkgPSBtaWRkbGVQb2ludFkgKyAyMDAwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKEhvbWUuY3VycmVudE1vdXNlUG9zaXRpb24uWSAgKyAyMDAwIDwgbWlkZGxlUG9pbnRZKVxuICAgICAgICAgICAgICAgIEhvbWUuY3VycmVudE1vdXNlUG9zaXRpb24uWSA9IG1pZGRsZVBvaW50WSAtIDIwMDBcblxuICAgICAgICAgICAgaWYoSG9tZS50aWNrZXIgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBIb21lLnRpY2tlciA9IHRydWVcbiAgICAgICAgICAgICAgICBIb21lLm1vdXNlTW92ZUFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKEhvbWUucnVuTW91c2VNb3ZlKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RhcnRUaGVtZUNvdW50ZXI6ICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgSG9tZS5iYW5uZXJJblZpZXcgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBTZXQgaGVhZGVyIHRvIGRlZmF1bHQgc3R5bGVcbiAgICAgICAgICAgIGlmKEhvbWUuZG9tLmhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2RlZmF1bHRIZWFkZXInKSlcbiAgICAgICAgICAgICAgICBIb21lLmRvbS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnZGVmYXVsdEhlYWRlcicpIFxuXG4gICAgICAgICAgICBIb21lLnRpbWVyKDQwMDApXG5cbiAgICAgICAgfSxcblxuICAgICAgICB0aW1lciA6IHRpbWUgPT4ge1xuXG4gICAgICAgICAgICBIb21lLmNvdW50ZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbW9iaWxlIHNjcmVlbiBpbWFnZVxuICAgICAgICAgICAgICAgIEhvbWUuZG9tLmJvZHkuZGF0YXNldC5jdXJyZW50VGhlbWUgPSBIb21lLnRoZW1lc1tIb21lLmN1cnJlbnRTbGlkZV1cbiAgICAgICAgICAgICAgICBIb21lLmRvbS5ib2R5LmRhdGFzZXQucHJldmlvdXNUaGVtZSA9IEhvbWUucHJldmlvdXNUaGVtZVxuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHN0YXRlXG4gICAgICAgICAgICAgICAgSG9tZS5wcmV2aW91c1RoZW1lID0gSG9tZS50aGVtZXNbSG9tZS5jdXJyZW50U2xpZGVdXG5cbiAgICAgICAgICAgICAgICBIb21lLmRvbS5ib2R5LmNsYXNzTGlzdC5hZGQoJ3NsaWRlTW9iaWxlU2NyZWVuJylcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBIb21lLmRvbS5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlTW9iaWxlU2NyZWVuJykgICAgXG4gICAgICAgICAgICAgICAgfSwgMjAwMClcblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoIHRoZSBlbmQgb2YgdGhlIHRoZW1lcywgcmVzZXQgdG8gZmlyc3QgdGhlbWVcbiAgICAgICAgICAgICAgICBIb21lLmN1cnJlbnRTbGlkZSA+PSBIb21lLnRoZW1lcy5sZW5ndGggLSAxID8gSG9tZS5jdXJyZW50U2xpZGUgPSAwIDogSG9tZS5jdXJyZW50U2xpZGUrK1xuXG4gICAgICAgICAgICAgICAgSG9tZS50aW1lcig0MDAwKVxuXG4gICAgICAgICAgICB9LCB0aW1lKVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RvcFRoZW1lQ291bnRlcjogKCkgPT4ge1xuXG4gICAgICAgICAgICBpZihIb21lLmNvdW50ZXIpXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChIb21lLmNvdW50ZXIpXG5cbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVUaGVtZTogKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihIb21lLnByZXZpb3VzVGhlbWUpXG4gICAgICAgICAgICAgICAgSG9tZS5kb20uYm9keS5jbGFzc0xpc3QucmVtb3ZlKEhvbWUucHJldmlvdXNUaGVtZSlcblxuICAgICAgICAgICAgLy8gU2V0IGhlYWRlciB0byBkZWZhdWx0IHN0eWxlXG4gICAgICAgICAgICBIb21lLmRvbS5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnZGVmYXVsdEhlYWRlcicpIFxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlVGhlbWVDb3VudGVyOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBDYW5jZWwgYW5pbWF0aW9uIGlmIG1lbnUgaXMgb3BlblxuICAgICAgICAgICAgaWYoSG9tZS5kb20ucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoJ2J1cmdlck9wZW4nKSkge1xuXG4gICAgICAgICAgICAgICAgSG9tZS5zdG9wVGhlbWVDb3VudGVyKClcbiAgICAgICAgICAgICAgICBIb21lLnJlbW92ZVRoZW1lKClcblxuICAgICAgICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uIGlmIG1lbnUgaXMgY2xvc2VkIGFuZCBiYW5uZXIgaXMgaW4gdmlldyAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZihIb21lLmJhbm5lckluVmlldykge1xuXG4gICAgICAgICAgICAgICAgSG9tZS5zdGFydFRoZW1lQ291bnRlcigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcnVuTW91c2VNb3ZlIDogKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBkaWZmZXJlbmNlT2ZQb3NpdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgWTogSG9tZS5jdXJyZW50TW91c2VQb3NpdGlvbi5ZIC0gSG9tZS5wcmV2aW91c01vdXNlUG9zaXRpb24uWSxcbiAgICAgICAgICAgICAgICBYOiBIb21lLmN1cnJlbnRNb3VzZVBvc2l0aW9uLlggLSBIb21lLnByZXZpb3VzTW91c2VQb3NpdGlvbi5YXG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBIb21lLnByZXZpb3VzTW91c2VQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBYOiBIb21lLnByZXZpb3VzTW91c2VQb3NpdGlvbi5YICsgKGRpZmZlcmVuY2VPZlBvc2l0aW9ucy5YICogMC4xKSxcbiAgICAgICAgICAgICAgICBZOiBIb21lLnByZXZpb3VzTW91c2VQb3NpdGlvbi5ZICsgKGRpZmZlcmVuY2VPZlBvc2l0aW9ucy5ZICogMC4xKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB4U2hpZnQgPSAoSG9tZS5wcmV2aW91c01vdXNlUG9zaXRpb24uWCAtICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpKSAvICh3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKVxuICAgICAgICAgICAgY29uc3QgeVNoaWZ0ID0gKCh3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKSAtIEhvbWUucHJldmlvdXNNb3VzZVBvc2l0aW9uLlkpIC8gKHdpbmRvdy5pbm5lckhlaWdodCAvIDIgKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBIb21lLmRvbS5waG9uZS5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlWCgkezE1ICsgeVNoaWZ0Kjd9ZGVnKSByb3RhdGVZKCR7eFNoaWZ0KjYwID4gNTAgPyA1MCA6IHhTaGlmdCo2MH1kZWcpYFxuXG4gICAgICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMTBcblxuICAgICAgICAgICAgaWYoTWF0aC5hYnMoZGlmZmVyZW5jZU9mUG9zaXRpb25zLlggKyBkaWZmZXJlbmNlT2ZQb3NpdGlvbnMuWSkgPCAuMSlcbiAgICAgICAgICAgICAgICBIb21lLnRpY2tlciA9IGZhbHNlXG5cbiAgICAgICAgICAgIGlmKEhvbWUudGlja2VyID09IHRydWUpIFxuICAgICAgICAgICAgICAgIEhvbWUubW91c2VNb3ZlQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoSG9tZS5ydW5Nb3VzZU1vdmUpXG5cbiAgICAgICAgfSxcblxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBIb21lXG5cbn0oKSkiLCIoZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIFBsb3QgXHRcdFx0PSByZXF1aXJlKCcuLi8uLi8uLi8uLi9wbG90LWNvcmUvc3JjL2pzL3Bsb3QnKSxcbiAgICBcdE5ld3NcblxuICAgIC8vTWF5IHRoaXMgb2JqZWN0IGFjdCBhcyBhIGd1aWRlIHRvIHVzaW5nIFBsb3QgY29yZSBmdW5jdGlvbnNcbiAgICAvL2FuZCBob3cgdG8gc2V0IHVwIGFqYXggZHluYW1pYyBkYXRhIHdpdGggb3VyIG5ldyBwcmluY2lwbGVzIHdpdGggZWFzZVxuICAgIE5ld3MgPSB7XG5cbiAgICBcdG1heFBhZ2VzIFx0XHRcdDogMSxcbiAgICAgICAgY3VycmVudE5ld3NDYXRlZ29yeSA6IDAsXG4gICAgICAgIGN1cnJlbnRQYWdlICAgICAgICAgOiAxLFxuICAgIFx0bG9hZE1vcmVCdXR0b24gIFx0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLW5ld3NMb2FkTW9yZScpLFxuXG4gICAgICAgIGluaXQ6ICgpID0+IHtcblxuICAgICAgICAgICAgaWYoTmV3cy5sb2FkTW9yZUJ1dHRvbikge1xuXG4gICAgICAgICAgICBcdE5ld3Muc2hvd09ySGlkZUxvYWRNb3JlQnV0dG9uKClcblxuICAgICAgICAgICAgICAgIE5ld3MuY3JlYXRlTGlzdGVuZXJzKClcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlTGlzdGVuZXJzOiAoKSA9PiB7XG5cbiAgICAgICAgXHROZXdzLmxvYWRNb3JlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG5cbiAgICAgICAgXHRcdGNvbnN0IG5leHRQYWdlID0gcGFyc2VJbnQoTmV3cy5sb2FkTW9yZUJ1dHRvbi5kYXRhc2V0Lm5leHRQYWdlKVxuXG4gICAgICAgIFx0XHROZXdzLmN1cnJlbnRQYWdlID0gbmV4dFBhZ2VcblxuICAgICAgICBcdFx0TmV3cy5sb2FkTmV3cyh0cnVlKVxuXG4gICAgICAgIFx0XHROZXdzLmxvYWRNb3JlQnV0dG9uLmRhdGFzZXQubmV4dFBhZ2UgPSBuZXh0UGFnZSArIDFcblxuICAgICAgICBcdH0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkTmV3cyA6IGFwcGVuZCA9PiB7XG5cbiAgICAgICAgXHRjb25zdCBhcmdzID0ge1xuXHRcdFx0XHR0ZW1wbGF0ZVBhcnQgOiAncGFydHMvbmV3cy1saXN0aW5nJywgXG5cdFx0XHRcdGRhdGEgOiB7XG5cdFx0XHRcdFx0J3BhZ2UnIFx0XHRcdDogTmV3cy5jdXJyZW50UGFnZSxcblx0XHRcdFx0XHQnYXJ0aXN0VHlwZSdcdDogTmV3cy5jdXJyZW50TmV3c0NhdGVnb3J5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFwcGVuZCA6IGFwcGVuZCBcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFBsb3QubG9hZFRlbXBsYXRlUGFydChhcmdzKS50aGVuKGh0bWwgPT4ge1xuXG5cdFx0XHRcdE5ld3Muc2hvd09ySGlkZUxvYWRNb3JlQnV0dG9uKClcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG5cblx0XHRcdH0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICBzaG93T3JIaWRlTG9hZE1vcmVCdXR0b24gOiAoKSA9PiB7XG5cbiAgICAgICAgXHQvL0NoZWNrIGlmIG1heCBwYWdlcyBpcyAxLiBJZiBpdCBpcywgdGhlcmUncyBvbmx5IDEgcGFnZSBvZiBOZXdzXG4gICAgICAgIFx0Ly9zbyB3ZSBjYW4gaGlkZSBsb2FkIG1vcmUgYnV0dG9uXG4gICAgICAgIFx0TmV3cy5tYXhQYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tbWF4UGFnZXMnKS5kYXRhc2V0Lm1heFBhZ2VzXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKE5ld3MubWF4UGFnZXMpXG5cbiAgICAgICAgXHRpZihOZXdzLm1heFBhZ2VzID4gTmV3cy5jdXJyZW50UGFnZSlcbiAgICAgICAgXHRcdE5ld3MubG9hZE1vcmVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgXHRlbHNlIFxuICAgICAgICBcdFx0TmV3cy5sb2FkTW9yZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0gTmV3c1xuXG59KCkpIiwiKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBQcmljaW5nXG5cbiAgICBQcmljaW5nID0ge1xuICAgICAgICBkb206IHtcbiAgICAgICAgICAgIGNvbnRhaW5lciAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLVRvZ2dsZVByaWNlJyksXG4gICAgICAgICAgICBhbm51YWxCdXR0b24gICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wbGFuVG9nZ2xlLS1hbm51YWwnKSxcbiAgICAgICAgICAgIG1vbnRobHlCdXR0b24gICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuSlMtLXBsYW5Ub2dnbGUtLW1vbnRobHknKSxcbiAgICAgICAgICAgIGN1cnJlbmN5U3ltYm9scyAgOiBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5KUy0tY3VycmVuY3knKSksXG4gICAgICAgICAgICBwcmljZUFubnVhbCAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wcmljZS0tYW5udWFsJyksXG4gICAgICAgICAgICBwcmljZU1vbnRobHkgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpTLS1wcmljZS0tbW9udGhseScpLFxuICAgICAgICAgICAgYW5udWFsVG90YWxQcmljZSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5KUy0tYW5udWFsVG90YWwnKVxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQ6ICgpID0+IHtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHByaWNlIGlmIHVzZXIgaXMgYmFzZWQgaW4gdGhlIFVTXG4gICAgICAgICAgICBQcmljaW5nLmNoZWNrVXNlcnNDb3VudHJ5KClcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGRhdGEgc2V0IHdpdGggXG4gICAgICAgICAgICBQcmljaW5nLmRvbS5hbm51YWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBQcmljaW5nLnNob3dBbm51YWwpXG5cbiAgICAgICAgICAgIFByaWNpbmcuZG9tLm1vbnRobHlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBQcmljaW5nLnNob3dNb250aGx5KVxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0FubnVhbDogKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihQcmljaW5nLmRvbS5jb250YWluZXIuZGF0YXNldC5wbGFuID0gXCJhbm51YWxcIikgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBQcmljaW5nLmRvbS5jb250YWluZXIuZGF0YXNldC5wbGFuID0gXCJhbm5hdWxcIlxuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dNb250aGx5OiAoKSA9PiB7XG4gICAgICAgICAgICBpZihQcmljaW5nLmRvbS5jb250YWluZXIuZGF0YXNldC5wbGFuID0gXCJtb250aGx5XCIpIFxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgUHJpY2luZy5kb20uY29udGFpbmVyLmRhdGFzZXQucGxhbiA9IFwibW9udGhseVwiXG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hlY2tVc2Vyc0NvdW50cnk6ICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmV0Y2goJ2h0dHBzOi8vYXBpLmlwcmVnaXN0cnkuY28vP2tleT1icDFsODhsY3A2NzhxOTZ6JylcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgICAgICAudGhlbihwYXlsb2FkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmKHBheWxvYWQubG9jYXRpb24uY291bnRyeS5jb2RlID09ICdVUycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3dpdGNoIHRvIGRvbGxhclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJpY2luZy5kb20uY3VycmVuY3lTeW1ib2xzLm1hcChzeW1ib2wgPT4gc3ltYm9sLnRleHRDb250ZW50ID0gJyQnKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBQcmljaW5nLmRvbS5wcmljZU1vbnRobHkudGV4dENvbnRlbnQgPSAnNDAwJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBQcmljaW5nLmRvbS5wcmljZUFubnVhbC50ZXh0Q29udGVudCA9ICczMzMnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByaWNpbmcuZG9tLmFubnVhbFRvdGFsUHJpY2UudGV4dENvbnRlbnQgPSAnJDQwMDAnXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxuXG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBQcmljaW5nXG5cbn0oKSlcbiIsIihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgU2NoZWR1bGVcblxuICAgIFNjaGVkdWxlID0ge1xuICAgICAgZGF5QnV0dG9ucyAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5KUy0tc2NoZWR1bGVEYXlQaWNrZXJCdXR0b24nKSxcbiAgICAgIGNhbGVuZGFycyAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2NoZWR1bGVDYWxlbmRhcldyYXAnKSxcblxuICAgICAgICBpbml0OiAoKSA9PiB7XG5cbiAgICAgICAgICBTY2hlZHVsZS5jcmVhdGVMaXN0ZW5lcnMoKVxuICAgICAgICAgIFNjaGVkdWxlLmNoZWNrVG9TZWVJZk5hdkFycm93c05lZWRlZCgpXG5cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVMaXN0ZW5lcnM6ICgpID0+IHtcblxuICAgICAgICAgIGZvcih2YXIgZGF5QnV0dG9uIG9mIFNjaGVkdWxlLmRheUJ1dHRvbnMpIHtcblxuICAgICAgICAgICAgZGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICBTY2hlZHVsZS5sb2FkTmV3RGF0ZSh0aGlzKSBcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsKCkgPT4ge1xuXG4gICAgICAgICAgICBTY2hlZHVsZS5jaGVja1RvU2VlSWZOYXZBcnJvd3NOZWVkZWQoKVxuXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGZvcih2YXIgY2FsZW5kYXIgb2YgU2NoZWR1bGUuY2FsZW5kYXJzKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0QnV0dG9uICAgICAgPSBjYWxlbmRhci5xdWVyeVNlbGVjdG9yKCcuSlMtLXNjaGVkdWxlUmlnaHQnKSxcbiAgICAgICAgICAgIGxlZnRCdXR0b24gICAgICAgICAgICAgPSBjYWxlbmRhci5xdWVyeVNlbGVjdG9yKCcuSlMtLXNjaGVkdWxlTGVmdCcpLFxuICAgICAgICAgICAgdHJhY2tzICAgICAgICAgICAgICAgICA9IGNhbGVuZGFyLnF1ZXJ5U2VsZWN0b3IoJy5zY2hlZHVsZUNhbGVuZGFyVHJhY2tzJyksXG4gICAgICAgICAgICB0cmFja3NXICAgICAgICAgICAgICAgID0gdHJhY2tzLm9mZnNldFdpZHRoXG5cbiAgICAgICAgICAgIHJpZ2h0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICB0cmFja3Muc2Nyb2xsQnkoe1xuICAgICAgICAgICAgICAgIGxlZnQ6IHRyYWNrc1cgLyAyLFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgbGVmdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgdHJhY2tzLnNjcm9sbEJ5KHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAtdHJhY2tzVyAvIDIsXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkTmV3RGF0ZSA6IGVsZW0gPT4ge1xuXG4gICAgICAgICAgZm9yKHZhciBkQiBvZiBTY2hlZHVsZS5kYXlCdXR0b25zKSB7XG4gICAgICAgICAgICBkQi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpXG5cbiAgICAgICAgICBsZXQgZGF5ID0gZWxlbS5kYXRhc2V0LnNjaGVkdWxlRGF5IFxuXG4gICAgICAgICAgZm9yKHZhciBjYWxlbmRhciBvZiBTY2hlZHVsZS5jYWxlbmRhcnMpIHtcblxuICAgICAgICAgICAgaWYoY2FsZW5kYXIuZGF0YXNldC5zY2hlZHVsZURheSA9PSBkYXkpXG4gICAgICAgICAgICAgIGNhbGVuZGFyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG4gICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICBjYWxlbmRhci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIFNjaGVkdWxlLmNoZWNrVG9TZWVJZk5hdkFycm93c05lZWRlZCgpXG5cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja1RvU2VlSWZOYXZBcnJvd3NOZWVkZWQgOiAoKSA9PiB7IFxuXG4gICAgICAgICAgZm9yKHZhciBjYWxlbmRhciBvZiBTY2hlZHVsZS5jYWxlbmRhcnMpIHtcblxuICAgICAgICAgICAgaWYoIWNhbGVuZGFyLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIHtcblxuICAgICAgICAgICAgICAgY29uc3QgdHJhY2tzID0gY2FsZW5kYXIucXVlcnlTZWxlY3RvcignLnNjaGVkdWxlQ2FsZW5kYXJUcmFja3MnKVxuXG4gICAgICAgICAgICAgICBpZih0cmFja3Muc2Nyb2xsV2lkdGggPiBjYWxlbmRhci5zY3JvbGxXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgY2FsZW5kYXIucXVlcnlTZWxlY3RvcignLkpTLS1zY2hlZHVsZUxlZnQnKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgY2FsZW5kYXIucXVlcnlTZWxlY3RvcignLkpTLS1zY2hlZHVsZVJpZ2h0JykuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjYWxlbmRhci5xdWVyeVNlbGVjdG9yKCcuSlMtLXNjaGVkdWxlTGVmdCcpLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgICAgICAgICAgICBjYWxlbmRhci5xdWVyeVNlbGVjdG9yKCcuSlMtLXNjaGVkdWxlUmlnaHQnKS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBTY2hlZHVsZVxuXG59KCkpXG5cbiJdfQ==
